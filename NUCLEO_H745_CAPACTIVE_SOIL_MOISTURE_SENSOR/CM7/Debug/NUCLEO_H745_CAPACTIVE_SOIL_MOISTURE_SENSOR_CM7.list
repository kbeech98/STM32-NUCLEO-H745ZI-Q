
NUCLEO_H745_CAPACTIVE_SOIL_MOISTURE_SENSOR_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8f8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800bb98  0800bb98  0001bb98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfec  0800bfec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bfec  0800bfec  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bfec  0800bfec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfec  0800bfec  0001bfec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bff0  0800bff0  0001bff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800bff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  240001e0  0800c1d4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240003bc  0800c1d4  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023398  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039e8  00000000  00000000  000435a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00046f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  00048378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c6a2  00000000  00000000  00049618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a7a  00000000  00000000  00085cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00191ea1  00000000  00000000  0009e734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002305d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063a8  00000000  00000000  00230628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bb80 	.word	0x0800bb80

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800bb80 	.word	0x0800bb80

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b3f      	ldr	r3, [pc, #252]	; (8000494 <SystemInit+0x104>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800039a:	4a3e      	ldr	r2, [pc, #248]	; (8000494 <SystemInit+0x104>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b3b      	ldr	r3, [pc, #236]	; (8000494 <SystemInit+0x104>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a3a      	ldr	r2, [pc, #232]	; (8000494 <SystemInit+0x104>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b39      	ldr	r3, [pc, #228]	; (8000498 <SystemInit+0x108>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b36      	ldr	r3, [pc, #216]	; (8000498 <SystemInit+0x108>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a34      	ldr	r2, [pc, #208]	; (8000498 <SystemInit+0x108>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b33      	ldr	r3, [pc, #204]	; (800049c <SystemInit+0x10c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a32      	ldr	r2, [pc, #200]	; (800049c <SystemInit+0x10c>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b30      	ldr	r3, [pc, #192]	; (800049c <SystemInit+0x10c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b2f      	ldr	r3, [pc, #188]	; (800049c <SystemInit+0x10c>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	492e      	ldr	r1, [pc, #184]	; (800049c <SystemInit+0x10c>)
 80003e4:	4b2e      	ldr	r3, [pc, #184]	; (80004a0 <SystemInit+0x110>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b2b      	ldr	r3, [pc, #172]	; (8000498 <SystemInit+0x108>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b28      	ldr	r3, [pc, #160]	; (8000498 <SystemInit+0x108>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a26      	ldr	r2, [pc, #152]	; (8000498 <SystemInit+0x108>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b25      	ldr	r3, [pc, #148]	; (800049c <SystemInit+0x10c>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b23      	ldr	r3, [pc, #140]	; (800049c <SystemInit+0x10c>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b22      	ldr	r3, [pc, #136]	; (800049c <SystemInit+0x10c>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b20      	ldr	r3, [pc, #128]	; (800049c <SystemInit+0x10c>)
 800041a:	4a22      	ldr	r2, [pc, #136]	; (80004a4 <SystemInit+0x114>)
 800041c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b1f      	ldr	r3, [pc, #124]	; (800049c <SystemInit+0x10c>)
 8000420:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <SystemInit+0x118>)
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b1d      	ldr	r3, [pc, #116]	; (800049c <SystemInit+0x10c>)
 8000426:	4a21      	ldr	r2, [pc, #132]	; (80004ac <SystemInit+0x11c>)
 8000428:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b1c      	ldr	r3, [pc, #112]	; (800049c <SystemInit+0x10c>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b1a      	ldr	r3, [pc, #104]	; (800049c <SystemInit+0x10c>)
 8000432:	4a1e      	ldr	r2, [pc, #120]	; (80004ac <SystemInit+0x11c>)
 8000434:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <SystemInit+0x10c>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b17      	ldr	r3, [pc, #92]	; (800049c <SystemInit+0x10c>)
 800043e:	4a1b      	ldr	r2, [pc, #108]	; (80004ac <SystemInit+0x11c>)
 8000440:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b16      	ldr	r3, [pc, #88]	; (800049c <SystemInit+0x10c>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <SystemInit+0x10c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a13      	ldr	r2, [pc, #76]	; (800049c <SystemInit+0x10c>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b11      	ldr	r3, [pc, #68]	; (800049c <SystemInit+0x10c>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <SystemInit+0x120>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800045e:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <SystemInit+0x120>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000464:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <SystemInit+0x124>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <SystemInit+0x128>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <SystemInit+0x12c>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <SystemInit+0x130>)
 800047c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000480:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <SystemInit+0x104>)
 8000484:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000488:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	e000ed00 	.word	0xe000ed00
 8000498:	52002000 	.word	0x52002000
 800049c:	58024400 	.word	0x58024400
 80004a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80004a4:	02020200 	.word	0x02020200
 80004a8:	01ff0000 	.word	0x01ff0000
 80004ac:	01010280 	.word	0x01010280
 80004b0:	580000c0 	.word	0x580000c0
 80004b4:	5c001000 	.word	0x5c001000
 80004b8:	ffff0000 	.word	0xffff0000
 80004bc:	51008108 	.word	0x51008108
 80004c0:	52004000 	.word	0x52004000

080004c4 <two_half_us_delay>:
//define the timer handler below
#define timer2 htim2

extern TIM_HandleTypeDef timer2;
void two_half_us_delay (uint16_t us)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer2, 0);		//clear timer
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <two_half_us_delay+0x30>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2200      	movs	r2, #0
 80004d4:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&timer2);			//start timer
 80004d6:	4807      	ldr	r0, [pc, #28]	; (80004f4 <two_half_us_delay+0x30>)
 80004d8:	f008 f9f8 	bl	80088cc <HAL_TIM_Base_Start_IT>
	while (__HAL_TIM_GET_COUNTER(&timer2) < us);
 80004dc:	bf00      	nop
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <two_half_us_delay+0x30>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	d3f9      	bcc.n	80004de <two_half_us_delay+0x1a>
}
 80004ea:	bf00      	nop
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	2400035c 	.word	0x2400035c

080004f8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000514:	887b      	ldrh	r3, [r7, #2]
 8000516:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4619      	mov	r1, r3
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f004 fdfe 	bl	8005128 <HAL_GPIO_Init>
}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000550:	887b      	ldrh	r3, [r7, #2]
 8000552:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	4619      	mov	r1, r3
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f004 fde0 	bl	8005128 <HAL_GPIO_Init>
}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <DHT11_Start>:

void DHT11_Start (void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  		// set the pin as output
 8000574:	2101      	movs	r1, #1
 8000576:	480a      	ldr	r0, [pc, #40]	; (80005a0 <DHT11_Start+0x30>)
 8000578:	f7ff ffdc 	bl	8000534 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 800057c:	2200      	movs	r2, #0
 800057e:	2101      	movs	r1, #1
 8000580:	4807      	ldr	r0, [pc, #28]	; (80005a0 <DHT11_Start+0x30>)
 8000582:	f004 ff99 	bl	80054b8 <HAL_GPIO_WritePin>
	two_half_us_delay(6667);   								// wait for 18ms
 8000586:	f641 200b 	movw	r0, #6667	; 0x1a0b
 800058a:	f7ff ff9b 	bl	80004c4 <two_half_us_delay>
	//HAL_Delay(2000);
    //HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
	//two_half_us_delay(13);   								// wait for 30us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    		// set as input
 800058e:	2101      	movs	r1, #1
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <DHT11_Start+0x30>)
 8000592:	f7ff ffb1 	bl	80004f8 <Set_Pin_Input>
	two_half_us_delay(11);   								// wait for 30us
 8000596:	200b      	movs	r0, #11
 8000598:	f7ff ff94 	bl	80004c4 <two_half_us_delay>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	58020c00 	.word	0x58020c00

080005a4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	71bb      	strb	r3, [r7, #6]
 80005ae:	e037      	b.n	8000620 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   	// wait for the pin to go high
 80005b0:	bf00      	nop
 80005b2:	2101      	movs	r1, #1
 80005b4:	481e      	ldr	r0, [pc, #120]	; (8000630 <DHT11_Read+0x8c>)
 80005b6:	f004 ff67 	bl	8005488 <HAL_GPIO_ReadPin>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0f8      	beq.n	80005b2 <DHT11_Read+0xe>
		two_half_us_delay(14);   										// wait for 40 us
 80005c0:	200e      	movs	r0, #14
 80005c2:	f7ff ff7f 	bl	80004c4 <two_half_us_delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   		// if the pin is low
 80005c6:	2101      	movs	r1, #1
 80005c8:	4819      	ldr	r0, [pc, #100]	; (8000630 <DHT11_Read+0x8c>)
 80005ca:	f004 ff5d 	bl	8005488 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d10e      	bne.n	80005f2 <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   									// write 0
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	f1c3 0307 	rsb	r3, r3, #7
 80005da:	2201      	movs	r2, #1
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	43db      	mvns	r3, r3
 80005e4:	b25a      	sxtb	r2, r3
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	4013      	ands	r3, r2
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	e00b      	b.n	800060a <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  									// if the pin is high, write 1
 80005f2:	79bb      	ldrb	r3, [r7, #6]
 80005f4:	f1c3 0307 	rsb	r3, r3, #7
 80005f8:	2201      	movs	r2, #1
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	b25a      	sxtb	r2, r3
 8000600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000604:	4313      	orrs	r3, r2
 8000606:	b25b      	sxtb	r3, r3
 8000608:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  	// wait for the pin to go low
 800060a:	bf00      	nop
 800060c:	2101      	movs	r1, #1
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <DHT11_Read+0x8c>)
 8000610:	f004 ff3a 	bl	8005488 <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f8      	bne.n	800060c <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	3301      	adds	r3, #1
 800061e:	71bb      	strb	r3, [r7, #6]
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	2b07      	cmp	r3, #7
 8000624:	d9c4      	bls.n	80005b0 <DHT11_Read+0xc>
	}
	return i;
 8000626:	79fb      	ldrb	r3, [r7, #7]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	58020c00 	.word	0x58020c00

08000634 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	71fb      	strb	r3, [r7, #7]
	two_half_us_delay(14);
 800063e:	200e      	movs	r0, #14
 8000640:	f7ff ff40 	bl	80004c4 <two_half_us_delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000644:	2101      	movs	r1, #1
 8000646:	4813      	ldr	r0, [pc, #76]	; (8000694 <DHT11_Check_Response+0x60>)
 8000648:	f004 ff1e 	bl	8005488 <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d113      	bne.n	800067a <DHT11_Check_Response+0x46>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //Debugging LED
 8000652:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000656:	4810      	ldr	r0, [pc, #64]	; (8000698 <DHT11_Check_Response+0x64>)
 8000658:	f004 ff47 	bl	80054ea <HAL_GPIO_TogglePin>
		two_half_us_delay(30);
 800065c:	201e      	movs	r0, #30
 800065e:	f7ff ff31 	bl	80004c4 <two_half_us_delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000662:	2101      	movs	r1, #1
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <DHT11_Check_Response+0x60>)
 8000666:	f004 ff0f 	bl	8005488 <HAL_GPIO_ReadPin>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d002      	beq.n	8000676 <DHT11_Check_Response+0x42>
 8000670:	2301      	movs	r3, #1
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	e001      	b.n	800067a <DHT11_Check_Response+0x46>
		else Response = -1; // 255
 8000676:	23ff      	movs	r3, #255	; 0xff
 8000678:	71fb      	strb	r3, [r7, #7]
	}
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 800067a:	bf00      	nop
 800067c:	2101      	movs	r1, #1
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <DHT11_Check_Response+0x60>)
 8000680:	f004 ff02 	bl	8005488 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f8      	bne.n	800067c <DHT11_Check_Response+0x48>

	return Response;
 800068a:	79fb      	ldrb	r3, [r7, #7]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	58020c00 	.word	0x58020c00
 8000698:	58020400 	.word	0x58020400

0800069c <poll_DHT11>:

void poll_DHT11(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	DHT11_Start();
 80006a0:	f7ff ff66 	bl	8000570 <DHT11_Start>
	Presence = DHT11_Check_Response();
 80006a4:	f7ff ffc6 	bl	8000634 <DHT11_Check_Response>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <poll_DHT11+0xf0>)
 80006ae:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
	Rh_byte1 = DHT11_Read ();
 80006b0:	f7ff ff78 	bl	80005a4 <DHT11_Read>
 80006b4:	4603      	mov	r3, r0
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b35      	ldr	r3, [pc, #212]	; (8000790 <poll_DHT11+0xf4>)
 80006ba:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read ();
 80006bc:	f7ff ff72 	bl	80005a4 <DHT11_Read>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <poll_DHT11+0xf8>)
 80006c6:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read ();
 80006c8:	f7ff ff6c 	bl	80005a4 <DHT11_Read>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <poll_DHT11+0xfc>)
 80006d2:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read ();
 80006d4:	f7ff ff66 	bl	80005a4 <DHT11_Read>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	4b2f      	ldr	r3, [pc, #188]	; (800079c <poll_DHT11+0x100>)
 80006de:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 80006e0:	f7ff ff60 	bl	80005a4 <DHT11_Read>
 80006e4:	4603      	mov	r3, r0
 80006e6:	ee07 3a90 	vmov	s15, r3
 80006ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ee:	4b2c      	ldr	r3, [pc, #176]	; (80007a0 <poll_DHT11+0x104>)
 80006f0:	edc3 7a00 	vstr	s15, [r3]

	TEMP = (float) (Temp_byte2);
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <poll_DHT11+0x100>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	ee07 3a90 	vmov	s15, r3
 80006fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <poll_DHT11+0x108>)
 8000702:	edc3 7a00 	vstr	s15, [r3]
	TEMP /= 10.0;
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <poll_DHT11+0x108>)
 8000708:	ed93 7a00 	vldr	s14, [r3]
 800070c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000710:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000714:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <poll_DHT11+0x108>)
 8000716:	edc3 7a00 	vstr	s15, [r3]
	TEMP += Temp_byte1;
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <poll_DHT11+0xfc>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	ee07 3a90 	vmov	s15, r3
 8000722:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <poll_DHT11+0x108>)
 8000728:	edd3 7a00 	vldr	s15, [r3]
 800072c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <poll_DHT11+0x108>)
 8000732:	edc3 7a00 	vstr	s15, [r3]

	RH = (float) (Rh_byte2);
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <poll_DHT11+0xf8>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	ee07 3a90 	vmov	s15, r3
 800073e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <poll_DHT11+0x10c>)
 8000744:	edc3 7a00 	vstr	s15, [r3]
	RH /= 10.0;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <poll_DHT11+0x10c>)
 800074a:	ed93 7a00 	vldr	s14, [r3]
 800074e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000752:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <poll_DHT11+0x10c>)
 8000758:	edc3 7a00 	vstr	s15, [r3]
	RH += Rh_byte1;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <poll_DHT11+0xf4>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	ee07 3a90 	vmov	s15, r3
 8000764:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <poll_DHT11+0x10c>)
 800076a:	edd3 7a00 	vldr	s15, [r3]
 800076e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <poll_DHT11+0x10c>)
 8000774:	edc3 7a00 	vstr	s15, [r3]

	Temperature = (float) (TEMP);
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <poll_DHT11+0x108>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <poll_DHT11+0x110>)
 800077e:	6013      	str	r3, [r2, #0]
	Humidity = (float) (RH);
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <poll_DHT11+0x10c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <poll_DHT11+0x114>)
 8000786:	6013      	str	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	240001fc 	.word	0x240001fc
 8000790:	24000214 	.word	0x24000214
 8000794:	24000221 	.word	0x24000221
 8000798:	24000220 	.word	0x24000220
 800079c:	2400022c 	.word	0x2400022c
 80007a0:	24000224 	.word	0x24000224
 80007a4:	2400021c 	.word	0x2400021c
 80007a8:	24000218 	.word	0x24000218
 80007ac:	24000210 	.word	0x24000210
 80007b0:	24000228 	.word	0x24000228

080007b4 <Display_Soil_Moisture>:
	lcd_send_string(str_Rh);
	lcd_send_data('%');
}

void Display_Soil_Moisture(int Sensor1,int Sensor2)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	; 0x30
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	char str_1[20] = {0},
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
			str_2[20] = {0};
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
	//lcd_clear();
	lcd_put_cur(0, 0);
 80007e2:	2100      	movs	r1, #0
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 fc47 	bl	8001078 <lcd_put_cur>

	sprintf (str_1, "SoilSensor1: %i ", Sensor1);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	490e      	ldr	r1, [pc, #56]	; (800082c <Display_Soil_Moisture+0x78>)
 80007f2:	4618      	mov	r0, r3
 80007f4:	f009 f802 	bl	80097fc <siprintf>
	sprintf (str_2, "SoilSensor2: %i ", Sensor2);
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	490c      	ldr	r1, [pc, #48]	; (8000830 <Display_Soil_Moisture+0x7c>)
 8000800:	4618      	mov	r0, r3
 8000802:	f008 fffb 	bl	80097fc <siprintf>
	lcd_send_string(str_1);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fca3 	bl	8001156 <lcd_send_string>
	//lcd_send_data('C');
	lcd_put_cur(1, 0);
 8000810:	2100      	movs	r1, #0
 8000812:	2001      	movs	r0, #1
 8000814:	f000 fc30 	bl	8001078 <lcd_put_cur>
	lcd_send_string(str_2);
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fc9a 	bl	8001156 <lcd_send_string>
	//lcd_send_data('%');
}
 8000822:	bf00      	nop
 8000824:	3730      	adds	r7, #48	; 0x30
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	0800bbb0 	.word	0x0800bbb0
 8000830:	0800bbc4 	.word	0x0800bbc4

08000834 <poll_SOIL_SENSOR>:
	lcd_send_string(str);
	lcd_send_data('%');
}

void poll_SOIL_SENSOR(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)SoilSensor, adcSoilSensorCount);
 8000838:	2302      	movs	r3, #2
 800083a:	461a      	mov	r2, r3
 800083c:	4906      	ldr	r1, [pc, #24]	; (8000858 <poll_SOIL_SENSOR+0x24>)
 800083e:	4807      	ldr	r0, [pc, #28]	; (800085c <poll_SOIL_SENSOR+0x28>)
 8000840:	f001 fb36 	bl	8001eb0 <HAL_ADC_Start_DMA>
	while(adcConversionComplete == 0)
 8000844:	bf00      	nop
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <poll_SOIL_SENSOR+0x2c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d0fb      	beq.n	8000846 <poll_SOIL_SENSOR+0x12>
	{

	}
	adcConversionComplete = 0;	//reset
 800084e:	4b04      	ldr	r3, [pc, #16]	; (8000860 <poll_SOIL_SENSOR+0x2c>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	24000358 	.word	0x24000358
 800085c:	24000230 	.word	0x24000230
 8000860:	24000200 	.word	0x24000200

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800086a:	4b6a      	ldr	r3, [pc, #424]	; (8000a14 <main+0x1b0>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000872:	2b00      	cmp	r3, #0
 8000874:	d11b      	bne.n	80008ae <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000876:	f3bf 8f4f 	dsb	sy
}
 800087a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800087c:	f3bf 8f6f 	isb	sy
}
 8000880:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000882:	4b64      	ldr	r3, [pc, #400]	; (8000a14 <main+0x1b0>)
 8000884:	2200      	movs	r2, #0
 8000886:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800088a:	f3bf 8f4f 	dsb	sy
}
 800088e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000890:	f3bf 8f6f 	isb	sy
}
 8000894:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000896:	4b5f      	ldr	r3, [pc, #380]	; (8000a14 <main+0x1b0>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	4a5e      	ldr	r2, [pc, #376]	; (8000a14 <main+0x1b0>)
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008a2:	f3bf 8f4f 	dsb	sy
}
 80008a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008a8:	f3bf 8f6f 	isb	sy
}
 80008ac:	e000      	b.n	80008b0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008ae:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008b0:	4b58      	ldr	r3, [pc, #352]	; (8000a14 <main+0x1b0>)
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d138      	bne.n	800092e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008bc:	4b55      	ldr	r3, [pc, #340]	; (8000a14 <main+0x1b0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008c4:	f3bf 8f4f 	dsb	sy
}
 80008c8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008ca:	4b52      	ldr	r3, [pc, #328]	; (8000a14 <main+0x1b0>)
 80008cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008d0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	0b5b      	lsrs	r3, r3, #13
 80008d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008da:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	08db      	lsrs	r3, r3, #3
 80008e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008e4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	015a      	lsls	r2, r3, #5
 80008ea:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008ee:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008f0:	68ba      	ldr	r2, [r7, #8]
 80008f2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008f4:	4947      	ldr	r1, [pc, #284]	; (8000a14 <main+0x1b0>)
 80008f6:	4313      	orrs	r3, r2
 80008f8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	1e5a      	subs	r2, r3, #1
 8000900:	60ba      	str	r2, [r7, #8]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1ef      	bne.n	80008e6 <main+0x82>
    } while(sets-- != 0U);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	1e5a      	subs	r2, r3, #1
 800090a:	60fa      	str	r2, [r7, #12]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1e5      	bne.n	80008dc <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000910:	f3bf 8f4f 	dsb	sy
}
 8000914:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000916:	4b3f      	ldr	r3, [pc, #252]	; (8000a14 <main+0x1b0>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a3e      	ldr	r2, [pc, #248]	; (8000a14 <main+0x1b0>)
 800091c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000920:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000922:	f3bf 8f4f 	dsb	sy
}
 8000926:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000928:	f3bf 8f6f 	isb	sy
}
 800092c:	e000      	b.n	8000930 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800092e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000934:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000936:	bf00      	nop
 8000938:	4b37      	ldr	r3, [pc, #220]	; (8000a18 <main+0x1b4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000940:	2b00      	cmp	r3, #0
 8000942:	d004      	beq.n	800094e <main+0xea>
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	1e5a      	subs	r2, r3, #1
 8000948:	617a      	str	r2, [r7, #20]
 800094a:	2b00      	cmp	r3, #0
 800094c:	dcf4      	bgt.n	8000938 <main+0xd4>
  if ( timeout < 0 )
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	2b00      	cmp	r3, #0
 8000952:	da01      	bge.n	8000958 <main+0xf4>
  {
  Error_Handler();
 8000954:	f000 faf6 	bl	8000f44 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 fe60 	bl	800161c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f864 	bl	8000a28 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000960:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <main+0x1b4>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000966:	4a2c      	ldr	r2, [pc, #176]	; (8000a18 <main+0x1b4>)
 8000968:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800096c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000970:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <main+0x1b4>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800097e:	2000      	movs	r0, #0
 8000980:	f004 fdce 	bl	8005520 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000984:	2100      	movs	r1, #0
 8000986:	2000      	movs	r0, #0
 8000988:	f004 fde4 	bl	8005554 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800098c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000990:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000992:	bf00      	nop
 8000994:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <main+0x1b4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800099c:	2b00      	cmp	r3, #0
 800099e:	d104      	bne.n	80009aa <main+0x146>
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	1e5a      	subs	r2, r3, #1
 80009a4:	617a      	str	r2, [r7, #20]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	dcf4      	bgt.n	8000994 <main+0x130>
if ( timeout < 0 )
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	da01      	bge.n	80009b4 <main+0x150>
{
Error_Handler();
 80009b0:	f000 fac8 	bl	8000f44 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b4:	f000 fa04 	bl	8000dc0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80009b8:	f000 f940 	bl	8000c3c <MX_TIM1_Init>
  MX_DMA_Init();
 80009bc:	f000 f9e0 	bl	8000d80 <MX_DMA_Init>
  MX_ADC1_Init();
 80009c0:	f000 f8b6 	bl	8000b30 <MX_ADC1_Init>
  MX_TIM2_Init();
 80009c4:	f000 f98e 	bl	8000ce4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  nhd_LCD_Init();
 80009c8:	f000 fb88 	bl	80010dc <nhd_LCD_Init>
  lcd_put_cur(0,1);
 80009cc:	2101      	movs	r1, #1
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 fb52 	bl	8001078 <lcd_put_cur>
  lcd_send_string("hiiiii there");
 80009d4:	4811      	ldr	r0, [pc, #68]	; (8000a1c <main+0x1b8>)
 80009d6:	f000 fbbe 	bl	8001156 <lcd_send_string>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   	// pull the pin high
 80009da:	2201      	movs	r2, #1
 80009dc:	2101      	movs	r1, #1
 80009de:	4810      	ldr	r0, [pc, #64]	; (8000a20 <main+0x1bc>)
 80009e0:	f004 fd6a 	bl	80054b8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);				//wait 1 second
 80009e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e8:	f000 feaa 	bl	8001740 <HAL_Delay>
  while(1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  poll_DHT11();
 80009ec:	f7ff fe56 	bl	800069c <poll_DHT11>
	  //Display_Temp_Rh(Temperature,Humidity);
	  //Display_Rh(Humidity);
	  //HAL_Delay(4000);			//display temp data for 4 seconds
	  poll_SOIL_SENSOR();
 80009f0:	f7ff ff20 	bl	8000834 <poll_SOIL_SENSOR>
	  Display_Soil_Moisture(SoilSensor[0],SoilSensor[1]);
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <main+0x1c0>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <main+0x1c0>)
 80009fe:	885b      	ldrh	r3, [r3, #2]
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	4619      	mov	r1, r3
 8000a04:	4610      	mov	r0, r2
 8000a06:	f7ff fed5 	bl	80007b4 <Display_Soil_Moisture>
	  HAL_Delay(4000);			//display  soil data for 4 seconds
 8000a0a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a0e:	f000 fe97 	bl	8001740 <HAL_Delay>
	  poll_DHT11();
 8000a12:	e7eb      	b.n	80009ec <main+0x188>
 8000a14:	e000ed00 	.word	0xe000ed00
 8000a18:	58024400 	.word	0x58024400
 8000a1c:	0800bbe4 	.word	0x0800bbe4
 8000a20:	58020c00 	.word	0x58020c00
 8000a24:	24000358 	.word	0x24000358

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b09c      	sub	sp, #112	; 0x70
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	224c      	movs	r2, #76	; 0x4c
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f008 fa96 	bl	8008f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2220      	movs	r2, #32
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f008 fa90 	bl	8008f68 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a48:	2004      	movs	r0, #4
 8000a4a:	f004 fd97 	bl	800557c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b34      	ldr	r3, [pc, #208]	; (8000b24 <SystemClock_Config+0xfc>)
 8000a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a56:	4a33      	ldr	r2, [pc, #204]	; (8000b24 <SystemClock_Config+0xfc>)
 8000a58:	f023 0301 	bic.w	r3, r3, #1
 8000a5c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a5e:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <SystemClock_Config+0xfc>)
 8000a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <SystemClock_Config+0x100>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a2e      	ldr	r2, [pc, #184]	; (8000b28 <SystemClock_Config+0x100>)
 8000a6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <SystemClock_Config+0x100>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a80:	bf00      	nop
 8000a82:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <SystemClock_Config+0x100>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a8e:	d1f8      	bne.n	8000a82 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a90:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <SystemClock_Config+0x104>)
 8000a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a94:	f023 0303 	bic.w	r3, r3, #3
 8000a98:	4a24      	ldr	r2, [pc, #144]	; (8000b2c <SystemClock_Config+0x104>)
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000ab6:	23a0      	movs	r3, #160	; 0xa0
 8000ab8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f004 fdaa 	bl	8005630 <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000ae2:	f000 fa2f 	bl	8000f44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	233f      	movs	r3, #63	; 0x3f
 8000ae8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	2303      	movs	r3, #3
 8000aec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000af2:	2308      	movs	r3, #8
 8000af4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000af6:	2340      	movs	r3, #64	; 0x40
 8000af8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000afa:	2340      	movs	r3, #64	; 0x40
 8000afc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b02:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b04:	2340      	movs	r3, #64	; 0x40
 8000b06:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f005 f99f 	bl	8005e50 <HAL_RCC_ClockConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000b18:	f000 fa14 	bl	8000f44 <Error_Handler>
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	3770      	adds	r7, #112	; 0x70
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	58000400 	.word	0x58000400
 8000b28:	58024800 	.word	0x58024800
 8000b2c:	58024400 	.word	0x58024400

08000b30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b54:	4b36      	ldr	r3, [pc, #216]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000b56:	4a37      	ldr	r2, [pc, #220]	; (8000c34 <MX_ADC1_Init+0x104>)
 8000b58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000b5a:	4b35      	ldr	r3, [pc, #212]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000b5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000b62:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b68:	4b31      	ldr	r3, [pc, #196]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b6e:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000b70:	2204      	movs	r2, #4
 8000b72:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b74:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000b80:	4b2b      	ldr	r3, [pc, #172]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000b82:	2202      	movs	r2, #2
 8000b84:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b86:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b8c:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b92:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b9e:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bb2:	481f      	ldr	r0, [pc, #124]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000bb4:	f000 ffdc 	bl	8001b70 <HAL_ADC_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000bbe:	f000 f9c1 	bl	8000f44 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4818      	ldr	r0, [pc, #96]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000bce:	f001 ffe5 	bl	8002b9c <HAL_ADCEx_MultiModeConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000bd8:	f000 f9b4 	bl	8000f44 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <MX_ADC1_Init+0x108>)
 8000bde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be0:	2306      	movs	r3, #6
 8000be2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000be8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000c00:	f001 fa2e 	bl	8002060 <HAL_ADC_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c0a:	f000 f99b 	bl	8000f44 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c0e:	230c      	movs	r3, #12
 8000c10:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <MX_ADC1_Init+0x100>)
 8000c18:	f001 fa22 	bl	8002060 <HAL_ADC_ConfigChannel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000c22:	f000 f98f 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	; 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	24000230 	.word	0x24000230
 8000c34:	40022000 	.word	0x40022000
 8000c38:	0c900008 	.word	0x0c900008

08000c3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000c5c:	4a20      	ldr	r2, [pc, #128]	; (8000ce0 <MX_TIM1_Init+0xa4>)
 8000c5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c86:	4815      	ldr	r0, [pc, #84]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000c88:	f007 fdc8 	bl	800881c <HAL_TIM_Base_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c92:	f000 f957 	bl	8000f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480e      	ldr	r0, [pc, #56]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000ca4:	f007 fe82 	bl	80089ac <HAL_TIM_ConfigClockSource>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000cae:	f000 f949 	bl	8000f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000cc4:	f008 f89e 	bl	8008e04 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000cce:	f000 f939 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3720      	adds	r7, #32
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2400030c 	.word	0x2400030c
 8000ce0:	40010000 	.word	0x40010000

08000ce4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d02:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d0c:	22a9      	movs	r2, #169	; 0xa9
 8000d0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967296-1;
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d2a:	4814      	ldr	r0, [pc, #80]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d2c:	f007 fd76 	bl	800881c <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d36:	f000 f905 	bl	8000f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	4619      	mov	r1, r3
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d48:	f007 fe30 	bl	80089ac <HAL_TIM_ConfigClockSource>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d52:	f000 f8f7 	bl	8000f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d64:	f008 f84e 	bl	8008e04 <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d6e:	f000 f8e9 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3720      	adds	r7, #32
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2400035c 	.word	0x2400035c

08000d80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <MX_DMA_Init+0x3c>)
 8000d88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d8c:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <MX_DMA_Init+0x3c>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_DMA_Init+0x3c>)
 8000d98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	200b      	movs	r0, #11
 8000daa:	f002 f8b0 	bl	8002f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000dae:	200b      	movs	r0, #11
 8000db0:	f002 f8c7 	bl	8002f42 <HAL_NVIC_EnableIRQ>

}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	58024400 	.word	0x58024400

08000dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08c      	sub	sp, #48	; 0x30
 8000dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd6:	4b4c      	ldr	r3, [pc, #304]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	4a4a      	ldr	r2, [pc, #296]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de6:	4b48      	ldr	r3, [pc, #288]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b44      	ldr	r3, [pc, #272]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	4a43      	ldr	r2, [pc, #268]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e04:	4b40      	ldr	r3, [pc, #256]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	4b3d      	ldr	r3, [pc, #244]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	4a3b      	ldr	r2, [pc, #236]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000e1a:	f043 0304 	orr.w	r3, r3, #4
 8000e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e22:	4b39      	ldr	r3, [pc, #228]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	4b35      	ldr	r3, [pc, #212]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	4a34      	ldr	r2, [pc, #208]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e40:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4e:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	4a2c      	ldr	r2, [pc, #176]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000e56:	f043 0308 	orr.w	r3, r3, #8
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	f003 0308 	and.w	r3, r3, #8
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6c:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	4a25      	ldr	r2, [pc, #148]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000e74:	f043 0310 	orr.w	r3, r3, #16
 8000e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7c:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <MX_GPIO_Init+0x148>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e90:	481e      	ldr	r0, [pc, #120]	; (8000f0c <MX_GPIO_Init+0x14c>)
 8000e92:	f004 fb11 	bl	80054b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e96:	2200      	movs	r2, #0
 8000e98:	21ff      	movs	r1, #255	; 0xff
 8000e9a:	481d      	ldr	r0, [pc, #116]	; (8000f10 <MX_GPIO_Init+0x150>)
 8000e9c:	f004 fb0c 	bl	80054b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	481b      	ldr	r0, [pc, #108]	; (8000f14 <MX_GPIO_Init+0x154>)
 8000ea6:	f004 fb07 	bl	80054b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000eaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4812      	ldr	r0, [pc, #72]	; (8000f0c <MX_GPIO_Init+0x14c>)
 8000ec4:	f004 f930 	bl	8005128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ec8:	23ff      	movs	r3, #255	; 0xff
 8000eca:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	480c      	ldr	r0, [pc, #48]	; (8000f10 <MX_GPIO_Init+0x150>)
 8000ee0:	f004 f922 	bl	8005128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	; (8000f14 <MX_GPIO_Init+0x154>)
 8000efc:	f004 f914 	bl	8005128 <HAL_GPIO_Init>

}
 8000f00:	bf00      	nop
 8000f02:	3730      	adds	r7, #48	; 0x30
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	58024400 	.word	0x58024400
 8000f0c:	58020400 	.word	0x58020400
 8000f10:	58020c00 	.word	0x58020c00
 8000f14:	58021000 	.word	0x58021000

08000f18 <HAL_ADC_ConvCpltCallback>:
	}
}

//Callback: successful soil sensor adc conversions
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1 )
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_ADC_ConvCpltCallback+0x24>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d102      	bne.n	8000f2e <HAL_ADC_ConvCpltCallback+0x16>
	  {
	    adcConversionComplete = 1;
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_ADC_ConvCpltCallback+0x28>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
	  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	24000230 	.word	0x24000230
 8000f40:	24000200 	.word	0x24000200

08000f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
}
 8000f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <Error_Handler+0x8>
	...

08000f50 <five_ns_delay>:
//define the timer handler below
#define timer htim1

extern TIM_HandleTypeDef timer;
void five_ns_delay (int ns)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&timer, 0);	//clear timer
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <five_ns_delay+0x30>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&timer);	//start timer
 8000f60:	4807      	ldr	r0, [pc, #28]	; (8000f80 <five_ns_delay+0x30>)
 8000f62:	f007 fcb3 	bl	80088cc <HAL_TIM_Base_Start_IT>
	while (__HAL_TIM_GET_COUNTER(&timer) < ns);
 8000f66:	bf00      	nop
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <five_ns_delay+0x30>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d3f9      	bcc.n	8000f68 <five_ns_delay+0x18>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2400030c 	.word	0x2400030c

08000f84 <send_to_lcd>:

void send_to_lcd (char data, int rs)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  //rs = 1 for data, rs = 0 for command
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	461a      	mov	r2, r3
 8000f96:	2102      	movs	r1, #2
 8000f98:	4819      	ldr	r0, [pc, #100]	; (8001000 <send_to_lcd+0x7c>)
 8000f9a:	f004 fa8d 	bl	80054b8 <HAL_GPIO_WritePin>

	// write the data to the respective pin
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	08db      	lsrs	r3, r3, #3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	461a      	mov	r2, r3
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	4814      	ldr	r0, [pc, #80]	; (8001000 <send_to_lcd+0x7c>)
 8000fb0:	f004 fa82 	bl	80054b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	089b      	lsrs	r3, r3, #2
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	2140      	movs	r1, #64	; 0x40
 8000fc4:	480e      	ldr	r0, [pc, #56]	; (8001000 <send_to_lcd+0x7c>)
 8000fc6:	f004 fa77 	bl	80054b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	085b      	lsrs	r3, r3, #1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	2120      	movs	r1, #32
 8000fda:	4809      	ldr	r0, [pc, #36]	; (8001000 <send_to_lcd+0x7c>)
 8000fdc:	f004 fa6c 	bl	80054b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	2110      	movs	r1, #16
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <send_to_lcd+0x7c>)
 8000fee:	f004 fa63 	bl	80054b8 <HAL_GPIO_WritePin>

	lcd_nibble();	//pulse LCD enable pin to initiate data transfer
 8000ff2:	f000 f8c5 	bl	8001180 <lcd_nibble>
	//HAL_Delay(1);  	//wait for 1 ms while the enable pin settles

    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	58020c00 	.word	0x58020c00

08001004 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    //send upper nibble first
    datatosend = ((cmd>>4)&0x0f);
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	091b      	lsrs	r3, r3, #4
 8001012:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ffb3 	bl	8000f84 <send_to_lcd>

    //send lower nibble
    datatosend = ((cmd)&0x0f);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  //RS must be 0 while sending command
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ffaa 	bl	8000f84 <send_to_lcd>

    HAL_Delay(2);
 8001030:	2002      	movs	r0, #2
 8001032:	f000 fb85 	bl	8001740 <HAL_Delay>
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <lcd_send_data>:

void lcd_send_data (char data)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	71fb      	strb	r3, [r7, #7]
	char datatosend;

    //send upper nibble first
    datatosend = ((data>>4)&0x0f);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	2101      	movs	r1, #1
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff96 	bl	8000f84 <send_to_lcd>

    //send lower nibble
    datatosend = ((data)&0x0f);
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,1);  //RS must be 1 while sending data
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	2101      	movs	r1, #1
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff8d 	bl	8000f84 <send_to_lcd>

    HAL_Delay(2);
 800106a:	2002      	movs	r0, #2
 800106c:	f000 fb68 	bl	8001740 <HAL_Delay>
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <lcd_put_cur>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_put_cur(int row, int col) //fix for 4x20 LCD !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b03      	cmp	r3, #3
 8001086:	d81f      	bhi.n	80010c8 <lcd_put_cur+0x50>
 8001088:	a201      	add	r2, pc, #4	; (adr r2, 8001090 <lcd_put_cur+0x18>)
 800108a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108e:	bf00      	nop
 8001090:	080010a1 	.word	0x080010a1
 8001094:	080010ab 	.word	0x080010ab
 8001098:	080010b5 	.word	0x080010b5
 800109c:	080010bf 	.word	0x080010bf
    switch (row)
    {
        case 0:
            col |= 0x80;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a6:	603b      	str	r3, [r7, #0]
            break;
 80010a8:	e00e      	b.n	80010c8 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010b0:	603b      	str	r3, [r7, #0]
            break;
 80010b2:	e009      	b.n	80010c8 <lcd_put_cur+0x50>
        case 2:
            col |= 0x40;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ba:	603b      	str	r3, [r7, #0]
            break;
 80010bc:	e004      	b.n	80010c8 <lcd_put_cur+0x50>
        case 3:
            col |= 0xF0;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80010c4:	603b      	str	r3, [r7, #0]
            break;
 80010c6:	bf00      	nop
    }

    lcd_send_cmd (col);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff99 	bl	8001004 <lcd_send_cmd>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop

080010dc <nhd_LCD_Init>:


void nhd_LCD_Init (void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	//4 bit initialization
	HAL_Delay(50);  //wait for >40ms
 80010e0:	2032      	movs	r0, #50	; 0x32
 80010e2:	f000 fb2d 	bl	8001740 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010e6:	2030      	movs	r0, #48	; 0x30
 80010e8:	f7ff ff8c 	bl	8001004 <lcd_send_cmd>
	HAL_Delay(5);  //wait for >4.1ms
 80010ec:	2005      	movs	r0, #5
 80010ee:	f000 fb27 	bl	8001740 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010f2:	2030      	movs	r0, #48	; 0x30
 80010f4:	f7ff ff86 	bl	8001004 <lcd_send_cmd>
	HAL_Delay(1);  //wait for >100us
 80010f8:	2001      	movs	r0, #1
 80010fa:	f000 fb21 	bl	8001740 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010fe:	2030      	movs	r0, #48	; 0x30
 8001100:	f7ff ff80 	bl	8001004 <lcd_send_cmd>
	HAL_Delay(10);
 8001104:	200a      	movs	r0, #10
 8001106:	f000 fb1b 	bl	8001740 <HAL_Delay>
	lcd_send_cmd (0x20);  //4bit mode
 800110a:	2020      	movs	r0, #32
 800110c:	f7ff ff7a 	bl	8001004 <lcd_send_cmd>
	HAL_Delay(10);
 8001110:	200a      	movs	r0, #10
 8001112:	f000 fb15 	bl	8001740 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	HAL_Delay(1);
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
	*/

	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001116:	2028      	movs	r0, #40	; 0x28
 8001118:	f7ff ff74 	bl	8001004 <lcd_send_cmd>
	HAL_Delay(1);
 800111c:	2001      	movs	r0, #1
 800111e:	f000 fb0f 	bl	8001740 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001122:	2008      	movs	r0, #8
 8001124:	f7ff ff6e 	bl	8001004 <lcd_send_cmd>
	HAL_Delay(1);
 8001128:	2001      	movs	r0, #1
 800112a:	f000 fb09 	bl	8001740 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800112e:	2001      	movs	r0, #1
 8001130:	f7ff ff68 	bl	8001004 <lcd_send_cmd>
	HAL_Delay(1);
 8001134:	2001      	movs	r0, #1
 8001136:	f000 fb03 	bl	8001740 <HAL_Delay>
	HAL_Delay(1);
 800113a:	2001      	movs	r0, #1
 800113c:	f000 fb00 	bl	8001740 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001140:	2006      	movs	r0, #6
 8001142:	f7ff ff5f 	bl	8001004 <lcd_send_cmd>
	HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f000 fafa 	bl	8001740 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800114c:	200c      	movs	r0, #12
 800114e:	f7ff ff59 	bl	8001004 <lcd_send_cmd>


}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}

08001156 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800115e:	e006      	b.n	800116e <lcd_send_string+0x18>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff68 	bl	800103e <lcd_send_data>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f4      	bne.n	8001160 <lcd_send_string+0xa>
}
 8001176:	bf00      	nop
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <lcd_nibble>:

void lcd_nibble() {
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8001184:	2201      	movs	r2, #1
 8001186:	2108      	movs	r1, #8
 8001188:	4806      	ldr	r0, [pc, #24]	; (80011a4 <lcd_nibble+0x24>)
 800118a:	f004 f995 	bl	80054b8 <HAL_GPIO_WritePin>
	five_ns_delay(65);								//325ns enable pulse width delay
 800118e:	2041      	movs	r0, #65	; 0x41
 8001190:	f7ff fede 	bl	8000f50 <five_ns_delay>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); 	//debugging LED
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2108      	movs	r1, #8
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <lcd_nibble+0x24>)
 800119a:	f004 f98d 	bl	80054b8 <HAL_GPIO_WritePin>
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	58020c00 	.word	0x58020c00

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_MspInit+0x30>)
 80011b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011b4:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <HAL_MspInit+0x30>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_MspInit+0x30>)
 80011c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	58024400 	.word	0x58024400

080011dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b0ba      	sub	sp, #232	; 0xe8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f4:	f107 0318 	add.w	r3, r7, #24
 80011f8:	22bc      	movs	r2, #188	; 0xbc
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f007 feb3 	bl	8008f68 <memset>
  if(hadc->Instance==ADC1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a51      	ldr	r2, [pc, #324]	; (800134c <HAL_ADC_MspInit+0x170>)
 8001208:	4293      	cmp	r3, r2
 800120a:	f040 809a 	bne.w	8001342 <HAL_ADC_MspInit+0x166>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800120e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001212:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001214:	2302      	movs	r3, #2
 8001216:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001218:	230c      	movs	r3, #12
 800121a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800121c:	2302      	movs	r3, #2
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001220:	2302      	movs	r3, #2
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001224:	2302      	movs	r3, #2
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001228:	23c0      	movs	r3, #192	; 0xc0
 800122a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800122c:	2320      	movs	r3, #32
 800122e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123a:	f107 0318 	add.w	r3, r7, #24
 800123e:	4618      	mov	r0, r3
 8001240:	f005 f966 	bl	8006510 <HAL_RCCEx_PeriphCLKConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 800124a:	f7ff fe7b 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800124e:	4b40      	ldr	r3, [pc, #256]	; (8001350 <HAL_ADC_MspInit+0x174>)
 8001250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001254:	4a3e      	ldr	r2, [pc, #248]	; (8001350 <HAL_ADC_MspInit+0x174>)
 8001256:	f043 0320 	orr.w	r3, r3, #32
 800125a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800125e:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <HAL_ADC_MspInit+0x174>)
 8001260:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001264:	f003 0320 	and.w	r3, r3, #32
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b38      	ldr	r3, [pc, #224]	; (8001350 <HAL_ADC_MspInit+0x174>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	4a37      	ldr	r2, [pc, #220]	; (8001350 <HAL_ADC_MspInit+0x174>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127c:	4b34      	ldr	r3, [pc, #208]	; (8001350 <HAL_ADC_MspInit+0x174>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	4b31      	ldr	r3, [pc, #196]	; (8001350 <HAL_ADC_MspInit+0x174>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001290:	4a2f      	ldr	r2, [pc, #188]	; (8001350 <HAL_ADC_MspInit+0x174>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129a:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <HAL_ADC_MspInit+0x174>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012a8:	2340      	movs	r3, #64	; 0x40
 80012aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ae:	2303      	movs	r3, #3
 80012b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012be:	4619      	mov	r1, r3
 80012c0:	4824      	ldr	r0, [pc, #144]	; (8001354 <HAL_ADC_MspInit+0x178>)
 80012c2:	f003 ff31 	bl	8005128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012c6:	2310      	movs	r3, #16
 80012c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012cc:	2303      	movs	r3, #3
 80012ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012dc:	4619      	mov	r1, r3
 80012de:	481e      	ldr	r0, [pc, #120]	; (8001358 <HAL_ADC_MspInit+0x17c>)
 80012e0:	f003 ff22 	bl	8005128 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <HAL_ADC_MspInit+0x180>)
 80012e6:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <HAL_ADC_MspInit+0x184>)
 80012e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <HAL_ADC_MspInit+0x180>)
 80012ec:	2209      	movs	r2, #9
 80012ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <HAL_ADC_MspInit+0x180>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_ADC_MspInit+0x180>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <HAL_ADC_MspInit+0x180>)
 80012fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001302:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_ADC_MspInit+0x180>)
 8001306:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800130a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <HAL_ADC_MspInit+0x180>)
 800130e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001312:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_ADC_MspInit+0x180>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_ADC_MspInit+0x180>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_ADC_MspInit+0x180>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <HAL_ADC_MspInit+0x180>)
 8001328:	f001 fe26 	bl	8002f78 <HAL_DMA_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_ADC_MspInit+0x15a>
    {
      Error_Handler();
 8001332:	f7ff fe07 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_ADC_MspInit+0x180>)
 800133a:	64da      	str	r2, [r3, #76]	; 0x4c
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <HAL_ADC_MspInit+0x180>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	37e8      	adds	r7, #232	; 0xe8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40022000 	.word	0x40022000
 8001350:	58024400 	.word	0x58024400
 8001354:	58020000 	.word	0x58020000
 8001358:	58020800 	.word	0x58020800
 800135c:	24000294 	.word	0x24000294
 8001360:	40020010 	.word	0x40020010

08001364 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a16      	ldr	r2, [pc, #88]	; (80013cc <HAL_TIM_Base_MspInit+0x68>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d10f      	bne.n	8001396 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_TIM_Base_MspInit+0x6c>)
 8001378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800137c:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <HAL_TIM_Base_MspInit+0x6c>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_TIM_Base_MspInit+0x6c>)
 8001388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001394:	e013      	b.n	80013be <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800139e:	d10e      	bne.n	80013be <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_TIM_Base_MspInit+0x6c>)
 80013a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <HAL_TIM_Base_MspInit+0x6c>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <HAL_TIM_Base_MspInit+0x6c>)
 80013b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40010000 	.word	0x40010000
 80013d0:	58024400 	.word	0x58024400

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <NMI_Handler+0x4>

080013da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler+0x4>

080013e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001420:	f000 f96e 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <DMA1_Stream0_IRQHandler+0x10>)
 800142e:	f002 fb69 	bl	8003b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	24000294 	.word	0x24000294

0800143c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
	return 1;
 8001440:	2301      	movs	r3, #1
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_kill>:

int _kill(int pid, int sig)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001456:	f007 fd5d 	bl	8008f14 <__errno>
 800145a:	4603      	mov	r3, r0
 800145c:	2216      	movs	r2, #22
 800145e:	601a      	str	r2, [r3, #0]
	return -1;
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_exit>:

void _exit (int status)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ffe7 	bl	800144c <_kill>
	while (1) {}		/* Make sure we hang here */
 800147e:	e7fe      	b.n	800147e <_exit+0x12>

08001480 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	e00a      	b.n	80014a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001492:	f3af 8000 	nop.w
 8001496:	4601      	mov	r1, r0
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	60ba      	str	r2, [r7, #8]
 800149e:	b2ca      	uxtb	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbf0      	blt.n	8001492 <_read+0x12>
	}

return len;
 80014b0:	687b      	ldr	r3, [r7, #4]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	e009      	b.n	80014e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	60ba      	str	r2, [r7, #8]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dbf1      	blt.n	80014cc <_write+0x12>
	}
	return len;
 80014e8:	687b      	ldr	r3, [r7, #4]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_close>:

int _close(int file)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
	return -1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800151a:	605a      	str	r2, [r3, #4]
	return 0;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <_isatty>:

int _isatty(int file)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
	return 1;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
	return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001564:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <_sbrk+0x5c>)
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <_sbrk+0x60>)
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <_sbrk+0x64>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <_sbrk+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	429a      	cmp	r2, r3
 800158a:	d207      	bcs.n	800159c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800158c:	f007 fcc2 	bl	8008f14 <__errno>
 8001590:	4603      	mov	r3, r0
 8001592:	220c      	movs	r2, #12
 8001594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	e009      	b.n	80015b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <_sbrk+0x64>)
 80015ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	24080000 	.word	0x24080000
 80015bc:	00000400 	.word	0x00000400
 80015c0:	24000204 	.word	0x24000204
 80015c4:	240003c0 	.word	0x240003c0

080015c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001600 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015cc:	f7fe fee0 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015d2:	490d      	ldr	r1, [pc, #52]	; (8001608 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e8:	4c0a      	ldr	r4, [pc, #40]	; (8001614 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f6:	f007 fc93 	bl	8008f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fa:	f7ff f933 	bl	8000864 <main>
  bx  lr
 80015fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001600:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001604:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001608:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 800160c:	0800bff4 	.word	0x0800bff4
  ldr r2, =_sbss
 8001610:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001614:	240003bc 	.word	0x240003bc

08001618 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC3_IRQHandler>
	...

0800161c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001622:	2003      	movs	r0, #3
 8001624:	f001 fc68 	bl	8002ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001628:	f004 fdc8 	bl	80061bc <HAL_RCC_GetSysClockFreq>
 800162c:	4602      	mov	r2, r0
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_Init+0x68>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	0a1b      	lsrs	r3, r3, #8
 8001634:	f003 030f 	and.w	r3, r3, #15
 8001638:	4913      	ldr	r1, [pc, #76]	; (8001688 <HAL_Init+0x6c>)
 800163a:	5ccb      	ldrb	r3, [r1, r3]
 800163c:	f003 031f 	and.w	r3, r3, #31
 8001640:	fa22 f303 	lsr.w	r3, r2, r3
 8001644:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_Init+0x68>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <HAL_Init+0x6c>)
 8001650:	5cd3      	ldrb	r3, [r2, r3]
 8001652:	f003 031f 	and.w	r3, r3, #31
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	fa22 f303 	lsr.w	r3, r2, r3
 800165c:	4a0b      	ldr	r2, [pc, #44]	; (800168c <HAL_Init+0x70>)
 800165e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001660:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <HAL_Init+0x74>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001666:	2000      	movs	r0, #0
 8001668:	f000 f814 	bl	8001694 <HAL_InitTick>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e002      	b.n	800167c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001676:	f7ff fd97 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	58024400 	.word	0x58024400
 8001688:	0800bbf4 	.word	0x0800bbf4
 800168c:	24000004 	.word	0x24000004
 8001690:	24000000 	.word	0x24000000

08001694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_InitTick+0x60>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e021      	b.n	80016ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HAL_InitTick+0x64>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_InitTick+0x60>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f001 fc4d 	bl	8002f5e <HAL_SYSTICK_Config>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00e      	b.n	80016ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d80a      	bhi.n	80016ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f001 fc17 	bl	8002f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e0:	4a06      	ldr	r2, [pc, #24]	; (80016fc <HAL_InitTick+0x68>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	2400000c 	.word	0x2400000c
 80016f8:	24000000 	.word	0x24000000
 80016fc:	24000008 	.word	0x24000008

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	2400000c 	.word	0x2400000c
 8001724:	240003a8 	.word	0x240003a8

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	240003a8 	.word	0x240003a8

08001740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff ffee 	bl	8001728 <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d005      	beq.n	8001766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_Delay+0x44>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001766:	bf00      	nop
 8001768:	f7ff ffde 	bl	8001728 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	429a      	cmp	r2, r3
 8001776:	d8f7      	bhi.n	8001768 <HAL_Delay+0x28>
  {
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2400000c 	.word	0x2400000c

08001788 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <HAL_GetREVID+0x14>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	0c1b      	lsrs	r3, r3, #16
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	5c001000 	.word	0x5c001000

080017a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	609a      	str	r2, [r3, #8]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	609a      	str	r2, [r3, #8]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3360      	adds	r3, #96	; 0x60
 800181a:	461a      	mov	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	430b      	orrs	r3, r1
 8001836:	431a      	orrs	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800183c:	bf00      	nop
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	431a      	orrs	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	611a      	str	r2, [r3, #16]
}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800187a:	b480      	push	{r7}
 800187c:	b087      	sub	sp, #28
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3360      	adds	r3, #96	; 0x60
 800188a:	461a      	mov	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	431a      	orrs	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	601a      	str	r2, [r3, #0]
  }
}
 80018a4:	bf00      	nop
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b087      	sub	sp, #28
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3330      	adds	r3, #48	; 0x30
 80018e6:	461a      	mov	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	0a1b      	lsrs	r3, r3, #8
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	4413      	add	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	211f      	movs	r1, #31
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	401a      	ands	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	0e9b      	lsrs	r3, r3, #26
 800190e:	f003 011f 	and.w	r1, r3, #31
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f003 031f 	and.w	r3, r3, #31
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	431a      	orrs	r2, r3
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001922:	bf00      	nop
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f023 0203 	bic.w	r2, r3, #3
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	60da      	str	r2, [r3, #12]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001954:	b480      	push	{r7}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3314      	adds	r3, #20
 8001964:	461a      	mov	r2, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	0e5b      	lsrs	r3, r3, #25
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	4413      	add	r3, r2
 8001972:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	0d1b      	lsrs	r3, r3, #20
 800197c:	f003 031f 	and.w	r3, r3, #31
 8001980:	2107      	movs	r1, #7
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	401a      	ands	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	0d1b      	lsrs	r3, r3, #20
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	431a      	orrs	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800199e:	bf00      	nop
 80019a0:	371c      	adds	r7, #28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019c4:	43db      	mvns	r3, r3
 80019c6:	401a      	ands	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0318 	and.w	r3, r3, #24
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019d0:	40d9      	lsrs	r1, r3
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	400b      	ands	r3, r1
 80019d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019da:	431a      	orrs	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	000fffff 	.word	0x000fffff

080019f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 031f 	and.w	r3, r3, #31
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6093      	str	r3, [r2, #8]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	5fffffc0 	.word	0x5fffffc0

08001a34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a48:	d101      	bne.n	8001a4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	6fffffc0 	.word	0x6fffffc0

08001a84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a98:	d101      	bne.n	8001a9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <LL_ADC_Enable+0x24>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	7fffffc0 	.word	0x7fffffc0

08001ad4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <LL_ADC_IsEnabled+0x18>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <LL_ADC_IsEnabled+0x1a>
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <LL_ADC_REG_StartConversion+0x24>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	f043 0204 	orr.w	r2, r3, #4
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	7fffffc0 	.word	0x7fffffc0

08001b24 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d101      	bne.n	8001b3c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d101      	bne.n	8001b62 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e18e      	b.n	8001ea8 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d109      	bne.n	8001bac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff fb1f 	bl	80011dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff3f 	bl	8001a34 <LL_ADC_IsDeepPowerDownEnabled>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d004      	beq.n	8001bc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff25 	bl	8001a10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff5a 	bl	8001a84 <LL_ADC_IsInternalRegulatorEnabled>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d114      	bne.n	8001c00 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ff3e 	bl	8001a5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001be0:	4b9a      	ldr	r3, [pc, #616]	; (8001e4c <HAL_ADC_Init+0x2dc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	099b      	lsrs	r3, r3, #6
 8001be6:	4a9a      	ldr	r2, [pc, #616]	; (8001e50 <HAL_ADC_Init+0x2e0>)
 8001be8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bec:	099b      	lsrs	r3, r3, #6
 8001bee:	3301      	adds	r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bf2:	e002      	b.n	8001bfa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f9      	bne.n	8001bf4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff3d 	bl	8001a84 <LL_ADC_IsInternalRegulatorEnabled>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10d      	bne.n	8001c2c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c14:	f043 0210 	orr.w	r2, r3, #16
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff77 	bl	8001b24 <LL_ADC_REG_IsConversionOngoing>
 8001c36:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f040 8128 	bne.w	8001e96 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f040 8124 	bne.w	8001e96 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c52:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c56:	f043 0202 	orr.w	r2, r3, #2
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff36 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d136      	bne.n	8001cdc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a78      	ldr	r2, [pc, #480]	; (8001e54 <HAL_ADC_Init+0x2e4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d004      	beq.n	8001c82 <HAL_ADC_Init+0x112>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a76      	ldr	r2, [pc, #472]	; (8001e58 <HAL_ADC_Init+0x2e8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d10e      	bne.n	8001ca0 <HAL_ADC_Init+0x130>
 8001c82:	4874      	ldr	r0, [pc, #464]	; (8001e54 <HAL_ADC_Init+0x2e4>)
 8001c84:	f7ff ff26 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001c88:	4604      	mov	r4, r0
 8001c8a:	4873      	ldr	r0, [pc, #460]	; (8001e58 <HAL_ADC_Init+0x2e8>)
 8001c8c:	f7ff ff22 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4323      	orrs	r3, r4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	e008      	b.n	8001cb2 <HAL_ADC_Init+0x142>
 8001ca0:	486e      	ldr	r0, [pc, #440]	; (8001e5c <HAL_ADC_Init+0x2ec>)
 8001ca2:	f7ff ff17 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	bf0c      	ite	eq
 8001cac:	2301      	moveq	r3, #1
 8001cae:	2300      	movne	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d012      	beq.n	8001cdc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a66      	ldr	r2, [pc, #408]	; (8001e54 <HAL_ADC_Init+0x2e4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d004      	beq.n	8001cca <HAL_ADC_Init+0x15a>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a64      	ldr	r2, [pc, #400]	; (8001e58 <HAL_ADC_Init+0x2e8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_Init+0x15e>
 8001cca:	4a65      	ldr	r2, [pc, #404]	; (8001e60 <HAL_ADC_Init+0x2f0>)
 8001ccc:	e000      	b.n	8001cd0 <HAL_ADC_Init+0x160>
 8001cce:	4a65      	ldr	r2, [pc, #404]	; (8001e64 <HAL_ADC_Init+0x2f4>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	f7ff fd62 	bl	80017a0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001cdc:	f7ff fd54 	bl	8001788 <HAL_GetREVID>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d914      	bls.n	8001d14 <HAL_ADC_Init+0x1a4>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d110      	bne.n	8001d14 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7d5b      	ldrb	r3, [r3, #21]
 8001cf6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cfc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d02:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	7f1b      	ldrb	r3, [r3, #28]
 8001d08:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d0a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d0c:	f043 030c 	orr.w	r3, r3, #12
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	e00d      	b.n	8001d30 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7d5b      	ldrb	r3, [r3, #21]
 8001d18:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d1e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d24:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7f1b      	ldrb	r3, [r3, #28]
 8001d2a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7f1b      	ldrb	r3, [r3, #28]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d106      	bne.n	8001d46 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	045b      	lsls	r3, r3, #17
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	4b3f      	ldr	r3, [pc, #252]	; (8001e68 <HAL_ADC_Init+0x2f8>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	69b9      	ldr	r1, [r7, #24]
 8001d72:	430b      	orrs	r3, r1
 8001d74:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fed2 	bl	8001b24 <LL_ADC_REG_IsConversionOngoing>
 8001d80:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fedf 	bl	8001b4a <LL_ADC_INJ_IsConversionOngoing>
 8001d8c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d14a      	bne.n	8001e2a <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d147      	bne.n	8001e2a <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7d1b      	ldrb	r3, [r3, #20]
 8001d9e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <HAL_ADC_Init+0x2fc>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	69b9      	ldr	r1, [r7, #24]
 8001db8:	430b      	orrs	r3, r1
 8001dba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d11b      	bne.n	8001dfe <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691a      	ldr	r2, [r3, #16]
 8001dd2:	4b27      	ldr	r3, [pc, #156]	; (8001e70 <HAL_ADC_Init+0x300>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dda:	3a01      	subs	r2, #1
 8001ddc:	0411      	lsls	r1, r2, #16
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001de2:	4311      	orrs	r1, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001de8:	4311      	orrs	r1, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dee:	430a      	orrs	r2, r1
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	611a      	str	r2, [r3, #16]
 8001dfc:	e007      	b.n	8001e0e <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 fd89 	bl	800293c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d120      	bne.n	8001e74 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	f023 010f 	bic.w	r1, r3, #15
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	1e5a      	subs	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30
 8001e4a:	e01b      	b.n	8001e84 <HAL_ADC_Init+0x314>
 8001e4c:	24000000 	.word	0x24000000
 8001e50:	053e2d63 	.word	0x053e2d63
 8001e54:	40022000 	.word	0x40022000
 8001e58:	40022100 	.word	0x40022100
 8001e5c:	58026000 	.word	0x58026000
 8001e60:	40022300 	.word	0x40022300
 8001e64:	58026300 	.word	0x58026300
 8001e68:	fff0c003 	.word	0xfff0c003
 8001e6c:	ffffbffc 	.word	0xffffbffc
 8001e70:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 020f 	bic.w	r2, r2, #15
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e88:	f023 0303 	bic.w	r3, r3, #3
 8001e8c:	f043 0201 	orr.w	r2, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	655a      	str	r2, [r3, #84]	; 0x54
 8001e94:	e007      	b.n	8001ea6 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	f043 0210 	orr.w	r2, r3, #16
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ea6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3724      	adds	r7, #36	; 0x24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd90      	pop	{r4, r7, pc}

08001eb0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a55      	ldr	r2, [pc, #340]	; (8002018 <HAL_ADC_Start_DMA+0x168>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d004      	beq.n	8001ed0 <HAL_ADC_Start_DMA+0x20>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a54      	ldr	r2, [pc, #336]	; (800201c <HAL_ADC_Start_DMA+0x16c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d101      	bne.n	8001ed4 <HAL_ADC_Start_DMA+0x24>
 8001ed0:	4b53      	ldr	r3, [pc, #332]	; (8002020 <HAL_ADC_Start_DMA+0x170>)
 8001ed2:	e000      	b.n	8001ed6 <HAL_ADC_Start_DMA+0x26>
 8001ed4:	4b53      	ldr	r3, [pc, #332]	; (8002024 <HAL_ADC_Start_DMA+0x174>)
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fd8c 	bl	80019f4 <LL_ADC_GetMultimode>
 8001edc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fe1e 	bl	8001b24 <LL_ADC_REG_IsConversionOngoing>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f040 808c 	bne.w	8002008 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_Start_DMA+0x4e>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e087      	b.n	800200e <HAL_ADC_Start_DMA+0x15e>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	2b05      	cmp	r3, #5
 8001f10:	d002      	beq.n	8001f18 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	d170      	bne.n	8001ffa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 fbf1 	bl	8002700 <ADC_Enable>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d163      	bne.n	8001ff0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f2c:	4b3e      	ldr	r3, [pc, #248]	; (8002028 <HAL_ADC_Start_DMA+0x178>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a37      	ldr	r2, [pc, #220]	; (800201c <HAL_ADC_Start_DMA+0x16c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d002      	beq.n	8001f48 <HAL_ADC_Start_DMA+0x98>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	e000      	b.n	8001f4a <HAL_ADC_Start_DMA+0x9a>
 8001f48:	4b33      	ldr	r3, [pc, #204]	; (8002018 <HAL_ADC_Start_DMA+0x168>)
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d002      	beq.n	8001f58 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d006      	beq.n	8001f7e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	f023 0206 	bic.w	r2, r3, #6
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f7c:	e002      	b.n	8001f84 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f88:	4a28      	ldr	r2, [pc, #160]	; (800202c <HAL_ADC_Start_DMA+0x17c>)
 8001f8a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f90:	4a27      	ldr	r2, [pc, #156]	; (8002030 <HAL_ADC_Start_DMA+0x180>)
 8001f92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f98:	4a26      	ldr	r2, [pc, #152]	; (8002034 <HAL_ADC_Start_DMA+0x184>)
 8001f9a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	221c      	movs	r2, #28
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0210 	orr.w	r2, r2, #16
 8001fba:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	f7ff fcb1 	bl	800192e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3340      	adds	r3, #64	; 0x40
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f001 fb28 	bl	8003630 <HAL_DMA_Start_IT>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fd87 	bl	8001afc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001fee:	e00d      	b.n	800200c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001ff8:	e008      	b.n	800200c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002006:	e001      	b.n	800200c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002008:	2302      	movs	r3, #2
 800200a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800200c:	7dfb      	ldrb	r3, [r7, #23]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40022000 	.word	0x40022000
 800201c:	40022100 	.word	0x40022100
 8002020:	40022300 	.word	0x40022300
 8002024:	58026300 	.word	0x58026300
 8002028:	fffff0fe 	.word	0xfffff0fe
 800202c:	08002815 	.word	0x08002815
 8002030:	080028ed 	.word	0x080028ed
 8002034:	08002909 	.word	0x08002909

08002038 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b0a1      	sub	sp, #132	; 0x84
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4a9d      	ldr	r2, [pc, #628]	; (80022f0 <HAL_ADC_ConfigChannel+0x290>)
 800207a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_ADC_ConfigChannel+0x2a>
 8002086:	2302      	movs	r3, #2
 8002088:	e321      	b.n	80026ce <HAL_ADC_ConfigChannel+0x66e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fd44 	bl	8001b24 <LL_ADC_REG_IsConversionOngoing>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f040 8306 	bne.w	80026b0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d108      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x62>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0e9b      	lsrs	r3, r3, #26
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	2201      	movs	r2, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	e016      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x90>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020d2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80020da:	2320      	movs	r3, #32
 80020dc:	e003      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80020de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	2201      	movs	r2, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	69d1      	ldr	r1, [r2, #28]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	430b      	orrs	r3, r1
 80020fc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	6859      	ldr	r1, [r3, #4]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	f7ff fbe3 	bl	80018d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fd05 	bl	8001b24 <LL_ADC_REG_IsConversionOngoing>
 800211a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fd12 	bl	8001b4a <LL_ADC_INJ_IsConversionOngoing>
 8002126:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 80b3 	bne.w	8002296 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002132:	2b00      	cmp	r3, #0
 8002134:	f040 80af 	bne.w	8002296 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6819      	ldr	r1, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	461a      	mov	r2, r3
 8002146:	f7ff fc05 	bl	8001954 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800214a:	4b6a      	ldr	r3, [pc, #424]	; (80022f4 <HAL_ADC_ConfigChannel+0x294>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002152:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002156:	d10b      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x110>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	e01d      	b.n	80021ac <HAL_ADC_ConfigChannel+0x14c>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10b      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x136>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	e00a      	b.n	80021ac <HAL_ADC_ConfigChannel+0x14c>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	695a      	ldr	r2, [r3, #20]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	089b      	lsrs	r3, r3, #2
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d027      	beq.n	8002206 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6919      	ldr	r1, [r3, #16]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021c4:	f7ff fb20 	bl	8001808 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	6919      	ldr	r1, [r3, #16]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	7e5b      	ldrb	r3, [r3, #25]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d102      	bne.n	80021de <HAL_ADC_ConfigChannel+0x17e>
 80021d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80021dc:	e000      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x180>
 80021de:	2300      	movs	r3, #0
 80021e0:	461a      	mov	r2, r3
 80021e2:	f7ff fb4a 	bl	800187a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6919      	ldr	r1, [r3, #16]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	7e1b      	ldrb	r3, [r3, #24]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d102      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x19c>
 80021f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021fa:	e000      	b.n	80021fe <HAL_ADC_ConfigChannel+0x19e>
 80021fc:	2300      	movs	r3, #0
 80021fe:	461a      	mov	r2, r3
 8002200:	f7ff fb22 	bl	8001848 <LL_ADC_SetDataRightShift>
 8002204:	e047      	b.n	8002296 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	069b      	lsls	r3, r3, #26
 8002216:	429a      	cmp	r2, r3
 8002218:	d107      	bne.n	800222a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002228:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002230:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	069b      	lsls	r3, r3, #26
 800223a:	429a      	cmp	r2, r3
 800223c:	d107      	bne.n	800224e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800224c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002254:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	069b      	lsls	r3, r3, #26
 800225e:	429a      	cmp	r2, r3
 8002260:	d107      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002270:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002278:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	069b      	lsls	r3, r3, #26
 8002282:	429a      	cmp	r2, r3
 8002284:	d107      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002294:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fc1a 	bl	8001ad4 <LL_ADC_IsEnabled>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f040 820d 	bne.w	80026c2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6819      	ldr	r1, [r3, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	461a      	mov	r2, r3
 80022b6:	f7ff fb79 	bl	80019ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	4a0c      	ldr	r2, [pc, #48]	; (80022f0 <HAL_ADC_ConfigChannel+0x290>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	f040 8133 	bne.w	800252c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d110      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x298>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	0e9b      	lsrs	r3, r3, #26
 80022dc:	3301      	adds	r3, #1
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	2b09      	cmp	r3, #9
 80022e4:	bf94      	ite	ls
 80022e6:	2301      	movls	r3, #1
 80022e8:	2300      	movhi	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	e01e      	b.n	800232c <HAL_ADC_ConfigChannel+0x2cc>
 80022ee:	bf00      	nop
 80022f0:	47ff0000 	.word	0x47ff0000
 80022f4:	5c001000 	.word	0x5c001000
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002308:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800230a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002310:	2320      	movs	r3, #32
 8002312:	e003      	b.n	800231c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	3301      	adds	r3, #1
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	2b09      	cmp	r3, #9
 8002324:	bf94      	ite	ls
 8002326:	2301      	movls	r3, #1
 8002328:	2300      	movhi	r3, #0
 800232a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800232c:	2b00      	cmp	r3, #0
 800232e:	d079      	beq.n	8002424 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002338:	2b00      	cmp	r3, #0
 800233a:	d107      	bne.n	800234c <HAL_ADC_ConfigChannel+0x2ec>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	3301      	adds	r3, #1
 8002344:	069b      	lsls	r3, r3, #26
 8002346:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800234a:	e015      	b.n	8002378 <HAL_ADC_ConfigChannel+0x318>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800235a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800235c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800235e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e003      	b.n	8002370 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	069b      	lsls	r3, r3, #26
 8002374:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x338>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	3301      	adds	r3, #1
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2101      	movs	r1, #1
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	e017      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x368>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80023a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80023aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80023b0:	2320      	movs	r3, #32
 80023b2:	e003      	b.n	80023bc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80023b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	ea42 0103 	orr.w	r1, r2, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10a      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x38e>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	3301      	adds	r3, #1
 80023e0:	f003 021f 	and.w	r2, r3, #31
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	051b      	lsls	r3, r3, #20
 80023ec:	e018      	b.n	8002420 <HAL_ADC_ConfigChannel+0x3c0>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80023fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002406:	2320      	movs	r3, #32
 8002408:	e003      	b.n	8002412 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800240a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	3301      	adds	r3, #1
 8002414:	f003 021f 	and.w	r2, r3, #31
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002420:	430b      	orrs	r3, r1
 8002422:	e07e      	b.n	8002522 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800242c:	2b00      	cmp	r3, #0
 800242e:	d107      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x3e0>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0e9b      	lsrs	r3, r3, #26
 8002436:	3301      	adds	r3, #1
 8002438:	069b      	lsls	r3, r3, #26
 800243a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800243e:	e015      	b.n	800246c <HAL_ADC_ConfigChannel+0x40c>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002458:	2320      	movs	r3, #32
 800245a:	e003      	b.n	8002464 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	3301      	adds	r3, #1
 8002466:	069b      	lsls	r3, r3, #26
 8002468:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002474:	2b00      	cmp	r3, #0
 8002476:	d109      	bne.n	800248c <HAL_ADC_ConfigChannel+0x42c>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	0e9b      	lsrs	r3, r3, #26
 800247e:	3301      	adds	r3, #1
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	2101      	movs	r1, #1
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	e017      	b.n	80024bc <HAL_ADC_ConfigChannel+0x45c>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	61bb      	str	r3, [r7, #24]
  return result;
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80024a4:	2320      	movs	r3, #32
 80024a6:	e003      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	fab3 f383 	clz	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	3301      	adds	r3, #1
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	2101      	movs	r1, #1
 80024b8:	fa01 f303 	lsl.w	r3, r1, r3
 80024bc:	ea42 0103 	orr.w	r1, r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10d      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x488>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0e9b      	lsrs	r3, r3, #26
 80024d2:	3301      	adds	r3, #1
 80024d4:	f003 021f 	and.w	r2, r3, #31
 80024d8:	4613      	mov	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4413      	add	r3, r2
 80024de:	3b1e      	subs	r3, #30
 80024e0:	051b      	lsls	r3, r3, #20
 80024e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024e6:	e01b      	b.n	8002520 <HAL_ADC_ConfigChannel+0x4c0>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	60fb      	str	r3, [r7, #12]
  return result;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002500:	2320      	movs	r3, #32
 8002502:	e003      	b.n	800250c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	3301      	adds	r3, #1
 800250e:	f003 021f 	and.w	r2, r3, #31
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	3b1e      	subs	r3, #30
 800251a:	051b      	lsls	r3, r3, #20
 800251c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002520:	430b      	orrs	r3, r1
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	6892      	ldr	r2, [r2, #8]
 8002526:	4619      	mov	r1, r3
 8002528:	f7ff fa14 	bl	8001954 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	f280 80c6 	bge.w	80026c2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a67      	ldr	r2, [pc, #412]	; (80026d8 <HAL_ADC_ConfigChannel+0x678>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d004      	beq.n	800254a <HAL_ADC_ConfigChannel+0x4ea>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a65      	ldr	r2, [pc, #404]	; (80026dc <HAL_ADC_ConfigChannel+0x67c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d101      	bne.n	800254e <HAL_ADC_ConfigChannel+0x4ee>
 800254a:	4b65      	ldr	r3, [pc, #404]	; (80026e0 <HAL_ADC_ConfigChannel+0x680>)
 800254c:	e000      	b.n	8002550 <HAL_ADC_ConfigChannel+0x4f0>
 800254e:	4b65      	ldr	r3, [pc, #404]	; (80026e4 <HAL_ADC_ConfigChannel+0x684>)
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff f94b 	bl	80017ec <LL_ADC_GetCommonPathInternalCh>
 8002556:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a5e      	ldr	r2, [pc, #376]	; (80026d8 <HAL_ADC_ConfigChannel+0x678>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d004      	beq.n	800256c <HAL_ADC_ConfigChannel+0x50c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a5d      	ldr	r2, [pc, #372]	; (80026dc <HAL_ADC_ConfigChannel+0x67c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d10e      	bne.n	800258a <HAL_ADC_ConfigChannel+0x52a>
 800256c:	485a      	ldr	r0, [pc, #360]	; (80026d8 <HAL_ADC_ConfigChannel+0x678>)
 800256e:	f7ff fab1 	bl	8001ad4 <LL_ADC_IsEnabled>
 8002572:	4604      	mov	r4, r0
 8002574:	4859      	ldr	r0, [pc, #356]	; (80026dc <HAL_ADC_ConfigChannel+0x67c>)
 8002576:	f7ff faad 	bl	8001ad4 <LL_ADC_IsEnabled>
 800257a:	4603      	mov	r3, r0
 800257c:	4323      	orrs	r3, r4
 800257e:	2b00      	cmp	r3, #0
 8002580:	bf0c      	ite	eq
 8002582:	2301      	moveq	r3, #1
 8002584:	2300      	movne	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	e008      	b.n	800259c <HAL_ADC_ConfigChannel+0x53c>
 800258a:	4857      	ldr	r0, [pc, #348]	; (80026e8 <HAL_ADC_ConfigChannel+0x688>)
 800258c:	f7ff faa2 	bl	8001ad4 <LL_ADC_IsEnabled>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d07d      	beq.n	800269c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a51      	ldr	r2, [pc, #324]	; (80026ec <HAL_ADC_ConfigChannel+0x68c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d130      	bne.n	800260c <HAL_ADC_ConfigChannel+0x5ac>
 80025aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d12b      	bne.n	800260c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a4b      	ldr	r2, [pc, #300]	; (80026e8 <HAL_ADC_ConfigChannel+0x688>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	f040 8081 	bne.w	80026c2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a44      	ldr	r2, [pc, #272]	; (80026d8 <HAL_ADC_ConfigChannel+0x678>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d004      	beq.n	80025d4 <HAL_ADC_ConfigChannel+0x574>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a43      	ldr	r2, [pc, #268]	; (80026dc <HAL_ADC_ConfigChannel+0x67c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x578>
 80025d4:	4a42      	ldr	r2, [pc, #264]	; (80026e0 <HAL_ADC_ConfigChannel+0x680>)
 80025d6:	e000      	b.n	80025da <HAL_ADC_ConfigChannel+0x57a>
 80025d8:	4a42      	ldr	r2, [pc, #264]	; (80026e4 <HAL_ADC_ConfigChannel+0x684>)
 80025da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f7ff f8ef 	bl	80017c6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025e8:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <HAL_ADC_ConfigChannel+0x690>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	099b      	lsrs	r3, r3, #6
 80025ee:	4a41      	ldr	r2, [pc, #260]	; (80026f4 <HAL_ADC_ConfigChannel+0x694>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	099b      	lsrs	r3, r3, #6
 80025f6:	3301      	adds	r3, #1
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025fc:	e002      	b.n	8002604 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	3b01      	subs	r3, #1
 8002602:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f9      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800260a:	e05a      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a39      	ldr	r2, [pc, #228]	; (80026f8 <HAL_ADC_ConfigChannel+0x698>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d11e      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x5f4>
 8002616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d119      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a30      	ldr	r2, [pc, #192]	; (80026e8 <HAL_ADC_ConfigChannel+0x688>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d14b      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a2a      	ldr	r2, [pc, #168]	; (80026d8 <HAL_ADC_ConfigChannel+0x678>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d004      	beq.n	800263e <HAL_ADC_ConfigChannel+0x5de>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a28      	ldr	r2, [pc, #160]	; (80026dc <HAL_ADC_ConfigChannel+0x67c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d101      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x5e2>
 800263e:	4a28      	ldr	r2, [pc, #160]	; (80026e0 <HAL_ADC_ConfigChannel+0x680>)
 8002640:	e000      	b.n	8002644 <HAL_ADC_ConfigChannel+0x5e4>
 8002642:	4a28      	ldr	r2, [pc, #160]	; (80026e4 <HAL_ADC_ConfigChannel+0x684>)
 8002644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264a:	4619      	mov	r1, r3
 800264c:	4610      	mov	r0, r2
 800264e:	f7ff f8ba 	bl	80017c6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002652:	e036      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a28      	ldr	r2, [pc, #160]	; (80026fc <HAL_ADC_ConfigChannel+0x69c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d131      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x662>
 800265e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d12c      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a1e      	ldr	r2, [pc, #120]	; (80026e8 <HAL_ADC_ConfigChannel+0x688>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d127      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a18      	ldr	r2, [pc, #96]	; (80026d8 <HAL_ADC_ConfigChannel+0x678>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d004      	beq.n	8002686 <HAL_ADC_ConfigChannel+0x626>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a16      	ldr	r2, [pc, #88]	; (80026dc <HAL_ADC_ConfigChannel+0x67c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d101      	bne.n	800268a <HAL_ADC_ConfigChannel+0x62a>
 8002686:	4a16      	ldr	r2, [pc, #88]	; (80026e0 <HAL_ADC_ConfigChannel+0x680>)
 8002688:	e000      	b.n	800268c <HAL_ADC_ConfigChannel+0x62c>
 800268a:	4a16      	ldr	r2, [pc, #88]	; (80026e4 <HAL_ADC_ConfigChannel+0x684>)
 800268c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800268e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002692:	4619      	mov	r1, r3
 8002694:	4610      	mov	r0, r2
 8002696:	f7ff f896 	bl	80017c6 <LL_ADC_SetCommonPathInternalCh>
 800269a:	e012      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a0:	f043 0220 	orr.w	r2, r3, #32
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80026ae:	e008      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	f043 0220 	orr.w	r2, r3, #32
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80026ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3784      	adds	r7, #132	; 0x84
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd90      	pop	{r4, r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40022000 	.word	0x40022000
 80026dc:	40022100 	.word	0x40022100
 80026e0:	40022300 	.word	0x40022300
 80026e4:	58026300 	.word	0x58026300
 80026e8:	58026000 	.word	0x58026000
 80026ec:	cb840000 	.word	0xcb840000
 80026f0:	24000000 	.word	0x24000000
 80026f4:	053e2d63 	.word	0x053e2d63
 80026f8:	c7520000 	.word	0xc7520000
 80026fc:	cfb80000 	.word	0xcfb80000

08002700 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff f9e1 	bl	8001ad4 <LL_ADC_IsEnabled>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d16e      	bne.n	80027f6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	4b38      	ldr	r3, [pc, #224]	; (8002800 <ADC_Enable+0x100>)
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00d      	beq.n	8002742 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	f043 0210 	orr.w	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002736:	f043 0201 	orr.w	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e05a      	b.n	80027f8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff f9b0 	bl	8001aac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800274c:	f7fe ffec 	bl	8001728 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a2b      	ldr	r2, [pc, #172]	; (8002804 <ADC_Enable+0x104>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d004      	beq.n	8002766 <ADC_Enable+0x66>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a29      	ldr	r2, [pc, #164]	; (8002808 <ADC_Enable+0x108>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <ADC_Enable+0x6a>
 8002766:	4b29      	ldr	r3, [pc, #164]	; (800280c <ADC_Enable+0x10c>)
 8002768:	e000      	b.n	800276c <ADC_Enable+0x6c>
 800276a:	4b29      	ldr	r3, [pc, #164]	; (8002810 <ADC_Enable+0x110>)
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff f941 	bl	80019f4 <LL_ADC_GetMultimode>
 8002772:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a23      	ldr	r2, [pc, #140]	; (8002808 <ADC_Enable+0x108>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d002      	beq.n	8002784 <ADC_Enable+0x84>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	e000      	b.n	8002786 <ADC_Enable+0x86>
 8002784:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <ADC_Enable+0x104>)
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	4293      	cmp	r3, r2
 800278c:	d02c      	beq.n	80027e8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d130      	bne.n	80027f6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002794:	e028      	b.n	80027e8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff f99a 	bl	8001ad4 <LL_ADC_IsEnabled>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d104      	bne.n	80027b0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff f97e 	bl	8001aac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027b0:	f7fe ffba 	bl	8001728 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d914      	bls.n	80027e8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d00d      	beq.n	80027e8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d0:	f043 0210 	orr.w	r2, r3, #16
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e007      	b.n	80027f8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d1cf      	bne.n	8002796 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	8000003f 	.word	0x8000003f
 8002804:	40022000 	.word	0x40022000
 8002808:	40022100 	.word	0x40022100
 800280c:	40022300 	.word	0x40022300
 8002810:	58026300 	.word	0x58026300

08002814 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002820:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002826:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800282a:	2b00      	cmp	r3, #0
 800282c:	d14b      	bne.n	80028c6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002832:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d021      	beq.n	800288c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff f82f 	bl	80018b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d032      	beq.n	80028be <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d12b      	bne.n	80028be <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d11f      	bne.n	80028be <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002882:	f043 0201 	orr.w	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	655a      	str	r2, [r3, #84]	; 0x54
 800288a:	e018      	b.n	80028be <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d111      	bne.n	80028be <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d105      	bne.n	80028be <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	f043 0201 	orr.w	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f7fe fb2a 	bl	8000f18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028c4:	e00e      	b.n	80028e4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f7ff fbba 	bl	800204c <HAL_ADC_ErrorCallback>
}
 80028d8:	e004      	b.n	80028e4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	4798      	blx	r3
}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7ff fb9c 	bl	8002038 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	f043 0204 	orr.w	r2, r3, #4
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f7ff fb8c 	bl	800204c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a79      	ldr	r2, [pc, #484]	; (8002b30 <ADC_ConfigureBoostMode+0x1f4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d004      	beq.n	8002958 <ADC_ConfigureBoostMode+0x1c>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a78      	ldr	r2, [pc, #480]	; (8002b34 <ADC_ConfigureBoostMode+0x1f8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d109      	bne.n	800296c <ADC_ConfigureBoostMode+0x30>
 8002958:	4b77      	ldr	r3, [pc, #476]	; (8002b38 <ADC_ConfigureBoostMode+0x1fc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e008      	b.n	800297e <ADC_ConfigureBoostMode+0x42>
 800296c:	4b73      	ldr	r3, [pc, #460]	; (8002b3c <ADC_ConfigureBoostMode+0x200>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf14      	ite	ne
 8002978:	2301      	movne	r3, #1
 800297a:	2300      	moveq	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d01c      	beq.n	80029bc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002982:	f003 fd95 	bl	80064b0 <HAL_RCC_GetHCLKFreq>
 8002986:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002990:	d010      	beq.n	80029b4 <ADC_ConfigureBoostMode+0x78>
 8002992:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002996:	d871      	bhi.n	8002a7c <ADC_ConfigureBoostMode+0x140>
 8002998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299c:	d002      	beq.n	80029a4 <ADC_ConfigureBoostMode+0x68>
 800299e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029a2:	d16b      	bne.n	8002a7c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	0c1b      	lsrs	r3, r3, #16
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	60fb      	str	r3, [r7, #12]
        break;
 80029b2:	e066      	b.n	8002a82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	60fb      	str	r3, [r7, #12]
        break;
 80029ba:	e062      	b.n	8002a82 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80029bc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80029c0:	f004 fce6 	bl	8007390 <HAL_RCCEx_GetPeriphCLKFreq>
 80029c4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80029ce:	d051      	beq.n	8002a74 <ADC_ConfigureBoostMode+0x138>
 80029d0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80029d4:	d854      	bhi.n	8002a80 <ADC_ConfigureBoostMode+0x144>
 80029d6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80029da:	d047      	beq.n	8002a6c <ADC_ConfigureBoostMode+0x130>
 80029dc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80029e0:	d84e      	bhi.n	8002a80 <ADC_ConfigureBoostMode+0x144>
 80029e2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80029e6:	d03d      	beq.n	8002a64 <ADC_ConfigureBoostMode+0x128>
 80029e8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80029ec:	d848      	bhi.n	8002a80 <ADC_ConfigureBoostMode+0x144>
 80029ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029f2:	d033      	beq.n	8002a5c <ADC_ConfigureBoostMode+0x120>
 80029f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029f8:	d842      	bhi.n	8002a80 <ADC_ConfigureBoostMode+0x144>
 80029fa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80029fe:	d029      	beq.n	8002a54 <ADC_ConfigureBoostMode+0x118>
 8002a00:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002a04:	d83c      	bhi.n	8002a80 <ADC_ConfigureBoostMode+0x144>
 8002a06:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002a0a:	d01a      	beq.n	8002a42 <ADC_ConfigureBoostMode+0x106>
 8002a0c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002a10:	d836      	bhi.n	8002a80 <ADC_ConfigureBoostMode+0x144>
 8002a12:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002a16:	d014      	beq.n	8002a42 <ADC_ConfigureBoostMode+0x106>
 8002a18:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002a1c:	d830      	bhi.n	8002a80 <ADC_ConfigureBoostMode+0x144>
 8002a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a22:	d00e      	beq.n	8002a42 <ADC_ConfigureBoostMode+0x106>
 8002a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a28:	d82a      	bhi.n	8002a80 <ADC_ConfigureBoostMode+0x144>
 8002a2a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a2e:	d008      	beq.n	8002a42 <ADC_ConfigureBoostMode+0x106>
 8002a30:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a34:	d824      	bhi.n	8002a80 <ADC_ConfigureBoostMode+0x144>
 8002a36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a3a:	d002      	beq.n	8002a42 <ADC_ConfigureBoostMode+0x106>
 8002a3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a40:	d11e      	bne.n	8002a80 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	0c9b      	lsrs	r3, r3, #18
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	60fb      	str	r3, [r7, #12]
        break;
 8002a52:	e016      	b.n	8002a82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	60fb      	str	r3, [r7, #12]
        break;
 8002a5a:	e012      	b.n	8002a82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	60fb      	str	r3, [r7, #12]
        break;
 8002a62:	e00e      	b.n	8002a82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	099b      	lsrs	r3, r3, #6
 8002a68:	60fb      	str	r3, [r7, #12]
        break;
 8002a6a:	e00a      	b.n	8002a82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	09db      	lsrs	r3, r3, #7
 8002a70:	60fb      	str	r3, [r7, #12]
        break;
 8002a72:	e006      	b.n	8002a82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	60fb      	str	r3, [r7, #12]
        break;
 8002a7a:	e002      	b.n	8002a82 <ADC_ConfigureBoostMode+0x146>
        break;
 8002a7c:	bf00      	nop
 8002a7e:	e000      	b.n	8002a82 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002a80:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002a82:	f7fe fe81 	bl	8001788 <HAL_GetREVID>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d815      	bhi.n	8002abc <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a2b      	ldr	r2, [pc, #172]	; (8002b40 <ADC_ConfigureBoostMode+0x204>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d908      	bls.n	8002aaa <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002aa8:	e03e      	b.n	8002b28 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ab8:	609a      	str	r2, [r3, #8]
}
 8002aba:	e035      	b.n	8002b28 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	085b      	lsrs	r3, r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4a1f      	ldr	r2, [pc, #124]	; (8002b44 <ADC_ConfigureBoostMode+0x208>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d808      	bhi.n	8002adc <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ad8:	609a      	str	r2, [r3, #8]
}
 8002ada:	e025      	b.n	8002b28 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a1a      	ldr	r2, [pc, #104]	; (8002b48 <ADC_ConfigureBoostMode+0x20c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d80a      	bhi.n	8002afa <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af6:	609a      	str	r2, [r3, #8]
}
 8002af8:	e016      	b.n	8002b28 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <ADC_ConfigureBoostMode+0x210>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d80a      	bhi.n	8002b18 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b14:	609a      	str	r2, [r3, #8]
}
 8002b16:	e007      	b.n	8002b28 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002b26:	609a      	str	r2, [r3, #8]
}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40022000 	.word	0x40022000
 8002b34:	40022100 	.word	0x40022100
 8002b38:	40022300 	.word	0x40022300
 8002b3c:	58026300 	.word	0x58026300
 8002b40:	01312d00 	.word	0x01312d00
 8002b44:	005f5e10 	.word	0x005f5e10
 8002b48:	00bebc20 	.word	0x00bebc20
 8002b4c:	017d7840 	.word	0x017d7840

08002b50 <LL_ADC_IsEnabled>:
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <LL_ADC_IsEnabled+0x18>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <LL_ADC_IsEnabled+0x1a>
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d101      	bne.n	8002b8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b9c:	b590      	push	{r4, r7, lr}
 8002b9e:	b09f      	sub	sp, #124	; 0x7c
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e0be      	b.n	8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a5c      	ldr	r2, [pc, #368]	; (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d102      	bne.n	8002bda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bd4:	4b5b      	ldr	r3, [pc, #364]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	e001      	b.n	8002bde <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10b      	bne.n	8002bfc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e09d      	b.n	8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ffb9 	bl	8002b76 <LL_ADC_REG_IsConversionOngoing>
 8002c04:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff ffb3 	bl	8002b76 <LL_ADC_REG_IsConversionOngoing>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d17f      	bne.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d17c      	bne.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a47      	ldr	r2, [pc, #284]	; (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d004      	beq.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a46      	ldr	r2, [pc, #280]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002c30:	4b45      	ldr	r3, [pc, #276]	; (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c32:	e000      	b.n	8002c36 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002c34:	4b45      	ldr	r3, [pc, #276]	; (8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c36:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d039      	beq.n	8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c50:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a3a      	ldr	r2, [pc, #232]	; (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d004      	beq.n	8002c66 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a38      	ldr	r2, [pc, #224]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d10e      	bne.n	8002c84 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c66:	4836      	ldr	r0, [pc, #216]	; (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c68:	f7ff ff72 	bl	8002b50 <LL_ADC_IsEnabled>
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	4835      	ldr	r0, [pc, #212]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c70:	f7ff ff6e 	bl	8002b50 <LL_ADC_IsEnabled>
 8002c74:	4603      	mov	r3, r0
 8002c76:	4323      	orrs	r3, r4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	e008      	b.n	8002c96 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002c84:	4832      	ldr	r0, [pc, #200]	; (8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002c86:	f7ff ff63 	bl	8002b50 <LL_ADC_IsEnabled>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bf0c      	ite	eq
 8002c90:	2301      	moveq	r3, #1
 8002c92:	2300      	movne	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d047      	beq.n	8002d2a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	6811      	ldr	r1, [r2, #0]
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	6892      	ldr	r2, [r2, #8]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	431a      	orrs	r2, r3
 8002cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cb2:	e03a      	b.n	8002d2a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cbe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d004      	beq.n	8002cd4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1d      	ldr	r2, [pc, #116]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d10e      	bne.n	8002cf2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002cd4:	481a      	ldr	r0, [pc, #104]	; (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002cd6:	f7ff ff3b 	bl	8002b50 <LL_ADC_IsEnabled>
 8002cda:	4604      	mov	r4, r0
 8002cdc:	4819      	ldr	r0, [pc, #100]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cde:	f7ff ff37 	bl	8002b50 <LL_ADC_IsEnabled>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4323      	orrs	r3, r4
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bf0c      	ite	eq
 8002cea:	2301      	moveq	r3, #1
 8002cec:	2300      	movne	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	e008      	b.n	8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002cf2:	4817      	ldr	r0, [pc, #92]	; (8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002cf4:	f7ff ff2c 	bl	8002b50 <LL_ADC_IsEnabled>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bf0c      	ite	eq
 8002cfe:	2301      	moveq	r3, #1
 8002d00:	2300      	movne	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d010      	beq.n	8002d2a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d12:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d14:	e009      	b.n	8002d2a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	f043 0220 	orr.w	r2, r3, #32
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002d28:	e000      	b.n	8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d2a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d34:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	377c      	adds	r7, #124	; 0x7c
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd90      	pop	{r4, r7, pc}
 8002d40:	40022000 	.word	0x40022000
 8002d44:	40022100 	.word	0x40022100
 8002d48:	40022300 	.word	0x40022300
 8002d4c:	58026300 	.word	0x58026300
 8002d50:	58026000 	.word	0x58026000
 8002d54:	fffff0e0 	.word	0xfffff0e0

08002d58 <__NVIC_SetPriorityGrouping>:
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <__NVIC_SetPriorityGrouping+0x40>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d74:	4013      	ands	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d86:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <__NVIC_SetPriorityGrouping+0x40>)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	60d3      	str	r3, [r2, #12]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000ed00 	.word	0xe000ed00
 8002d9c:	05fa0000 	.word	0x05fa0000

08002da0 <__NVIC_GetPriorityGrouping>:
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <__NVIC_GetPriorityGrouping+0x18>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	f003 0307 	and.w	r3, r3, #7
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <__NVIC_EnableIRQ>:
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	db0b      	blt.n	8002de6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	f003 021f 	and.w	r2, r3, #31
 8002dd4:	4907      	ldr	r1, [pc, #28]	; (8002df4 <__NVIC_EnableIRQ+0x38>)
 8002dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	2001      	movs	r0, #1
 8002dde:	fa00 f202 	lsl.w	r2, r0, r2
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000e100 	.word	0xe000e100

08002df8 <__NVIC_SetPriority>:
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	6039      	str	r1, [r7, #0]
 8002e02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	db0a      	blt.n	8002e22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	490c      	ldr	r1, [pc, #48]	; (8002e44 <__NVIC_SetPriority+0x4c>)
 8002e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e16:	0112      	lsls	r2, r2, #4
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e20:	e00a      	b.n	8002e38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	4908      	ldr	r1, [pc, #32]	; (8002e48 <__NVIC_SetPriority+0x50>)
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	3b04      	subs	r3, #4
 8002e30:	0112      	lsls	r2, r2, #4
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	440b      	add	r3, r1
 8002e36:	761a      	strb	r2, [r3, #24]
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000e100 	.word	0xe000e100
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <NVIC_EncodePriority>:
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b089      	sub	sp, #36	; 0x24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f1c3 0307 	rsb	r3, r3, #7
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	bf28      	it	cs
 8002e6a:	2304      	movcs	r3, #4
 8002e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3304      	adds	r3, #4
 8002e72:	2b06      	cmp	r3, #6
 8002e74:	d902      	bls.n	8002e7c <NVIC_EncodePriority+0x30>
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3b03      	subs	r3, #3
 8002e7a:	e000      	b.n	8002e7e <NVIC_EncodePriority+0x32>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e80:	f04f 32ff 	mov.w	r2, #4294967295
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43da      	mvns	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	401a      	ands	r2, r3
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e94:	f04f 31ff 	mov.w	r1, #4294967295
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	43d9      	mvns	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea4:	4313      	orrs	r3, r2
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3724      	adds	r7, #36	; 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ec4:	d301      	bcc.n	8002eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e00f      	b.n	8002eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <SysTick_Config+0x40>)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ed2:	210f      	movs	r1, #15
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed8:	f7ff ff8e 	bl	8002df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <SysTick_Config+0x40>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ee2:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <SysTick_Config+0x40>)
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	e000e010 	.word	0xe000e010

08002ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff ff29 	bl	8002d58 <__NVIC_SetPriorityGrouping>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b086      	sub	sp, #24
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	4603      	mov	r3, r0
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
 8002f1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f1c:	f7ff ff40 	bl	8002da0 <__NVIC_GetPriorityGrouping>
 8002f20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	6978      	ldr	r0, [r7, #20]
 8002f28:	f7ff ff90 	bl	8002e4c <NVIC_EncodePriority>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f32:	4611      	mov	r1, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ff5f 	bl	8002df8 <__NVIC_SetPriority>
}
 8002f3a:	bf00      	nop
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff ff33 	bl	8002dbc <__NVIC_EnableIRQ>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ffa4 	bl	8002eb4 <SysTick_Config>
 8002f6c:	4603      	mov	r3, r0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002f80:	f7fe fbd2 	bl	8001728 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e316      	b.n	80035be <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a66      	ldr	r2, [pc, #408]	; (8003130 <HAL_DMA_Init+0x1b8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d04a      	beq.n	8003030 <HAL_DMA_Init+0xb8>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a65      	ldr	r2, [pc, #404]	; (8003134 <HAL_DMA_Init+0x1bc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d045      	beq.n	8003030 <HAL_DMA_Init+0xb8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a63      	ldr	r2, [pc, #396]	; (8003138 <HAL_DMA_Init+0x1c0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d040      	beq.n	8003030 <HAL_DMA_Init+0xb8>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a62      	ldr	r2, [pc, #392]	; (800313c <HAL_DMA_Init+0x1c4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d03b      	beq.n	8003030 <HAL_DMA_Init+0xb8>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a60      	ldr	r2, [pc, #384]	; (8003140 <HAL_DMA_Init+0x1c8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d036      	beq.n	8003030 <HAL_DMA_Init+0xb8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a5f      	ldr	r2, [pc, #380]	; (8003144 <HAL_DMA_Init+0x1cc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d031      	beq.n	8003030 <HAL_DMA_Init+0xb8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a5d      	ldr	r2, [pc, #372]	; (8003148 <HAL_DMA_Init+0x1d0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d02c      	beq.n	8003030 <HAL_DMA_Init+0xb8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a5c      	ldr	r2, [pc, #368]	; (800314c <HAL_DMA_Init+0x1d4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d027      	beq.n	8003030 <HAL_DMA_Init+0xb8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a5a      	ldr	r2, [pc, #360]	; (8003150 <HAL_DMA_Init+0x1d8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d022      	beq.n	8003030 <HAL_DMA_Init+0xb8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a59      	ldr	r2, [pc, #356]	; (8003154 <HAL_DMA_Init+0x1dc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d01d      	beq.n	8003030 <HAL_DMA_Init+0xb8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a57      	ldr	r2, [pc, #348]	; (8003158 <HAL_DMA_Init+0x1e0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d018      	beq.n	8003030 <HAL_DMA_Init+0xb8>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a56      	ldr	r2, [pc, #344]	; (800315c <HAL_DMA_Init+0x1e4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d013      	beq.n	8003030 <HAL_DMA_Init+0xb8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a54      	ldr	r2, [pc, #336]	; (8003160 <HAL_DMA_Init+0x1e8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00e      	beq.n	8003030 <HAL_DMA_Init+0xb8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a53      	ldr	r2, [pc, #332]	; (8003164 <HAL_DMA_Init+0x1ec>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d009      	beq.n	8003030 <HAL_DMA_Init+0xb8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a51      	ldr	r2, [pc, #324]	; (8003168 <HAL_DMA_Init+0x1f0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d004      	beq.n	8003030 <HAL_DMA_Init+0xb8>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a50      	ldr	r2, [pc, #320]	; (800316c <HAL_DMA_Init+0x1f4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d101      	bne.n	8003034 <HAL_DMA_Init+0xbc>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <HAL_DMA_Init+0xbe>
 8003034:	2300      	movs	r3, #0
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 813b 	beq.w	80032b2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a37      	ldr	r2, [pc, #220]	; (8003130 <HAL_DMA_Init+0x1b8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d04a      	beq.n	80030ec <HAL_DMA_Init+0x174>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a36      	ldr	r2, [pc, #216]	; (8003134 <HAL_DMA_Init+0x1bc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d045      	beq.n	80030ec <HAL_DMA_Init+0x174>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a34      	ldr	r2, [pc, #208]	; (8003138 <HAL_DMA_Init+0x1c0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d040      	beq.n	80030ec <HAL_DMA_Init+0x174>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a33      	ldr	r2, [pc, #204]	; (800313c <HAL_DMA_Init+0x1c4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d03b      	beq.n	80030ec <HAL_DMA_Init+0x174>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a31      	ldr	r2, [pc, #196]	; (8003140 <HAL_DMA_Init+0x1c8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d036      	beq.n	80030ec <HAL_DMA_Init+0x174>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a30      	ldr	r2, [pc, #192]	; (8003144 <HAL_DMA_Init+0x1cc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d031      	beq.n	80030ec <HAL_DMA_Init+0x174>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a2e      	ldr	r2, [pc, #184]	; (8003148 <HAL_DMA_Init+0x1d0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d02c      	beq.n	80030ec <HAL_DMA_Init+0x174>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a2d      	ldr	r2, [pc, #180]	; (800314c <HAL_DMA_Init+0x1d4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d027      	beq.n	80030ec <HAL_DMA_Init+0x174>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a2b      	ldr	r2, [pc, #172]	; (8003150 <HAL_DMA_Init+0x1d8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d022      	beq.n	80030ec <HAL_DMA_Init+0x174>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a2a      	ldr	r2, [pc, #168]	; (8003154 <HAL_DMA_Init+0x1dc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d01d      	beq.n	80030ec <HAL_DMA_Init+0x174>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a28      	ldr	r2, [pc, #160]	; (8003158 <HAL_DMA_Init+0x1e0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d018      	beq.n	80030ec <HAL_DMA_Init+0x174>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a27      	ldr	r2, [pc, #156]	; (800315c <HAL_DMA_Init+0x1e4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d013      	beq.n	80030ec <HAL_DMA_Init+0x174>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a25      	ldr	r2, [pc, #148]	; (8003160 <HAL_DMA_Init+0x1e8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00e      	beq.n	80030ec <HAL_DMA_Init+0x174>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a24      	ldr	r2, [pc, #144]	; (8003164 <HAL_DMA_Init+0x1ec>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d009      	beq.n	80030ec <HAL_DMA_Init+0x174>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a22      	ldr	r2, [pc, #136]	; (8003168 <HAL_DMA_Init+0x1f0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d004      	beq.n	80030ec <HAL_DMA_Init+0x174>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a21      	ldr	r2, [pc, #132]	; (800316c <HAL_DMA_Init+0x1f4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d108      	bne.n	80030fe <HAL_DMA_Init+0x186>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0201 	bic.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	e007      	b.n	800310e <HAL_DMA_Init+0x196>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800310e:	e02f      	b.n	8003170 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003110:	f7fe fb0a 	bl	8001728 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b05      	cmp	r3, #5
 800311c:	d928      	bls.n	8003170 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2203      	movs	r2, #3
 8003128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e246      	b.n	80035be <HAL_DMA_Init+0x646>
 8003130:	40020010 	.word	0x40020010
 8003134:	40020028 	.word	0x40020028
 8003138:	40020040 	.word	0x40020040
 800313c:	40020058 	.word	0x40020058
 8003140:	40020070 	.word	0x40020070
 8003144:	40020088 	.word	0x40020088
 8003148:	400200a0 	.word	0x400200a0
 800314c:	400200b8 	.word	0x400200b8
 8003150:	40020410 	.word	0x40020410
 8003154:	40020428 	.word	0x40020428
 8003158:	40020440 	.word	0x40020440
 800315c:	40020458 	.word	0x40020458
 8003160:	40020470 	.word	0x40020470
 8003164:	40020488 	.word	0x40020488
 8003168:	400204a0 	.word	0x400204a0
 800316c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1c8      	bne.n	8003110 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4b83      	ldr	r3, [pc, #524]	; (8003398 <HAL_DMA_Init+0x420>)
 800318a:	4013      	ands	r3, r2
 800318c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003196:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d107      	bne.n	80031d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	4313      	orrs	r3, r2
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80031d4:	4b71      	ldr	r3, [pc, #452]	; (800339c <HAL_DMA_Init+0x424>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	4b71      	ldr	r3, [pc, #452]	; (80033a0 <HAL_DMA_Init+0x428>)
 80031da:	4013      	ands	r3, r2
 80031dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e0:	d328      	bcc.n	8003234 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b28      	cmp	r3, #40	; 0x28
 80031e8:	d903      	bls.n	80031f2 <HAL_DMA_Init+0x27a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b2e      	cmp	r3, #46	; 0x2e
 80031f0:	d917      	bls.n	8003222 <HAL_DMA_Init+0x2aa>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b3e      	cmp	r3, #62	; 0x3e
 80031f8:	d903      	bls.n	8003202 <HAL_DMA_Init+0x28a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b42      	cmp	r3, #66	; 0x42
 8003200:	d90f      	bls.n	8003222 <HAL_DMA_Init+0x2aa>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b46      	cmp	r3, #70	; 0x46
 8003208:	d903      	bls.n	8003212 <HAL_DMA_Init+0x29a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b48      	cmp	r3, #72	; 0x48
 8003210:	d907      	bls.n	8003222 <HAL_DMA_Init+0x2aa>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b4e      	cmp	r3, #78	; 0x4e
 8003218:	d905      	bls.n	8003226 <HAL_DMA_Init+0x2ae>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b52      	cmp	r3, #82	; 0x52
 8003220:	d801      	bhi.n	8003226 <HAL_DMA_Init+0x2ae>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <HAL_DMA_Init+0x2b0>
 8003226:	2300      	movs	r3, #0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003232:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f023 0307 	bic.w	r3, r3, #7
 800324a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	2b04      	cmp	r3, #4
 800325c:	d117      	bne.n	800328e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4313      	orrs	r3, r2
 8003266:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00e      	beq.n	800328e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f001 fdcf 	bl	8004e14 <DMA_CheckFifoParam>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2240      	movs	r2, #64	; 0x40
 8003280:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e197      	b.n	80035be <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f001 fd0a 	bl	8004cb0 <DMA_CalcBaseAndBitshift>
 800329c:	4603      	mov	r3, r0
 800329e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	223f      	movs	r2, #63	; 0x3f
 80032aa:	409a      	lsls	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	e0cd      	b.n	800344e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a3b      	ldr	r2, [pc, #236]	; (80033a4 <HAL_DMA_Init+0x42c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d022      	beq.n	8003302 <HAL_DMA_Init+0x38a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a39      	ldr	r2, [pc, #228]	; (80033a8 <HAL_DMA_Init+0x430>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01d      	beq.n	8003302 <HAL_DMA_Init+0x38a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a38      	ldr	r2, [pc, #224]	; (80033ac <HAL_DMA_Init+0x434>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d018      	beq.n	8003302 <HAL_DMA_Init+0x38a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a36      	ldr	r2, [pc, #216]	; (80033b0 <HAL_DMA_Init+0x438>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <HAL_DMA_Init+0x38a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a35      	ldr	r2, [pc, #212]	; (80033b4 <HAL_DMA_Init+0x43c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00e      	beq.n	8003302 <HAL_DMA_Init+0x38a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a33      	ldr	r2, [pc, #204]	; (80033b8 <HAL_DMA_Init+0x440>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d009      	beq.n	8003302 <HAL_DMA_Init+0x38a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a32      	ldr	r2, [pc, #200]	; (80033bc <HAL_DMA_Init+0x444>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d004      	beq.n	8003302 <HAL_DMA_Init+0x38a>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a30      	ldr	r2, [pc, #192]	; (80033c0 <HAL_DMA_Init+0x448>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d101      	bne.n	8003306 <HAL_DMA_Init+0x38e>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <HAL_DMA_Init+0x390>
 8003306:	2300      	movs	r3, #0
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 8097 	beq.w	800343c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a24      	ldr	r2, [pc, #144]	; (80033a4 <HAL_DMA_Init+0x42c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d021      	beq.n	800335c <HAL_DMA_Init+0x3e4>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <HAL_DMA_Init+0x430>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01c      	beq.n	800335c <HAL_DMA_Init+0x3e4>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a21      	ldr	r2, [pc, #132]	; (80033ac <HAL_DMA_Init+0x434>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d017      	beq.n	800335c <HAL_DMA_Init+0x3e4>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a1f      	ldr	r2, [pc, #124]	; (80033b0 <HAL_DMA_Init+0x438>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d012      	beq.n	800335c <HAL_DMA_Init+0x3e4>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <HAL_DMA_Init+0x43c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00d      	beq.n	800335c <HAL_DMA_Init+0x3e4>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1c      	ldr	r2, [pc, #112]	; (80033b8 <HAL_DMA_Init+0x440>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d008      	beq.n	800335c <HAL_DMA_Init+0x3e4>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1b      	ldr	r2, [pc, #108]	; (80033bc <HAL_DMA_Init+0x444>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d003      	beq.n	800335c <HAL_DMA_Init+0x3e4>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a19      	ldr	r2, [pc, #100]	; (80033c0 <HAL_DMA_Init+0x448>)
 800335a:	4293      	cmp	r3, r2
 800335c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2202      	movs	r2, #2
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <HAL_DMA_Init+0x44c>)
 800337a:	4013      	ands	r3, r2
 800337c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b40      	cmp	r3, #64	; 0x40
 8003384:	d020      	beq.n	80033c8 <HAL_DMA_Init+0x450>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b80      	cmp	r3, #128	; 0x80
 800338c:	d102      	bne.n	8003394 <HAL_DMA_Init+0x41c>
 800338e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003392:	e01a      	b.n	80033ca <HAL_DMA_Init+0x452>
 8003394:	2300      	movs	r3, #0
 8003396:	e018      	b.n	80033ca <HAL_DMA_Init+0x452>
 8003398:	fe10803f 	.word	0xfe10803f
 800339c:	5c001000 	.word	0x5c001000
 80033a0:	ffff0000 	.word	0xffff0000
 80033a4:	58025408 	.word	0x58025408
 80033a8:	5802541c 	.word	0x5802541c
 80033ac:	58025430 	.word	0x58025430
 80033b0:	58025444 	.word	0x58025444
 80033b4:	58025458 	.word	0x58025458
 80033b8:	5802546c 	.word	0x5802546c
 80033bc:	58025480 	.word	0x58025480
 80033c0:	58025494 	.word	0x58025494
 80033c4:	fffe000f 	.word	0xfffe000f
 80033c8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	68d2      	ldr	r2, [r2, #12]
 80033ce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80033d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80033e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80033e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80033f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80033f8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	4b6e      	ldr	r3, [pc, #440]	; (80035c8 <HAL_DMA_Init+0x650>)
 8003410:	4413      	add	r3, r2
 8003412:	4a6e      	ldr	r2, [pc, #440]	; (80035cc <HAL_DMA_Init+0x654>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	009a      	lsls	r2, r3, #2
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f001 fc45 	bl	8004cb0 <DMA_CalcBaseAndBitshift>
 8003426:	4603      	mov	r3, r0
 8003428:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	2201      	movs	r2, #1
 8003434:	409a      	lsls	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	e008      	b.n	800344e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2240      	movs	r2, #64	; 0x40
 8003440:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2203      	movs	r2, #3
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0b7      	b.n	80035be <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a5f      	ldr	r2, [pc, #380]	; (80035d0 <HAL_DMA_Init+0x658>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d072      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a5d      	ldr	r2, [pc, #372]	; (80035d4 <HAL_DMA_Init+0x65c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d06d      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a5c      	ldr	r2, [pc, #368]	; (80035d8 <HAL_DMA_Init+0x660>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d068      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a5a      	ldr	r2, [pc, #360]	; (80035dc <HAL_DMA_Init+0x664>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d063      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a59      	ldr	r2, [pc, #356]	; (80035e0 <HAL_DMA_Init+0x668>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d05e      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a57      	ldr	r2, [pc, #348]	; (80035e4 <HAL_DMA_Init+0x66c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d059      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a56      	ldr	r2, [pc, #344]	; (80035e8 <HAL_DMA_Init+0x670>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d054      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a54      	ldr	r2, [pc, #336]	; (80035ec <HAL_DMA_Init+0x674>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d04f      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a53      	ldr	r2, [pc, #332]	; (80035f0 <HAL_DMA_Init+0x678>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d04a      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a51      	ldr	r2, [pc, #324]	; (80035f4 <HAL_DMA_Init+0x67c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d045      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a50      	ldr	r2, [pc, #320]	; (80035f8 <HAL_DMA_Init+0x680>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d040      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a4e      	ldr	r2, [pc, #312]	; (80035fc <HAL_DMA_Init+0x684>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d03b      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a4d      	ldr	r2, [pc, #308]	; (8003600 <HAL_DMA_Init+0x688>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d036      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a4b      	ldr	r2, [pc, #300]	; (8003604 <HAL_DMA_Init+0x68c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d031      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a4a      	ldr	r2, [pc, #296]	; (8003608 <HAL_DMA_Init+0x690>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d02c      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a48      	ldr	r2, [pc, #288]	; (800360c <HAL_DMA_Init+0x694>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d027      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a47      	ldr	r2, [pc, #284]	; (8003610 <HAL_DMA_Init+0x698>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d022      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a45      	ldr	r2, [pc, #276]	; (8003614 <HAL_DMA_Init+0x69c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d01d      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a44      	ldr	r2, [pc, #272]	; (8003618 <HAL_DMA_Init+0x6a0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d018      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a42      	ldr	r2, [pc, #264]	; (800361c <HAL_DMA_Init+0x6a4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d013      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a41      	ldr	r2, [pc, #260]	; (8003620 <HAL_DMA_Init+0x6a8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00e      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a3f      	ldr	r2, [pc, #252]	; (8003624 <HAL_DMA_Init+0x6ac>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d009      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a3e      	ldr	r2, [pc, #248]	; (8003628 <HAL_DMA_Init+0x6b0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d004      	beq.n	800353e <HAL_DMA_Init+0x5c6>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a3c      	ldr	r2, [pc, #240]	; (800362c <HAL_DMA_Init+0x6b4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_DMA_Init+0x5ca>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_DMA_Init+0x5cc>
 8003542:	2300      	movs	r3, #0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d032      	beq.n	80035ae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f001 fcdf 	bl	8004f0c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b80      	cmp	r3, #128	; 0x80
 8003554:	d102      	bne.n	800355c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003570:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d010      	beq.n	800359c <HAL_DMA_Init+0x624>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b08      	cmp	r3, #8
 8003580:	d80c      	bhi.n	800359c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f001 fd5c 	bl	8005040 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	e008      	b.n	80035ae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	a7fdabf8 	.word	0xa7fdabf8
 80035cc:	cccccccd 	.word	0xcccccccd
 80035d0:	40020010 	.word	0x40020010
 80035d4:	40020028 	.word	0x40020028
 80035d8:	40020040 	.word	0x40020040
 80035dc:	40020058 	.word	0x40020058
 80035e0:	40020070 	.word	0x40020070
 80035e4:	40020088 	.word	0x40020088
 80035e8:	400200a0 	.word	0x400200a0
 80035ec:	400200b8 	.word	0x400200b8
 80035f0:	40020410 	.word	0x40020410
 80035f4:	40020428 	.word	0x40020428
 80035f8:	40020440 	.word	0x40020440
 80035fc:	40020458 	.word	0x40020458
 8003600:	40020470 	.word	0x40020470
 8003604:	40020488 	.word	0x40020488
 8003608:	400204a0 	.word	0x400204a0
 800360c:	400204b8 	.word	0x400204b8
 8003610:	58025408 	.word	0x58025408
 8003614:	5802541c 	.word	0x5802541c
 8003618:	58025430 	.word	0x58025430
 800361c:	58025444 	.word	0x58025444
 8003620:	58025458 	.word	0x58025458
 8003624:	5802546c 	.word	0x5802546c
 8003628:	58025480 	.word	0x58025480
 800362c:	58025494 	.word	0x58025494

08003630 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e226      	b.n	8003a9a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_DMA_Start_IT+0x2a>
 8003656:	2302      	movs	r3, #2
 8003658:	e21f      	b.n	8003a9a <HAL_DMA_Start_IT+0x46a>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b01      	cmp	r3, #1
 800366c:	f040 820a 	bne.w	8003a84 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a68      	ldr	r2, [pc, #416]	; (8003824 <HAL_DMA_Start_IT+0x1f4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d04a      	beq.n	800371e <HAL_DMA_Start_IT+0xee>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a66      	ldr	r2, [pc, #408]	; (8003828 <HAL_DMA_Start_IT+0x1f8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d045      	beq.n	800371e <HAL_DMA_Start_IT+0xee>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a65      	ldr	r2, [pc, #404]	; (800382c <HAL_DMA_Start_IT+0x1fc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d040      	beq.n	800371e <HAL_DMA_Start_IT+0xee>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a63      	ldr	r2, [pc, #396]	; (8003830 <HAL_DMA_Start_IT+0x200>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d03b      	beq.n	800371e <HAL_DMA_Start_IT+0xee>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a62      	ldr	r2, [pc, #392]	; (8003834 <HAL_DMA_Start_IT+0x204>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d036      	beq.n	800371e <HAL_DMA_Start_IT+0xee>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a60      	ldr	r2, [pc, #384]	; (8003838 <HAL_DMA_Start_IT+0x208>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d031      	beq.n	800371e <HAL_DMA_Start_IT+0xee>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a5f      	ldr	r2, [pc, #380]	; (800383c <HAL_DMA_Start_IT+0x20c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d02c      	beq.n	800371e <HAL_DMA_Start_IT+0xee>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a5d      	ldr	r2, [pc, #372]	; (8003840 <HAL_DMA_Start_IT+0x210>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d027      	beq.n	800371e <HAL_DMA_Start_IT+0xee>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a5c      	ldr	r2, [pc, #368]	; (8003844 <HAL_DMA_Start_IT+0x214>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d022      	beq.n	800371e <HAL_DMA_Start_IT+0xee>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a5a      	ldr	r2, [pc, #360]	; (8003848 <HAL_DMA_Start_IT+0x218>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01d      	beq.n	800371e <HAL_DMA_Start_IT+0xee>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a59      	ldr	r2, [pc, #356]	; (800384c <HAL_DMA_Start_IT+0x21c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d018      	beq.n	800371e <HAL_DMA_Start_IT+0xee>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a57      	ldr	r2, [pc, #348]	; (8003850 <HAL_DMA_Start_IT+0x220>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <HAL_DMA_Start_IT+0xee>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a56      	ldr	r2, [pc, #344]	; (8003854 <HAL_DMA_Start_IT+0x224>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00e      	beq.n	800371e <HAL_DMA_Start_IT+0xee>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a54      	ldr	r2, [pc, #336]	; (8003858 <HAL_DMA_Start_IT+0x228>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d009      	beq.n	800371e <HAL_DMA_Start_IT+0xee>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a53      	ldr	r2, [pc, #332]	; (800385c <HAL_DMA_Start_IT+0x22c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <HAL_DMA_Start_IT+0xee>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a51      	ldr	r2, [pc, #324]	; (8003860 <HAL_DMA_Start_IT+0x230>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d108      	bne.n	8003730 <HAL_DMA_Start_IT+0x100>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0201 	bic.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e007      	b.n	8003740 <HAL_DMA_Start_IT+0x110>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f001 f906 	bl	8004958 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a34      	ldr	r2, [pc, #208]	; (8003824 <HAL_DMA_Start_IT+0x1f4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d04a      	beq.n	80037ec <HAL_DMA_Start_IT+0x1bc>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a33      	ldr	r2, [pc, #204]	; (8003828 <HAL_DMA_Start_IT+0x1f8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d045      	beq.n	80037ec <HAL_DMA_Start_IT+0x1bc>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a31      	ldr	r2, [pc, #196]	; (800382c <HAL_DMA_Start_IT+0x1fc>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d040      	beq.n	80037ec <HAL_DMA_Start_IT+0x1bc>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a30      	ldr	r2, [pc, #192]	; (8003830 <HAL_DMA_Start_IT+0x200>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d03b      	beq.n	80037ec <HAL_DMA_Start_IT+0x1bc>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a2e      	ldr	r2, [pc, #184]	; (8003834 <HAL_DMA_Start_IT+0x204>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d036      	beq.n	80037ec <HAL_DMA_Start_IT+0x1bc>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a2d      	ldr	r2, [pc, #180]	; (8003838 <HAL_DMA_Start_IT+0x208>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d031      	beq.n	80037ec <HAL_DMA_Start_IT+0x1bc>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a2b      	ldr	r2, [pc, #172]	; (800383c <HAL_DMA_Start_IT+0x20c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d02c      	beq.n	80037ec <HAL_DMA_Start_IT+0x1bc>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a2a      	ldr	r2, [pc, #168]	; (8003840 <HAL_DMA_Start_IT+0x210>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d027      	beq.n	80037ec <HAL_DMA_Start_IT+0x1bc>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a28      	ldr	r2, [pc, #160]	; (8003844 <HAL_DMA_Start_IT+0x214>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d022      	beq.n	80037ec <HAL_DMA_Start_IT+0x1bc>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a27      	ldr	r2, [pc, #156]	; (8003848 <HAL_DMA_Start_IT+0x218>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d01d      	beq.n	80037ec <HAL_DMA_Start_IT+0x1bc>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a25      	ldr	r2, [pc, #148]	; (800384c <HAL_DMA_Start_IT+0x21c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d018      	beq.n	80037ec <HAL_DMA_Start_IT+0x1bc>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a24      	ldr	r2, [pc, #144]	; (8003850 <HAL_DMA_Start_IT+0x220>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d013      	beq.n	80037ec <HAL_DMA_Start_IT+0x1bc>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a22      	ldr	r2, [pc, #136]	; (8003854 <HAL_DMA_Start_IT+0x224>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00e      	beq.n	80037ec <HAL_DMA_Start_IT+0x1bc>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a21      	ldr	r2, [pc, #132]	; (8003858 <HAL_DMA_Start_IT+0x228>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d009      	beq.n	80037ec <HAL_DMA_Start_IT+0x1bc>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1f      	ldr	r2, [pc, #124]	; (800385c <HAL_DMA_Start_IT+0x22c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d004      	beq.n	80037ec <HAL_DMA_Start_IT+0x1bc>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1e      	ldr	r2, [pc, #120]	; (8003860 <HAL_DMA_Start_IT+0x230>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d101      	bne.n	80037f0 <HAL_DMA_Start_IT+0x1c0>
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <HAL_DMA_Start_IT+0x1c2>
 80037f0:	2300      	movs	r3, #0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d036      	beq.n	8003864 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 021e 	bic.w	r2, r3, #30
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0216 	orr.w	r2, r2, #22
 8003808:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d03e      	beq.n	8003890 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0208 	orr.w	r2, r2, #8
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e035      	b.n	8003890 <HAL_DMA_Start_IT+0x260>
 8003824:	40020010 	.word	0x40020010
 8003828:	40020028 	.word	0x40020028
 800382c:	40020040 	.word	0x40020040
 8003830:	40020058 	.word	0x40020058
 8003834:	40020070 	.word	0x40020070
 8003838:	40020088 	.word	0x40020088
 800383c:	400200a0 	.word	0x400200a0
 8003840:	400200b8 	.word	0x400200b8
 8003844:	40020410 	.word	0x40020410
 8003848:	40020428 	.word	0x40020428
 800384c:	40020440 	.word	0x40020440
 8003850:	40020458 	.word	0x40020458
 8003854:	40020470 	.word	0x40020470
 8003858:	40020488 	.word	0x40020488
 800385c:	400204a0 	.word	0x400204a0
 8003860:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 020e 	bic.w	r2, r3, #14
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 020a 	orr.w	r2, r2, #10
 8003876:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0204 	orr.w	r2, r2, #4
 800388e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a83      	ldr	r2, [pc, #524]	; (8003aa4 <HAL_DMA_Start_IT+0x474>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d072      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a82      	ldr	r2, [pc, #520]	; (8003aa8 <HAL_DMA_Start_IT+0x478>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d06d      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a80      	ldr	r2, [pc, #512]	; (8003aac <HAL_DMA_Start_IT+0x47c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d068      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a7f      	ldr	r2, [pc, #508]	; (8003ab0 <HAL_DMA_Start_IT+0x480>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d063      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a7d      	ldr	r2, [pc, #500]	; (8003ab4 <HAL_DMA_Start_IT+0x484>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d05e      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a7c      	ldr	r2, [pc, #496]	; (8003ab8 <HAL_DMA_Start_IT+0x488>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d059      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a7a      	ldr	r2, [pc, #488]	; (8003abc <HAL_DMA_Start_IT+0x48c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d054      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a79      	ldr	r2, [pc, #484]	; (8003ac0 <HAL_DMA_Start_IT+0x490>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d04f      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a77      	ldr	r2, [pc, #476]	; (8003ac4 <HAL_DMA_Start_IT+0x494>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d04a      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a76      	ldr	r2, [pc, #472]	; (8003ac8 <HAL_DMA_Start_IT+0x498>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d045      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a74      	ldr	r2, [pc, #464]	; (8003acc <HAL_DMA_Start_IT+0x49c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d040      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a73      	ldr	r2, [pc, #460]	; (8003ad0 <HAL_DMA_Start_IT+0x4a0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d03b      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a71      	ldr	r2, [pc, #452]	; (8003ad4 <HAL_DMA_Start_IT+0x4a4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d036      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a70      	ldr	r2, [pc, #448]	; (8003ad8 <HAL_DMA_Start_IT+0x4a8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d031      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a6e      	ldr	r2, [pc, #440]	; (8003adc <HAL_DMA_Start_IT+0x4ac>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d02c      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a6d      	ldr	r2, [pc, #436]	; (8003ae0 <HAL_DMA_Start_IT+0x4b0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d027      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a6b      	ldr	r2, [pc, #428]	; (8003ae4 <HAL_DMA_Start_IT+0x4b4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d022      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6a      	ldr	r2, [pc, #424]	; (8003ae8 <HAL_DMA_Start_IT+0x4b8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d01d      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a68      	ldr	r2, [pc, #416]	; (8003aec <HAL_DMA_Start_IT+0x4bc>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d018      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a67      	ldr	r2, [pc, #412]	; (8003af0 <HAL_DMA_Start_IT+0x4c0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a65      	ldr	r2, [pc, #404]	; (8003af4 <HAL_DMA_Start_IT+0x4c4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00e      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a64      	ldr	r2, [pc, #400]	; (8003af8 <HAL_DMA_Start_IT+0x4c8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a62      	ldr	r2, [pc, #392]	; (8003afc <HAL_DMA_Start_IT+0x4cc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_DMA_Start_IT+0x350>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a61      	ldr	r2, [pc, #388]	; (8003b00 <HAL_DMA_Start_IT+0x4d0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d101      	bne.n	8003984 <HAL_DMA_Start_IT+0x354>
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <HAL_DMA_Start_IT+0x356>
 8003984:	2300      	movs	r3, #0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d01a      	beq.n	80039c0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d007      	beq.n	80039a8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d007      	beq.n	80039c0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a37      	ldr	r2, [pc, #220]	; (8003aa4 <HAL_DMA_Start_IT+0x474>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d04a      	beq.n	8003a60 <HAL_DMA_Start_IT+0x430>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a36      	ldr	r2, [pc, #216]	; (8003aa8 <HAL_DMA_Start_IT+0x478>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d045      	beq.n	8003a60 <HAL_DMA_Start_IT+0x430>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a34      	ldr	r2, [pc, #208]	; (8003aac <HAL_DMA_Start_IT+0x47c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d040      	beq.n	8003a60 <HAL_DMA_Start_IT+0x430>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a33      	ldr	r2, [pc, #204]	; (8003ab0 <HAL_DMA_Start_IT+0x480>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d03b      	beq.n	8003a60 <HAL_DMA_Start_IT+0x430>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a31      	ldr	r2, [pc, #196]	; (8003ab4 <HAL_DMA_Start_IT+0x484>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d036      	beq.n	8003a60 <HAL_DMA_Start_IT+0x430>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a30      	ldr	r2, [pc, #192]	; (8003ab8 <HAL_DMA_Start_IT+0x488>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d031      	beq.n	8003a60 <HAL_DMA_Start_IT+0x430>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a2e      	ldr	r2, [pc, #184]	; (8003abc <HAL_DMA_Start_IT+0x48c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d02c      	beq.n	8003a60 <HAL_DMA_Start_IT+0x430>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a2d      	ldr	r2, [pc, #180]	; (8003ac0 <HAL_DMA_Start_IT+0x490>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d027      	beq.n	8003a60 <HAL_DMA_Start_IT+0x430>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a2b      	ldr	r2, [pc, #172]	; (8003ac4 <HAL_DMA_Start_IT+0x494>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d022      	beq.n	8003a60 <HAL_DMA_Start_IT+0x430>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2a      	ldr	r2, [pc, #168]	; (8003ac8 <HAL_DMA_Start_IT+0x498>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d01d      	beq.n	8003a60 <HAL_DMA_Start_IT+0x430>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a28      	ldr	r2, [pc, #160]	; (8003acc <HAL_DMA_Start_IT+0x49c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d018      	beq.n	8003a60 <HAL_DMA_Start_IT+0x430>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a27      	ldr	r2, [pc, #156]	; (8003ad0 <HAL_DMA_Start_IT+0x4a0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d013      	beq.n	8003a60 <HAL_DMA_Start_IT+0x430>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a25      	ldr	r2, [pc, #148]	; (8003ad4 <HAL_DMA_Start_IT+0x4a4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00e      	beq.n	8003a60 <HAL_DMA_Start_IT+0x430>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a24      	ldr	r2, [pc, #144]	; (8003ad8 <HAL_DMA_Start_IT+0x4a8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d009      	beq.n	8003a60 <HAL_DMA_Start_IT+0x430>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a22      	ldr	r2, [pc, #136]	; (8003adc <HAL_DMA_Start_IT+0x4ac>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d004      	beq.n	8003a60 <HAL_DMA_Start_IT+0x430>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a21      	ldr	r2, [pc, #132]	; (8003ae0 <HAL_DMA_Start_IT+0x4b0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d108      	bne.n	8003a72 <HAL_DMA_Start_IT+0x442>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e012      	b.n	8003a98 <HAL_DMA_Start_IT+0x468>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0201 	orr.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	e009      	b.n	8003a98 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40020010 	.word	0x40020010
 8003aa8:	40020028 	.word	0x40020028
 8003aac:	40020040 	.word	0x40020040
 8003ab0:	40020058 	.word	0x40020058
 8003ab4:	40020070 	.word	0x40020070
 8003ab8:	40020088 	.word	0x40020088
 8003abc:	400200a0 	.word	0x400200a0
 8003ac0:	400200b8 	.word	0x400200b8
 8003ac4:	40020410 	.word	0x40020410
 8003ac8:	40020428 	.word	0x40020428
 8003acc:	40020440 	.word	0x40020440
 8003ad0:	40020458 	.word	0x40020458
 8003ad4:	40020470 	.word	0x40020470
 8003ad8:	40020488 	.word	0x40020488
 8003adc:	400204a0 	.word	0x400204a0
 8003ae0:	400204b8 	.word	0x400204b8
 8003ae4:	58025408 	.word	0x58025408
 8003ae8:	5802541c 	.word	0x5802541c
 8003aec:	58025430 	.word	0x58025430
 8003af0:	58025444 	.word	0x58025444
 8003af4:	58025458 	.word	0x58025458
 8003af8:	5802546c 	.word	0x5802546c
 8003afc:	58025480 	.word	0x58025480
 8003b00:	58025494 	.word	0x58025494

08003b04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08a      	sub	sp, #40	; 0x28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b10:	4b67      	ldr	r3, [pc, #412]	; (8003cb0 <HAL_DMA_IRQHandler+0x1ac>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a67      	ldr	r2, [pc, #412]	; (8003cb4 <HAL_DMA_IRQHandler+0x1b0>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	0a9b      	lsrs	r3, r3, #10
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b22:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b28:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a5f      	ldr	r2, [pc, #380]	; (8003cb8 <HAL_DMA_IRQHandler+0x1b4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d04a      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xd2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a5d      	ldr	r2, [pc, #372]	; (8003cbc <HAL_DMA_IRQHandler+0x1b8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d045      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xd2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a5c      	ldr	r2, [pc, #368]	; (8003cc0 <HAL_DMA_IRQHandler+0x1bc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d040      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xd2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a5a      	ldr	r2, [pc, #360]	; (8003cc4 <HAL_DMA_IRQHandler+0x1c0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d03b      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xd2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a59      	ldr	r2, [pc, #356]	; (8003cc8 <HAL_DMA_IRQHandler+0x1c4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d036      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xd2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a57      	ldr	r2, [pc, #348]	; (8003ccc <HAL_DMA_IRQHandler+0x1c8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d031      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xd2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a56      	ldr	r2, [pc, #344]	; (8003cd0 <HAL_DMA_IRQHandler+0x1cc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d02c      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xd2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a54      	ldr	r2, [pc, #336]	; (8003cd4 <HAL_DMA_IRQHandler+0x1d0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d027      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xd2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a53      	ldr	r2, [pc, #332]	; (8003cd8 <HAL_DMA_IRQHandler+0x1d4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d022      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xd2>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a51      	ldr	r2, [pc, #324]	; (8003cdc <HAL_DMA_IRQHandler+0x1d8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d01d      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xd2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a50      	ldr	r2, [pc, #320]	; (8003ce0 <HAL_DMA_IRQHandler+0x1dc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d018      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xd2>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a4e      	ldr	r2, [pc, #312]	; (8003ce4 <HAL_DMA_IRQHandler+0x1e0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xd2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a4d      	ldr	r2, [pc, #308]	; (8003ce8 <HAL_DMA_IRQHandler+0x1e4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xd2>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a4b      	ldr	r2, [pc, #300]	; (8003cec <HAL_DMA_IRQHandler+0x1e8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d009      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xd2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a4a      	ldr	r2, [pc, #296]	; (8003cf0 <HAL_DMA_IRQHandler+0x1ec>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d004      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xd2>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a48      	ldr	r2, [pc, #288]	; (8003cf4 <HAL_DMA_IRQHandler+0x1f0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d101      	bne.n	8003bda <HAL_DMA_IRQHandler+0xd6>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <HAL_DMA_IRQHandler+0xd8>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 842b 	beq.w	8004438 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	2208      	movs	r2, #8
 8003bec:	409a      	lsls	r2, r3
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80a2 	beq.w	8003d3c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a2e      	ldr	r2, [pc, #184]	; (8003cb8 <HAL_DMA_IRQHandler+0x1b4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d04a      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x194>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a2d      	ldr	r2, [pc, #180]	; (8003cbc <HAL_DMA_IRQHandler+0x1b8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d045      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x194>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a2b      	ldr	r2, [pc, #172]	; (8003cc0 <HAL_DMA_IRQHandler+0x1bc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d040      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x194>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a2a      	ldr	r2, [pc, #168]	; (8003cc4 <HAL_DMA_IRQHandler+0x1c0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d03b      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x194>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a28      	ldr	r2, [pc, #160]	; (8003cc8 <HAL_DMA_IRQHandler+0x1c4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d036      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x194>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a27      	ldr	r2, [pc, #156]	; (8003ccc <HAL_DMA_IRQHandler+0x1c8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d031      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x194>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a25      	ldr	r2, [pc, #148]	; (8003cd0 <HAL_DMA_IRQHandler+0x1cc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d02c      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x194>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a24      	ldr	r2, [pc, #144]	; (8003cd4 <HAL_DMA_IRQHandler+0x1d0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d027      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x194>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a22      	ldr	r2, [pc, #136]	; (8003cd8 <HAL_DMA_IRQHandler+0x1d4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d022      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x194>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a21      	ldr	r2, [pc, #132]	; (8003cdc <HAL_DMA_IRQHandler+0x1d8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d01d      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x194>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <HAL_DMA_IRQHandler+0x1dc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d018      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x194>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a1e      	ldr	r2, [pc, #120]	; (8003ce4 <HAL_DMA_IRQHandler+0x1e0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d013      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x194>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <HAL_DMA_IRQHandler+0x1e4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d00e      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x194>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1b      	ldr	r2, [pc, #108]	; (8003cec <HAL_DMA_IRQHandler+0x1e8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d009      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x194>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a19      	ldr	r2, [pc, #100]	; (8003cf0 <HAL_DMA_IRQHandler+0x1ec>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d004      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x194>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a18      	ldr	r2, [pc, #96]	; (8003cf4 <HAL_DMA_IRQHandler+0x1f0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d12f      	bne.n	8003cf8 <HAL_DMA_IRQHandler+0x1f4>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bf14      	ite	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	2300      	moveq	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	e02e      	b.n	8003d0c <HAL_DMA_IRQHandler+0x208>
 8003cae:	bf00      	nop
 8003cb0:	24000000 	.word	0x24000000
 8003cb4:	1b4e81b5 	.word	0x1b4e81b5
 8003cb8:	40020010 	.word	0x40020010
 8003cbc:	40020028 	.word	0x40020028
 8003cc0:	40020040 	.word	0x40020040
 8003cc4:	40020058 	.word	0x40020058
 8003cc8:	40020070 	.word	0x40020070
 8003ccc:	40020088 	.word	0x40020088
 8003cd0:	400200a0 	.word	0x400200a0
 8003cd4:	400200b8 	.word	0x400200b8
 8003cd8:	40020410 	.word	0x40020410
 8003cdc:	40020428 	.word	0x40020428
 8003ce0:	40020440 	.word	0x40020440
 8003ce4:	40020458 	.word	0x40020458
 8003ce8:	40020470 	.word	0x40020470
 8003cec:	40020488 	.word	0x40020488
 8003cf0:	400204a0 	.word	0x400204a0
 8003cf4:	400204b8 	.word	0x400204b8
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bf14      	ite	ne
 8003d06:	2301      	movne	r3, #1
 8003d08:	2300      	moveq	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d015      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0204 	bic.w	r2, r2, #4
 8003d1e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	2208      	movs	r2, #8
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f043 0201 	orr.w	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d06e      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a69      	ldr	r2, [pc, #420]	; (8003efc <HAL_DMA_IRQHandler+0x3f8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d04a      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x2ee>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a67      	ldr	r2, [pc, #412]	; (8003f00 <HAL_DMA_IRQHandler+0x3fc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d045      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x2ee>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a66      	ldr	r2, [pc, #408]	; (8003f04 <HAL_DMA_IRQHandler+0x400>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d040      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x2ee>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a64      	ldr	r2, [pc, #400]	; (8003f08 <HAL_DMA_IRQHandler+0x404>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d03b      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x2ee>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a63      	ldr	r2, [pc, #396]	; (8003f0c <HAL_DMA_IRQHandler+0x408>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d036      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x2ee>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a61      	ldr	r2, [pc, #388]	; (8003f10 <HAL_DMA_IRQHandler+0x40c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d031      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x2ee>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a60      	ldr	r2, [pc, #384]	; (8003f14 <HAL_DMA_IRQHandler+0x410>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d02c      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x2ee>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a5e      	ldr	r2, [pc, #376]	; (8003f18 <HAL_DMA_IRQHandler+0x414>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d027      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x2ee>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a5d      	ldr	r2, [pc, #372]	; (8003f1c <HAL_DMA_IRQHandler+0x418>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d022      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x2ee>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a5b      	ldr	r2, [pc, #364]	; (8003f20 <HAL_DMA_IRQHandler+0x41c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01d      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x2ee>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a5a      	ldr	r2, [pc, #360]	; (8003f24 <HAL_DMA_IRQHandler+0x420>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d018      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x2ee>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a58      	ldr	r2, [pc, #352]	; (8003f28 <HAL_DMA_IRQHandler+0x424>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x2ee>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a57      	ldr	r2, [pc, #348]	; (8003f2c <HAL_DMA_IRQHandler+0x428>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00e      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x2ee>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a55      	ldr	r2, [pc, #340]	; (8003f30 <HAL_DMA_IRQHandler+0x42c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d009      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x2ee>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a54      	ldr	r2, [pc, #336]	; (8003f34 <HAL_DMA_IRQHandler+0x430>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d004      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x2ee>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a52      	ldr	r2, [pc, #328]	; (8003f38 <HAL_DMA_IRQHandler+0x434>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d10a      	bne.n	8003e08 <HAL_DMA_IRQHandler+0x304>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf14      	ite	ne
 8003e00:	2301      	movne	r3, #1
 8003e02:	2300      	moveq	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	e003      	b.n	8003e10 <HAL_DMA_IRQHandler+0x30c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00d      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e28:	f043 0202 	orr.w	r2, r3, #2
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	2204      	movs	r2, #4
 8003e3a:	409a      	lsls	r2, r3
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 808f 	beq.w	8003f64 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a2c      	ldr	r2, [pc, #176]	; (8003efc <HAL_DMA_IRQHandler+0x3f8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d04a      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x3e2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a2a      	ldr	r2, [pc, #168]	; (8003f00 <HAL_DMA_IRQHandler+0x3fc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d045      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x3e2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a29      	ldr	r2, [pc, #164]	; (8003f04 <HAL_DMA_IRQHandler+0x400>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d040      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x3e2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a27      	ldr	r2, [pc, #156]	; (8003f08 <HAL_DMA_IRQHandler+0x404>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d03b      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x3e2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a26      	ldr	r2, [pc, #152]	; (8003f0c <HAL_DMA_IRQHandler+0x408>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d036      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x3e2>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a24      	ldr	r2, [pc, #144]	; (8003f10 <HAL_DMA_IRQHandler+0x40c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d031      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x3e2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a23      	ldr	r2, [pc, #140]	; (8003f14 <HAL_DMA_IRQHandler+0x410>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d02c      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x3e2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a21      	ldr	r2, [pc, #132]	; (8003f18 <HAL_DMA_IRQHandler+0x414>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d027      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x3e2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a20      	ldr	r2, [pc, #128]	; (8003f1c <HAL_DMA_IRQHandler+0x418>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d022      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x3e2>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1e      	ldr	r2, [pc, #120]	; (8003f20 <HAL_DMA_IRQHandler+0x41c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d01d      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x3e2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1d      	ldr	r2, [pc, #116]	; (8003f24 <HAL_DMA_IRQHandler+0x420>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d018      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x3e2>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <HAL_DMA_IRQHandler+0x424>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x3e2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1a      	ldr	r2, [pc, #104]	; (8003f2c <HAL_DMA_IRQHandler+0x428>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x3e2>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <HAL_DMA_IRQHandler+0x42c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x3e2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a17      	ldr	r2, [pc, #92]	; (8003f34 <HAL_DMA_IRQHandler+0x430>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x3e2>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a15      	ldr	r2, [pc, #84]	; (8003f38 <HAL_DMA_IRQHandler+0x434>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d12a      	bne.n	8003f3c <HAL_DMA_IRQHandler+0x438>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf14      	ite	ne
 8003ef4:	2301      	movne	r3, #1
 8003ef6:	2300      	moveq	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	e023      	b.n	8003f44 <HAL_DMA_IRQHandler+0x440>
 8003efc:	40020010 	.word	0x40020010
 8003f00:	40020028 	.word	0x40020028
 8003f04:	40020040 	.word	0x40020040
 8003f08:	40020058 	.word	0x40020058
 8003f0c:	40020070 	.word	0x40020070
 8003f10:	40020088 	.word	0x40020088
 8003f14:	400200a0 	.word	0x400200a0
 8003f18:	400200b8 	.word	0x400200b8
 8003f1c:	40020410 	.word	0x40020410
 8003f20:	40020428 	.word	0x40020428
 8003f24:	40020440 	.word	0x40020440
 8003f28:	40020458 	.word	0x40020458
 8003f2c:	40020470 	.word	0x40020470
 8003f30:	40020488 	.word	0x40020488
 8003f34:	400204a0 	.word	0x400204a0
 8003f38:	400204b8 	.word	0x400204b8
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2300      	movs	r3, #0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00d      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	2204      	movs	r2, #4
 8003f52:	409a      	lsls	r2, r3
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5c:	f043 0204 	orr.w	r2, r3, #4
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	2210      	movs	r2, #16
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a6 	beq.w	80040c6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a85      	ldr	r2, [pc, #532]	; (8004194 <HAL_DMA_IRQHandler+0x690>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d04a      	beq.n	800401a <HAL_DMA_IRQHandler+0x516>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a83      	ldr	r2, [pc, #524]	; (8004198 <HAL_DMA_IRQHandler+0x694>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d045      	beq.n	800401a <HAL_DMA_IRQHandler+0x516>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a82      	ldr	r2, [pc, #520]	; (800419c <HAL_DMA_IRQHandler+0x698>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d040      	beq.n	800401a <HAL_DMA_IRQHandler+0x516>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a80      	ldr	r2, [pc, #512]	; (80041a0 <HAL_DMA_IRQHandler+0x69c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d03b      	beq.n	800401a <HAL_DMA_IRQHandler+0x516>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a7f      	ldr	r2, [pc, #508]	; (80041a4 <HAL_DMA_IRQHandler+0x6a0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d036      	beq.n	800401a <HAL_DMA_IRQHandler+0x516>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a7d      	ldr	r2, [pc, #500]	; (80041a8 <HAL_DMA_IRQHandler+0x6a4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d031      	beq.n	800401a <HAL_DMA_IRQHandler+0x516>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a7c      	ldr	r2, [pc, #496]	; (80041ac <HAL_DMA_IRQHandler+0x6a8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d02c      	beq.n	800401a <HAL_DMA_IRQHandler+0x516>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a7a      	ldr	r2, [pc, #488]	; (80041b0 <HAL_DMA_IRQHandler+0x6ac>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d027      	beq.n	800401a <HAL_DMA_IRQHandler+0x516>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a79      	ldr	r2, [pc, #484]	; (80041b4 <HAL_DMA_IRQHandler+0x6b0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d022      	beq.n	800401a <HAL_DMA_IRQHandler+0x516>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a77      	ldr	r2, [pc, #476]	; (80041b8 <HAL_DMA_IRQHandler+0x6b4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01d      	beq.n	800401a <HAL_DMA_IRQHandler+0x516>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a76      	ldr	r2, [pc, #472]	; (80041bc <HAL_DMA_IRQHandler+0x6b8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d018      	beq.n	800401a <HAL_DMA_IRQHandler+0x516>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a74      	ldr	r2, [pc, #464]	; (80041c0 <HAL_DMA_IRQHandler+0x6bc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <HAL_DMA_IRQHandler+0x516>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a73      	ldr	r2, [pc, #460]	; (80041c4 <HAL_DMA_IRQHandler+0x6c0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00e      	beq.n	800401a <HAL_DMA_IRQHandler+0x516>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a71      	ldr	r2, [pc, #452]	; (80041c8 <HAL_DMA_IRQHandler+0x6c4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d009      	beq.n	800401a <HAL_DMA_IRQHandler+0x516>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a70      	ldr	r2, [pc, #448]	; (80041cc <HAL_DMA_IRQHandler+0x6c8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <HAL_DMA_IRQHandler+0x516>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a6e      	ldr	r2, [pc, #440]	; (80041d0 <HAL_DMA_IRQHandler+0x6cc>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d10a      	bne.n	8004030 <HAL_DMA_IRQHandler+0x52c>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf14      	ite	ne
 8004028:	2301      	movne	r3, #1
 800402a:	2300      	moveq	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	e009      	b.n	8004044 <HAL_DMA_IRQHandler+0x540>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf14      	ite	ne
 800403e:	2301      	movne	r3, #1
 8004040:	2300      	moveq	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d03e      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	2210      	movs	r2, #16
 8004052:	409a      	lsls	r2, r3
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d018      	beq.n	8004098 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d108      	bne.n	8004086 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d024      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
 8004084:	e01f      	b.n	80040c6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01b      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
 8004096:	e016      	b.n	80040c6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d107      	bne.n	80040b6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0208 	bic.w	r2, r2, #8
 80040b4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	2220      	movs	r2, #32
 80040d0:	409a      	lsls	r2, r3
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	4013      	ands	r3, r2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8110 	beq.w	80042fc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a2c      	ldr	r2, [pc, #176]	; (8004194 <HAL_DMA_IRQHandler+0x690>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d04a      	beq.n	800417c <HAL_DMA_IRQHandler+0x678>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a2b      	ldr	r2, [pc, #172]	; (8004198 <HAL_DMA_IRQHandler+0x694>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d045      	beq.n	800417c <HAL_DMA_IRQHandler+0x678>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a29      	ldr	r2, [pc, #164]	; (800419c <HAL_DMA_IRQHandler+0x698>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d040      	beq.n	800417c <HAL_DMA_IRQHandler+0x678>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a28      	ldr	r2, [pc, #160]	; (80041a0 <HAL_DMA_IRQHandler+0x69c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d03b      	beq.n	800417c <HAL_DMA_IRQHandler+0x678>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a26      	ldr	r2, [pc, #152]	; (80041a4 <HAL_DMA_IRQHandler+0x6a0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d036      	beq.n	800417c <HAL_DMA_IRQHandler+0x678>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a25      	ldr	r2, [pc, #148]	; (80041a8 <HAL_DMA_IRQHandler+0x6a4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d031      	beq.n	800417c <HAL_DMA_IRQHandler+0x678>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a23      	ldr	r2, [pc, #140]	; (80041ac <HAL_DMA_IRQHandler+0x6a8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d02c      	beq.n	800417c <HAL_DMA_IRQHandler+0x678>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a22      	ldr	r2, [pc, #136]	; (80041b0 <HAL_DMA_IRQHandler+0x6ac>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d027      	beq.n	800417c <HAL_DMA_IRQHandler+0x678>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a20      	ldr	r2, [pc, #128]	; (80041b4 <HAL_DMA_IRQHandler+0x6b0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d022      	beq.n	800417c <HAL_DMA_IRQHandler+0x678>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a1f      	ldr	r2, [pc, #124]	; (80041b8 <HAL_DMA_IRQHandler+0x6b4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d01d      	beq.n	800417c <HAL_DMA_IRQHandler+0x678>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1d      	ldr	r2, [pc, #116]	; (80041bc <HAL_DMA_IRQHandler+0x6b8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d018      	beq.n	800417c <HAL_DMA_IRQHandler+0x678>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1c      	ldr	r2, [pc, #112]	; (80041c0 <HAL_DMA_IRQHandler+0x6bc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d013      	beq.n	800417c <HAL_DMA_IRQHandler+0x678>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1a      	ldr	r2, [pc, #104]	; (80041c4 <HAL_DMA_IRQHandler+0x6c0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00e      	beq.n	800417c <HAL_DMA_IRQHandler+0x678>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <HAL_DMA_IRQHandler+0x6c4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d009      	beq.n	800417c <HAL_DMA_IRQHandler+0x678>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a17      	ldr	r2, [pc, #92]	; (80041cc <HAL_DMA_IRQHandler+0x6c8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d004      	beq.n	800417c <HAL_DMA_IRQHandler+0x678>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <HAL_DMA_IRQHandler+0x6cc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d12b      	bne.n	80041d4 <HAL_DMA_IRQHandler+0x6d0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	bf14      	ite	ne
 800418a:	2301      	movne	r3, #1
 800418c:	2300      	moveq	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	e02a      	b.n	80041e8 <HAL_DMA_IRQHandler+0x6e4>
 8004192:	bf00      	nop
 8004194:	40020010 	.word	0x40020010
 8004198:	40020028 	.word	0x40020028
 800419c:	40020040 	.word	0x40020040
 80041a0:	40020058 	.word	0x40020058
 80041a4:	40020070 	.word	0x40020070
 80041a8:	40020088 	.word	0x40020088
 80041ac:	400200a0 	.word	0x400200a0
 80041b0:	400200b8 	.word	0x400200b8
 80041b4:	40020410 	.word	0x40020410
 80041b8:	40020428 	.word	0x40020428
 80041bc:	40020440 	.word	0x40020440
 80041c0:	40020458 	.word	0x40020458
 80041c4:	40020470 	.word	0x40020470
 80041c8:	40020488 	.word	0x40020488
 80041cc:	400204a0 	.word	0x400204a0
 80041d0:	400204b8 	.word	0x400204b8
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	bf14      	ite	ne
 80041e2:	2301      	movne	r3, #1
 80041e4:	2300      	moveq	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 8087 	beq.w	80042fc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f2:	f003 031f 	and.w	r3, r3, #31
 80041f6:	2220      	movs	r2, #32
 80041f8:	409a      	lsls	r2, r3
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b04      	cmp	r3, #4
 8004208:	d139      	bne.n	800427e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0216 	bic.w	r2, r2, #22
 8004218:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695a      	ldr	r2, [r3, #20]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004228:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <HAL_DMA_IRQHandler+0x736>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0208 	bic.w	r2, r2, #8
 8004248:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	223f      	movs	r2, #63	; 0x3f
 8004254:	409a      	lsls	r2, r3
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 834a 	beq.w	8004908 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	4798      	blx	r3
          }
          return;
 800427c:	e344      	b.n	8004908 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d018      	beq.n	80042be <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d108      	bne.n	80042ac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d02c      	beq.n	80042fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	4798      	blx	r3
 80042aa:	e027      	b.n	80042fc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d023      	beq.n	80042fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	4798      	blx	r3
 80042bc:	e01e      	b.n	80042fc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10f      	bne.n	80042ec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0210 	bic.w	r2, r2, #16
 80042da:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8306 	beq.w	8004912 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 8088 	beq.w	8004424 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2204      	movs	r2, #4
 8004318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a7a      	ldr	r2, [pc, #488]	; (800450c <HAL_DMA_IRQHandler+0xa08>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d04a      	beq.n	80043bc <HAL_DMA_IRQHandler+0x8b8>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a79      	ldr	r2, [pc, #484]	; (8004510 <HAL_DMA_IRQHandler+0xa0c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d045      	beq.n	80043bc <HAL_DMA_IRQHandler+0x8b8>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a77      	ldr	r2, [pc, #476]	; (8004514 <HAL_DMA_IRQHandler+0xa10>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d040      	beq.n	80043bc <HAL_DMA_IRQHandler+0x8b8>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a76      	ldr	r2, [pc, #472]	; (8004518 <HAL_DMA_IRQHandler+0xa14>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d03b      	beq.n	80043bc <HAL_DMA_IRQHandler+0x8b8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a74      	ldr	r2, [pc, #464]	; (800451c <HAL_DMA_IRQHandler+0xa18>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d036      	beq.n	80043bc <HAL_DMA_IRQHandler+0x8b8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a73      	ldr	r2, [pc, #460]	; (8004520 <HAL_DMA_IRQHandler+0xa1c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d031      	beq.n	80043bc <HAL_DMA_IRQHandler+0x8b8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a71      	ldr	r2, [pc, #452]	; (8004524 <HAL_DMA_IRQHandler+0xa20>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d02c      	beq.n	80043bc <HAL_DMA_IRQHandler+0x8b8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a70      	ldr	r2, [pc, #448]	; (8004528 <HAL_DMA_IRQHandler+0xa24>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d027      	beq.n	80043bc <HAL_DMA_IRQHandler+0x8b8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a6e      	ldr	r2, [pc, #440]	; (800452c <HAL_DMA_IRQHandler+0xa28>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d022      	beq.n	80043bc <HAL_DMA_IRQHandler+0x8b8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a6d      	ldr	r2, [pc, #436]	; (8004530 <HAL_DMA_IRQHandler+0xa2c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d01d      	beq.n	80043bc <HAL_DMA_IRQHandler+0x8b8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a6b      	ldr	r2, [pc, #428]	; (8004534 <HAL_DMA_IRQHandler+0xa30>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d018      	beq.n	80043bc <HAL_DMA_IRQHandler+0x8b8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a6a      	ldr	r2, [pc, #424]	; (8004538 <HAL_DMA_IRQHandler+0xa34>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d013      	beq.n	80043bc <HAL_DMA_IRQHandler+0x8b8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a68      	ldr	r2, [pc, #416]	; (800453c <HAL_DMA_IRQHandler+0xa38>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00e      	beq.n	80043bc <HAL_DMA_IRQHandler+0x8b8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a67      	ldr	r2, [pc, #412]	; (8004540 <HAL_DMA_IRQHandler+0xa3c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d009      	beq.n	80043bc <HAL_DMA_IRQHandler+0x8b8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a65      	ldr	r2, [pc, #404]	; (8004544 <HAL_DMA_IRQHandler+0xa40>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d004      	beq.n	80043bc <HAL_DMA_IRQHandler+0x8b8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a64      	ldr	r2, [pc, #400]	; (8004548 <HAL_DMA_IRQHandler+0xa44>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d108      	bne.n	80043ce <HAL_DMA_IRQHandler+0x8ca>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	e007      	b.n	80043de <HAL_DMA_IRQHandler+0x8da>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0201 	bic.w	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3301      	adds	r3, #1
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d307      	bcc.n	80043fa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1f2      	bne.n	80043de <HAL_DMA_IRQHandler+0x8da>
 80043f8:	e000      	b.n	80043fc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80043fa:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d004      	beq.n	800441c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2203      	movs	r2, #3
 8004416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800441a:	e003      	b.n	8004424 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 8272 	beq.w	8004912 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4798      	blx	r3
 8004436:	e26c      	b.n	8004912 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a43      	ldr	r2, [pc, #268]	; (800454c <HAL_DMA_IRQHandler+0xa48>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d022      	beq.n	8004488 <HAL_DMA_IRQHandler+0x984>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a42      	ldr	r2, [pc, #264]	; (8004550 <HAL_DMA_IRQHandler+0xa4c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d01d      	beq.n	8004488 <HAL_DMA_IRQHandler+0x984>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a40      	ldr	r2, [pc, #256]	; (8004554 <HAL_DMA_IRQHandler+0xa50>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d018      	beq.n	8004488 <HAL_DMA_IRQHandler+0x984>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a3f      	ldr	r2, [pc, #252]	; (8004558 <HAL_DMA_IRQHandler+0xa54>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d013      	beq.n	8004488 <HAL_DMA_IRQHandler+0x984>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a3d      	ldr	r2, [pc, #244]	; (800455c <HAL_DMA_IRQHandler+0xa58>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00e      	beq.n	8004488 <HAL_DMA_IRQHandler+0x984>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a3c      	ldr	r2, [pc, #240]	; (8004560 <HAL_DMA_IRQHandler+0xa5c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d009      	beq.n	8004488 <HAL_DMA_IRQHandler+0x984>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a3a      	ldr	r2, [pc, #232]	; (8004564 <HAL_DMA_IRQHandler+0xa60>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <HAL_DMA_IRQHandler+0x984>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a39      	ldr	r2, [pc, #228]	; (8004568 <HAL_DMA_IRQHandler+0xa64>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d101      	bne.n	800448c <HAL_DMA_IRQHandler+0x988>
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <HAL_DMA_IRQHandler+0x98a>
 800448c:	2300      	movs	r3, #0
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 823f 	beq.w	8004912 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a0:	f003 031f 	and.w	r3, r3, #31
 80044a4:	2204      	movs	r2, #4
 80044a6:	409a      	lsls	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80cd 	beq.w	800464c <HAL_DMA_IRQHandler+0xb48>
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80c7 	beq.w	800464c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c2:	f003 031f 	and.w	r3, r3, #31
 80044c6:	2204      	movs	r2, #4
 80044c8:	409a      	lsls	r2, r3
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d049      	beq.n	800456c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8210 	beq.w	800490c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044f4:	e20a      	b.n	800490c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 8206 	beq.w	800490c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004508:	e200      	b.n	800490c <HAL_DMA_IRQHandler+0xe08>
 800450a:	bf00      	nop
 800450c:	40020010 	.word	0x40020010
 8004510:	40020028 	.word	0x40020028
 8004514:	40020040 	.word	0x40020040
 8004518:	40020058 	.word	0x40020058
 800451c:	40020070 	.word	0x40020070
 8004520:	40020088 	.word	0x40020088
 8004524:	400200a0 	.word	0x400200a0
 8004528:	400200b8 	.word	0x400200b8
 800452c:	40020410 	.word	0x40020410
 8004530:	40020428 	.word	0x40020428
 8004534:	40020440 	.word	0x40020440
 8004538:	40020458 	.word	0x40020458
 800453c:	40020470 	.word	0x40020470
 8004540:	40020488 	.word	0x40020488
 8004544:	400204a0 	.word	0x400204a0
 8004548:	400204b8 	.word	0x400204b8
 800454c:	58025408 	.word	0x58025408
 8004550:	5802541c 	.word	0x5802541c
 8004554:	58025430 	.word	0x58025430
 8004558:	58025444 	.word	0x58025444
 800455c:	58025458 	.word	0x58025458
 8004560:	5802546c 	.word	0x5802546c
 8004564:	58025480 	.word	0x58025480
 8004568:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b00      	cmp	r3, #0
 8004574:	d160      	bne.n	8004638 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a8c      	ldr	r2, [pc, #560]	; (80047ac <HAL_DMA_IRQHandler+0xca8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d04a      	beq.n	8004616 <HAL_DMA_IRQHandler+0xb12>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a8a      	ldr	r2, [pc, #552]	; (80047b0 <HAL_DMA_IRQHandler+0xcac>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d045      	beq.n	8004616 <HAL_DMA_IRQHandler+0xb12>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a89      	ldr	r2, [pc, #548]	; (80047b4 <HAL_DMA_IRQHandler+0xcb0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d040      	beq.n	8004616 <HAL_DMA_IRQHandler+0xb12>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a87      	ldr	r2, [pc, #540]	; (80047b8 <HAL_DMA_IRQHandler+0xcb4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d03b      	beq.n	8004616 <HAL_DMA_IRQHandler+0xb12>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a86      	ldr	r2, [pc, #536]	; (80047bc <HAL_DMA_IRQHandler+0xcb8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d036      	beq.n	8004616 <HAL_DMA_IRQHandler+0xb12>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a84      	ldr	r2, [pc, #528]	; (80047c0 <HAL_DMA_IRQHandler+0xcbc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d031      	beq.n	8004616 <HAL_DMA_IRQHandler+0xb12>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a83      	ldr	r2, [pc, #524]	; (80047c4 <HAL_DMA_IRQHandler+0xcc0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d02c      	beq.n	8004616 <HAL_DMA_IRQHandler+0xb12>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a81      	ldr	r2, [pc, #516]	; (80047c8 <HAL_DMA_IRQHandler+0xcc4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d027      	beq.n	8004616 <HAL_DMA_IRQHandler+0xb12>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a80      	ldr	r2, [pc, #512]	; (80047cc <HAL_DMA_IRQHandler+0xcc8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d022      	beq.n	8004616 <HAL_DMA_IRQHandler+0xb12>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a7e      	ldr	r2, [pc, #504]	; (80047d0 <HAL_DMA_IRQHandler+0xccc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d01d      	beq.n	8004616 <HAL_DMA_IRQHandler+0xb12>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a7d      	ldr	r2, [pc, #500]	; (80047d4 <HAL_DMA_IRQHandler+0xcd0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d018      	beq.n	8004616 <HAL_DMA_IRQHandler+0xb12>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a7b      	ldr	r2, [pc, #492]	; (80047d8 <HAL_DMA_IRQHandler+0xcd4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d013      	beq.n	8004616 <HAL_DMA_IRQHandler+0xb12>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a7a      	ldr	r2, [pc, #488]	; (80047dc <HAL_DMA_IRQHandler+0xcd8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00e      	beq.n	8004616 <HAL_DMA_IRQHandler+0xb12>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a78      	ldr	r2, [pc, #480]	; (80047e0 <HAL_DMA_IRQHandler+0xcdc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d009      	beq.n	8004616 <HAL_DMA_IRQHandler+0xb12>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a77      	ldr	r2, [pc, #476]	; (80047e4 <HAL_DMA_IRQHandler+0xce0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d004      	beq.n	8004616 <HAL_DMA_IRQHandler+0xb12>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a75      	ldr	r2, [pc, #468]	; (80047e8 <HAL_DMA_IRQHandler+0xce4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d108      	bne.n	8004628 <HAL_DMA_IRQHandler+0xb24>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0208 	bic.w	r2, r2, #8
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	e007      	b.n	8004638 <HAL_DMA_IRQHandler+0xb34>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0204 	bic.w	r2, r2, #4
 8004636:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 8165 	beq.w	800490c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800464a:	e15f      	b.n	800490c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004650:	f003 031f 	and.w	r3, r3, #31
 8004654:	2202      	movs	r2, #2
 8004656:	409a      	lsls	r2, r3
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	4013      	ands	r3, r2
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 80c5 	beq.w	80047ec <HAL_DMA_IRQHandler+0xce8>
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80bf 	beq.w	80047ec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004672:	f003 031f 	and.w	r3, r3, #31
 8004676:	2202      	movs	r2, #2
 8004678:	409a      	lsls	r2, r3
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d018      	beq.n	80046ba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 813a 	beq.w	8004910 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046a4:	e134      	b.n	8004910 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 8130 	beq.w	8004910 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046b8:	e12a      	b.n	8004910 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d168      	bne.n	8004796 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a38      	ldr	r2, [pc, #224]	; (80047ac <HAL_DMA_IRQHandler+0xca8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d04a      	beq.n	8004764 <HAL_DMA_IRQHandler+0xc60>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a37      	ldr	r2, [pc, #220]	; (80047b0 <HAL_DMA_IRQHandler+0xcac>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d045      	beq.n	8004764 <HAL_DMA_IRQHandler+0xc60>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a35      	ldr	r2, [pc, #212]	; (80047b4 <HAL_DMA_IRQHandler+0xcb0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d040      	beq.n	8004764 <HAL_DMA_IRQHandler+0xc60>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a34      	ldr	r2, [pc, #208]	; (80047b8 <HAL_DMA_IRQHandler+0xcb4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d03b      	beq.n	8004764 <HAL_DMA_IRQHandler+0xc60>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a32      	ldr	r2, [pc, #200]	; (80047bc <HAL_DMA_IRQHandler+0xcb8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d036      	beq.n	8004764 <HAL_DMA_IRQHandler+0xc60>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a31      	ldr	r2, [pc, #196]	; (80047c0 <HAL_DMA_IRQHandler+0xcbc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d031      	beq.n	8004764 <HAL_DMA_IRQHandler+0xc60>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a2f      	ldr	r2, [pc, #188]	; (80047c4 <HAL_DMA_IRQHandler+0xcc0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d02c      	beq.n	8004764 <HAL_DMA_IRQHandler+0xc60>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2e      	ldr	r2, [pc, #184]	; (80047c8 <HAL_DMA_IRQHandler+0xcc4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d027      	beq.n	8004764 <HAL_DMA_IRQHandler+0xc60>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2c      	ldr	r2, [pc, #176]	; (80047cc <HAL_DMA_IRQHandler+0xcc8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d022      	beq.n	8004764 <HAL_DMA_IRQHandler+0xc60>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a2b      	ldr	r2, [pc, #172]	; (80047d0 <HAL_DMA_IRQHandler+0xccc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d01d      	beq.n	8004764 <HAL_DMA_IRQHandler+0xc60>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a29      	ldr	r2, [pc, #164]	; (80047d4 <HAL_DMA_IRQHandler+0xcd0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d018      	beq.n	8004764 <HAL_DMA_IRQHandler+0xc60>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a28      	ldr	r2, [pc, #160]	; (80047d8 <HAL_DMA_IRQHandler+0xcd4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <HAL_DMA_IRQHandler+0xc60>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a26      	ldr	r2, [pc, #152]	; (80047dc <HAL_DMA_IRQHandler+0xcd8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00e      	beq.n	8004764 <HAL_DMA_IRQHandler+0xc60>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a25      	ldr	r2, [pc, #148]	; (80047e0 <HAL_DMA_IRQHandler+0xcdc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_DMA_IRQHandler+0xc60>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a23      	ldr	r2, [pc, #140]	; (80047e4 <HAL_DMA_IRQHandler+0xce0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_DMA_IRQHandler+0xc60>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a22      	ldr	r2, [pc, #136]	; (80047e8 <HAL_DMA_IRQHandler+0xce4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d108      	bne.n	8004776 <HAL_DMA_IRQHandler+0xc72>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0214 	bic.w	r2, r2, #20
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	e007      	b.n	8004786 <HAL_DMA_IRQHandler+0xc82>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 020a 	bic.w	r2, r2, #10
 8004784:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 80b8 	beq.w	8004910 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047a8:	e0b2      	b.n	8004910 <HAL_DMA_IRQHandler+0xe0c>
 80047aa:	bf00      	nop
 80047ac:	40020010 	.word	0x40020010
 80047b0:	40020028 	.word	0x40020028
 80047b4:	40020040 	.word	0x40020040
 80047b8:	40020058 	.word	0x40020058
 80047bc:	40020070 	.word	0x40020070
 80047c0:	40020088 	.word	0x40020088
 80047c4:	400200a0 	.word	0x400200a0
 80047c8:	400200b8 	.word	0x400200b8
 80047cc:	40020410 	.word	0x40020410
 80047d0:	40020428 	.word	0x40020428
 80047d4:	40020440 	.word	0x40020440
 80047d8:	40020458 	.word	0x40020458
 80047dc:	40020470 	.word	0x40020470
 80047e0:	40020488 	.word	0x40020488
 80047e4:	400204a0 	.word	0x400204a0
 80047e8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	2208      	movs	r2, #8
 80047f6:	409a      	lsls	r2, r3
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8088 	beq.w	8004912 <HAL_DMA_IRQHandler+0xe0e>
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 8082 	beq.w	8004912 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a41      	ldr	r2, [pc, #260]	; (8004918 <HAL_DMA_IRQHandler+0xe14>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d04a      	beq.n	80048ae <HAL_DMA_IRQHandler+0xdaa>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a3f      	ldr	r2, [pc, #252]	; (800491c <HAL_DMA_IRQHandler+0xe18>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d045      	beq.n	80048ae <HAL_DMA_IRQHandler+0xdaa>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a3e      	ldr	r2, [pc, #248]	; (8004920 <HAL_DMA_IRQHandler+0xe1c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d040      	beq.n	80048ae <HAL_DMA_IRQHandler+0xdaa>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a3c      	ldr	r2, [pc, #240]	; (8004924 <HAL_DMA_IRQHandler+0xe20>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d03b      	beq.n	80048ae <HAL_DMA_IRQHandler+0xdaa>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a3b      	ldr	r2, [pc, #236]	; (8004928 <HAL_DMA_IRQHandler+0xe24>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d036      	beq.n	80048ae <HAL_DMA_IRQHandler+0xdaa>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a39      	ldr	r2, [pc, #228]	; (800492c <HAL_DMA_IRQHandler+0xe28>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d031      	beq.n	80048ae <HAL_DMA_IRQHandler+0xdaa>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a38      	ldr	r2, [pc, #224]	; (8004930 <HAL_DMA_IRQHandler+0xe2c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d02c      	beq.n	80048ae <HAL_DMA_IRQHandler+0xdaa>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a36      	ldr	r2, [pc, #216]	; (8004934 <HAL_DMA_IRQHandler+0xe30>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d027      	beq.n	80048ae <HAL_DMA_IRQHandler+0xdaa>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a35      	ldr	r2, [pc, #212]	; (8004938 <HAL_DMA_IRQHandler+0xe34>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d022      	beq.n	80048ae <HAL_DMA_IRQHandler+0xdaa>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a33      	ldr	r2, [pc, #204]	; (800493c <HAL_DMA_IRQHandler+0xe38>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01d      	beq.n	80048ae <HAL_DMA_IRQHandler+0xdaa>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a32      	ldr	r2, [pc, #200]	; (8004940 <HAL_DMA_IRQHandler+0xe3c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d018      	beq.n	80048ae <HAL_DMA_IRQHandler+0xdaa>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a30      	ldr	r2, [pc, #192]	; (8004944 <HAL_DMA_IRQHandler+0xe40>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d013      	beq.n	80048ae <HAL_DMA_IRQHandler+0xdaa>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a2f      	ldr	r2, [pc, #188]	; (8004948 <HAL_DMA_IRQHandler+0xe44>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00e      	beq.n	80048ae <HAL_DMA_IRQHandler+0xdaa>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a2d      	ldr	r2, [pc, #180]	; (800494c <HAL_DMA_IRQHandler+0xe48>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d009      	beq.n	80048ae <HAL_DMA_IRQHandler+0xdaa>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a2c      	ldr	r2, [pc, #176]	; (8004950 <HAL_DMA_IRQHandler+0xe4c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d004      	beq.n	80048ae <HAL_DMA_IRQHandler+0xdaa>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a2a      	ldr	r2, [pc, #168]	; (8004954 <HAL_DMA_IRQHandler+0xe50>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d108      	bne.n	80048c0 <HAL_DMA_IRQHandler+0xdbc>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 021c 	bic.w	r2, r2, #28
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	e007      	b.n	80048d0 <HAL_DMA_IRQHandler+0xdcc>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 020e 	bic.w	r2, r2, #14
 80048ce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	2201      	movs	r2, #1
 80048da:	409a      	lsls	r2, r3
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	4798      	blx	r3
 8004906:	e004      	b.n	8004912 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004908:	bf00      	nop
 800490a:	e002      	b.n	8004912 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800490c:	bf00      	nop
 800490e:	e000      	b.n	8004912 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004910:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004912:	3728      	adds	r7, #40	; 0x28
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40020010 	.word	0x40020010
 800491c:	40020028 	.word	0x40020028
 8004920:	40020040 	.word	0x40020040
 8004924:	40020058 	.word	0x40020058
 8004928:	40020070 	.word	0x40020070
 800492c:	40020088 	.word	0x40020088
 8004930:	400200a0 	.word	0x400200a0
 8004934:	400200b8 	.word	0x400200b8
 8004938:	40020410 	.word	0x40020410
 800493c:	40020428 	.word	0x40020428
 8004940:	40020440 	.word	0x40020440
 8004944:	40020458 	.word	0x40020458
 8004948:	40020470 	.word	0x40020470
 800494c:	40020488 	.word	0x40020488
 8004950:	400204a0 	.word	0x400204a0
 8004954:	400204b8 	.word	0x400204b8

08004958 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004970:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a84      	ldr	r2, [pc, #528]	; (8004b88 <DMA_SetConfig+0x230>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d072      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a82      	ldr	r2, [pc, #520]	; (8004b8c <DMA_SetConfig+0x234>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d06d      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a81      	ldr	r2, [pc, #516]	; (8004b90 <DMA_SetConfig+0x238>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d068      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a7f      	ldr	r2, [pc, #508]	; (8004b94 <DMA_SetConfig+0x23c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d063      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a7e      	ldr	r2, [pc, #504]	; (8004b98 <DMA_SetConfig+0x240>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d05e      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a7c      	ldr	r2, [pc, #496]	; (8004b9c <DMA_SetConfig+0x244>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d059      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a7b      	ldr	r2, [pc, #492]	; (8004ba0 <DMA_SetConfig+0x248>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d054      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a79      	ldr	r2, [pc, #484]	; (8004ba4 <DMA_SetConfig+0x24c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d04f      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a78      	ldr	r2, [pc, #480]	; (8004ba8 <DMA_SetConfig+0x250>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d04a      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a76      	ldr	r2, [pc, #472]	; (8004bac <DMA_SetConfig+0x254>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d045      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a75      	ldr	r2, [pc, #468]	; (8004bb0 <DMA_SetConfig+0x258>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d040      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a73      	ldr	r2, [pc, #460]	; (8004bb4 <DMA_SetConfig+0x25c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d03b      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a72      	ldr	r2, [pc, #456]	; (8004bb8 <DMA_SetConfig+0x260>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d036      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a70      	ldr	r2, [pc, #448]	; (8004bbc <DMA_SetConfig+0x264>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d031      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a6f      	ldr	r2, [pc, #444]	; (8004bc0 <DMA_SetConfig+0x268>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d02c      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a6d      	ldr	r2, [pc, #436]	; (8004bc4 <DMA_SetConfig+0x26c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d027      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a6c      	ldr	r2, [pc, #432]	; (8004bc8 <DMA_SetConfig+0x270>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d022      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a6a      	ldr	r2, [pc, #424]	; (8004bcc <DMA_SetConfig+0x274>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d01d      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a69      	ldr	r2, [pc, #420]	; (8004bd0 <DMA_SetConfig+0x278>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d018      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a67      	ldr	r2, [pc, #412]	; (8004bd4 <DMA_SetConfig+0x27c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a66      	ldr	r2, [pc, #408]	; (8004bd8 <DMA_SetConfig+0x280>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00e      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a64      	ldr	r2, [pc, #400]	; (8004bdc <DMA_SetConfig+0x284>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d009      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a63      	ldr	r2, [pc, #396]	; (8004be0 <DMA_SetConfig+0x288>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <DMA_SetConfig+0x10a>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a61      	ldr	r2, [pc, #388]	; (8004be4 <DMA_SetConfig+0x28c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d101      	bne.n	8004a66 <DMA_SetConfig+0x10e>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <DMA_SetConfig+0x110>
 8004a66:	2300      	movs	r3, #0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00d      	beq.n	8004a88 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a74:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d004      	beq.n	8004a88 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a86:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a3e      	ldr	r2, [pc, #248]	; (8004b88 <DMA_SetConfig+0x230>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d04a      	beq.n	8004b28 <DMA_SetConfig+0x1d0>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a3d      	ldr	r2, [pc, #244]	; (8004b8c <DMA_SetConfig+0x234>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d045      	beq.n	8004b28 <DMA_SetConfig+0x1d0>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a3b      	ldr	r2, [pc, #236]	; (8004b90 <DMA_SetConfig+0x238>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d040      	beq.n	8004b28 <DMA_SetConfig+0x1d0>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a3a      	ldr	r2, [pc, #232]	; (8004b94 <DMA_SetConfig+0x23c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d03b      	beq.n	8004b28 <DMA_SetConfig+0x1d0>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a38      	ldr	r2, [pc, #224]	; (8004b98 <DMA_SetConfig+0x240>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d036      	beq.n	8004b28 <DMA_SetConfig+0x1d0>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a37      	ldr	r2, [pc, #220]	; (8004b9c <DMA_SetConfig+0x244>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d031      	beq.n	8004b28 <DMA_SetConfig+0x1d0>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a35      	ldr	r2, [pc, #212]	; (8004ba0 <DMA_SetConfig+0x248>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d02c      	beq.n	8004b28 <DMA_SetConfig+0x1d0>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a34      	ldr	r2, [pc, #208]	; (8004ba4 <DMA_SetConfig+0x24c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d027      	beq.n	8004b28 <DMA_SetConfig+0x1d0>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a32      	ldr	r2, [pc, #200]	; (8004ba8 <DMA_SetConfig+0x250>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d022      	beq.n	8004b28 <DMA_SetConfig+0x1d0>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a31      	ldr	r2, [pc, #196]	; (8004bac <DMA_SetConfig+0x254>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d01d      	beq.n	8004b28 <DMA_SetConfig+0x1d0>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a2f      	ldr	r2, [pc, #188]	; (8004bb0 <DMA_SetConfig+0x258>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d018      	beq.n	8004b28 <DMA_SetConfig+0x1d0>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a2e      	ldr	r2, [pc, #184]	; (8004bb4 <DMA_SetConfig+0x25c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d013      	beq.n	8004b28 <DMA_SetConfig+0x1d0>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a2c      	ldr	r2, [pc, #176]	; (8004bb8 <DMA_SetConfig+0x260>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00e      	beq.n	8004b28 <DMA_SetConfig+0x1d0>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a2b      	ldr	r2, [pc, #172]	; (8004bbc <DMA_SetConfig+0x264>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d009      	beq.n	8004b28 <DMA_SetConfig+0x1d0>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a29      	ldr	r2, [pc, #164]	; (8004bc0 <DMA_SetConfig+0x268>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <DMA_SetConfig+0x1d0>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a28      	ldr	r2, [pc, #160]	; (8004bc4 <DMA_SetConfig+0x26c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d101      	bne.n	8004b2c <DMA_SetConfig+0x1d4>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <DMA_SetConfig+0x1d6>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d05a      	beq.n	8004be8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b36:	f003 031f 	and.w	r3, r3, #31
 8004b3a:	223f      	movs	r2, #63	; 0x3f
 8004b3c:	409a      	lsls	r2, r3
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b50:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b40      	cmp	r3, #64	; 0x40
 8004b60:	d108      	bne.n	8004b74 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b72:	e087      	b.n	8004c84 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	60da      	str	r2, [r3, #12]
}
 8004b84:	e07e      	b.n	8004c84 <DMA_SetConfig+0x32c>
 8004b86:	bf00      	nop
 8004b88:	40020010 	.word	0x40020010
 8004b8c:	40020028 	.word	0x40020028
 8004b90:	40020040 	.word	0x40020040
 8004b94:	40020058 	.word	0x40020058
 8004b98:	40020070 	.word	0x40020070
 8004b9c:	40020088 	.word	0x40020088
 8004ba0:	400200a0 	.word	0x400200a0
 8004ba4:	400200b8 	.word	0x400200b8
 8004ba8:	40020410 	.word	0x40020410
 8004bac:	40020428 	.word	0x40020428
 8004bb0:	40020440 	.word	0x40020440
 8004bb4:	40020458 	.word	0x40020458
 8004bb8:	40020470 	.word	0x40020470
 8004bbc:	40020488 	.word	0x40020488
 8004bc0:	400204a0 	.word	0x400204a0
 8004bc4:	400204b8 	.word	0x400204b8
 8004bc8:	58025408 	.word	0x58025408
 8004bcc:	5802541c 	.word	0x5802541c
 8004bd0:	58025430 	.word	0x58025430
 8004bd4:	58025444 	.word	0x58025444
 8004bd8:	58025458 	.word	0x58025458
 8004bdc:	5802546c 	.word	0x5802546c
 8004be0:	58025480 	.word	0x58025480
 8004be4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a28      	ldr	r2, [pc, #160]	; (8004c90 <DMA_SetConfig+0x338>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d022      	beq.n	8004c38 <DMA_SetConfig+0x2e0>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a27      	ldr	r2, [pc, #156]	; (8004c94 <DMA_SetConfig+0x33c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d01d      	beq.n	8004c38 <DMA_SetConfig+0x2e0>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a25      	ldr	r2, [pc, #148]	; (8004c98 <DMA_SetConfig+0x340>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d018      	beq.n	8004c38 <DMA_SetConfig+0x2e0>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a24      	ldr	r2, [pc, #144]	; (8004c9c <DMA_SetConfig+0x344>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d013      	beq.n	8004c38 <DMA_SetConfig+0x2e0>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a22      	ldr	r2, [pc, #136]	; (8004ca0 <DMA_SetConfig+0x348>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00e      	beq.n	8004c38 <DMA_SetConfig+0x2e0>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a21      	ldr	r2, [pc, #132]	; (8004ca4 <DMA_SetConfig+0x34c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d009      	beq.n	8004c38 <DMA_SetConfig+0x2e0>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a1f      	ldr	r2, [pc, #124]	; (8004ca8 <DMA_SetConfig+0x350>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d004      	beq.n	8004c38 <DMA_SetConfig+0x2e0>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1e      	ldr	r2, [pc, #120]	; (8004cac <DMA_SetConfig+0x354>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d101      	bne.n	8004c3c <DMA_SetConfig+0x2e4>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <DMA_SetConfig+0x2e6>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d020      	beq.n	8004c84 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c46:	f003 031f 	and.w	r3, r3, #31
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	409a      	lsls	r2, r3
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b40      	cmp	r3, #64	; 0x40
 8004c60:	d108      	bne.n	8004c74 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	60da      	str	r2, [r3, #12]
}
 8004c72:	e007      	b.n	8004c84 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	60da      	str	r2, [r3, #12]
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	58025408 	.word	0x58025408
 8004c94:	5802541c 	.word	0x5802541c
 8004c98:	58025430 	.word	0x58025430
 8004c9c:	58025444 	.word	0x58025444
 8004ca0:	58025458 	.word	0x58025458
 8004ca4:	5802546c 	.word	0x5802546c
 8004ca8:	58025480 	.word	0x58025480
 8004cac:	58025494 	.word	0x58025494

08004cb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a42      	ldr	r2, [pc, #264]	; (8004dc8 <DMA_CalcBaseAndBitshift+0x118>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d04a      	beq.n	8004d58 <DMA_CalcBaseAndBitshift+0xa8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a41      	ldr	r2, [pc, #260]	; (8004dcc <DMA_CalcBaseAndBitshift+0x11c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d045      	beq.n	8004d58 <DMA_CalcBaseAndBitshift+0xa8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a3f      	ldr	r2, [pc, #252]	; (8004dd0 <DMA_CalcBaseAndBitshift+0x120>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d040      	beq.n	8004d58 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a3e      	ldr	r2, [pc, #248]	; (8004dd4 <DMA_CalcBaseAndBitshift+0x124>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d03b      	beq.n	8004d58 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a3c      	ldr	r2, [pc, #240]	; (8004dd8 <DMA_CalcBaseAndBitshift+0x128>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d036      	beq.n	8004d58 <DMA_CalcBaseAndBitshift+0xa8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a3b      	ldr	r2, [pc, #236]	; (8004ddc <DMA_CalcBaseAndBitshift+0x12c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d031      	beq.n	8004d58 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a39      	ldr	r2, [pc, #228]	; (8004de0 <DMA_CalcBaseAndBitshift+0x130>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d02c      	beq.n	8004d58 <DMA_CalcBaseAndBitshift+0xa8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a38      	ldr	r2, [pc, #224]	; (8004de4 <DMA_CalcBaseAndBitshift+0x134>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d027      	beq.n	8004d58 <DMA_CalcBaseAndBitshift+0xa8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a36      	ldr	r2, [pc, #216]	; (8004de8 <DMA_CalcBaseAndBitshift+0x138>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d022      	beq.n	8004d58 <DMA_CalcBaseAndBitshift+0xa8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a35      	ldr	r2, [pc, #212]	; (8004dec <DMA_CalcBaseAndBitshift+0x13c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d01d      	beq.n	8004d58 <DMA_CalcBaseAndBitshift+0xa8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a33      	ldr	r2, [pc, #204]	; (8004df0 <DMA_CalcBaseAndBitshift+0x140>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d018      	beq.n	8004d58 <DMA_CalcBaseAndBitshift+0xa8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a32      	ldr	r2, [pc, #200]	; (8004df4 <DMA_CalcBaseAndBitshift+0x144>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d013      	beq.n	8004d58 <DMA_CalcBaseAndBitshift+0xa8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a30      	ldr	r2, [pc, #192]	; (8004df8 <DMA_CalcBaseAndBitshift+0x148>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00e      	beq.n	8004d58 <DMA_CalcBaseAndBitshift+0xa8>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a2f      	ldr	r2, [pc, #188]	; (8004dfc <DMA_CalcBaseAndBitshift+0x14c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d009      	beq.n	8004d58 <DMA_CalcBaseAndBitshift+0xa8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a2d      	ldr	r2, [pc, #180]	; (8004e00 <DMA_CalcBaseAndBitshift+0x150>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d004      	beq.n	8004d58 <DMA_CalcBaseAndBitshift+0xa8>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a2c      	ldr	r2, [pc, #176]	; (8004e04 <DMA_CalcBaseAndBitshift+0x154>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d101      	bne.n	8004d5c <DMA_CalcBaseAndBitshift+0xac>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <DMA_CalcBaseAndBitshift+0xae>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d024      	beq.n	8004dac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	3b10      	subs	r3, #16
 8004d6a:	4a27      	ldr	r2, [pc, #156]	; (8004e08 <DMA_CalcBaseAndBitshift+0x158>)
 8004d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	4a24      	ldr	r2, [pc, #144]	; (8004e0c <DMA_CalcBaseAndBitshift+0x15c>)
 8004d7c:	5cd3      	ldrb	r3, [r2, r3]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d908      	bls.n	8004d9c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	4b1f      	ldr	r3, [pc, #124]	; (8004e10 <DMA_CalcBaseAndBitshift+0x160>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	1d1a      	adds	r2, r3, #4
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	659a      	str	r2, [r3, #88]	; 0x58
 8004d9a:	e00d      	b.n	8004db8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	4b1b      	ldr	r3, [pc, #108]	; (8004e10 <DMA_CalcBaseAndBitshift+0x160>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6593      	str	r3, [r2, #88]	; 0x58
 8004daa:	e005      	b.n	8004db8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	40020010 	.word	0x40020010
 8004dcc:	40020028 	.word	0x40020028
 8004dd0:	40020040 	.word	0x40020040
 8004dd4:	40020058 	.word	0x40020058
 8004dd8:	40020070 	.word	0x40020070
 8004ddc:	40020088 	.word	0x40020088
 8004de0:	400200a0 	.word	0x400200a0
 8004de4:	400200b8 	.word	0x400200b8
 8004de8:	40020410 	.word	0x40020410
 8004dec:	40020428 	.word	0x40020428
 8004df0:	40020440 	.word	0x40020440
 8004df4:	40020458 	.word	0x40020458
 8004df8:	40020470 	.word	0x40020470
 8004dfc:	40020488 	.word	0x40020488
 8004e00:	400204a0 	.word	0x400204a0
 8004e04:	400204b8 	.word	0x400204b8
 8004e08:	aaaaaaab 	.word	0xaaaaaaab
 8004e0c:	0800bc04 	.word	0x0800bc04
 8004e10:	fffffc00 	.word	0xfffffc00

08004e14 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d120      	bne.n	8004e6a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d858      	bhi.n	8004ee2 <DMA_CheckFifoParam+0xce>
 8004e30:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <DMA_CheckFifoParam+0x24>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e49 	.word	0x08004e49
 8004e3c:	08004e5b 	.word	0x08004e5b
 8004e40:	08004e49 	.word	0x08004e49
 8004e44:	08004ee3 	.word	0x08004ee3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d048      	beq.n	8004ee6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e58:	e045      	b.n	8004ee6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e62:	d142      	bne.n	8004eea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e68:	e03f      	b.n	8004eea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e72:	d123      	bne.n	8004ebc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d838      	bhi.n	8004eee <DMA_CheckFifoParam+0xda>
 8004e7c:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <DMA_CheckFifoParam+0x70>)
 8004e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e82:	bf00      	nop
 8004e84:	08004e95 	.word	0x08004e95
 8004e88:	08004e9b 	.word	0x08004e9b
 8004e8c:	08004e95 	.word	0x08004e95
 8004e90:	08004ead 	.word	0x08004ead
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	73fb      	strb	r3, [r7, #15]
        break;
 8004e98:	e030      	b.n	8004efc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d025      	beq.n	8004ef2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004eaa:	e022      	b.n	8004ef2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004eb4:	d11f      	bne.n	8004ef6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004eba:	e01c      	b.n	8004ef6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d902      	bls.n	8004eca <DMA_CheckFifoParam+0xb6>
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d003      	beq.n	8004ed0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ec8:	e018      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	73fb      	strb	r3, [r7, #15]
        break;
 8004ece:	e015      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00e      	beq.n	8004efa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	73fb      	strb	r3, [r7, #15]
    break;
 8004ee0:	e00b      	b.n	8004efa <DMA_CheckFifoParam+0xe6>
        break;
 8004ee2:	bf00      	nop
 8004ee4:	e00a      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
        break;
 8004ee6:	bf00      	nop
 8004ee8:	e008      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
        break;
 8004eea:	bf00      	nop
 8004eec:	e006      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
        break;
 8004eee:	bf00      	nop
 8004ef0:	e004      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
        break;
 8004ef2:	bf00      	nop
 8004ef4:	e002      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
        break;
 8004ef6:	bf00      	nop
 8004ef8:	e000      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
    break;
 8004efa:	bf00      	nop
    }
  }

  return status;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop

08004f0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a38      	ldr	r2, [pc, #224]	; (8005000 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d022      	beq.n	8004f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a36      	ldr	r2, [pc, #216]	; (8005004 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d01d      	beq.n	8004f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a35      	ldr	r2, [pc, #212]	; (8005008 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d018      	beq.n	8004f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a33      	ldr	r2, [pc, #204]	; (800500c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d013      	beq.n	8004f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a32      	ldr	r2, [pc, #200]	; (8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00e      	beq.n	8004f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a30      	ldr	r2, [pc, #192]	; (8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d009      	beq.n	8004f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a2f      	ldr	r2, [pc, #188]	; (8005018 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d004      	beq.n	8004f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a2d      	ldr	r2, [pc, #180]	; (800501c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d101      	bne.n	8004f6e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e000      	b.n	8004f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01a      	beq.n	8004faa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	3b08      	subs	r3, #8
 8004f7c:	4a28      	ldr	r2, [pc, #160]	; (8005020 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f82:	091b      	lsrs	r3, r3, #4
 8004f84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4b26      	ldr	r3, [pc, #152]	; (8005024 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	461a      	mov	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a24      	ldr	r2, [pc, #144]	; (8005028 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f98:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f003 031f 	and.w	r3, r3, #31
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	409a      	lsls	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004fa8:	e024      	b.n	8004ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	3b10      	subs	r3, #16
 8004fb2:	4a1e      	ldr	r2, [pc, #120]	; (800502c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb8:	091b      	lsrs	r3, r3, #4
 8004fba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	4a1c      	ldr	r2, [pc, #112]	; (8005030 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d806      	bhi.n	8004fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4a1b      	ldr	r2, [pc, #108]	; (8005034 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d902      	bls.n	8004fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	3308      	adds	r3, #8
 8004fd0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	4b18      	ldr	r3, [pc, #96]	; (8005038 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004fd6:	4413      	add	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	461a      	mov	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a16      	ldr	r2, [pc, #88]	; (800503c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004fe4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	2201      	movs	r2, #1
 8004fee:	409a      	lsls	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ff4:	bf00      	nop
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	58025408 	.word	0x58025408
 8005004:	5802541c 	.word	0x5802541c
 8005008:	58025430 	.word	0x58025430
 800500c:	58025444 	.word	0x58025444
 8005010:	58025458 	.word	0x58025458
 8005014:	5802546c 	.word	0x5802546c
 8005018:	58025480 	.word	0x58025480
 800501c:	58025494 	.word	0x58025494
 8005020:	cccccccd 	.word	0xcccccccd
 8005024:	16009600 	.word	0x16009600
 8005028:	58025880 	.word	0x58025880
 800502c:	aaaaaaab 	.word	0xaaaaaaab
 8005030:	400204b8 	.word	0x400204b8
 8005034:	4002040f 	.word	0x4002040f
 8005038:	10008200 	.word	0x10008200
 800503c:	40020880 	.word	0x40020880

08005040 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d04a      	beq.n	80050ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b08      	cmp	r3, #8
 800505a:	d847      	bhi.n	80050ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a25      	ldr	r2, [pc, #148]	; (80050f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d022      	beq.n	80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a24      	ldr	r2, [pc, #144]	; (80050fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d01d      	beq.n	80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a22      	ldr	r2, [pc, #136]	; (8005100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d018      	beq.n	80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a21      	ldr	r2, [pc, #132]	; (8005104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d013      	beq.n	80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1f      	ldr	r2, [pc, #124]	; (8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00e      	beq.n	80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1e      	ldr	r2, [pc, #120]	; (800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d009      	beq.n	80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d004      	beq.n	80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1b      	ldr	r2, [pc, #108]	; (8005114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d101      	bne.n	80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80050b0:	2300      	movs	r3, #0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4b17      	ldr	r3, [pc, #92]	; (8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	461a      	mov	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a15      	ldr	r2, [pc, #84]	; (800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050c8:	671a      	str	r2, [r3, #112]	; 0x70
 80050ca:	e009      	b.n	80050e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4b14      	ldr	r3, [pc, #80]	; (8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	461a      	mov	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a11      	ldr	r2, [pc, #68]	; (8005124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050de:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	2201      	movs	r2, #1
 80050e6:	409a      	lsls	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80050ec:	bf00      	nop
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	58025408 	.word	0x58025408
 80050fc:	5802541c 	.word	0x5802541c
 8005100:	58025430 	.word	0x58025430
 8005104:	58025444 	.word	0x58025444
 8005108:	58025458 	.word	0x58025458
 800510c:	5802546c 	.word	0x5802546c
 8005110:	58025480 	.word	0x58025480
 8005114:	58025494 	.word	0x58025494
 8005118:	1600963f 	.word	0x1600963f
 800511c:	58025940 	.word	0x58025940
 8005120:	1000823f 	.word	0x1000823f
 8005124:	40020940 	.word	0x40020940

08005128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005128:	b480      	push	{r7}
 800512a:	b089      	sub	sp, #36	; 0x24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005132:	2300      	movs	r3, #0
 8005134:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005136:	4b89      	ldr	r3, [pc, #548]	; (800535c <HAL_GPIO_Init+0x234>)
 8005138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800513a:	e194      	b.n	8005466 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	2101      	movs	r1, #1
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	fa01 f303 	lsl.w	r3, r1, r3
 8005148:	4013      	ands	r3, r2
 800514a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 8186 	beq.w	8005460 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d00b      	beq.n	8005174 <HAL_GPIO_Init+0x4c>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b02      	cmp	r3, #2
 8005162:	d007      	beq.n	8005174 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005168:	2b11      	cmp	r3, #17
 800516a:	d003      	beq.n	8005174 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b12      	cmp	r3, #18
 8005172:	d130      	bne.n	80051d6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	2203      	movs	r2, #3
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	43db      	mvns	r3, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4013      	ands	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4313      	orrs	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051aa:	2201      	movs	r2, #1
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	43db      	mvns	r3, r3
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	4013      	ands	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	091b      	lsrs	r3, r3, #4
 80051c0:	f003 0201 	and.w	r2, r3, #1
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	2203      	movs	r2, #3
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	43db      	mvns	r3, r3
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	4013      	ands	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d003      	beq.n	8005216 <HAL_GPIO_Init+0xee>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b12      	cmp	r3, #18
 8005214:	d123      	bne.n	800525e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	08da      	lsrs	r2, r3, #3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3208      	adds	r2, #8
 800521e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	220f      	movs	r2, #15
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	43db      	mvns	r3, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4013      	ands	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	4313      	orrs	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	08da      	lsrs	r2, r3, #3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3208      	adds	r2, #8
 8005258:	69b9      	ldr	r1, [r7, #24]
 800525a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	2203      	movs	r2, #3
 800526a:	fa02 f303 	lsl.w	r3, r2, r3
 800526e:	43db      	mvns	r3, r3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	4013      	ands	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f003 0203 	and.w	r2, r3, #3
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	fa02 f303 	lsl.w	r3, r2, r3
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	4313      	orrs	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 80e0 	beq.w	8005460 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052a0:	4b2f      	ldr	r3, [pc, #188]	; (8005360 <HAL_GPIO_Init+0x238>)
 80052a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052a6:	4a2e      	ldr	r2, [pc, #184]	; (8005360 <HAL_GPIO_Init+0x238>)
 80052a8:	f043 0302 	orr.w	r3, r3, #2
 80052ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80052b0:	4b2b      	ldr	r3, [pc, #172]	; (8005360 <HAL_GPIO_Init+0x238>)
 80052b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052be:	4a29      	ldr	r2, [pc, #164]	; (8005364 <HAL_GPIO_Init+0x23c>)
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	089b      	lsrs	r3, r3, #2
 80052c4:	3302      	adds	r3, #2
 80052c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	220f      	movs	r2, #15
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	43db      	mvns	r3, r3
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	4013      	ands	r3, r2
 80052e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a20      	ldr	r2, [pc, #128]	; (8005368 <HAL_GPIO_Init+0x240>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d052      	beq.n	8005390 <HAL_GPIO_Init+0x268>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a1f      	ldr	r2, [pc, #124]	; (800536c <HAL_GPIO_Init+0x244>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d031      	beq.n	8005356 <HAL_GPIO_Init+0x22e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a1e      	ldr	r2, [pc, #120]	; (8005370 <HAL_GPIO_Init+0x248>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d02b      	beq.n	8005352 <HAL_GPIO_Init+0x22a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <HAL_GPIO_Init+0x24c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d025      	beq.n	800534e <HAL_GPIO_Init+0x226>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a1c      	ldr	r2, [pc, #112]	; (8005378 <HAL_GPIO_Init+0x250>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d01f      	beq.n	800534a <HAL_GPIO_Init+0x222>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a1b      	ldr	r2, [pc, #108]	; (800537c <HAL_GPIO_Init+0x254>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d019      	beq.n	8005346 <HAL_GPIO_Init+0x21e>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a1a      	ldr	r2, [pc, #104]	; (8005380 <HAL_GPIO_Init+0x258>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d013      	beq.n	8005342 <HAL_GPIO_Init+0x21a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a19      	ldr	r2, [pc, #100]	; (8005384 <HAL_GPIO_Init+0x25c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00d      	beq.n	800533e <HAL_GPIO_Init+0x216>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a18      	ldr	r2, [pc, #96]	; (8005388 <HAL_GPIO_Init+0x260>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d007      	beq.n	800533a <HAL_GPIO_Init+0x212>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a17      	ldr	r2, [pc, #92]	; (800538c <HAL_GPIO_Init+0x264>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d101      	bne.n	8005336 <HAL_GPIO_Init+0x20e>
 8005332:	2309      	movs	r3, #9
 8005334:	e02d      	b.n	8005392 <HAL_GPIO_Init+0x26a>
 8005336:	230a      	movs	r3, #10
 8005338:	e02b      	b.n	8005392 <HAL_GPIO_Init+0x26a>
 800533a:	2308      	movs	r3, #8
 800533c:	e029      	b.n	8005392 <HAL_GPIO_Init+0x26a>
 800533e:	2307      	movs	r3, #7
 8005340:	e027      	b.n	8005392 <HAL_GPIO_Init+0x26a>
 8005342:	2306      	movs	r3, #6
 8005344:	e025      	b.n	8005392 <HAL_GPIO_Init+0x26a>
 8005346:	2305      	movs	r3, #5
 8005348:	e023      	b.n	8005392 <HAL_GPIO_Init+0x26a>
 800534a:	2304      	movs	r3, #4
 800534c:	e021      	b.n	8005392 <HAL_GPIO_Init+0x26a>
 800534e:	2303      	movs	r3, #3
 8005350:	e01f      	b.n	8005392 <HAL_GPIO_Init+0x26a>
 8005352:	2302      	movs	r3, #2
 8005354:	e01d      	b.n	8005392 <HAL_GPIO_Init+0x26a>
 8005356:	2301      	movs	r3, #1
 8005358:	e01b      	b.n	8005392 <HAL_GPIO_Init+0x26a>
 800535a:	bf00      	nop
 800535c:	58000080 	.word	0x58000080
 8005360:	58024400 	.word	0x58024400
 8005364:	58000400 	.word	0x58000400
 8005368:	58020000 	.word	0x58020000
 800536c:	58020400 	.word	0x58020400
 8005370:	58020800 	.word	0x58020800
 8005374:	58020c00 	.word	0x58020c00
 8005378:	58021000 	.word	0x58021000
 800537c:	58021400 	.word	0x58021400
 8005380:	58021800 	.word	0x58021800
 8005384:	58021c00 	.word	0x58021c00
 8005388:	58022000 	.word	0x58022000
 800538c:	58022400 	.word	0x58022400
 8005390:	2300      	movs	r3, #0
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	f002 0203 	and.w	r2, r2, #3
 8005398:	0092      	lsls	r2, r2, #2
 800539a:	4093      	lsls	r3, r2
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	4313      	orrs	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053a2:	4938      	ldr	r1, [pc, #224]	; (8005484 <HAL_GPIO_Init+0x35c>)
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	089b      	lsrs	r3, r3, #2
 80053a8:	3302      	adds	r3, #2
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	43db      	mvns	r3, r3
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4013      	ands	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	43db      	mvns	r3, r3
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	4013      	ands	r3, r2
 80053e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	43db      	mvns	r3, r3
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4013      	ands	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800542a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	43db      	mvns	r3, r3
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	4013      	ands	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005458:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	3301      	adds	r3, #1
 8005464:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	fa22 f303 	lsr.w	r3, r2, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	f47f ae63 	bne.w	800513c <HAL_GPIO_Init+0x14>
  }
}
 8005476:	bf00      	nop
 8005478:	bf00      	nop
 800547a:	3724      	adds	r7, #36	; 0x24
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	58000400 	.word	0x58000400

08005488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	887b      	ldrh	r3, [r7, #2]
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054a0:	2301      	movs	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
 80054a4:	e001      	b.n	80054aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	807b      	strh	r3, [r7, #2]
 80054c4:	4613      	mov	r3, r2
 80054c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054c8:	787b      	ldrb	r3, [r7, #1]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054ce:	887a      	ldrh	r2, [r7, #2]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80054d4:	e003      	b.n	80054de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80054d6:	887b      	ldrh	r3, [r7, #2]
 80054d8:	041a      	lsls	r2, r3, #16
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	619a      	str	r2, [r3, #24]
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	460b      	mov	r3, r1
 80054f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054fc:	887a      	ldrh	r2, [r7, #2]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4013      	ands	r3, r2
 8005502:	041a      	lsls	r2, r3, #16
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	43d9      	mvns	r1, r3
 8005508:	887b      	ldrh	r3, [r7, #2]
 800550a:	400b      	ands	r3, r1
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	619a      	str	r2, [r3, #24]
}
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
	...

08005520 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005528:	4a08      	ldr	r2, [pc, #32]	; (800554c <HAL_HSEM_FastTake+0x2c>)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3320      	adds	r3, #32
 800552e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005532:	4a07      	ldr	r2, [pc, #28]	; (8005550 <HAL_HSEM_FastTake+0x30>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d101      	bne.n	800553c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	e000      	b.n	800553e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
}
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	58026400 	.word	0x58026400
 8005550:	80000300 	.word	0x80000300

08005554 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800555e:	4906      	ldr	r1, [pc, #24]	; (8005578 <HAL_HSEM_Release+0x24>)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	58026400 	.word	0x58026400

0800557c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005584:	4b29      	ldr	r3, [pc, #164]	; (800562c <HAL_PWREx_ConfigSupply+0xb0>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	2b06      	cmp	r3, #6
 800558e:	d00a      	beq.n	80055a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005590:	4b26      	ldr	r3, [pc, #152]	; (800562c <HAL_PWREx_ConfigSupply+0xb0>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	429a      	cmp	r2, r3
 800559c:	d001      	beq.n	80055a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e040      	b.n	8005624 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	e03e      	b.n	8005624 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80055a6:	4b21      	ldr	r3, [pc, #132]	; (800562c <HAL_PWREx_ConfigSupply+0xb0>)
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80055ae:	491f      	ldr	r1, [pc, #124]	; (800562c <HAL_PWREx_ConfigSupply+0xb0>)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80055b6:	f7fc f8b7 	bl	8001728 <HAL_GetTick>
 80055ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80055bc:	e009      	b.n	80055d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80055be:	f7fc f8b3 	bl	8001728 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055cc:	d901      	bls.n	80055d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e028      	b.n	8005624 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80055d2:	4b16      	ldr	r3, [pc, #88]	; (800562c <HAL_PWREx_ConfigSupply+0xb0>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055de:	d1ee      	bne.n	80055be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b1e      	cmp	r3, #30
 80055e4:	d008      	beq.n	80055f8 <HAL_PWREx_ConfigSupply+0x7c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b2e      	cmp	r3, #46	; 0x2e
 80055ea:	d005      	beq.n	80055f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b1d      	cmp	r3, #29
 80055f0:	d002      	beq.n	80055f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b2d      	cmp	r3, #45	; 0x2d
 80055f6:	d114      	bne.n	8005622 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80055f8:	f7fc f896 	bl	8001728 <HAL_GetTick>
 80055fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80055fe:	e009      	b.n	8005614 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005600:	f7fc f892 	bl	8001728 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800560e:	d901      	bls.n	8005614 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e007      	b.n	8005624 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005614:	4b05      	ldr	r3, [pc, #20]	; (800562c <HAL_PWREx_ConfigSupply+0xb0>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800561c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005620:	d1ee      	bne.n	8005600 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	58024800 	.word	0x58024800

08005630 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08c      	sub	sp, #48	; 0x30
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e3ff      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 8087 	beq.w	800575e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005650:	4b99      	ldr	r3, [pc, #612]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005658:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800565a:	4b97      	ldr	r3, [pc, #604]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005662:	2b10      	cmp	r3, #16
 8005664:	d007      	beq.n	8005676 <HAL_RCC_OscConfig+0x46>
 8005666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005668:	2b18      	cmp	r3, #24
 800566a:	d110      	bne.n	800568e <HAL_RCC_OscConfig+0x5e>
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d10b      	bne.n	800568e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005676:	4b90      	ldr	r3, [pc, #576]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d06c      	beq.n	800575c <HAL_RCC_OscConfig+0x12c>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d168      	bne.n	800575c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e3d9      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005696:	d106      	bne.n	80056a6 <HAL_RCC_OscConfig+0x76>
 8005698:	4b87      	ldr	r3, [pc, #540]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a86      	ldr	r2, [pc, #536]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 800569e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	e02e      	b.n	8005704 <HAL_RCC_OscConfig+0xd4>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10c      	bne.n	80056c8 <HAL_RCC_OscConfig+0x98>
 80056ae:	4b82      	ldr	r3, [pc, #520]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a81      	ldr	r2, [pc, #516]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80056b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	4b7f      	ldr	r3, [pc, #508]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a7e      	ldr	r2, [pc, #504]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80056c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	e01d      	b.n	8005704 <HAL_RCC_OscConfig+0xd4>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056d0:	d10c      	bne.n	80056ec <HAL_RCC_OscConfig+0xbc>
 80056d2:	4b79      	ldr	r3, [pc, #484]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a78      	ldr	r2, [pc, #480]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80056d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	4b76      	ldr	r3, [pc, #472]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a75      	ldr	r2, [pc, #468]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80056e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	e00b      	b.n	8005704 <HAL_RCC_OscConfig+0xd4>
 80056ec:	4b72      	ldr	r3, [pc, #456]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a71      	ldr	r2, [pc, #452]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80056f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	4b6f      	ldr	r3, [pc, #444]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a6e      	ldr	r2, [pc, #440]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80056fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d013      	beq.n	8005734 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570c:	f7fc f80c 	bl	8001728 <HAL_GetTick>
 8005710:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005714:	f7fc f808 	bl	8001728 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b64      	cmp	r3, #100	; 0x64
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e38d      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005726:	4b64      	ldr	r3, [pc, #400]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0f0      	beq.n	8005714 <HAL_RCC_OscConfig+0xe4>
 8005732:	e014      	b.n	800575e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005734:	f7fb fff8 	bl	8001728 <HAL_GetTick>
 8005738:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800573c:	f7fb fff4 	bl	8001728 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b64      	cmp	r3, #100	; 0x64
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e379      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800574e:	4b5a      	ldr	r3, [pc, #360]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f0      	bne.n	800573c <HAL_RCC_OscConfig+0x10c>
 800575a:	e000      	b.n	800575e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800575c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 80ae 	beq.w	80058c8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800576c:	4b52      	ldr	r3, [pc, #328]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005774:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005776:	4b50      	ldr	r3, [pc, #320]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 8005778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d007      	beq.n	8005792 <HAL_RCC_OscConfig+0x162>
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	2b18      	cmp	r3, #24
 8005786:	d13a      	bne.n	80057fe <HAL_RCC_OscConfig+0x1ce>
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f003 0303 	and.w	r3, r3, #3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d135      	bne.n	80057fe <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005792:	4b49      	ldr	r3, [pc, #292]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <HAL_RCC_OscConfig+0x17a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e34b      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057aa:	f7fb ffed 	bl	8001788 <HAL_GetREVID>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d817      	bhi.n	80057e8 <HAL_RCC_OscConfig+0x1b8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	2b40      	cmp	r3, #64	; 0x40
 80057be:	d108      	bne.n	80057d2 <HAL_RCC_OscConfig+0x1a2>
 80057c0:	4b3d      	ldr	r3, [pc, #244]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80057c8:	4a3b      	ldr	r2, [pc, #236]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80057ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ce:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057d0:	e07a      	b.n	80058c8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d2:	4b39      	ldr	r3, [pc, #228]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	031b      	lsls	r3, r3, #12
 80057e0:	4935      	ldr	r1, [pc, #212]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057e6:	e06f      	b.n	80058c8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057e8:	4b33      	ldr	r3, [pc, #204]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	061b      	lsls	r3, r3, #24
 80057f6:	4930      	ldr	r1, [pc, #192]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057fc:	e064      	b.n	80058c8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d045      	beq.n	8005892 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005806:	4b2c      	ldr	r3, [pc, #176]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f023 0219 	bic.w	r2, r3, #25
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	4929      	ldr	r1, [pc, #164]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 8005814:	4313      	orrs	r3, r2
 8005816:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005818:	f7fb ff86 	bl	8001728 <HAL_GetTick>
 800581c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005820:	f7fb ff82 	bl	8001728 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e307      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005832:	4b21      	ldr	r3, [pc, #132]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f0      	beq.n	8005820 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800583e:	f7fb ffa3 	bl	8001788 <HAL_GetREVID>
 8005842:	4603      	mov	r3, r0
 8005844:	f241 0203 	movw	r2, #4099	; 0x1003
 8005848:	4293      	cmp	r3, r2
 800584a:	d817      	bhi.n	800587c <HAL_RCC_OscConfig+0x24c>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2b40      	cmp	r3, #64	; 0x40
 8005852:	d108      	bne.n	8005866 <HAL_RCC_OscConfig+0x236>
 8005854:	4b18      	ldr	r3, [pc, #96]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800585c:	4a16      	ldr	r2, [pc, #88]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 800585e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005862:	6053      	str	r3, [r2, #4]
 8005864:	e030      	b.n	80058c8 <HAL_RCC_OscConfig+0x298>
 8005866:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	031b      	lsls	r3, r3, #12
 8005874:	4910      	ldr	r1, [pc, #64]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 8005876:	4313      	orrs	r3, r2
 8005878:	604b      	str	r3, [r1, #4]
 800587a:	e025      	b.n	80058c8 <HAL_RCC_OscConfig+0x298>
 800587c:	4b0e      	ldr	r3, [pc, #56]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	061b      	lsls	r3, r3, #24
 800588a:	490b      	ldr	r1, [pc, #44]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 800588c:	4313      	orrs	r3, r2
 800588e:	604b      	str	r3, [r1, #4]
 8005890:	e01a      	b.n	80058c8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005892:	4b09      	ldr	r3, [pc, #36]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a08      	ldr	r2, [pc, #32]	; (80058b8 <HAL_RCC_OscConfig+0x288>)
 8005898:	f023 0301 	bic.w	r3, r3, #1
 800589c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589e:	f7fb ff43 	bl	8001728 <HAL_GetTick>
 80058a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058a4:	e00a      	b.n	80058bc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058a6:	f7fb ff3f 	bl	8001728 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d903      	bls.n	80058bc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e2c4      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
 80058b8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058bc:	4ba4      	ldr	r3, [pc, #656]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1ee      	bne.n	80058a6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0310 	and.w	r3, r3, #16
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 80a9 	beq.w	8005a28 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058d6:	4b9e      	ldr	r3, [pc, #632]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058e0:	4b9b      	ldr	r3, [pc, #620]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 80058e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d007      	beq.n	80058fc <HAL_RCC_OscConfig+0x2cc>
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	2b18      	cmp	r3, #24
 80058f0:	d13a      	bne.n	8005968 <HAL_RCC_OscConfig+0x338>
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d135      	bne.n	8005968 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058fc:	4b94      	ldr	r3, [pc, #592]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <HAL_RCC_OscConfig+0x2e4>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	2b80      	cmp	r3, #128	; 0x80
 800590e:	d001      	beq.n	8005914 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e296      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005914:	f7fb ff38 	bl	8001788 <HAL_GetREVID>
 8005918:	4603      	mov	r3, r0
 800591a:	f241 0203 	movw	r2, #4099	; 0x1003
 800591e:	4293      	cmp	r3, r2
 8005920:	d817      	bhi.n	8005952 <HAL_RCC_OscConfig+0x322>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	2b20      	cmp	r3, #32
 8005928:	d108      	bne.n	800593c <HAL_RCC_OscConfig+0x30c>
 800592a:	4b89      	ldr	r3, [pc, #548]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005932:	4a87      	ldr	r2, [pc, #540]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005934:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005938:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800593a:	e075      	b.n	8005a28 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800593c:	4b84      	ldr	r3, [pc, #528]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	069b      	lsls	r3, r3, #26
 800594a:	4981      	ldr	r1, [pc, #516]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 800594c:	4313      	orrs	r3, r2
 800594e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005950:	e06a      	b.n	8005a28 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005952:	4b7f      	ldr	r3, [pc, #508]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	061b      	lsls	r3, r3, #24
 8005960:	497b      	ldr	r1, [pc, #492]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005962:	4313      	orrs	r3, r2
 8005964:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005966:	e05f      	b.n	8005a28 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d042      	beq.n	80059f6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005970:	4b77      	ldr	r3, [pc, #476]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a76      	ldr	r2, [pc, #472]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800597a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fb fed4 	bl	8001728 <HAL_GetTick>
 8005980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005984:	f7fb fed0 	bl	8001728 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e255      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005996:	4b6e      	ldr	r3, [pc, #440]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0f0      	beq.n	8005984 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059a2:	f7fb fef1 	bl	8001788 <HAL_GetREVID>
 80059a6:	4603      	mov	r3, r0
 80059a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d817      	bhi.n	80059e0 <HAL_RCC_OscConfig+0x3b0>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d108      	bne.n	80059ca <HAL_RCC_OscConfig+0x39a>
 80059b8:	4b65      	ldr	r3, [pc, #404]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80059c0:	4a63      	ldr	r2, [pc, #396]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 80059c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059c6:	6053      	str	r3, [r2, #4]
 80059c8:	e02e      	b.n	8005a28 <HAL_RCC_OscConfig+0x3f8>
 80059ca:	4b61      	ldr	r3, [pc, #388]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	069b      	lsls	r3, r3, #26
 80059d8:	495d      	ldr	r1, [pc, #372]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	604b      	str	r3, [r1, #4]
 80059de:	e023      	b.n	8005a28 <HAL_RCC_OscConfig+0x3f8>
 80059e0:	4b5b      	ldr	r3, [pc, #364]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	061b      	lsls	r3, r3, #24
 80059ee:	4958      	ldr	r1, [pc, #352]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60cb      	str	r3, [r1, #12]
 80059f4:	e018      	b.n	8005a28 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80059f6:	4b56      	ldr	r3, [pc, #344]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a55      	ldr	r2, [pc, #340]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 80059fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a02:	f7fb fe91 	bl	8001728 <HAL_GetTick>
 8005a06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005a0a:	f7fb fe8d 	bl	8001728 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e212      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a1c:	4b4c      	ldr	r3, [pc, #304]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f0      	bne.n	8005a0a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d036      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d019      	beq.n	8005a70 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a3c:	4b44      	ldr	r3, [pc, #272]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a40:	4a43      	ldr	r2, [pc, #268]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005a42:	f043 0301 	orr.w	r3, r3, #1
 8005a46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a48:	f7fb fe6e 	bl	8001728 <HAL_GetTick>
 8005a4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a4e:	e008      	b.n	8005a62 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a50:	f7fb fe6a 	bl	8001728 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e1ef      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a62:	4b3b      	ldr	r3, [pc, #236]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0f0      	beq.n	8005a50 <HAL_RCC_OscConfig+0x420>
 8005a6e:	e018      	b.n	8005aa2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a70:	4b37      	ldr	r3, [pc, #220]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a74:	4a36      	ldr	r2, [pc, #216]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005a76:	f023 0301 	bic.w	r3, r3, #1
 8005a7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7c:	f7fb fe54 	bl	8001728 <HAL_GetTick>
 8005a80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a84:	f7fb fe50 	bl	8001728 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e1d5      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a96:	4b2e      	ldr	r3, [pc, #184]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1f0      	bne.n	8005a84 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d036      	beq.n	8005b1c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d019      	beq.n	8005aea <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ab6:	4b26      	ldr	r3, [pc, #152]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a25      	ldr	r2, [pc, #148]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005abc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ac0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ac2:	f7fb fe31 	bl	8001728 <HAL_GetTick>
 8005ac6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005aca:	f7fb fe2d 	bl	8001728 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e1b2      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005adc:	4b1c      	ldr	r3, [pc, #112]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f0      	beq.n	8005aca <HAL_RCC_OscConfig+0x49a>
 8005ae8:	e018      	b.n	8005b1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005aea:	4b19      	ldr	r3, [pc, #100]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a18      	ldr	r2, [pc, #96]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005af0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005af4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005af6:	f7fb fe17 	bl	8001728 <HAL_GetTick>
 8005afa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005afe:	f7fb fe13 	bl	8001728 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e198      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b10:	4b0f      	ldr	r3, [pc, #60]	; (8005b50 <HAL_RCC_OscConfig+0x520>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1f0      	bne.n	8005afe <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 8085 	beq.w	8005c34 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b2a:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <HAL_RCC_OscConfig+0x524>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a09      	ldr	r2, [pc, #36]	; (8005b54 <HAL_RCC_OscConfig+0x524>)
 8005b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b36:	f7fb fdf7 	bl	8001728 <HAL_GetTick>
 8005b3a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b3c:	e00c      	b.n	8005b58 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b3e:	f7fb fdf3 	bl	8001728 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b64      	cmp	r3, #100	; 0x64
 8005b4a:	d905      	bls.n	8005b58 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e178      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
 8005b50:	58024400 	.word	0x58024400
 8005b54:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b58:	4b96      	ldr	r3, [pc, #600]	; (8005db4 <HAL_RCC_OscConfig+0x784>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0ec      	beq.n	8005b3e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d106      	bne.n	8005b7a <HAL_RCC_OscConfig+0x54a>
 8005b6c:	4b92      	ldr	r3, [pc, #584]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b70:	4a91      	ldr	r2, [pc, #580]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005b72:	f043 0301 	orr.w	r3, r3, #1
 8005b76:	6713      	str	r3, [r2, #112]	; 0x70
 8005b78:	e02d      	b.n	8005bd6 <HAL_RCC_OscConfig+0x5a6>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10c      	bne.n	8005b9c <HAL_RCC_OscConfig+0x56c>
 8005b82:	4b8d      	ldr	r3, [pc, #564]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b86:	4a8c      	ldr	r2, [pc, #560]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005b88:	f023 0301 	bic.w	r3, r3, #1
 8005b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b8e:	4b8a      	ldr	r3, [pc, #552]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b92:	4a89      	ldr	r2, [pc, #548]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005b94:	f023 0304 	bic.w	r3, r3, #4
 8005b98:	6713      	str	r3, [r2, #112]	; 0x70
 8005b9a:	e01c      	b.n	8005bd6 <HAL_RCC_OscConfig+0x5a6>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2b05      	cmp	r3, #5
 8005ba2:	d10c      	bne.n	8005bbe <HAL_RCC_OscConfig+0x58e>
 8005ba4:	4b84      	ldr	r3, [pc, #528]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba8:	4a83      	ldr	r2, [pc, #524]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005baa:	f043 0304 	orr.w	r3, r3, #4
 8005bae:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb0:	4b81      	ldr	r3, [pc, #516]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb4:	4a80      	ldr	r2, [pc, #512]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005bb6:	f043 0301 	orr.w	r3, r3, #1
 8005bba:	6713      	str	r3, [r2, #112]	; 0x70
 8005bbc:	e00b      	b.n	8005bd6 <HAL_RCC_OscConfig+0x5a6>
 8005bbe:	4b7e      	ldr	r3, [pc, #504]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	4a7d      	ldr	r2, [pc, #500]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005bc4:	f023 0301 	bic.w	r3, r3, #1
 8005bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bca:	4b7b      	ldr	r3, [pc, #492]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bce:	4a7a      	ldr	r2, [pc, #488]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005bd0:	f023 0304 	bic.w	r3, r3, #4
 8005bd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d015      	beq.n	8005c0a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bde:	f7fb fda3 	bl	8001728 <HAL_GetTick>
 8005be2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005be4:	e00a      	b.n	8005bfc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005be6:	f7fb fd9f 	bl	8001728 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e122      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bfc:	4b6e      	ldr	r3, [pc, #440]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0ee      	beq.n	8005be6 <HAL_RCC_OscConfig+0x5b6>
 8005c08:	e014      	b.n	8005c34 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0a:	f7fb fd8d 	bl	8001728 <HAL_GetTick>
 8005c0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c10:	e00a      	b.n	8005c28 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c12:	f7fb fd89 	bl	8001728 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e10c      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c28:	4b63      	ldr	r3, [pc, #396]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1ee      	bne.n	8005c12 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 8101 	beq.w	8005e40 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c3e:	4b5e      	ldr	r3, [pc, #376]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c46:	2b18      	cmp	r3, #24
 8005c48:	f000 80bc 	beq.w	8005dc4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	f040 8095 	bne.w	8005d80 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c56:	4b58      	ldr	r3, [pc, #352]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a57      	ldr	r2, [pc, #348]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005c5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c62:	f7fb fd61 	bl	8001728 <HAL_GetTick>
 8005c66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c68:	e008      	b.n	8005c7c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c6a:	f7fb fd5d 	bl	8001728 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d901      	bls.n	8005c7c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e0e2      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c7c:	4b4e      	ldr	r3, [pc, #312]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1f0      	bne.n	8005c6a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c88:	4b4b      	ldr	r3, [pc, #300]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c8c:	4b4b      	ldr	r3, [pc, #300]	; (8005dbc <HAL_RCC_OscConfig+0x78c>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c98:	0112      	lsls	r2, r2, #4
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	4946      	ldr	r1, [pc, #280]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	628b      	str	r3, [r1, #40]	; 0x28
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	025b      	lsls	r3, r3, #9
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	041b      	lsls	r3, r3, #16
 8005cc0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	061b      	lsls	r3, r3, #24
 8005cce:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005cd2:	4939      	ldr	r1, [pc, #228]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005cd8:	4b37      	ldr	r3, [pc, #220]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	4a36      	ldr	r2, [pc, #216]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005cde:	f023 0301 	bic.w	r3, r3, #1
 8005ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ce4:	4b34      	ldr	r3, [pc, #208]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce8:	4b35      	ldr	r3, [pc, #212]	; (8005dc0 <HAL_RCC_OscConfig+0x790>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005cf0:	00d2      	lsls	r2, r2, #3
 8005cf2:	4931      	ldr	r1, [pc, #196]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005cf8:	4b2f      	ldr	r3, [pc, #188]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	f023 020c 	bic.w	r2, r3, #12
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	492c      	ldr	r1, [pc, #176]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005d0a:	4b2b      	ldr	r3, [pc, #172]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	f023 0202 	bic.w	r2, r3, #2
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d16:	4928      	ldr	r1, [pc, #160]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d1c:	4b26      	ldr	r3, [pc, #152]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	4a25      	ldr	r2, [pc, #148]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d28:	4b23      	ldr	r3, [pc, #140]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	4a22      	ldr	r2, [pc, #136]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005d34:	4b20      	ldr	r3, [pc, #128]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	4a1f      	ldr	r2, [pc, #124]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005d3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005d40:	4b1d      	ldr	r3, [pc, #116]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	4a1c      	ldr	r2, [pc, #112]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005d46:	f043 0301 	orr.w	r3, r3, #1
 8005d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d4c:	4b1a      	ldr	r3, [pc, #104]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a19      	ldr	r2, [pc, #100]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d58:	f7fb fce6 	bl	8001728 <HAL_GetTick>
 8005d5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d60:	f7fb fce2 	bl	8001728 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e067      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d72:	4b11      	ldr	r3, [pc, #68]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d0f0      	beq.n	8005d60 <HAL_RCC_OscConfig+0x730>
 8005d7e:	e05f      	b.n	8005e40 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d80:	4b0d      	ldr	r3, [pc, #52]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a0c      	ldr	r2, [pc, #48]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8c:	f7fb fccc 	bl	8001728 <HAL_GetTick>
 8005d90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d94:	f7fb fcc8 	bl	8001728 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e04d      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005da6:	4b04      	ldr	r3, [pc, #16]	; (8005db8 <HAL_RCC_OscConfig+0x788>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1f0      	bne.n	8005d94 <HAL_RCC_OscConfig+0x764>
 8005db2:	e045      	b.n	8005e40 <HAL_RCC_OscConfig+0x810>
 8005db4:	58024800 	.word	0x58024800
 8005db8:	58024400 	.word	0x58024400
 8005dbc:	fffffc0c 	.word	0xfffffc0c
 8005dc0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005dc4:	4b21      	ldr	r3, [pc, #132]	; (8005e4c <HAL_RCC_OscConfig+0x81c>)
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005dca:	4b20      	ldr	r3, [pc, #128]	; (8005e4c <HAL_RCC_OscConfig+0x81c>)
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dce:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d031      	beq.n	8005e3c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f003 0203 	and.w	r2, r3, #3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d12a      	bne.n	8005e3c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	091b      	lsrs	r3, r3, #4
 8005dea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d122      	bne.n	8005e3c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e00:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d11a      	bne.n	8005e3c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	0a5b      	lsrs	r3, r3, #9
 8005e0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e12:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d111      	bne.n	8005e3c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	0c1b      	lsrs	r3, r3, #16
 8005e1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d108      	bne.n	8005e3c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	0e1b      	lsrs	r3, r3, #24
 8005e2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e36:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e000      	b.n	8005e42 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3730      	adds	r7, #48	; 0x30
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	58024400 	.word	0x58024400

08005e50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e19c      	b.n	800619e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e64:	4b8a      	ldr	r3, [pc, #552]	; (8006090 <HAL_RCC_ClockConfig+0x240>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 030f 	and.w	r3, r3, #15
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d910      	bls.n	8005e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e72:	4b87      	ldr	r3, [pc, #540]	; (8006090 <HAL_RCC_ClockConfig+0x240>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f023 020f 	bic.w	r2, r3, #15
 8005e7a:	4985      	ldr	r1, [pc, #532]	; (8006090 <HAL_RCC_ClockConfig+0x240>)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e82:	4b83      	ldr	r3, [pc, #524]	; (8006090 <HAL_RCC_ClockConfig+0x240>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d001      	beq.n	8005e94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e184      	b.n	800619e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d010      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	4b7b      	ldr	r3, [pc, #492]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d908      	bls.n	8005ec2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005eb0:	4b78      	ldr	r3, [pc, #480]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	4975      	ldr	r1, [pc, #468]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0308 	and.w	r3, r3, #8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d010      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	695a      	ldr	r2, [r3, #20]
 8005ed2:	4b70      	ldr	r3, [pc, #448]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d908      	bls.n	8005ef0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ede:	4b6d      	ldr	r3, [pc, #436]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	496a      	ldr	r1, [pc, #424]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0310 	and.w	r3, r3, #16
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d010      	beq.n	8005f1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	699a      	ldr	r2, [r3, #24]
 8005f00:	4b64      	ldr	r3, [pc, #400]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d908      	bls.n	8005f1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f0c:	4b61      	ldr	r3, [pc, #388]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	495e      	ldr	r1, [pc, #376]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d010      	beq.n	8005f4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69da      	ldr	r2, [r3, #28]
 8005f2e:	4b59      	ldr	r3, [pc, #356]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d908      	bls.n	8005f4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005f3a:	4b56      	ldr	r3, [pc, #344]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	4953      	ldr	r1, [pc, #332]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d010      	beq.n	8005f7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	4b4d      	ldr	r3, [pc, #308]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	f003 030f 	and.w	r3, r3, #15
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d908      	bls.n	8005f7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f68:	4b4a      	ldr	r3, [pc, #296]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	f023 020f 	bic.w	r2, r3, #15
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	4947      	ldr	r1, [pc, #284]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d055      	beq.n	8006032 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005f86:	4b43      	ldr	r3, [pc, #268]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	4940      	ldr	r1, [pc, #256]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d107      	bne.n	8005fb0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fa0:	4b3c      	ldr	r3, [pc, #240]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d121      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0f6      	b.n	800619e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d107      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fb8:	4b36      	ldr	r3, [pc, #216]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d115      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e0ea      	b.n	800619e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d107      	bne.n	8005fe0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fd0:	4b30      	ldr	r3, [pc, #192]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d109      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e0de      	b.n	800619e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fe0:	4b2c      	ldr	r3, [pc, #176]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e0d6      	b.n	800619e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ff0:	4b28      	ldr	r3, [pc, #160]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	f023 0207 	bic.w	r2, r3, #7
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	4925      	ldr	r1, [pc, #148]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006002:	f7fb fb91 	bl	8001728 <HAL_GetTick>
 8006006:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006008:	e00a      	b.n	8006020 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800600a:	f7fb fb8d 	bl	8001728 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	f241 3288 	movw	r2, #5000	; 0x1388
 8006018:	4293      	cmp	r3, r2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e0be      	b.n	800619e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006020:	4b1c      	ldr	r3, [pc, #112]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	429a      	cmp	r2, r3
 8006030:	d1eb      	bne.n	800600a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d010      	beq.n	8006060 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	4b14      	ldr	r3, [pc, #80]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	429a      	cmp	r2, r3
 800604c:	d208      	bcs.n	8006060 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800604e:	4b11      	ldr	r3, [pc, #68]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	f023 020f 	bic.w	r2, r3, #15
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	490e      	ldr	r1, [pc, #56]	; (8006094 <HAL_RCC_ClockConfig+0x244>)
 800605c:	4313      	orrs	r3, r2
 800605e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <HAL_RCC_ClockConfig+0x240>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 030f 	and.w	r3, r3, #15
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d214      	bcs.n	8006098 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800606e:	4b08      	ldr	r3, [pc, #32]	; (8006090 <HAL_RCC_ClockConfig+0x240>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f023 020f 	bic.w	r2, r3, #15
 8006076:	4906      	ldr	r1, [pc, #24]	; (8006090 <HAL_RCC_ClockConfig+0x240>)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	4313      	orrs	r3, r2
 800607c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800607e:	4b04      	ldr	r3, [pc, #16]	; (8006090 <HAL_RCC_ClockConfig+0x240>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 030f 	and.w	r3, r3, #15
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d005      	beq.n	8006098 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e086      	b.n	800619e <HAL_RCC_ClockConfig+0x34e>
 8006090:	52002000 	.word	0x52002000
 8006094:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0304 	and.w	r3, r3, #4
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d010      	beq.n	80060c6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	4b3f      	ldr	r3, [pc, #252]	; (80061a8 <HAL_RCC_ClockConfig+0x358>)
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d208      	bcs.n	80060c6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80060b4:	4b3c      	ldr	r3, [pc, #240]	; (80061a8 <HAL_RCC_ClockConfig+0x358>)
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	4939      	ldr	r1, [pc, #228]	; (80061a8 <HAL_RCC_ClockConfig+0x358>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d010      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	695a      	ldr	r2, [r3, #20]
 80060d6:	4b34      	ldr	r3, [pc, #208]	; (80061a8 <HAL_RCC_ClockConfig+0x358>)
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060de:	429a      	cmp	r2, r3
 80060e0:	d208      	bcs.n	80060f4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060e2:	4b31      	ldr	r3, [pc, #196]	; (80061a8 <HAL_RCC_ClockConfig+0x358>)
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	492e      	ldr	r1, [pc, #184]	; (80061a8 <HAL_RCC_ClockConfig+0x358>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d010      	beq.n	8006122 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699a      	ldr	r2, [r3, #24]
 8006104:	4b28      	ldr	r3, [pc, #160]	; (80061a8 <HAL_RCC_ClockConfig+0x358>)
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800610c:	429a      	cmp	r2, r3
 800610e:	d208      	bcs.n	8006122 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006110:	4b25      	ldr	r3, [pc, #148]	; (80061a8 <HAL_RCC_ClockConfig+0x358>)
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	4922      	ldr	r1, [pc, #136]	; (80061a8 <HAL_RCC_ClockConfig+0x358>)
 800611e:	4313      	orrs	r3, r2
 8006120:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	2b00      	cmp	r3, #0
 800612c:	d010      	beq.n	8006150 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	69da      	ldr	r2, [r3, #28]
 8006132:	4b1d      	ldr	r3, [pc, #116]	; (80061a8 <HAL_RCC_ClockConfig+0x358>)
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800613a:	429a      	cmp	r2, r3
 800613c:	d208      	bcs.n	8006150 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800613e:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <HAL_RCC_ClockConfig+0x358>)
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	4917      	ldr	r1, [pc, #92]	; (80061a8 <HAL_RCC_ClockConfig+0x358>)
 800614c:	4313      	orrs	r3, r2
 800614e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006150:	f000 f834 	bl	80061bc <HAL_RCC_GetSysClockFreq>
 8006154:	4602      	mov	r2, r0
 8006156:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <HAL_RCC_ClockConfig+0x358>)
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	0a1b      	lsrs	r3, r3, #8
 800615c:	f003 030f 	and.w	r3, r3, #15
 8006160:	4912      	ldr	r1, [pc, #72]	; (80061ac <HAL_RCC_ClockConfig+0x35c>)
 8006162:	5ccb      	ldrb	r3, [r1, r3]
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	fa22 f303 	lsr.w	r3, r2, r3
 800616c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800616e:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <HAL_RCC_ClockConfig+0x358>)
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	4a0d      	ldr	r2, [pc, #52]	; (80061ac <HAL_RCC_ClockConfig+0x35c>)
 8006178:	5cd3      	ldrb	r3, [r2, r3]
 800617a:	f003 031f 	and.w	r3, r3, #31
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	fa22 f303 	lsr.w	r3, r2, r3
 8006184:	4a0a      	ldr	r2, [pc, #40]	; (80061b0 <HAL_RCC_ClockConfig+0x360>)
 8006186:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006188:	4a0a      	ldr	r2, [pc, #40]	; (80061b4 <HAL_RCC_ClockConfig+0x364>)
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800618e:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <HAL_RCC_ClockConfig+0x368>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4618      	mov	r0, r3
 8006194:	f7fb fa7e 	bl	8001694 <HAL_InitTick>
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800619c:	7bfb      	ldrb	r3, [r7, #15]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	58024400 	.word	0x58024400
 80061ac:	0800bbf4 	.word	0x0800bbf4
 80061b0:	24000004 	.word	0x24000004
 80061b4:	24000000 	.word	0x24000000
 80061b8:	24000008 	.word	0x24000008

080061bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	b089      	sub	sp, #36	; 0x24
 80061c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061c2:	4bb3      	ldr	r3, [pc, #716]	; (8006490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061ca:	2b18      	cmp	r3, #24
 80061cc:	f200 8155 	bhi.w	800647a <HAL_RCC_GetSysClockFreq+0x2be>
 80061d0:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80061d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d6:	bf00      	nop
 80061d8:	0800623d 	.word	0x0800623d
 80061dc:	0800647b 	.word	0x0800647b
 80061e0:	0800647b 	.word	0x0800647b
 80061e4:	0800647b 	.word	0x0800647b
 80061e8:	0800647b 	.word	0x0800647b
 80061ec:	0800647b 	.word	0x0800647b
 80061f0:	0800647b 	.word	0x0800647b
 80061f4:	0800647b 	.word	0x0800647b
 80061f8:	08006263 	.word	0x08006263
 80061fc:	0800647b 	.word	0x0800647b
 8006200:	0800647b 	.word	0x0800647b
 8006204:	0800647b 	.word	0x0800647b
 8006208:	0800647b 	.word	0x0800647b
 800620c:	0800647b 	.word	0x0800647b
 8006210:	0800647b 	.word	0x0800647b
 8006214:	0800647b 	.word	0x0800647b
 8006218:	08006269 	.word	0x08006269
 800621c:	0800647b 	.word	0x0800647b
 8006220:	0800647b 	.word	0x0800647b
 8006224:	0800647b 	.word	0x0800647b
 8006228:	0800647b 	.word	0x0800647b
 800622c:	0800647b 	.word	0x0800647b
 8006230:	0800647b 	.word	0x0800647b
 8006234:	0800647b 	.word	0x0800647b
 8006238:	0800626f 	.word	0x0800626f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800623c:	4b94      	ldr	r3, [pc, #592]	; (8006490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0320 	and.w	r3, r3, #32
 8006244:	2b00      	cmp	r3, #0
 8006246:	d009      	beq.n	800625c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006248:	4b91      	ldr	r3, [pc, #580]	; (8006490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	08db      	lsrs	r3, r3, #3
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	4a90      	ldr	r2, [pc, #576]	; (8006494 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006254:	fa22 f303 	lsr.w	r3, r2, r3
 8006258:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800625a:	e111      	b.n	8006480 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800625c:	4b8d      	ldr	r3, [pc, #564]	; (8006494 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800625e:	61bb      	str	r3, [r7, #24]
    break;
 8006260:	e10e      	b.n	8006480 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006262:	4b8d      	ldr	r3, [pc, #564]	; (8006498 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006264:	61bb      	str	r3, [r7, #24]
    break;
 8006266:	e10b      	b.n	8006480 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006268:	4b8c      	ldr	r3, [pc, #560]	; (800649c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800626a:	61bb      	str	r3, [r7, #24]
    break;
 800626c:	e108      	b.n	8006480 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800626e:	4b88      	ldr	r3, [pc, #544]	; (8006490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006278:	4b85      	ldr	r3, [pc, #532]	; (8006490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800627a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627c:	091b      	lsrs	r3, r3, #4
 800627e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006282:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006284:	4b82      	ldr	r3, [pc, #520]	; (8006490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800628e:	4b80      	ldr	r3, [pc, #512]	; (8006490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006292:	08db      	lsrs	r3, r3, #3
 8006294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	fb02 f303 	mul.w	r3, r2, r3
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 80e1 	beq.w	8006474 <HAL_RCC_GetSysClockFreq+0x2b8>
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	f000 8083 	beq.w	80063c0 <HAL_RCC_GetSysClockFreq+0x204>
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	f200 80a1 	bhi.w	8006404 <HAL_RCC_GetSysClockFreq+0x248>
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <HAL_RCC_GetSysClockFreq+0x114>
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d056      	beq.n	800637c <HAL_RCC_GetSysClockFreq+0x1c0>
 80062ce:	e099      	b.n	8006404 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062d0:	4b6f      	ldr	r3, [pc, #444]	; (8006490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d02d      	beq.n	8006338 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062dc:	4b6c      	ldr	r3, [pc, #432]	; (8006490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	08db      	lsrs	r3, r3, #3
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	4a6b      	ldr	r2, [pc, #428]	; (8006494 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062e8:	fa22 f303 	lsr.w	r3, r2, r3
 80062ec:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	ee07 3a90 	vmov	s15, r3
 80062f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006306:	4b62      	ldr	r3, [pc, #392]	; (8006490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006316:	ed97 6a02 	vldr	s12, [r7, #8]
 800631a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80064a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800631e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800632a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800632e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006332:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006336:	e087      	b.n	8006448 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006342:	eddf 6a58 	vldr	s13, [pc, #352]	; 80064a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800634a:	4b51      	ldr	r3, [pc, #324]	; (8006490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006352:	ee07 3a90 	vmov	s15, r3
 8006356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800635a:	ed97 6a02 	vldr	s12, [r7, #8]
 800635e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80064a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800636a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800636e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800637a:	e065      	b.n	8006448 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	ee07 3a90 	vmov	s15, r3
 8006382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006386:	eddf 6a48 	vldr	s13, [pc, #288]	; 80064a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800638a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800638e:	4b40      	ldr	r3, [pc, #256]	; (8006490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800639e:	ed97 6a02 	vldr	s12, [r7, #8]
 80063a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80064a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063be:	e043      	b.n	8006448 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80064ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80063ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d2:	4b2f      	ldr	r3, [pc, #188]	; (8006490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063da:	ee07 3a90 	vmov	s15, r3
 80063de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80063e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80064a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006402:	e021      	b.n	8006448 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80064a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006416:	4b1e      	ldr	r3, [pc, #120]	; (8006490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006426:	ed97 6a02 	vldr	s12, [r7, #8]
 800642a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80064a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800642e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800643a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800643e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006446:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006448:	4b11      	ldr	r3, [pc, #68]	; (8006490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644c:	0a5b      	lsrs	r3, r3, #9
 800644e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006452:	3301      	adds	r3, #1
 8006454:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	ee07 3a90 	vmov	s15, r3
 800645c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006460:	edd7 6a07 	vldr	s13, [r7, #28]
 8006464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800646c:	ee17 3a90 	vmov	r3, s15
 8006470:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006472:	e005      	b.n	8006480 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	61bb      	str	r3, [r7, #24]
    break;
 8006478:	e002      	b.n	8006480 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800647a:	4b07      	ldr	r3, [pc, #28]	; (8006498 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800647c:	61bb      	str	r3, [r7, #24]
    break;
 800647e:	bf00      	nop
  }

  return sysclockfreq;
 8006480:	69bb      	ldr	r3, [r7, #24]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3724      	adds	r7, #36	; 0x24
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	58024400 	.word	0x58024400
 8006494:	03d09000 	.word	0x03d09000
 8006498:	003d0900 	.word	0x003d0900
 800649c:	017d7840 	.word	0x017d7840
 80064a0:	46000000 	.word	0x46000000
 80064a4:	4c742400 	.word	0x4c742400
 80064a8:	4a742400 	.word	0x4a742400
 80064ac:	4bbebc20 	.word	0x4bbebc20

080064b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064b6:	f7ff fe81 	bl	80061bc <HAL_RCC_GetSysClockFreq>
 80064ba:	4602      	mov	r2, r0
 80064bc:	4b10      	ldr	r3, [pc, #64]	; (8006500 <HAL_RCC_GetHCLKFreq+0x50>)
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	0a1b      	lsrs	r3, r3, #8
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	490f      	ldr	r1, [pc, #60]	; (8006504 <HAL_RCC_GetHCLKFreq+0x54>)
 80064c8:	5ccb      	ldrb	r3, [r1, r3]
 80064ca:	f003 031f 	and.w	r3, r3, #31
 80064ce:	fa22 f303 	lsr.w	r3, r2, r3
 80064d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064d4:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <HAL_RCC_GetHCLKFreq+0x50>)
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	f003 030f 	and.w	r3, r3, #15
 80064dc:	4a09      	ldr	r2, [pc, #36]	; (8006504 <HAL_RCC_GetHCLKFreq+0x54>)
 80064de:	5cd3      	ldrb	r3, [r2, r3]
 80064e0:	f003 031f 	and.w	r3, r3, #31
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ea:	4a07      	ldr	r2, [pc, #28]	; (8006508 <HAL_RCC_GetHCLKFreq+0x58>)
 80064ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064ee:	4a07      	ldr	r2, [pc, #28]	; (800650c <HAL_RCC_GetHCLKFreq+0x5c>)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80064f4:	4b04      	ldr	r3, [pc, #16]	; (8006508 <HAL_RCC_GetHCLKFreq+0x58>)
 80064f6:	681b      	ldr	r3, [r3, #0]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	58024400 	.word	0x58024400
 8006504:	0800bbf4 	.word	0x0800bbf4
 8006508:	24000004 	.word	0x24000004
 800650c:	24000000 	.word	0x24000000

08006510 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006518:	2300      	movs	r3, #0
 800651a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800651c:	2300      	movs	r3, #0
 800651e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d03f      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006530:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006534:	d02a      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006536:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800653a:	d824      	bhi.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800653c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006540:	d018      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006546:	d81e      	bhi.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800654c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006550:	d007      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006552:	e018      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006554:	4bab      	ldr	r3, [pc, #684]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	4aaa      	ldr	r2, [pc, #680]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800655a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800655e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006560:	e015      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3304      	adds	r3, #4
 8006566:	2102      	movs	r1, #2
 8006568:	4618      	mov	r0, r3
 800656a:	f001 fff3 	bl	8008554 <RCCEx_PLL2_Config>
 800656e:	4603      	mov	r3, r0
 8006570:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006572:	e00c      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3324      	adds	r3, #36	; 0x24
 8006578:	2102      	movs	r1, #2
 800657a:	4618      	mov	r0, r3
 800657c:	f002 f89c 	bl	80086b8 <RCCEx_PLL3_Config>
 8006580:	4603      	mov	r3, r0
 8006582:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006584:	e003      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	75fb      	strb	r3, [r7, #23]
      break;
 800658a:	e000      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800658c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800658e:	7dfb      	ldrb	r3, [r7, #23]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d109      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006594:	4b9b      	ldr	r3, [pc, #620]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006598:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065a0:	4998      	ldr	r1, [pc, #608]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	650b      	str	r3, [r1, #80]	; 0x50
 80065a6:	e001      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d03d      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d826      	bhi.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80065c0:	a201      	add	r2, pc, #4	; (adr r2, 80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80065c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c6:	bf00      	nop
 80065c8:	080065dd 	.word	0x080065dd
 80065cc:	080065eb 	.word	0x080065eb
 80065d0:	080065fd 	.word	0x080065fd
 80065d4:	08006615 	.word	0x08006615
 80065d8:	08006615 	.word	0x08006615
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065dc:	4b89      	ldr	r3, [pc, #548]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	4a88      	ldr	r2, [pc, #544]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065e8:	e015      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3304      	adds	r3, #4
 80065ee:	2100      	movs	r1, #0
 80065f0:	4618      	mov	r0, r3
 80065f2:	f001 ffaf 	bl	8008554 <RCCEx_PLL2_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065fa:	e00c      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	3324      	adds	r3, #36	; 0x24
 8006600:	2100      	movs	r1, #0
 8006602:	4618      	mov	r0, r3
 8006604:	f002 f858 	bl	80086b8 <RCCEx_PLL3_Config>
 8006608:	4603      	mov	r3, r0
 800660a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800660c:	e003      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	75fb      	strb	r3, [r7, #23]
      break;
 8006612:	e000      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d109      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800661c:	4b79      	ldr	r3, [pc, #484]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800661e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006620:	f023 0207 	bic.w	r2, r3, #7
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006628:	4976      	ldr	r1, [pc, #472]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800662a:	4313      	orrs	r3, r2
 800662c:	650b      	str	r3, [r1, #80]	; 0x50
 800662e:	e001      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006630:	7dfb      	ldrb	r3, [r7, #23]
 8006632:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800663c:	2b00      	cmp	r3, #0
 800663e:	d042      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006648:	d02b      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800664a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800664e:	d825      	bhi.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006650:	2bc0      	cmp	r3, #192	; 0xc0
 8006652:	d028      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006654:	2bc0      	cmp	r3, #192	; 0xc0
 8006656:	d821      	bhi.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006658:	2b80      	cmp	r3, #128	; 0x80
 800665a:	d016      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800665c:	2b80      	cmp	r3, #128	; 0x80
 800665e:	d81d      	bhi.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006660:	2b00      	cmp	r3, #0
 8006662:	d002      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006664:	2b40      	cmp	r3, #64	; 0x40
 8006666:	d007      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006668:	e018      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800666a:	4b66      	ldr	r3, [pc, #408]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800666c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666e:	4a65      	ldr	r2, [pc, #404]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006674:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006676:	e017      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3304      	adds	r3, #4
 800667c:	2100      	movs	r1, #0
 800667e:	4618      	mov	r0, r3
 8006680:	f001 ff68 	bl	8008554 <RCCEx_PLL2_Config>
 8006684:	4603      	mov	r3, r0
 8006686:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006688:	e00e      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	3324      	adds	r3, #36	; 0x24
 800668e:	2100      	movs	r1, #0
 8006690:	4618      	mov	r0, r3
 8006692:	f002 f811 	bl	80086b8 <RCCEx_PLL3_Config>
 8006696:	4603      	mov	r3, r0
 8006698:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800669a:	e005      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	75fb      	strb	r3, [r7, #23]
      break;
 80066a0:	e002      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80066a2:	bf00      	nop
 80066a4:	e000      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80066a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066a8:	7dfb      	ldrb	r3, [r7, #23]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d109      	bne.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80066ae:	4b55      	ldr	r3, [pc, #340]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ba:	4952      	ldr	r1, [pc, #328]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	650b      	str	r3, [r1, #80]	; 0x50
 80066c0:	e001      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
 80066c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d049      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066dc:	d030      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80066de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066e2:	d82a      	bhi.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80066e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066e8:	d02c      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80066ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066ee:	d824      	bhi.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80066f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066f4:	d018      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80066f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066fa:	d81e      	bhi.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006700:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006704:	d007      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006706:	e018      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006708:	4b3e      	ldr	r3, [pc, #248]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670c:	4a3d      	ldr	r2, [pc, #244]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800670e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006712:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006714:	e017      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	3304      	adds	r3, #4
 800671a:	2100      	movs	r1, #0
 800671c:	4618      	mov	r0, r3
 800671e:	f001 ff19 	bl	8008554 <RCCEx_PLL2_Config>
 8006722:	4603      	mov	r3, r0
 8006724:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006726:	e00e      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3324      	adds	r3, #36	; 0x24
 800672c:	2100      	movs	r1, #0
 800672e:	4618      	mov	r0, r3
 8006730:	f001 ffc2 	bl	80086b8 <RCCEx_PLL3_Config>
 8006734:	4603      	mov	r3, r0
 8006736:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006738:	e005      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	75fb      	strb	r3, [r7, #23]
      break;
 800673e:	e002      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006740:	bf00      	nop
 8006742:	e000      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006746:	7dfb      	ldrb	r3, [r7, #23]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800674c:	4b2d      	ldr	r3, [pc, #180]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800674e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006750:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800675a:	492a      	ldr	r1, [pc, #168]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800675c:	4313      	orrs	r3, r2
 800675e:	658b      	str	r3, [r1, #88]	; 0x58
 8006760:	e001      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006762:	7dfb      	ldrb	r3, [r7, #23]
 8006764:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800676e:	2b00      	cmp	r3, #0
 8006770:	d04c      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006778:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800677c:	d030      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800677e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006782:	d82a      	bhi.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006784:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006788:	d02c      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800678a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800678e:	d824      	bhi.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006790:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006794:	d018      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006796:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800679a:	d81e      	bhi.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80067a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067a4:	d007      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80067a6:	e018      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067a8:	4b16      	ldr	r3, [pc, #88]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	4a15      	ldr	r2, [pc, #84]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067b4:	e017      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3304      	adds	r3, #4
 80067ba:	2100      	movs	r1, #0
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 fec9 	bl	8008554 <RCCEx_PLL2_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80067c6:	e00e      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3324      	adds	r3, #36	; 0x24
 80067cc:	2100      	movs	r1, #0
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 ff72 	bl	80086b8 <RCCEx_PLL3_Config>
 80067d4:	4603      	mov	r3, r0
 80067d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067d8:	e005      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	75fb      	strb	r3, [r7, #23]
      break;
 80067de:	e002      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80067e0:	bf00      	nop
 80067e2:	e000      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80067e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10d      	bne.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067fa:	4902      	ldr	r1, [pc, #8]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	658b      	str	r3, [r1, #88]	; 0x58
 8006800:	e004      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006802:	bf00      	nop
 8006804:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006808:	7dfb      	ldrb	r3, [r7, #23]
 800680a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d032      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800681c:	2b30      	cmp	r3, #48	; 0x30
 800681e:	d01c      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006820:	2b30      	cmp	r3, #48	; 0x30
 8006822:	d817      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006824:	2b20      	cmp	r3, #32
 8006826:	d00c      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006828:	2b20      	cmp	r3, #32
 800682a:	d813      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800682c:	2b00      	cmp	r3, #0
 800682e:	d016      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006830:	2b10      	cmp	r3, #16
 8006832:	d10f      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006834:	4baf      	ldr	r3, [pc, #700]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	4aae      	ldr	r2, [pc, #696]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800683a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800683e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006840:	e00e      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3304      	adds	r3, #4
 8006846:	2102      	movs	r1, #2
 8006848:	4618      	mov	r0, r3
 800684a:	f001 fe83 	bl	8008554 <RCCEx_PLL2_Config>
 800684e:	4603      	mov	r3, r0
 8006850:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006852:	e005      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	75fb      	strb	r3, [r7, #23]
      break;
 8006858:	e002      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800685a:	bf00      	nop
 800685c:	e000      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800685e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006860:	7dfb      	ldrb	r3, [r7, #23]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d109      	bne.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006866:	4ba3      	ldr	r3, [pc, #652]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006872:	49a0      	ldr	r1, [pc, #640]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006874:	4313      	orrs	r3, r2
 8006876:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006878:	e001      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800687a:	7dfb      	ldrb	r3, [r7, #23]
 800687c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d047      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800688e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006892:	d030      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006898:	d82a      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800689a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800689e:	d02c      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80068a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068a4:	d824      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80068a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068aa:	d018      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80068ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b0:	d81e      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80068b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ba:	d007      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80068bc:	e018      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068be:	4b8d      	ldr	r3, [pc, #564]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c2:	4a8c      	ldr	r2, [pc, #560]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80068ca:	e017      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3304      	adds	r3, #4
 80068d0:	2100      	movs	r1, #0
 80068d2:	4618      	mov	r0, r3
 80068d4:	f001 fe3e 	bl	8008554 <RCCEx_PLL2_Config>
 80068d8:	4603      	mov	r3, r0
 80068da:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80068dc:	e00e      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	3324      	adds	r3, #36	; 0x24
 80068e2:	2100      	movs	r1, #0
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 fee7 	bl	80086b8 <RCCEx_PLL3_Config>
 80068ea:	4603      	mov	r3, r0
 80068ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80068ee:	e005      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	75fb      	strb	r3, [r7, #23]
      break;
 80068f4:	e002      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80068f6:	bf00      	nop
 80068f8:	e000      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80068fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006902:	4b7c      	ldr	r3, [pc, #496]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006906:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690e:	4979      	ldr	r1, [pc, #484]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006910:	4313      	orrs	r3, r2
 8006912:	650b      	str	r3, [r1, #80]	; 0x50
 8006914:	e001      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d049      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800692a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800692e:	d02e      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006934:	d828      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006936:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800693a:	d02a      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800693c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006940:	d822      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006942:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006946:	d026      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006948:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800694c:	d81c      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800694e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006952:	d010      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006958:	d816      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800695a:	2b00      	cmp	r3, #0
 800695c:	d01d      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800695e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006962:	d111      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	3304      	adds	r3, #4
 8006968:	2101      	movs	r1, #1
 800696a:	4618      	mov	r0, r3
 800696c:	f001 fdf2 	bl	8008554 <RCCEx_PLL2_Config>
 8006970:	4603      	mov	r3, r0
 8006972:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006974:	e012      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	3324      	adds	r3, #36	; 0x24
 800697a:	2101      	movs	r1, #1
 800697c:	4618      	mov	r0, r3
 800697e:	f001 fe9b 	bl	80086b8 <RCCEx_PLL3_Config>
 8006982:	4603      	mov	r3, r0
 8006984:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006986:	e009      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	75fb      	strb	r3, [r7, #23]
      break;
 800698c:	e006      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800698e:	bf00      	nop
 8006990:	e004      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006992:	bf00      	nop
 8006994:	e002      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006996:	bf00      	nop
 8006998:	e000      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800699a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800699c:	7dfb      	ldrb	r3, [r7, #23]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80069a2:	4b54      	ldr	r3, [pc, #336]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ae:	4951      	ldr	r1, [pc, #324]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	650b      	str	r3, [r1, #80]	; 0x50
 80069b4:	e001      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d04b      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80069cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069d0:	d02e      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80069d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069d6:	d828      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80069d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069dc:	d02a      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80069de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e2:	d822      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80069e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069e8:	d026      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80069ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069ee:	d81c      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80069f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069f4:	d010      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80069f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069fa:	d816      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01d      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006a00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a04:	d111      	bne.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f001 fda1 	bl	8008554 <RCCEx_PLL2_Config>
 8006a12:	4603      	mov	r3, r0
 8006a14:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a16:	e012      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3324      	adds	r3, #36	; 0x24
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f001 fe4a 	bl	80086b8 <RCCEx_PLL3_Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a28:	e009      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a2e:	e006      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006a30:	bf00      	nop
 8006a32:	e004      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006a34:	bf00      	nop
 8006a36:	e002      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006a38:	bf00      	nop
 8006a3a:	e000      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10a      	bne.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006a44:	4b2b      	ldr	r3, [pc, #172]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a48:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a52:	4928      	ldr	r1, [pc, #160]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	658b      	str	r3, [r1, #88]	; 0x58
 8006a58:	e001      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a5a:	7dfb      	ldrb	r3, [r7, #23]
 8006a5c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d02f      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a72:	d00e      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a78:	d814      	bhi.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d015      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a82:	d10f      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a84:	4b1b      	ldr	r3, [pc, #108]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a88:	4a1a      	ldr	r2, [pc, #104]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006a90:	e00c      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3304      	adds	r3, #4
 8006a96:	2101      	movs	r1, #1
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f001 fd5b 	bl	8008554 <RCCEx_PLL2_Config>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006aa2:	e003      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8006aa8:	e000      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d109      	bne.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ab2:	4b10      	ldr	r3, [pc, #64]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006abe:	490d      	ldr	r1, [pc, #52]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	650b      	str	r3, [r1, #80]	; 0x50
 8006ac4:	e001      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac6:	7dfb      	ldrb	r3, [r7, #23]
 8006ac8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d033      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	d81c      	bhi.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006ade:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae4:	08006b1f 	.word	0x08006b1f
 8006ae8:	08006af9 	.word	0x08006af9
 8006aec:	08006b07 	.word	0x08006b07
 8006af0:	08006b1f 	.word	0x08006b1f
 8006af4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af8:	4bb8      	ldr	r3, [pc, #736]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	4ab7      	ldr	r2, [pc, #732]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b04:	e00c      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	2102      	movs	r1, #2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f001 fd21 	bl	8008554 <RCCEx_PLL2_Config>
 8006b12:	4603      	mov	r3, r0
 8006b14:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b16:	e003      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b1c:	e000      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d109      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b26:	4bad      	ldr	r3, [pc, #692]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b2a:	f023 0203 	bic.w	r2, r3, #3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b32:	49aa      	ldr	r1, [pc, #680]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b38:	e001      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
 8006b3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 8086 	beq.w	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b4c:	4ba4      	ldr	r3, [pc, #656]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4aa3      	ldr	r2, [pc, #652]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b58:	f7fa fde6 	bl	8001728 <HAL_GetTick>
 8006b5c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b5e:	e009      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b60:	f7fa fde2 	bl	8001728 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b64      	cmp	r3, #100	; 0x64
 8006b6c:	d902      	bls.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	75fb      	strb	r3, [r7, #23]
        break;
 8006b72:	e005      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b74:	4b9a      	ldr	r3, [pc, #616]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0ef      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006b80:	7dfb      	ldrb	r3, [r7, #23]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d166      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006b86:	4b95      	ldr	r3, [pc, #596]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b90:	4053      	eors	r3, r2
 8006b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d013      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b9a:	4b90      	ldr	r3, [pc, #576]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ba4:	4b8d      	ldr	r3, [pc, #564]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba8:	4a8c      	ldr	r2, [pc, #560]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bb0:	4b8a      	ldr	r3, [pc, #552]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb4:	4a89      	ldr	r2, [pc, #548]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006bbc:	4a87      	ldr	r2, [pc, #540]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bcc:	d115      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bce:	f7fa fdab 	bl	8001728 <HAL_GetTick>
 8006bd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bd4:	e00b      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bd6:	f7fa fda7 	bl	8001728 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d902      	bls.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	75fb      	strb	r3, [r7, #23]
            break;
 8006bec:	e005      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bee:	4b7b      	ldr	r3, [pc, #492]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0ed      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006bfa:	7dfb      	ldrb	r3, [r7, #23]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d126      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c0e:	d10d      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006c10:	4b72      	ldr	r3, [pc, #456]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c1e:	0919      	lsrs	r1, r3, #4
 8006c20:	4b70      	ldr	r3, [pc, #448]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006c22:	400b      	ands	r3, r1
 8006c24:	496d      	ldr	r1, [pc, #436]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	610b      	str	r3, [r1, #16]
 8006c2a:	e005      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006c2c:	4b6b      	ldr	r3, [pc, #428]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	4a6a      	ldr	r2, [pc, #424]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c32:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c36:	6113      	str	r3, [r2, #16]
 8006c38:	4b68      	ldr	r3, [pc, #416]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c46:	4965      	ldr	r1, [pc, #404]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	670b      	str	r3, [r1, #112]	; 0x70
 8006c4c:	e004      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	75bb      	strb	r3, [r7, #22]
 8006c52:	e001      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
 8006c56:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d07e      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c68:	2b28      	cmp	r3, #40	; 0x28
 8006c6a:	d867      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006c6c:	a201      	add	r2, pc, #4	; (adr r2, 8006c74 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c72:	bf00      	nop
 8006c74:	08006d43 	.word	0x08006d43
 8006c78:	08006d3d 	.word	0x08006d3d
 8006c7c:	08006d3d 	.word	0x08006d3d
 8006c80:	08006d3d 	.word	0x08006d3d
 8006c84:	08006d3d 	.word	0x08006d3d
 8006c88:	08006d3d 	.word	0x08006d3d
 8006c8c:	08006d3d 	.word	0x08006d3d
 8006c90:	08006d3d 	.word	0x08006d3d
 8006c94:	08006d19 	.word	0x08006d19
 8006c98:	08006d3d 	.word	0x08006d3d
 8006c9c:	08006d3d 	.word	0x08006d3d
 8006ca0:	08006d3d 	.word	0x08006d3d
 8006ca4:	08006d3d 	.word	0x08006d3d
 8006ca8:	08006d3d 	.word	0x08006d3d
 8006cac:	08006d3d 	.word	0x08006d3d
 8006cb0:	08006d3d 	.word	0x08006d3d
 8006cb4:	08006d2b 	.word	0x08006d2b
 8006cb8:	08006d3d 	.word	0x08006d3d
 8006cbc:	08006d3d 	.word	0x08006d3d
 8006cc0:	08006d3d 	.word	0x08006d3d
 8006cc4:	08006d3d 	.word	0x08006d3d
 8006cc8:	08006d3d 	.word	0x08006d3d
 8006ccc:	08006d3d 	.word	0x08006d3d
 8006cd0:	08006d3d 	.word	0x08006d3d
 8006cd4:	08006d43 	.word	0x08006d43
 8006cd8:	08006d3d 	.word	0x08006d3d
 8006cdc:	08006d3d 	.word	0x08006d3d
 8006ce0:	08006d3d 	.word	0x08006d3d
 8006ce4:	08006d3d 	.word	0x08006d3d
 8006ce8:	08006d3d 	.word	0x08006d3d
 8006cec:	08006d3d 	.word	0x08006d3d
 8006cf0:	08006d3d 	.word	0x08006d3d
 8006cf4:	08006d43 	.word	0x08006d43
 8006cf8:	08006d3d 	.word	0x08006d3d
 8006cfc:	08006d3d 	.word	0x08006d3d
 8006d00:	08006d3d 	.word	0x08006d3d
 8006d04:	08006d3d 	.word	0x08006d3d
 8006d08:	08006d3d 	.word	0x08006d3d
 8006d0c:	08006d3d 	.word	0x08006d3d
 8006d10:	08006d3d 	.word	0x08006d3d
 8006d14:	08006d43 	.word	0x08006d43
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f001 fc18 	bl	8008554 <RCCEx_PLL2_Config>
 8006d24:	4603      	mov	r3, r0
 8006d26:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d28:	e00c      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	3324      	adds	r3, #36	; 0x24
 8006d2e:	2101      	movs	r1, #1
 8006d30:	4618      	mov	r0, r3
 8006d32:	f001 fcc1 	bl	80086b8 <RCCEx_PLL3_Config>
 8006d36:	4603      	mov	r3, r0
 8006d38:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d3a:	e003      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d40:	e000      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006d42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d44:	7dfb      	ldrb	r3, [r7, #23]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d109      	bne.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006d4a:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d56:	4921      	ldr	r1, [pc, #132]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	654b      	str	r3, [r1, #84]	; 0x54
 8006d5c:	e001      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5e:	7dfb      	ldrb	r3, [r7, #23]
 8006d60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d03e      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d72:	2b05      	cmp	r3, #5
 8006d74:	d820      	bhi.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006d76:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7c:	08006dbf 	.word	0x08006dbf
 8006d80:	08006d95 	.word	0x08006d95
 8006d84:	08006da7 	.word	0x08006da7
 8006d88:	08006dbf 	.word	0x08006dbf
 8006d8c:	08006dbf 	.word	0x08006dbf
 8006d90:	08006dbf 	.word	0x08006dbf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	3304      	adds	r3, #4
 8006d98:	2101      	movs	r1, #1
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f001 fbda 	bl	8008554 <RCCEx_PLL2_Config>
 8006da0:	4603      	mov	r3, r0
 8006da2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006da4:	e00c      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3324      	adds	r3, #36	; 0x24
 8006daa:	2101      	movs	r1, #1
 8006dac:	4618      	mov	r0, r3
 8006dae:	f001 fc83 	bl	80086b8 <RCCEx_PLL3_Config>
 8006db2:	4603      	mov	r3, r0
 8006db4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006db6:	e003      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	75fb      	strb	r3, [r7, #23]
      break;
 8006dbc:	e000      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d110      	bne.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006dc6:	4b05      	ldr	r3, [pc, #20]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dca:	f023 0207 	bic.w	r2, r3, #7
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd2:	4902      	ldr	r1, [pc, #8]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	654b      	str	r3, [r1, #84]	; 0x54
 8006dd8:	e008      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006dda:	bf00      	nop
 8006ddc:	58024400 	.word	0x58024400
 8006de0:	58024800 	.word	0x58024800
 8006de4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
 8006dea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d039      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dfe:	2b05      	cmp	r3, #5
 8006e00:	d820      	bhi.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006e02:	a201      	add	r2, pc, #4	; (adr r2, 8006e08 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e08:	08006e4b 	.word	0x08006e4b
 8006e0c:	08006e21 	.word	0x08006e21
 8006e10:	08006e33 	.word	0x08006e33
 8006e14:	08006e4b 	.word	0x08006e4b
 8006e18:	08006e4b 	.word	0x08006e4b
 8006e1c:	08006e4b 	.word	0x08006e4b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3304      	adds	r3, #4
 8006e24:	2101      	movs	r1, #1
 8006e26:	4618      	mov	r0, r3
 8006e28:	f001 fb94 	bl	8008554 <RCCEx_PLL2_Config>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e30:	e00c      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	3324      	adds	r3, #36	; 0x24
 8006e36:	2101      	movs	r1, #1
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f001 fc3d 	bl	80086b8 <RCCEx_PLL3_Config>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e42:	e003      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	75fb      	strb	r3, [r7, #23]
      break;
 8006e48:	e000      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10a      	bne.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e52:	4bb7      	ldr	r3, [pc, #732]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e56:	f023 0207 	bic.w	r2, r3, #7
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e60:	49b3      	ldr	r1, [pc, #716]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	658b      	str	r3, [r1, #88]	; 0x58
 8006e66:	e001      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0320 	and.w	r3, r3, #32
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d04b      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e82:	d02e      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e88:	d828      	bhi.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e8e:	d02a      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e94:	d822      	bhi.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006e96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e9a:	d026      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006e9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ea0:	d81c      	bhi.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ea6:	d010      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eac:	d816      	bhi.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d01d      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006eb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006eb6:	d111      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	3304      	adds	r3, #4
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f001 fb48 	bl	8008554 <RCCEx_PLL2_Config>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006ec8:	e012      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3324      	adds	r3, #36	; 0x24
 8006ece:	2102      	movs	r1, #2
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f001 fbf1 	bl	80086b8 <RCCEx_PLL3_Config>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006eda:	e009      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee0:	e006      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006ee2:	bf00      	nop
 8006ee4:	e004      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006ee6:	bf00      	nop
 8006ee8:	e002      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006eea:	bf00      	nop
 8006eec:	e000      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10a      	bne.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ef6:	4b8e      	ldr	r3, [pc, #568]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f04:	498a      	ldr	r1, [pc, #552]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	654b      	str	r3, [r1, #84]	; 0x54
 8006f0a:	e001      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f0c:	7dfb      	ldrb	r3, [r7, #23]
 8006f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d04b      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f26:	d02e      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006f28:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f2c:	d828      	bhi.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f32:	d02a      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f38:	d822      	bhi.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006f3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f3e:	d026      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006f40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f44:	d81c      	bhi.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f4a:	d010      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f50:	d816      	bhi.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01d      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f5a:	d111      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	2100      	movs	r1, #0
 8006f62:	4618      	mov	r0, r3
 8006f64:	f001 faf6 	bl	8008554 <RCCEx_PLL2_Config>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006f6c:	e012      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	3324      	adds	r3, #36	; 0x24
 8006f72:	2102      	movs	r1, #2
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 fb9f 	bl	80086b8 <RCCEx_PLL3_Config>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006f7e:	e009      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	75fb      	strb	r3, [r7, #23]
      break;
 8006f84:	e006      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006f86:	bf00      	nop
 8006f88:	e004      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006f8a:	bf00      	nop
 8006f8c:	e002      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006f8e:	bf00      	nop
 8006f90:	e000      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006f92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f9a:	4b65      	ldr	r3, [pc, #404]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fa8:	4961      	ldr	r1, [pc, #388]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	658b      	str	r3, [r1, #88]	; 0x58
 8006fae:	e001      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
 8006fb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d04b      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006fca:	d02e      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006fcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006fd0:	d828      	bhi.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fd6:	d02a      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fdc:	d822      	bhi.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006fde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006fe2:	d026      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006fe4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006fe8:	d81c      	bhi.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fee:	d010      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ff4:	d816      	bhi.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d01d      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ffe:	d111      	bne.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	3304      	adds	r3, #4
 8007004:	2100      	movs	r1, #0
 8007006:	4618      	mov	r0, r3
 8007008:	f001 faa4 	bl	8008554 <RCCEx_PLL2_Config>
 800700c:	4603      	mov	r3, r0
 800700e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007010:	e012      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3324      	adds	r3, #36	; 0x24
 8007016:	2102      	movs	r1, #2
 8007018:	4618      	mov	r0, r3
 800701a:	f001 fb4d 	bl	80086b8 <RCCEx_PLL3_Config>
 800701e:	4603      	mov	r3, r0
 8007020:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007022:	e009      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	75fb      	strb	r3, [r7, #23]
      break;
 8007028:	e006      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800702a:	bf00      	nop
 800702c:	e004      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800702e:	bf00      	nop
 8007030:	e002      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007032:	bf00      	nop
 8007034:	e000      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007038:	7dfb      	ldrb	r3, [r7, #23]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800703e:	4b3c      	ldr	r3, [pc, #240]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800704c:	4938      	ldr	r1, [pc, #224]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800704e:	4313      	orrs	r3, r2
 8007050:	658b      	str	r3, [r1, #88]	; 0x58
 8007052:	e001      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007054:	7dfb      	ldrb	r3, [r7, #23]
 8007056:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0308 	and.w	r3, r3, #8
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01a      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800706a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800706e:	d10a      	bne.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	3324      	adds	r3, #36	; 0x24
 8007074:	2102      	movs	r1, #2
 8007076:	4618      	mov	r0, r3
 8007078:	f001 fb1e 	bl	80086b8 <RCCEx_PLL3_Config>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007086:	4b2a      	ldr	r3, [pc, #168]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007094:	4926      	ldr	r1, [pc, #152]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007096:	4313      	orrs	r3, r2
 8007098:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0310 	and.w	r3, r3, #16
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d01a      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b0:	d10a      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3324      	adds	r3, #36	; 0x24
 80070b6:	2102      	movs	r1, #2
 80070b8:	4618      	mov	r0, r3
 80070ba:	f001 fafd 	bl	80086b8 <RCCEx_PLL3_Config>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070c8:	4b19      	ldr	r3, [pc, #100]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80070ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070d6:	4916      	ldr	r1, [pc, #88]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d036      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80070ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070f2:	d01f      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80070f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070f8:	d817      	bhi.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80070fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007102:	d009      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007104:	e011      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3304      	adds	r3, #4
 800710a:	2100      	movs	r1, #0
 800710c:	4618      	mov	r0, r3
 800710e:	f001 fa21 	bl	8008554 <RCCEx_PLL2_Config>
 8007112:	4603      	mov	r3, r0
 8007114:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007116:	e00e      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3324      	adds	r3, #36	; 0x24
 800711c:	2102      	movs	r1, #2
 800711e:	4618      	mov	r0, r3
 8007120:	f001 faca 	bl	80086b8 <RCCEx_PLL3_Config>
 8007124:	4603      	mov	r3, r0
 8007126:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007128:	e005      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	75fb      	strb	r3, [r7, #23]
      break;
 800712e:	e002      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007130:	58024400 	.word	0x58024400
      break;
 8007134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007136:	7dfb      	ldrb	r3, [r7, #23]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10a      	bne.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800713c:	4b93      	ldr	r3, [pc, #588]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800713e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800714a:	4990      	ldr	r1, [pc, #576]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800714c:	4313      	orrs	r3, r2
 800714e:	658b      	str	r3, [r1, #88]	; 0x58
 8007150:	e001      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d033      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007168:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800716c:	d01c      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800716e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007172:	d816      	bhi.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007178:	d003      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800717a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800717e:	d007      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007180:	e00f      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007182:	4b82      	ldr	r3, [pc, #520]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007186:	4a81      	ldr	r2, [pc, #516]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800718c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800718e:	e00c      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3324      	adds	r3, #36	; 0x24
 8007194:	2101      	movs	r1, #1
 8007196:	4618      	mov	r0, r3
 8007198:	f001 fa8e 	bl	80086b8 <RCCEx_PLL3_Config>
 800719c:	4603      	mov	r3, r0
 800719e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80071a0:	e003      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	75fb      	strb	r3, [r7, #23]
      break;
 80071a6:	e000      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80071a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10a      	bne.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071b0:	4b76      	ldr	r3, [pc, #472]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071be:	4973      	ldr	r1, [pc, #460]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	654b      	str	r3, [r1, #84]	; 0x54
 80071c4:	e001      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
 80071c8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d029      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80071de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e2:	d007      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80071e4:	e00f      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e6:	4b69      	ldr	r3, [pc, #420]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ea:	4a68      	ldr	r2, [pc, #416]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80071f2:	e00b      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	3304      	adds	r3, #4
 80071f8:	2102      	movs	r1, #2
 80071fa:	4618      	mov	r0, r3
 80071fc:	f001 f9aa 	bl	8008554 <RCCEx_PLL2_Config>
 8007200:	4603      	mov	r3, r0
 8007202:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007204:	e002      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	75fb      	strb	r3, [r7, #23]
      break;
 800720a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800720c:	7dfb      	ldrb	r3, [r7, #23]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d109      	bne.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007212:	4b5e      	ldr	r3, [pc, #376]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007216:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800721e:	495b      	ldr	r1, [pc, #364]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007220:	4313      	orrs	r3, r2
 8007222:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007224:	e001      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007226:	7dfb      	ldrb	r3, [r7, #23]
 8007228:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	3324      	adds	r3, #36	; 0x24
 800723a:	2102      	movs	r1, #2
 800723c:	4618      	mov	r0, r3
 800723e:	f001 fa3b 	bl	80086b8 <RCCEx_PLL3_Config>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d030      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800725c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007260:	d017      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007266:	d811      	bhi.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800726c:	d013      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800726e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007272:	d80b      	bhi.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007274:	2b00      	cmp	r3, #0
 8007276:	d010      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800727c:	d106      	bne.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800727e:	4b43      	ldr	r3, [pc, #268]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007282:	4a42      	ldr	r2, [pc, #264]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007288:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800728a:	e007      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	75fb      	strb	r3, [r7, #23]
      break;
 8007290:	e004      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007292:	bf00      	nop
 8007294:	e002      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007296:	bf00      	nop
 8007298:	e000      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800729a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800729c:	7dfb      	ldrb	r3, [r7, #23]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072a2:	4b3a      	ldr	r3, [pc, #232]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ae:	4937      	ldr	r1, [pc, #220]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	654b      	str	r3, [r1, #84]	; 0x54
 80072b4:	e001      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b6:	7dfb      	ldrb	r3, [r7, #23]
 80072b8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d008      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072c6:	4b31      	ldr	r3, [pc, #196]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d2:	492e      	ldr	r1, [pc, #184]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d009      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80072e4:	4b29      	ldr	r3, [pc, #164]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072f2:	4926      	ldr	r1, [pc, #152]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d008      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007304:	4b21      	ldr	r3, [pc, #132]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007308:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007310:	491e      	ldr	r1, [pc, #120]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007312:	4313      	orrs	r3, r2
 8007314:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00d      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007322:	4b1a      	ldr	r3, [pc, #104]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	4a19      	ldr	r2, [pc, #100]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007328:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800732c:	6113      	str	r3, [r2, #16]
 800732e:	4b17      	ldr	r3, [pc, #92]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007330:	691a      	ldr	r2, [r3, #16]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007338:	4914      	ldr	r1, [pc, #80]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800733a:	4313      	orrs	r3, r2
 800733c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	da08      	bge.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007346:	4b11      	ldr	r3, [pc, #68]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800734a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007352:	490e      	ldr	r1, [pc, #56]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007354:	4313      	orrs	r3, r2
 8007356:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d009      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007364:	4b09      	ldr	r3, [pc, #36]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007368:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007372:	4906      	ldr	r1, [pc, #24]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007374:	4313      	orrs	r3, r2
 8007376:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007378:	7dbb      	ldrb	r3, [r7, #22]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	e000      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
}
 8007384:	4618      	mov	r0, r3
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	58024400 	.word	0x58024400

08007390 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b090      	sub	sp, #64	; 0x40
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800739e:	f040 8095 	bne.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80073a2:	4bae      	ldr	r3, [pc, #696]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80073a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	633b      	str	r3, [r7, #48]	; 0x30
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	f200 8088 	bhi.w	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80073b4:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80073b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ba:	bf00      	nop
 80073bc:	080073d1 	.word	0x080073d1
 80073c0:	080073f9 	.word	0x080073f9
 80073c4:	08007421 	.word	0x08007421
 80073c8:	080074bd 	.word	0x080074bd
 80073cc:	08007449 	.word	0x08007449

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073d0:	4ba2      	ldr	r3, [pc, #648]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073dc:	d108      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 ff64 	bl	80082b0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80073e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073ec:	f000 bc95 	b.w	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073f4:	f000 bc91 	b.w	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073f8:	4b98      	ldr	r3, [pc, #608]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007404:	d108      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007406:	f107 0318 	add.w	r3, r7, #24
 800740a:	4618      	mov	r0, r3
 800740c:	f000 fca8 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007414:	f000 bc81 	b.w	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007418:	2300      	movs	r3, #0
 800741a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800741c:	f000 bc7d 	b.w	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007420:	4b8e      	ldr	r3, [pc, #568]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800742c:	d108      	bne.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800742e:	f107 030c 	add.w	r3, r7, #12
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fde8 	bl	8008008 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800743c:	f000 bc6d 	b.w	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007440:	2300      	movs	r3, #0
 8007442:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007444:	f000 bc69 	b.w	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007448:	4b84      	ldr	r3, [pc, #528]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800744a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800744c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007450:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007452:	4b82      	ldr	r3, [pc, #520]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0304 	and.w	r3, r3, #4
 800745a:	2b04      	cmp	r3, #4
 800745c:	d10c      	bne.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800745e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007460:	2b00      	cmp	r3, #0
 8007462:	d109      	bne.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007464:	4b7d      	ldr	r3, [pc, #500]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	08db      	lsrs	r3, r3, #3
 800746a:	f003 0303 	and.w	r3, r3, #3
 800746e:	4a7c      	ldr	r2, [pc, #496]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007470:	fa22 f303 	lsr.w	r3, r2, r3
 8007474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007476:	e01f      	b.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007478:	4b78      	ldr	r3, [pc, #480]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007484:	d106      	bne.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007488:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800748c:	d102      	bne.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800748e:	4b75      	ldr	r3, [pc, #468]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007492:	e011      	b.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007494:	4b71      	ldr	r3, [pc, #452]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800749c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074a0:	d106      	bne.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80074a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074a8:	d102      	bne.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80074aa:	4b6f      	ldr	r3, [pc, #444]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80074ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074ae:	e003      	b.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80074b0:	2300      	movs	r3, #0
 80074b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80074b4:	f000 bc31 	b.w	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80074b8:	f000 bc2f 	b.w	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80074bc:	4b6b      	ldr	r3, [pc, #428]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80074be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074c0:	f000 bc2b 	b.w	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074c8:	f000 bc27 	b.w	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074d2:	f040 8095 	bne.w	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80074d6:	4b61      	ldr	r3, [pc, #388]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074da:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80074de:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80074e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e6:	d04d      	beq.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ee:	f200 8084 	bhi.w	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	2bc0      	cmp	r3, #192	; 0xc0
 80074f6:	d07d      	beq.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	2bc0      	cmp	r3, #192	; 0xc0
 80074fc:	d87d      	bhi.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	2b80      	cmp	r3, #128	; 0x80
 8007502:	d02d      	beq.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007506:	2b80      	cmp	r3, #128	; 0x80
 8007508:	d877      	bhi.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	2b00      	cmp	r3, #0
 800750e:	d003      	beq.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	2b40      	cmp	r3, #64	; 0x40
 8007514:	d012      	beq.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8007516:	e070      	b.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007518:	4b50      	ldr	r3, [pc, #320]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007520:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007524:	d107      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fec0 	bl	80082b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007534:	e3f1      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007536:	2300      	movs	r3, #0
 8007538:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800753a:	e3ee      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800753c:	4b47      	ldr	r3, [pc, #284]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007548:	d107      	bne.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800754a:	f107 0318 	add.w	r3, r7, #24
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fc06 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007558:	e3df      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800755e:	e3dc      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007560:	4b3e      	ldr	r3, [pc, #248]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800756c:	d107      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800756e:	f107 030c 	add.w	r3, r7, #12
 8007572:	4618      	mov	r0, r3
 8007574:	f000 fd48 	bl	8008008 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800757c:	e3cd      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800757e:	2300      	movs	r3, #0
 8007580:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007582:	e3ca      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007584:	4b35      	ldr	r3, [pc, #212]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007588:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800758c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800758e:	4b33      	ldr	r3, [pc, #204]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0304 	and.w	r3, r3, #4
 8007596:	2b04      	cmp	r3, #4
 8007598:	d10c      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800759a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759c:	2b00      	cmp	r3, #0
 800759e:	d109      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075a0:	4b2e      	ldr	r3, [pc, #184]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	08db      	lsrs	r3, r3, #3
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	4a2d      	ldr	r2, [pc, #180]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80075ac:	fa22 f303 	lsr.w	r3, r2, r3
 80075b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075b2:	e01e      	b.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075b4:	4b29      	ldr	r3, [pc, #164]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075c0:	d106      	bne.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80075c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075c8:	d102      	bne.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80075ca:	4b26      	ldr	r3, [pc, #152]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80075cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075ce:	e010      	b.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075d0:	4b22      	ldr	r3, [pc, #136]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075dc:	d106      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80075de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075e4:	d102      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80075e6:	4b20      	ldr	r3, [pc, #128]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80075e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075ea:	e002      	b.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80075ec:	2300      	movs	r3, #0
 80075ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80075f0:	e393      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80075f2:	e392      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80075f4:	4b1d      	ldr	r3, [pc, #116]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80075f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075f8:	e38f      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075fe:	e38c      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007606:	f040 80a7 	bne.w	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800760a:	4b14      	ldr	r3, [pc, #80]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800760c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800760e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007612:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007616:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800761a:	d05f      	beq.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007622:	f200 8096 	bhi.w	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800762c:	f000 808e 	beq.w	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8007630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007632:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007636:	f200 808c 	bhi.w	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007640:	d03a      	beq.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007648:	f200 8083 	bhi.w	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00e      	beq.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007658:	d01c      	beq.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800765a:	e07a      	b.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800765c:	58024400 	.word	0x58024400
 8007660:	03d09000 	.word	0x03d09000
 8007664:	003d0900 	.word	0x003d0900
 8007668:	017d7840 	.word	0x017d7840
 800766c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007670:	4baa      	ldr	r3, [pc, #680]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007678:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800767c:	d107      	bne.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800767e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fe14 	bl	80082b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800768c:	e345      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800768e:	2300      	movs	r3, #0
 8007690:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007692:	e342      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007694:	4ba1      	ldr	r3, [pc, #644]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800769c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076a0:	d107      	bne.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076a2:	f107 0318 	add.w	r3, r7, #24
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 fb5a 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80076b0:	e333      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076b6:	e330      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076b8:	4b98      	ldr	r3, [pc, #608]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076c4:	d107      	bne.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076c6:	f107 030c 	add.w	r3, r7, #12
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 fc9c 	bl	8008008 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80076d4:	e321      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076da:	e31e      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80076dc:	4b8f      	ldr	r3, [pc, #572]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80076de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076e4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80076e6:	4b8d      	ldr	r3, [pc, #564]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0304 	and.w	r3, r3, #4
 80076ee:	2b04      	cmp	r3, #4
 80076f0:	d10c      	bne.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80076f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d109      	bne.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076f8:	4b88      	ldr	r3, [pc, #544]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	08db      	lsrs	r3, r3, #3
 80076fe:	f003 0303 	and.w	r3, r3, #3
 8007702:	4a87      	ldr	r2, [pc, #540]	; (8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007704:	fa22 f303 	lsr.w	r3, r2, r3
 8007708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800770a:	e01e      	b.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800770c:	4b83      	ldr	r3, [pc, #524]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007718:	d106      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800771a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007720:	d102      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007722:	4b80      	ldr	r3, [pc, #512]	; (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007726:	e010      	b.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007728:	4b7c      	ldr	r3, [pc, #496]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007730:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007734:	d106      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8007736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800773c:	d102      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800773e:	4b7a      	ldr	r3, [pc, #488]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007742:	e002      	b.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007744:	2300      	movs	r3, #0
 8007746:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007748:	e2e7      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800774a:	e2e6      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800774c:	4b77      	ldr	r3, [pc, #476]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800774e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007750:	e2e3      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007752:	2300      	movs	r3, #0
 8007754:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007756:	e2e0      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800775e:	f040 809c 	bne.w	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007762:	4b6e      	ldr	r3, [pc, #440]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007766:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800776a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007772:	d054      	beq.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800777a:	f200 808b 	bhi.w	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007780:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007784:	f000 8083 	beq.w	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8007788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800778e:	f200 8081 	bhi.w	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007798:	d02f      	beq.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077a0:	d878      	bhi.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d004      	beq.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077ae:	d012      	beq.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80077b0:	e070      	b.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077b2:	4b5a      	ldr	r3, [pc, #360]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077be:	d107      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fd73 	bl	80082b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80077ce:	e2a4      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077d4:	e2a1      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077d6:	4b51      	ldr	r3, [pc, #324]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077e2:	d107      	bne.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077e4:	f107 0318 	add.w	r3, r7, #24
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 fab9 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80077f2:	e292      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077f8:	e28f      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077fa:	4b48      	ldr	r3, [pc, #288]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007806:	d107      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007808:	f107 030c 	add.w	r3, r7, #12
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fbfb 	bl	8008008 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007816:	e280      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007818:	2300      	movs	r3, #0
 800781a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800781c:	e27d      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800781e:	4b3f      	ldr	r3, [pc, #252]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007822:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007826:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007828:	4b3c      	ldr	r3, [pc, #240]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0304 	and.w	r3, r3, #4
 8007830:	2b04      	cmp	r3, #4
 8007832:	d10c      	bne.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007836:	2b00      	cmp	r3, #0
 8007838:	d109      	bne.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800783a:	4b38      	ldr	r3, [pc, #224]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	08db      	lsrs	r3, r3, #3
 8007840:	f003 0303 	and.w	r3, r3, #3
 8007844:	4a36      	ldr	r2, [pc, #216]	; (8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007846:	fa22 f303 	lsr.w	r3, r2, r3
 800784a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800784c:	e01e      	b.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800784e:	4b33      	ldr	r3, [pc, #204]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800785a:	d106      	bne.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800785c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007862:	d102      	bne.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007864:	4b2f      	ldr	r3, [pc, #188]	; (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007868:	e010      	b.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800786a:	4b2c      	ldr	r3, [pc, #176]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007872:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007876:	d106      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8007878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800787e:	d102      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007880:	4b29      	ldr	r3, [pc, #164]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007884:	e002      	b.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007886:	2300      	movs	r3, #0
 8007888:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800788a:	e246      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800788c:	e245      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800788e:	4b27      	ldr	r3, [pc, #156]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007890:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007892:	e242      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007898:	e23f      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a0:	f040 80a8 	bne.w	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80078a4:	4b1d      	ldr	r3, [pc, #116]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80078a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80078ac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80078ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078b4:	d060      	beq.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80078b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078bc:	f200 8097 	bhi.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80078c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078c6:	f000 808f 	beq.w	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80078ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078d0:	f200 808d 	bhi.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80078d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078da:	d03b      	beq.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80078dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078e2:	f200 8084 	bhi.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d004      	beq.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80078ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f2:	d01d      	beq.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80078f4:	e07b      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078f6:	4b09      	ldr	r3, [pc, #36]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007902:	d107      	bne.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fcd1 	bl	80082b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007910:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007912:	e202      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007918:	e1ff      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800791a:	bf00      	nop
 800791c:	58024400 	.word	0x58024400
 8007920:	03d09000 	.word	0x03d09000
 8007924:	003d0900 	.word	0x003d0900
 8007928:	017d7840 	.word	0x017d7840
 800792c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007930:	4ba3      	ldr	r3, [pc, #652]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800793c:	d107      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800793e:	f107 0318 	add.w	r3, r7, #24
 8007942:	4618      	mov	r0, r3
 8007944:	f000 fa0c 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800794c:	e1e5      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800794e:	2300      	movs	r3, #0
 8007950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007952:	e1e2      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007954:	4b9a      	ldr	r3, [pc, #616]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800795c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007960:	d107      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007962:	f107 030c 	add.w	r3, r7, #12
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fb4e 	bl	8008008 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007970:	e1d3      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007972:	2300      	movs	r3, #0
 8007974:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007976:	e1d0      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007978:	4b91      	ldr	r3, [pc, #580]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800797a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800797c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007980:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007982:	4b8f      	ldr	r3, [pc, #572]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0304 	and.w	r3, r3, #4
 800798a:	2b04      	cmp	r3, #4
 800798c:	d10c      	bne.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800798e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007990:	2b00      	cmp	r3, #0
 8007992:	d109      	bne.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007994:	4b8a      	ldr	r3, [pc, #552]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	08db      	lsrs	r3, r3, #3
 800799a:	f003 0303 	and.w	r3, r3, #3
 800799e:	4a89      	ldr	r2, [pc, #548]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80079a0:	fa22 f303 	lsr.w	r3, r2, r3
 80079a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079a6:	e01e      	b.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079a8:	4b85      	ldr	r3, [pc, #532]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079b4:	d106      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80079b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079bc:	d102      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80079be:	4b82      	ldr	r3, [pc, #520]	; (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80079c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079c2:	e010      	b.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079c4:	4b7e      	ldr	r3, [pc, #504]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079d0:	d106      	bne.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80079d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079d8:	d102      	bne.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80079da:	4b7c      	ldr	r3, [pc, #496]	; (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079de:	e002      	b.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80079e4:	e199      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80079e6:	e198      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80079e8:	4b79      	ldr	r3, [pc, #484]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80079ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ec:	e195      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079f2:	e192      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80079fa:	d173      	bne.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80079fc:	4b70      	ldr	r3, [pc, #448]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a04:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a0c:	d02f      	beq.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8007a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a14:	d863      	bhi.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d004      	beq.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a22:	d012      	beq.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8007a24:	e05b      	b.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a26:	4b66      	ldr	r3, [pc, #408]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a32:	d107      	bne.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a34:	f107 0318 	add.w	r3, r7, #24
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f000 f991 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a42:	e16a      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a48:	e167      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a4a:	4b5d      	ldr	r3, [pc, #372]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a56:	d107      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a58:	f107 030c 	add.w	r3, r7, #12
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 fad3 	bl	8008008 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a66:	e158      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a6c:	e155      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a6e:	4b54      	ldr	r3, [pc, #336]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a76:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a78:	4b51      	ldr	r3, [pc, #324]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	d10c      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8007a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d109      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a8a:	4b4d      	ldr	r3, [pc, #308]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	08db      	lsrs	r3, r3, #3
 8007a90:	f003 0303 	and.w	r3, r3, #3
 8007a94:	4a4b      	ldr	r2, [pc, #300]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a96:	fa22 f303 	lsr.w	r3, r2, r3
 8007a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a9c:	e01e      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a9e:	4b48      	ldr	r3, [pc, #288]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aaa:	d106      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8007aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ab2:	d102      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007ab4:	4b44      	ldr	r3, [pc, #272]	; (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ab8:	e010      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007aba:	4b41      	ldr	r3, [pc, #260]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ac6:	d106      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ace:	d102      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007ad0:	4b3e      	ldr	r3, [pc, #248]	; (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ad4:	e002      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007ada:	e11e      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007adc:	e11d      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ae2:	e11a      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aea:	d133      	bne.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007aec:	4b34      	ldr	r3, [pc, #208]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007af4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d004      	beq.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8007afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b02:	d012      	beq.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8007b04:	e023      	b.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b06:	4b2e      	ldr	r3, [pc, #184]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b12:	d107      	bne.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 fbc9 	bl	80082b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007b22:	e0fa      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b28:	e0f7      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b2a:	4b25      	ldr	r3, [pc, #148]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b36:	d107      	bne.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b38:	f107 0318 	add.w	r3, r7, #24
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 f90f 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007b46:	e0e8      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b4c:	e0e5      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b52:	e0e2      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b5a:	f040 808f 	bne.w	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007b5e:	4b18      	ldr	r3, [pc, #96]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b62:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007b66:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b6e:	d075      	beq.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8007b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b76:	d87e      	bhi.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b7e:	d060      	beq.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b86:	d876      	bhi.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b8e:	d045      	beq.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b96:	d86e      	bhi.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b9e:	d02b      	beq.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ba6:	d866      	bhi.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d004      	beq.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bb4:	d00e      	beq.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007bb6:	e05e      	b.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007bb8:	f000 f8bc 	bl	8007d34 <HAL_RCCEx_GetD3PCLK1Freq>
 8007bbc:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007bbe:	e0ac      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007bc0:	58024400 	.word	0x58024400
 8007bc4:	03d09000 	.word	0x03d09000
 8007bc8:	003d0900 	.word	0x003d0900
 8007bcc:	017d7840 	.word	0x017d7840
 8007bd0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bd4:	4b53      	ldr	r3, [pc, #332]	; (8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007be0:	d107      	bne.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007be2:	f107 0318 	add.w	r3, r7, #24
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 f8ba 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007bf0:	e093      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bf6:	e090      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bf8:	4b4a      	ldr	r3, [pc, #296]	; (8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c04:	d107      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c06:	f107 030c 	add.w	r3, r7, #12
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 f9fc 	bl	8008008 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c14:	e081      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c16:	2300      	movs	r3, #0
 8007c18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c1a:	e07e      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c1c:	4b41      	ldr	r3, [pc, #260]	; (8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b04      	cmp	r3, #4
 8007c26:	d109      	bne.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c28:	4b3e      	ldr	r3, [pc, #248]	; (8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	08db      	lsrs	r3, r3, #3
 8007c2e:	f003 0303 	and.w	r3, r3, #3
 8007c32:	4a3d      	ldr	r2, [pc, #244]	; (8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007c34:	fa22 f303 	lsr.w	r3, r2, r3
 8007c38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c3a:	e06e      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c40:	e06b      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007c42:	4b38      	ldr	r3, [pc, #224]	; (8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c4e:	d102      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8007c50:	4b36      	ldr	r3, [pc, #216]	; (8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007c52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c54:	e061      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c5a:	e05e      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007c5c:	4b31      	ldr	r3, [pc, #196]	; (8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c68:	d102      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8007c6a:	4b31      	ldr	r3, [pc, #196]	; (8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c6e:	e054      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c74:	e051      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c7a:	e04e      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c82:	d148      	bne.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007c84:	4b27      	ldr	r3, [pc, #156]	; (8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c8c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c94:	d02a      	beq.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8007c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c9c:	d838      	bhi.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d004      	beq.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007caa:	d00d      	beq.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007cac:	e030      	b.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007cae:	4b1d      	ldr	r3, [pc, #116]	; (8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cba:	d102      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8007cbc:	4b1c      	ldr	r3, [pc, #112]	; (8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007cc0:	e02b      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cc6:	e028      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cc8:	4b16      	ldr	r3, [pc, #88]	; (8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cd4:	d107      	bne.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 fae8 	bl	80082b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007ce4:	e019      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cea:	e016      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cec:	4b0d      	ldr	r3, [pc, #52]	; (8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cf8:	d107      	bne.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cfa:	f107 0318 	add.w	r3, r7, #24
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 f82e 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007d08:	e007      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d0e:	e004      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d14:	e001      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8007d16:	2300      	movs	r3, #0
 8007d18:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3740      	adds	r7, #64	; 0x40
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	58024400 	.word	0x58024400
 8007d28:	03d09000 	.word	0x03d09000
 8007d2c:	003d0900 	.word	0x003d0900
 8007d30:	017d7840 	.word	0x017d7840

08007d34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007d38:	f7fe fbba 	bl	80064b0 <HAL_RCC_GetHCLKFreq>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	4b06      	ldr	r3, [pc, #24]	; (8007d58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	091b      	lsrs	r3, r3, #4
 8007d44:	f003 0307 	and.w	r3, r3, #7
 8007d48:	4904      	ldr	r1, [pc, #16]	; (8007d5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007d4a:	5ccb      	ldrb	r3, [r1, r3]
 8007d4c:	f003 031f 	and.w	r3, r3, #31
 8007d50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	58024400 	.word	0x58024400
 8007d5c:	0800bbf4 	.word	0x0800bbf4

08007d60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b089      	sub	sp, #36	; 0x24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d68:	4ba1      	ldr	r3, [pc, #644]	; (8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6c:	f003 0303 	and.w	r3, r3, #3
 8007d70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007d72:	4b9f      	ldr	r3, [pc, #636]	; (8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d76:	0b1b      	lsrs	r3, r3, #12
 8007d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007d7e:	4b9c      	ldr	r3, [pc, #624]	; (8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d82:	091b      	lsrs	r3, r3, #4
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007d8a:	4b99      	ldr	r3, [pc, #612]	; (8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8e:	08db      	lsrs	r3, r3, #3
 8007d90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	fb02 f303 	mul.w	r3, r2, r3
 8007d9a:	ee07 3a90 	vmov	s15, r3
 8007d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 8111 	beq.w	8007fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	f000 8083 	beq.w	8007ebc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	f200 80a1 	bhi.w	8007f00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d003      	beq.n	8007dcc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d056      	beq.n	8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007dca:	e099      	b.n	8007f00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dcc:	4b88      	ldr	r3, [pc, #544]	; (8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0320 	and.w	r3, r3, #32
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d02d      	beq.n	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007dd8:	4b85      	ldr	r3, [pc, #532]	; (8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	08db      	lsrs	r3, r3, #3
 8007dde:	f003 0303 	and.w	r3, r3, #3
 8007de2:	4a84      	ldr	r2, [pc, #528]	; (8007ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007de4:	fa22 f303 	lsr.w	r3, r2, r3
 8007de8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	ee07 3a90 	vmov	s15, r3
 8007df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	ee07 3a90 	vmov	s15, r3
 8007dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e02:	4b7b      	ldr	r3, [pc, #492]	; (8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0a:	ee07 3a90 	vmov	s15, r3
 8007e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e16:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e32:	e087      	b.n	8007f44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	ee07 3a90 	vmov	s15, r3
 8007e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007ffc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e46:	4b6a      	ldr	r3, [pc, #424]	; (8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e4e:	ee07 3a90 	vmov	s15, r3
 8007e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e76:	e065      	b.n	8007f44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	ee07 3a90 	vmov	s15, r3
 8007e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e8a:	4b59      	ldr	r3, [pc, #356]	; (8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e92:	ee07 3a90 	vmov	s15, r3
 8007e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007eba:	e043      	b.n	8007f44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	ee07 3a90 	vmov	s15, r3
 8007ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008004 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ece:	4b48      	ldr	r3, [pc, #288]	; (8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed6:	ee07 3a90 	vmov	s15, r3
 8007eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ee2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007efa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007efe:	e021      	b.n	8007f44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	ee07 3a90 	vmov	s15, r3
 8007f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f12:	4b37      	ldr	r3, [pc, #220]	; (8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f1a:	ee07 3a90 	vmov	s15, r3
 8007f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007f44:	4b2a      	ldr	r3, [pc, #168]	; (8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f48:	0a5b      	lsrs	r3, r3, #9
 8007f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f4e:	ee07 3a90 	vmov	s15, r3
 8007f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f6a:	ee17 2a90 	vmov	r2, s15
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007f72:	4b1f      	ldr	r3, [pc, #124]	; (8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f76:	0c1b      	lsrs	r3, r3, #16
 8007f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f7c:	ee07 3a90 	vmov	s15, r3
 8007f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f98:	ee17 2a90 	vmov	r2, s15
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007fa0:	4b13      	ldr	r3, [pc, #76]	; (8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa4:	0e1b      	lsrs	r3, r3, #24
 8007fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fba:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fc6:	ee17 2a90 	vmov	r2, s15
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007fce:	e008      	b.n	8007fe2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	609a      	str	r2, [r3, #8]
}
 8007fe2:	bf00      	nop
 8007fe4:	3724      	adds	r7, #36	; 0x24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	58024400 	.word	0x58024400
 8007ff4:	03d09000 	.word	0x03d09000
 8007ff8:	46000000 	.word	0x46000000
 8007ffc:	4c742400 	.word	0x4c742400
 8008000:	4a742400 	.word	0x4a742400
 8008004:	4bbebc20 	.word	0x4bbebc20

08008008 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008008:	b480      	push	{r7}
 800800a:	b089      	sub	sp, #36	; 0x24
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008010:	4ba1      	ldr	r3, [pc, #644]	; (8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008014:	f003 0303 	and.w	r3, r3, #3
 8008018:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800801a:	4b9f      	ldr	r3, [pc, #636]	; (8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800801c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801e:	0d1b      	lsrs	r3, r3, #20
 8008020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008024:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008026:	4b9c      	ldr	r3, [pc, #624]	; (8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802a:	0a1b      	lsrs	r3, r3, #8
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008032:	4b99      	ldr	r3, [pc, #612]	; (8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008036:	08db      	lsrs	r3, r3, #3
 8008038:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	fb02 f303 	mul.w	r3, r2, r3
 8008042:	ee07 3a90 	vmov	s15, r3
 8008046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800804a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 8111 	beq.w	8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b02      	cmp	r3, #2
 800805a:	f000 8083 	beq.w	8008164 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	2b02      	cmp	r3, #2
 8008062:	f200 80a1 	bhi.w	80081a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d056      	beq.n	8008120 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008072:	e099      	b.n	80081a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008074:	4b88      	ldr	r3, [pc, #544]	; (8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0320 	and.w	r3, r3, #32
 800807c:	2b00      	cmp	r3, #0
 800807e:	d02d      	beq.n	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008080:	4b85      	ldr	r3, [pc, #532]	; (8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	08db      	lsrs	r3, r3, #3
 8008086:	f003 0303 	and.w	r3, r3, #3
 800808a:	4a84      	ldr	r2, [pc, #528]	; (800829c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800808c:	fa22 f303 	lsr.w	r3, r2, r3
 8008090:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	ee07 3a90 	vmov	s15, r3
 8008098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	ee07 3a90 	vmov	s15, r3
 80080a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080aa:	4b7b      	ldr	r3, [pc, #492]	; (8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80080be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80082a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80080da:	e087      	b.n	80081ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	ee07 3a90 	vmov	s15, r3
 80080e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80080ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ee:	4b6a      	ldr	r3, [pc, #424]	; (8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008102:	eddf 5a67 	vldr	s11, [pc, #412]	; 80082a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800810a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800810e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800811a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800811e:	e065      	b.n	80081ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	ee07 3a90 	vmov	s15, r3
 8008126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800812a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800812e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008132:	4b59      	ldr	r3, [pc, #356]	; (8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800813a:	ee07 3a90 	vmov	s15, r3
 800813e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008142:	ed97 6a03 	vldr	s12, [r7, #12]
 8008146:	eddf 5a56 	vldr	s11, [pc, #344]	; 80082a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800814a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800814e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800815a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800815e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008162:	e043      	b.n	80081ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	ee07 3a90 	vmov	s15, r3
 800816a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800816e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008176:	4b48      	ldr	r3, [pc, #288]	; (8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008186:	ed97 6a03 	vldr	s12, [r7, #12]
 800818a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80082a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800818e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800819a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800819e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081a6:	e021      	b.n	80081ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	ee07 3a90 	vmov	s15, r3
 80081ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80081b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ba:	4b37      	ldr	r3, [pc, #220]	; (8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c2:	ee07 3a90 	vmov	s15, r3
 80081c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80082a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80081ec:	4b2a      	ldr	r3, [pc, #168]	; (8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f0:	0a5b      	lsrs	r3, r3, #9
 80081f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081f6:	ee07 3a90 	vmov	s15, r3
 80081fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008202:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008206:	edd7 6a07 	vldr	s13, [r7, #28]
 800820a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800820e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008212:	ee17 2a90 	vmov	r2, s15
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800821a:	4b1f      	ldr	r3, [pc, #124]	; (8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	0c1b      	lsrs	r3, r3, #16
 8008220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008224:	ee07 3a90 	vmov	s15, r3
 8008228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800822c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008230:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008234:	edd7 6a07 	vldr	s13, [r7, #28]
 8008238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800823c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008240:	ee17 2a90 	vmov	r2, s15
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008248:	4b13      	ldr	r3, [pc, #76]	; (8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	0e1b      	lsrs	r3, r3, #24
 800824e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008252:	ee07 3a90 	vmov	s15, r3
 8008256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800825e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008262:	edd7 6a07 	vldr	s13, [r7, #28]
 8008266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800826a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800826e:	ee17 2a90 	vmov	r2, s15
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008276:	e008      	b.n	800828a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	609a      	str	r2, [r3, #8]
}
 800828a:	bf00      	nop
 800828c:	3724      	adds	r7, #36	; 0x24
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	58024400 	.word	0x58024400
 800829c:	03d09000 	.word	0x03d09000
 80082a0:	46000000 	.word	0x46000000
 80082a4:	4c742400 	.word	0x4c742400
 80082a8:	4a742400 	.word	0x4a742400
 80082ac:	4bbebc20 	.word	0x4bbebc20

080082b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b089      	sub	sp, #36	; 0x24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082b8:	4ba0      	ldr	r3, [pc, #640]	; (800853c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082bc:	f003 0303 	and.w	r3, r3, #3
 80082c0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80082c2:	4b9e      	ldr	r3, [pc, #632]	; (800853c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c6:	091b      	lsrs	r3, r3, #4
 80082c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082cc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80082ce:	4b9b      	ldr	r3, [pc, #620]	; (800853c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80082d8:	4b98      	ldr	r3, [pc, #608]	; (800853c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082dc:	08db      	lsrs	r3, r3, #3
 80082de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	fb02 f303 	mul.w	r3, r2, r3
 80082e8:	ee07 3a90 	vmov	s15, r3
 80082ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f000 8111 	beq.w	800851e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	f000 8083 	beq.w	800840a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	2b02      	cmp	r3, #2
 8008308:	f200 80a1 	bhi.w	800844e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d056      	beq.n	80083c6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008318:	e099      	b.n	800844e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800831a:	4b88      	ldr	r3, [pc, #544]	; (800853c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0320 	and.w	r3, r3, #32
 8008322:	2b00      	cmp	r3, #0
 8008324:	d02d      	beq.n	8008382 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008326:	4b85      	ldr	r3, [pc, #532]	; (800853c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	08db      	lsrs	r3, r3, #3
 800832c:	f003 0303 	and.w	r3, r3, #3
 8008330:	4a83      	ldr	r2, [pc, #524]	; (8008540 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008332:	fa22 f303 	lsr.w	r3, r2, r3
 8008336:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	ee07 3a90 	vmov	s15, r3
 8008348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800834c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008350:	4b7a      	ldr	r3, [pc, #488]	; (800853c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008358:	ee07 3a90 	vmov	s15, r3
 800835c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008360:	ed97 6a03 	vldr	s12, [r7, #12]
 8008364:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008544 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008368:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800836c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008370:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008374:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800837c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008380:	e087      	b.n	8008492 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	ee07 3a90 	vmov	s15, r3
 8008388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008548 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008394:	4b69      	ldr	r3, [pc, #420]	; (800853c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800839c:	ee07 3a90 	vmov	s15, r3
 80083a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80083a8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008544 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80083ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083c4:	e065      	b.n	8008492 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	ee07 3a90 	vmov	s15, r3
 80083cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800854c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80083d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083d8:	4b58      	ldr	r3, [pc, #352]	; (800853c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e0:	ee07 3a90 	vmov	s15, r3
 80083e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008544 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80083f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008404:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008408:	e043      	b.n	8008492 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	ee07 3a90 	vmov	s15, r3
 8008410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008414:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008550 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800841c:	4b47      	ldr	r3, [pc, #284]	; (800853c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800841e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008424:	ee07 3a90 	vmov	s15, r3
 8008428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800842c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008430:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008544 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008434:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008438:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800843c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008448:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800844c:	e021      	b.n	8008492 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	ee07 3a90 	vmov	s15, r3
 8008454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008458:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008548 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800845c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008460:	4b36      	ldr	r3, [pc, #216]	; (800853c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008468:	ee07 3a90 	vmov	s15, r3
 800846c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008470:	ed97 6a03 	vldr	s12, [r7, #12]
 8008474:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008544 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008478:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800847c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008480:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008484:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800848c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008490:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008492:	4b2a      	ldr	r3, [pc, #168]	; (800853c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008496:	0a5b      	lsrs	r3, r3, #9
 8008498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800849c:	ee07 3a90 	vmov	s15, r3
 80084a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80084b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084b8:	ee17 2a90 	vmov	r2, s15
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80084c0:	4b1e      	ldr	r3, [pc, #120]	; (800853c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c4:	0c1b      	lsrs	r3, r3, #16
 80084c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ca:	ee07 3a90 	vmov	s15, r3
 80084ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084da:	edd7 6a07 	vldr	s13, [r7, #28]
 80084de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084e6:	ee17 2a90 	vmov	r2, s15
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80084ee:	4b13      	ldr	r3, [pc, #76]	; (800853c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f2:	0e1b      	lsrs	r3, r3, #24
 80084f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f8:	ee07 3a90 	vmov	s15, r3
 80084fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008500:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008504:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008508:	edd7 6a07 	vldr	s13, [r7, #28]
 800850c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008514:	ee17 2a90 	vmov	r2, s15
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800851c:	e008      	b.n	8008530 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	609a      	str	r2, [r3, #8]
}
 8008530:	bf00      	nop
 8008532:	3724      	adds	r7, #36	; 0x24
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	58024400 	.word	0x58024400
 8008540:	03d09000 	.word	0x03d09000
 8008544:	46000000 	.word	0x46000000
 8008548:	4c742400 	.word	0x4c742400
 800854c:	4a742400 	.word	0x4a742400
 8008550:	4bbebc20 	.word	0x4bbebc20

08008554 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008562:	4b53      	ldr	r3, [pc, #332]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 8008564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008566:	f003 0303 	and.w	r3, r3, #3
 800856a:	2b03      	cmp	r3, #3
 800856c:	d101      	bne.n	8008572 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e099      	b.n	80086a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008572:	4b4f      	ldr	r3, [pc, #316]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a4e      	ldr	r2, [pc, #312]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 8008578:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800857c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800857e:	f7f9 f8d3 	bl	8001728 <HAL_GetTick>
 8008582:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008584:	e008      	b.n	8008598 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008586:	f7f9 f8cf 	bl	8001728 <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	2b02      	cmp	r3, #2
 8008592:	d901      	bls.n	8008598 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e086      	b.n	80086a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008598:	4b45      	ldr	r3, [pc, #276]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1f0      	bne.n	8008586 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80085a4:	4b42      	ldr	r3, [pc, #264]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 80085a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	031b      	lsls	r3, r3, #12
 80085b2:	493f      	ldr	r1, [pc, #252]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	628b      	str	r3, [r1, #40]	; 0x28
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	3b01      	subs	r3, #1
 80085be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	3b01      	subs	r3, #1
 80085c8:	025b      	lsls	r3, r3, #9
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	431a      	orrs	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	3b01      	subs	r3, #1
 80085d4:	041b      	lsls	r3, r3, #16
 80085d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80085da:	431a      	orrs	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	3b01      	subs	r3, #1
 80085e2:	061b      	lsls	r3, r3, #24
 80085e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80085e8:	4931      	ldr	r1, [pc, #196]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80085ee:	4b30      	ldr	r3, [pc, #192]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 80085f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	492d      	ldr	r1, [pc, #180]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008600:	4b2b      	ldr	r3, [pc, #172]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	f023 0220 	bic.w	r2, r3, #32
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	4928      	ldr	r1, [pc, #160]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 800860e:	4313      	orrs	r3, r2
 8008610:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008612:	4b27      	ldr	r3, [pc, #156]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 8008614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008616:	4a26      	ldr	r2, [pc, #152]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 8008618:	f023 0310 	bic.w	r3, r3, #16
 800861c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800861e:	4b24      	ldr	r3, [pc, #144]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 8008620:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008622:	4b24      	ldr	r3, [pc, #144]	; (80086b4 <RCCEx_PLL2_Config+0x160>)
 8008624:	4013      	ands	r3, r2
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	69d2      	ldr	r2, [r2, #28]
 800862a:	00d2      	lsls	r2, r2, #3
 800862c:	4920      	ldr	r1, [pc, #128]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 800862e:	4313      	orrs	r3, r2
 8008630:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008632:	4b1f      	ldr	r3, [pc, #124]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 8008634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008636:	4a1e      	ldr	r2, [pc, #120]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 8008638:	f043 0310 	orr.w	r3, r3, #16
 800863c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008644:	4b1a      	ldr	r3, [pc, #104]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	4a19      	ldr	r2, [pc, #100]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 800864a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800864e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008650:	e00f      	b.n	8008672 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d106      	bne.n	8008666 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008658:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 800865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865c:	4a14      	ldr	r2, [pc, #80]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 800865e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008662:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008664:	e005      	b.n	8008672 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008666:	4b12      	ldr	r3, [pc, #72]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 8008668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866a:	4a11      	ldr	r2, [pc, #68]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 800866c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008670:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008672:	4b0f      	ldr	r3, [pc, #60]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a0e      	ldr	r2, [pc, #56]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 8008678:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800867c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800867e:	f7f9 f853 	bl	8001728 <HAL_GetTick>
 8008682:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008684:	e008      	b.n	8008698 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008686:	f7f9 f84f 	bl	8001728 <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	2b02      	cmp	r3, #2
 8008692:	d901      	bls.n	8008698 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e006      	b.n	80086a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008698:	4b05      	ldr	r3, [pc, #20]	; (80086b0 <RCCEx_PLL2_Config+0x15c>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0f0      	beq.n	8008686 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	58024400 	.word	0x58024400
 80086b4:	ffff0007 	.word	0xffff0007

080086b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80086c6:	4b53      	ldr	r3, [pc, #332]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 80086c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ca:	f003 0303 	and.w	r3, r3, #3
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d101      	bne.n	80086d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e099      	b.n	800880a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80086d6:	4b4f      	ldr	r3, [pc, #316]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a4e      	ldr	r2, [pc, #312]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 80086dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086e2:	f7f9 f821 	bl	8001728 <HAL_GetTick>
 80086e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086e8:	e008      	b.n	80086fc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80086ea:	f7f9 f81d 	bl	8001728 <HAL_GetTick>
 80086ee:	4602      	mov	r2, r0
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d901      	bls.n	80086fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80086f8:	2303      	movs	r3, #3
 80086fa:	e086      	b.n	800880a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086fc:	4b45      	ldr	r3, [pc, #276]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1f0      	bne.n	80086ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008708:	4b42      	ldr	r3, [pc, #264]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 800870a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	051b      	lsls	r3, r3, #20
 8008716:	493f      	ldr	r1, [pc, #252]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 8008718:	4313      	orrs	r3, r2
 800871a:	628b      	str	r3, [r1, #40]	; 0x28
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	3b01      	subs	r3, #1
 8008722:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	3b01      	subs	r3, #1
 800872c:	025b      	lsls	r3, r3, #9
 800872e:	b29b      	uxth	r3, r3
 8008730:	431a      	orrs	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	3b01      	subs	r3, #1
 8008738:	041b      	lsls	r3, r3, #16
 800873a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800873e:	431a      	orrs	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	3b01      	subs	r3, #1
 8008746:	061b      	lsls	r3, r3, #24
 8008748:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800874c:	4931      	ldr	r1, [pc, #196]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 800874e:	4313      	orrs	r3, r2
 8008750:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008752:	4b30      	ldr	r3, [pc, #192]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 8008754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008756:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	492d      	ldr	r1, [pc, #180]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 8008760:	4313      	orrs	r3, r2
 8008762:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008764:	4b2b      	ldr	r3, [pc, #172]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 8008766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008768:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	4928      	ldr	r1, [pc, #160]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 8008772:	4313      	orrs	r3, r2
 8008774:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008776:	4b27      	ldr	r3, [pc, #156]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 8008778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877a:	4a26      	ldr	r2, [pc, #152]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 800877c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008780:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008782:	4b24      	ldr	r3, [pc, #144]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 8008784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008786:	4b24      	ldr	r3, [pc, #144]	; (8008818 <RCCEx_PLL3_Config+0x160>)
 8008788:	4013      	ands	r3, r2
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	69d2      	ldr	r2, [r2, #28]
 800878e:	00d2      	lsls	r2, r2, #3
 8008790:	4920      	ldr	r1, [pc, #128]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 8008792:	4313      	orrs	r3, r2
 8008794:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008796:	4b1f      	ldr	r3, [pc, #124]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 8008798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879a:	4a1e      	ldr	r2, [pc, #120]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 800879c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d106      	bne.n	80087b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80087a8:	4b1a      	ldr	r3, [pc, #104]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ac:	4a19      	ldr	r2, [pc, #100]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 80087ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80087b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087b4:	e00f      	b.n	80087d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d106      	bne.n	80087ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80087bc:	4b15      	ldr	r3, [pc, #84]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 80087be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c0:	4a14      	ldr	r2, [pc, #80]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 80087c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80087c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087c8:	e005      	b.n	80087d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80087ca:	4b12      	ldr	r3, [pc, #72]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 80087cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ce:	4a11      	ldr	r2, [pc, #68]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 80087d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80087d6:	4b0f      	ldr	r3, [pc, #60]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a0e      	ldr	r2, [pc, #56]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 80087dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087e2:	f7f8 ffa1 	bl	8001728 <HAL_GetTick>
 80087e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80087e8:	e008      	b.n	80087fc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80087ea:	f7f8 ff9d 	bl	8001728 <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d901      	bls.n	80087fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e006      	b.n	800880a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80087fc:	4b05      	ldr	r3, [pc, #20]	; (8008814 <RCCEx_PLL3_Config+0x15c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d0f0      	beq.n	80087ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008808:	7bfb      	ldrb	r3, [r7, #15]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	58024400 	.word	0x58024400
 8008818:	ffff0007 	.word	0xffff0007

0800881c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e049      	b.n	80088c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d106      	bne.n	8008848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7f8 fd8e 	bl	8001364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	3304      	adds	r3, #4
 8008858:	4619      	mov	r1, r3
 800885a:	4610      	mov	r0, r2
 800885c:	f000 f99a 	bl	8008b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
	...

080088cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d001      	beq.n	80088e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e04f      	b.n	8008984 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2202      	movs	r2, #2
 80088e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68da      	ldr	r2, [r3, #12]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f042 0201 	orr.w	r2, r2, #1
 80088fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a23      	ldr	r2, [pc, #140]	; (8008990 <HAL_TIM_Base_Start_IT+0xc4>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d01d      	beq.n	8008942 <HAL_TIM_Base_Start_IT+0x76>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800890e:	d018      	beq.n	8008942 <HAL_TIM_Base_Start_IT+0x76>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a1f      	ldr	r2, [pc, #124]	; (8008994 <HAL_TIM_Base_Start_IT+0xc8>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d013      	beq.n	8008942 <HAL_TIM_Base_Start_IT+0x76>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a1e      	ldr	r2, [pc, #120]	; (8008998 <HAL_TIM_Base_Start_IT+0xcc>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d00e      	beq.n	8008942 <HAL_TIM_Base_Start_IT+0x76>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a1c      	ldr	r2, [pc, #112]	; (800899c <HAL_TIM_Base_Start_IT+0xd0>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d009      	beq.n	8008942 <HAL_TIM_Base_Start_IT+0x76>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a1b      	ldr	r2, [pc, #108]	; (80089a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d004      	beq.n	8008942 <HAL_TIM_Base_Start_IT+0x76>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a19      	ldr	r2, [pc, #100]	; (80089a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d115      	bne.n	800896e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	4b17      	ldr	r3, [pc, #92]	; (80089a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800894a:	4013      	ands	r3, r2
 800894c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b06      	cmp	r3, #6
 8008952:	d015      	beq.n	8008980 <HAL_TIM_Base_Start_IT+0xb4>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800895a:	d011      	beq.n	8008980 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0201 	orr.w	r2, r2, #1
 800896a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800896c:	e008      	b.n	8008980 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f042 0201 	orr.w	r2, r2, #1
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	e000      	b.n	8008982 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008980:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr
 8008990:	40010000 	.word	0x40010000
 8008994:	40000400 	.word	0x40000400
 8008998:	40000800 	.word	0x40000800
 800899c:	40000c00 	.word	0x40000c00
 80089a0:	40010400 	.word	0x40010400
 80089a4:	40001800 	.word	0x40001800
 80089a8:	00010007 	.word	0x00010007

080089ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d101      	bne.n	80089c4 <HAL_TIM_ConfigClockSource+0x18>
 80089c0:	2302      	movs	r3, #2
 80089c2:	e0db      	b.n	8008b7c <HAL_TIM_ConfigClockSource+0x1d0>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2202      	movs	r2, #2
 80089d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	4b69      	ldr	r3, [pc, #420]	; (8008b84 <HAL_TIM_ConfigClockSource+0x1d8>)
 80089e0:	4013      	ands	r3, r2
 80089e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a63      	ldr	r2, [pc, #396]	; (8008b88 <HAL_TIM_ConfigClockSource+0x1dc>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	f000 80a9 	beq.w	8008b52 <HAL_TIM_ConfigClockSource+0x1a6>
 8008a00:	4a61      	ldr	r2, [pc, #388]	; (8008b88 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	f200 80ae 	bhi.w	8008b64 <HAL_TIM_ConfigClockSource+0x1b8>
 8008a08:	4a60      	ldr	r2, [pc, #384]	; (8008b8c <HAL_TIM_ConfigClockSource+0x1e0>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	f000 80a1 	beq.w	8008b52 <HAL_TIM_ConfigClockSource+0x1a6>
 8008a10:	4a5e      	ldr	r2, [pc, #376]	; (8008b8c <HAL_TIM_ConfigClockSource+0x1e0>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	f200 80a6 	bhi.w	8008b64 <HAL_TIM_ConfigClockSource+0x1b8>
 8008a18:	4a5d      	ldr	r2, [pc, #372]	; (8008b90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	f000 8099 	beq.w	8008b52 <HAL_TIM_ConfigClockSource+0x1a6>
 8008a20:	4a5b      	ldr	r2, [pc, #364]	; (8008b90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	f200 809e 	bhi.w	8008b64 <HAL_TIM_ConfigClockSource+0x1b8>
 8008a28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008a2c:	f000 8091 	beq.w	8008b52 <HAL_TIM_ConfigClockSource+0x1a6>
 8008a30:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008a34:	f200 8096 	bhi.w	8008b64 <HAL_TIM_ConfigClockSource+0x1b8>
 8008a38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a3c:	f000 8089 	beq.w	8008b52 <HAL_TIM_ConfigClockSource+0x1a6>
 8008a40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a44:	f200 808e 	bhi.w	8008b64 <HAL_TIM_ConfigClockSource+0x1b8>
 8008a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a4c:	d03e      	beq.n	8008acc <HAL_TIM_ConfigClockSource+0x120>
 8008a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a52:	f200 8087 	bhi.w	8008b64 <HAL_TIM_ConfigClockSource+0x1b8>
 8008a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a5a:	f000 8085 	beq.w	8008b68 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a62:	d87f      	bhi.n	8008b64 <HAL_TIM_ConfigClockSource+0x1b8>
 8008a64:	2b70      	cmp	r3, #112	; 0x70
 8008a66:	d01a      	beq.n	8008a9e <HAL_TIM_ConfigClockSource+0xf2>
 8008a68:	2b70      	cmp	r3, #112	; 0x70
 8008a6a:	d87b      	bhi.n	8008b64 <HAL_TIM_ConfigClockSource+0x1b8>
 8008a6c:	2b60      	cmp	r3, #96	; 0x60
 8008a6e:	d050      	beq.n	8008b12 <HAL_TIM_ConfigClockSource+0x166>
 8008a70:	2b60      	cmp	r3, #96	; 0x60
 8008a72:	d877      	bhi.n	8008b64 <HAL_TIM_ConfigClockSource+0x1b8>
 8008a74:	2b50      	cmp	r3, #80	; 0x50
 8008a76:	d03c      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0x146>
 8008a78:	2b50      	cmp	r3, #80	; 0x50
 8008a7a:	d873      	bhi.n	8008b64 <HAL_TIM_ConfigClockSource+0x1b8>
 8008a7c:	2b40      	cmp	r3, #64	; 0x40
 8008a7e:	d058      	beq.n	8008b32 <HAL_TIM_ConfigClockSource+0x186>
 8008a80:	2b40      	cmp	r3, #64	; 0x40
 8008a82:	d86f      	bhi.n	8008b64 <HAL_TIM_ConfigClockSource+0x1b8>
 8008a84:	2b30      	cmp	r3, #48	; 0x30
 8008a86:	d064      	beq.n	8008b52 <HAL_TIM_ConfigClockSource+0x1a6>
 8008a88:	2b30      	cmp	r3, #48	; 0x30
 8008a8a:	d86b      	bhi.n	8008b64 <HAL_TIM_ConfigClockSource+0x1b8>
 8008a8c:	2b20      	cmp	r3, #32
 8008a8e:	d060      	beq.n	8008b52 <HAL_TIM_ConfigClockSource+0x1a6>
 8008a90:	2b20      	cmp	r3, #32
 8008a92:	d867      	bhi.n	8008b64 <HAL_TIM_ConfigClockSource+0x1b8>
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d05c      	beq.n	8008b52 <HAL_TIM_ConfigClockSource+0x1a6>
 8008a98:	2b10      	cmp	r3, #16
 8008a9a:	d05a      	beq.n	8008b52 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008a9c:	e062      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	6899      	ldr	r1, [r3, #8]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	f000 f989 	bl	8008dc4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ac0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	609a      	str	r2, [r3, #8]
      break;
 8008aca:	e04e      	b.n	8008b6a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6818      	ldr	r0, [r3, #0]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	6899      	ldr	r1, [r3, #8]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f000 f972 	bl	8008dc4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689a      	ldr	r2, [r3, #8]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008aee:	609a      	str	r2, [r3, #8]
      break;
 8008af0:	e03b      	b.n	8008b6a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6818      	ldr	r0, [r3, #0]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	6859      	ldr	r1, [r3, #4]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	461a      	mov	r2, r3
 8008b00:	f000 f8e2 	bl	8008cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2150      	movs	r1, #80	; 0x50
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 f93c 	bl	8008d88 <TIM_ITRx_SetConfig>
      break;
 8008b10:	e02b      	b.n	8008b6a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6818      	ldr	r0, [r3, #0]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	6859      	ldr	r1, [r3, #4]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	f000 f901 	bl	8008d26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2160      	movs	r1, #96	; 0x60
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 f92c 	bl	8008d88 <TIM_ITRx_SetConfig>
      break;
 8008b30:	e01b      	b.n	8008b6a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6818      	ldr	r0, [r3, #0]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	6859      	ldr	r1, [r3, #4]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	f000 f8c2 	bl	8008cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2140      	movs	r1, #64	; 0x40
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 f91c 	bl	8008d88 <TIM_ITRx_SetConfig>
      break;
 8008b50:	e00b      	b.n	8008b6a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	f000 f913 	bl	8008d88 <TIM_ITRx_SetConfig>
        break;
 8008b62:	e002      	b.n	8008b6a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008b64:	bf00      	nop
 8008b66:	e000      	b.n	8008b6a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008b68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	ffceff88 	.word	0xffceff88
 8008b88:	00100040 	.word	0x00100040
 8008b8c:	00100030 	.word	0x00100030
 8008b90:	00100020 	.word	0x00100020

08008b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a40      	ldr	r2, [pc, #256]	; (8008ca8 <TIM_Base_SetConfig+0x114>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d013      	beq.n	8008bd4 <TIM_Base_SetConfig+0x40>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bb2:	d00f      	beq.n	8008bd4 <TIM_Base_SetConfig+0x40>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a3d      	ldr	r2, [pc, #244]	; (8008cac <TIM_Base_SetConfig+0x118>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d00b      	beq.n	8008bd4 <TIM_Base_SetConfig+0x40>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a3c      	ldr	r2, [pc, #240]	; (8008cb0 <TIM_Base_SetConfig+0x11c>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d007      	beq.n	8008bd4 <TIM_Base_SetConfig+0x40>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a3b      	ldr	r2, [pc, #236]	; (8008cb4 <TIM_Base_SetConfig+0x120>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d003      	beq.n	8008bd4 <TIM_Base_SetConfig+0x40>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a3a      	ldr	r2, [pc, #232]	; (8008cb8 <TIM_Base_SetConfig+0x124>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d108      	bne.n	8008be6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a2f      	ldr	r2, [pc, #188]	; (8008ca8 <TIM_Base_SetConfig+0x114>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d01f      	beq.n	8008c2e <TIM_Base_SetConfig+0x9a>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bf4:	d01b      	beq.n	8008c2e <TIM_Base_SetConfig+0x9a>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a2c      	ldr	r2, [pc, #176]	; (8008cac <TIM_Base_SetConfig+0x118>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d017      	beq.n	8008c2e <TIM_Base_SetConfig+0x9a>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a2b      	ldr	r2, [pc, #172]	; (8008cb0 <TIM_Base_SetConfig+0x11c>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d013      	beq.n	8008c2e <TIM_Base_SetConfig+0x9a>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a2a      	ldr	r2, [pc, #168]	; (8008cb4 <TIM_Base_SetConfig+0x120>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d00f      	beq.n	8008c2e <TIM_Base_SetConfig+0x9a>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a29      	ldr	r2, [pc, #164]	; (8008cb8 <TIM_Base_SetConfig+0x124>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d00b      	beq.n	8008c2e <TIM_Base_SetConfig+0x9a>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a28      	ldr	r2, [pc, #160]	; (8008cbc <TIM_Base_SetConfig+0x128>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d007      	beq.n	8008c2e <TIM_Base_SetConfig+0x9a>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a27      	ldr	r2, [pc, #156]	; (8008cc0 <TIM_Base_SetConfig+0x12c>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d003      	beq.n	8008c2e <TIM_Base_SetConfig+0x9a>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a26      	ldr	r2, [pc, #152]	; (8008cc4 <TIM_Base_SetConfig+0x130>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d108      	bne.n	8008c40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	689a      	ldr	r2, [r3, #8]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a10      	ldr	r2, [pc, #64]	; (8008ca8 <TIM_Base_SetConfig+0x114>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d00f      	beq.n	8008c8c <TIM_Base_SetConfig+0xf8>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a12      	ldr	r2, [pc, #72]	; (8008cb8 <TIM_Base_SetConfig+0x124>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d00b      	beq.n	8008c8c <TIM_Base_SetConfig+0xf8>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a11      	ldr	r2, [pc, #68]	; (8008cbc <TIM_Base_SetConfig+0x128>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d007      	beq.n	8008c8c <TIM_Base_SetConfig+0xf8>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a10      	ldr	r2, [pc, #64]	; (8008cc0 <TIM_Base_SetConfig+0x12c>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d003      	beq.n	8008c8c <TIM_Base_SetConfig+0xf8>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a0f      	ldr	r2, [pc, #60]	; (8008cc4 <TIM_Base_SetConfig+0x130>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d103      	bne.n	8008c94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	691a      	ldr	r2, [r3, #16]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	615a      	str	r2, [r3, #20]
}
 8008c9a:	bf00      	nop
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	40010000 	.word	0x40010000
 8008cac:	40000400 	.word	0x40000400
 8008cb0:	40000800 	.word	0x40000800
 8008cb4:	40000c00 	.word	0x40000c00
 8008cb8:	40010400 	.word	0x40010400
 8008cbc:	40014000 	.word	0x40014000
 8008cc0:	40014400 	.word	0x40014400
 8008cc4:	40014800 	.word	0x40014800

08008cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b087      	sub	sp, #28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	f023 0201 	bic.w	r2, r3, #1
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	011b      	lsls	r3, r3, #4
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f023 030a 	bic.w	r3, r3, #10
 8008d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	621a      	str	r2, [r3, #32]
}
 8008d1a:	bf00      	nop
 8008d1c:	371c      	adds	r7, #28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr

08008d26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d26:	b480      	push	{r7}
 8008d28:	b087      	sub	sp, #28
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	60f8      	str	r0, [r7, #12]
 8008d2e:	60b9      	str	r1, [r7, #8]
 8008d30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	f023 0210 	bic.w	r2, r3, #16
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6a1b      	ldr	r3, [r3, #32]
 8008d48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	031b      	lsls	r3, r3, #12
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	011b      	lsls	r3, r3, #4
 8008d68:	693a      	ldr	r2, [r7, #16]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	621a      	str	r2, [r3, #32]
}
 8008d7a:	bf00      	nop
 8008d7c:	371c      	adds	r7, #28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
	...

08008d88 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	4b09      	ldr	r3, [pc, #36]	; (8008dc0 <TIM_ITRx_SetConfig+0x38>)
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008da0:	683a      	ldr	r2, [r7, #0]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	f043 0307 	orr.w	r3, r3, #7
 8008daa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	609a      	str	r2, [r3, #8]
}
 8008db2:	bf00      	nop
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	ffcfff8f 	.word	0xffcfff8f

08008dc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
 8008dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	021a      	lsls	r2, r3, #8
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	431a      	orrs	r2, r3
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	697a      	ldr	r2, [r7, #20]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	609a      	str	r2, [r3, #8]
}
 8008df8:	bf00      	nop
 8008dfa:	371c      	adds	r7, #28
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d101      	bne.n	8008e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e18:	2302      	movs	r3, #2
 8008e1a:	e068      	b.n	8008eee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2202      	movs	r2, #2
 8008e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a2e      	ldr	r2, [pc, #184]	; (8008efc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d004      	beq.n	8008e50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a2d      	ldr	r2, [pc, #180]	; (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d108      	bne.n	8008e62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a1e      	ldr	r2, [pc, #120]	; (8008efc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d01d      	beq.n	8008ec2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e8e:	d018      	beq.n	8008ec2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a1b      	ldr	r2, [pc, #108]	; (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d013      	beq.n	8008ec2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a1a      	ldr	r2, [pc, #104]	; (8008f08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d00e      	beq.n	8008ec2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a18      	ldr	r2, [pc, #96]	; (8008f0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d009      	beq.n	8008ec2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a13      	ldr	r2, [pc, #76]	; (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d004      	beq.n	8008ec2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a14      	ldr	r2, [pc, #80]	; (8008f10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d10c      	bne.n	8008edc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	40010000 	.word	0x40010000
 8008f00:	40010400 	.word	0x40010400
 8008f04:	40000400 	.word	0x40000400
 8008f08:	40000800 	.word	0x40000800
 8008f0c:	40000c00 	.word	0x40000c00
 8008f10:	40001800 	.word	0x40001800

08008f14 <__errno>:
 8008f14:	4b01      	ldr	r3, [pc, #4]	; (8008f1c <__errno+0x8>)
 8008f16:	6818      	ldr	r0, [r3, #0]
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	24000010 	.word	0x24000010

08008f20 <__libc_init_array>:
 8008f20:	b570      	push	{r4, r5, r6, lr}
 8008f22:	4d0d      	ldr	r5, [pc, #52]	; (8008f58 <__libc_init_array+0x38>)
 8008f24:	4c0d      	ldr	r4, [pc, #52]	; (8008f5c <__libc_init_array+0x3c>)
 8008f26:	1b64      	subs	r4, r4, r5
 8008f28:	10a4      	asrs	r4, r4, #2
 8008f2a:	2600      	movs	r6, #0
 8008f2c:	42a6      	cmp	r6, r4
 8008f2e:	d109      	bne.n	8008f44 <__libc_init_array+0x24>
 8008f30:	4d0b      	ldr	r5, [pc, #44]	; (8008f60 <__libc_init_array+0x40>)
 8008f32:	4c0c      	ldr	r4, [pc, #48]	; (8008f64 <__libc_init_array+0x44>)
 8008f34:	f002 fe24 	bl	800bb80 <_init>
 8008f38:	1b64      	subs	r4, r4, r5
 8008f3a:	10a4      	asrs	r4, r4, #2
 8008f3c:	2600      	movs	r6, #0
 8008f3e:	42a6      	cmp	r6, r4
 8008f40:	d105      	bne.n	8008f4e <__libc_init_array+0x2e>
 8008f42:	bd70      	pop	{r4, r5, r6, pc}
 8008f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f48:	4798      	blx	r3
 8008f4a:	3601      	adds	r6, #1
 8008f4c:	e7ee      	b.n	8008f2c <__libc_init_array+0xc>
 8008f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f52:	4798      	blx	r3
 8008f54:	3601      	adds	r6, #1
 8008f56:	e7f2      	b.n	8008f3e <__libc_init_array+0x1e>
 8008f58:	0800bfec 	.word	0x0800bfec
 8008f5c:	0800bfec 	.word	0x0800bfec
 8008f60:	0800bfec 	.word	0x0800bfec
 8008f64:	0800bff0 	.word	0x0800bff0

08008f68 <memset>:
 8008f68:	4402      	add	r2, r0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d100      	bne.n	8008f72 <memset+0xa>
 8008f70:	4770      	bx	lr
 8008f72:	f803 1b01 	strb.w	r1, [r3], #1
 8008f76:	e7f9      	b.n	8008f6c <memset+0x4>

08008f78 <__cvt>:
 8008f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f7a:	ed2d 8b02 	vpush	{d8}
 8008f7e:	eeb0 8b40 	vmov.f64	d8, d0
 8008f82:	b085      	sub	sp, #20
 8008f84:	4617      	mov	r7, r2
 8008f86:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008f88:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008f8a:	ee18 2a90 	vmov	r2, s17
 8008f8e:	f025 0520 	bic.w	r5, r5, #32
 8008f92:	2a00      	cmp	r2, #0
 8008f94:	bfb6      	itet	lt
 8008f96:	222d      	movlt	r2, #45	; 0x2d
 8008f98:	2200      	movge	r2, #0
 8008f9a:	eeb1 8b40 	vneglt.f64	d8, d0
 8008f9e:	2d46      	cmp	r5, #70	; 0x46
 8008fa0:	460c      	mov	r4, r1
 8008fa2:	701a      	strb	r2, [r3, #0]
 8008fa4:	d004      	beq.n	8008fb0 <__cvt+0x38>
 8008fa6:	2d45      	cmp	r5, #69	; 0x45
 8008fa8:	d100      	bne.n	8008fac <__cvt+0x34>
 8008faa:	3401      	adds	r4, #1
 8008fac:	2102      	movs	r1, #2
 8008fae:	e000      	b.n	8008fb2 <__cvt+0x3a>
 8008fb0:	2103      	movs	r1, #3
 8008fb2:	ab03      	add	r3, sp, #12
 8008fb4:	9301      	str	r3, [sp, #4]
 8008fb6:	ab02      	add	r3, sp, #8
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	4622      	mov	r2, r4
 8008fbc:	4633      	mov	r3, r6
 8008fbe:	eeb0 0b48 	vmov.f64	d0, d8
 8008fc2:	f000 fcc9 	bl	8009958 <_dtoa_r>
 8008fc6:	2d47      	cmp	r5, #71	; 0x47
 8008fc8:	d109      	bne.n	8008fde <__cvt+0x66>
 8008fca:	07fb      	lsls	r3, r7, #31
 8008fcc:	d407      	bmi.n	8008fde <__cvt+0x66>
 8008fce:	9b03      	ldr	r3, [sp, #12]
 8008fd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fd2:	1a1b      	subs	r3, r3, r0
 8008fd4:	6013      	str	r3, [r2, #0]
 8008fd6:	b005      	add	sp, #20
 8008fd8:	ecbd 8b02 	vpop	{d8}
 8008fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fde:	2d46      	cmp	r5, #70	; 0x46
 8008fe0:	eb00 0204 	add.w	r2, r0, r4
 8008fe4:	d10c      	bne.n	8009000 <__cvt+0x88>
 8008fe6:	7803      	ldrb	r3, [r0, #0]
 8008fe8:	2b30      	cmp	r3, #48	; 0x30
 8008fea:	d107      	bne.n	8008ffc <__cvt+0x84>
 8008fec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff4:	bf1c      	itt	ne
 8008ff6:	f1c4 0401 	rsbne	r4, r4, #1
 8008ffa:	6034      	strne	r4, [r6, #0]
 8008ffc:	6833      	ldr	r3, [r6, #0]
 8008ffe:	441a      	add	r2, r3
 8009000:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009008:	bf08      	it	eq
 800900a:	9203      	streq	r2, [sp, #12]
 800900c:	2130      	movs	r1, #48	; 0x30
 800900e:	9b03      	ldr	r3, [sp, #12]
 8009010:	4293      	cmp	r3, r2
 8009012:	d2dc      	bcs.n	8008fce <__cvt+0x56>
 8009014:	1c5c      	adds	r4, r3, #1
 8009016:	9403      	str	r4, [sp, #12]
 8009018:	7019      	strb	r1, [r3, #0]
 800901a:	e7f8      	b.n	800900e <__cvt+0x96>

0800901c <__exponent>:
 800901c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800901e:	4603      	mov	r3, r0
 8009020:	2900      	cmp	r1, #0
 8009022:	bfb8      	it	lt
 8009024:	4249      	neglt	r1, r1
 8009026:	f803 2b02 	strb.w	r2, [r3], #2
 800902a:	bfb4      	ite	lt
 800902c:	222d      	movlt	r2, #45	; 0x2d
 800902e:	222b      	movge	r2, #43	; 0x2b
 8009030:	2909      	cmp	r1, #9
 8009032:	7042      	strb	r2, [r0, #1]
 8009034:	dd2a      	ble.n	800908c <__exponent+0x70>
 8009036:	f10d 0407 	add.w	r4, sp, #7
 800903a:	46a4      	mov	ip, r4
 800903c:	270a      	movs	r7, #10
 800903e:	46a6      	mov	lr, r4
 8009040:	460a      	mov	r2, r1
 8009042:	fb91 f6f7 	sdiv	r6, r1, r7
 8009046:	fb07 1516 	mls	r5, r7, r6, r1
 800904a:	3530      	adds	r5, #48	; 0x30
 800904c:	2a63      	cmp	r2, #99	; 0x63
 800904e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009052:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009056:	4631      	mov	r1, r6
 8009058:	dcf1      	bgt.n	800903e <__exponent+0x22>
 800905a:	3130      	adds	r1, #48	; 0x30
 800905c:	f1ae 0502 	sub.w	r5, lr, #2
 8009060:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009064:	1c44      	adds	r4, r0, #1
 8009066:	4629      	mov	r1, r5
 8009068:	4561      	cmp	r1, ip
 800906a:	d30a      	bcc.n	8009082 <__exponent+0x66>
 800906c:	f10d 0209 	add.w	r2, sp, #9
 8009070:	eba2 020e 	sub.w	r2, r2, lr
 8009074:	4565      	cmp	r5, ip
 8009076:	bf88      	it	hi
 8009078:	2200      	movhi	r2, #0
 800907a:	4413      	add	r3, r2
 800907c:	1a18      	subs	r0, r3, r0
 800907e:	b003      	add	sp, #12
 8009080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009086:	f804 2f01 	strb.w	r2, [r4, #1]!
 800908a:	e7ed      	b.n	8009068 <__exponent+0x4c>
 800908c:	2330      	movs	r3, #48	; 0x30
 800908e:	3130      	adds	r1, #48	; 0x30
 8009090:	7083      	strb	r3, [r0, #2]
 8009092:	70c1      	strb	r1, [r0, #3]
 8009094:	1d03      	adds	r3, r0, #4
 8009096:	e7f1      	b.n	800907c <__exponent+0x60>

08009098 <_printf_float>:
 8009098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909c:	b08b      	sub	sp, #44	; 0x2c
 800909e:	460c      	mov	r4, r1
 80090a0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80090a4:	4616      	mov	r6, r2
 80090a6:	461f      	mov	r7, r3
 80090a8:	4605      	mov	r5, r0
 80090aa:	f001 f9d7 	bl	800a45c <_localeconv_r>
 80090ae:	f8d0 b000 	ldr.w	fp, [r0]
 80090b2:	4658      	mov	r0, fp
 80090b4:	f7f7 f914 	bl	80002e0 <strlen>
 80090b8:	2300      	movs	r3, #0
 80090ba:	9308      	str	r3, [sp, #32]
 80090bc:	f8d8 3000 	ldr.w	r3, [r8]
 80090c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80090c4:	6822      	ldr	r2, [r4, #0]
 80090c6:	3307      	adds	r3, #7
 80090c8:	f023 0307 	bic.w	r3, r3, #7
 80090cc:	f103 0108 	add.w	r1, r3, #8
 80090d0:	f8c8 1000 	str.w	r1, [r8]
 80090d4:	4682      	mov	sl, r0
 80090d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090da:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80090de:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009340 <_printf_float+0x2a8>
 80090e2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80090e6:	eeb0 6bc0 	vabs.f64	d6, d0
 80090ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80090ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f2:	dd24      	ble.n	800913e <_printf_float+0xa6>
 80090f4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80090f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fc:	d502      	bpl.n	8009104 <_printf_float+0x6c>
 80090fe:	232d      	movs	r3, #45	; 0x2d
 8009100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009104:	4b90      	ldr	r3, [pc, #576]	; (8009348 <_printf_float+0x2b0>)
 8009106:	4891      	ldr	r0, [pc, #580]	; (800934c <_printf_float+0x2b4>)
 8009108:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800910c:	bf94      	ite	ls
 800910e:	4698      	movls	r8, r3
 8009110:	4680      	movhi	r8, r0
 8009112:	2303      	movs	r3, #3
 8009114:	6123      	str	r3, [r4, #16]
 8009116:	f022 0204 	bic.w	r2, r2, #4
 800911a:	2300      	movs	r3, #0
 800911c:	6022      	str	r2, [r4, #0]
 800911e:	9304      	str	r3, [sp, #16]
 8009120:	9700      	str	r7, [sp, #0]
 8009122:	4633      	mov	r3, r6
 8009124:	aa09      	add	r2, sp, #36	; 0x24
 8009126:	4621      	mov	r1, r4
 8009128:	4628      	mov	r0, r5
 800912a:	f000 f9d3 	bl	80094d4 <_printf_common>
 800912e:	3001      	adds	r0, #1
 8009130:	f040 808a 	bne.w	8009248 <_printf_float+0x1b0>
 8009134:	f04f 30ff 	mov.w	r0, #4294967295
 8009138:	b00b      	add	sp, #44	; 0x2c
 800913a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913e:	eeb4 0b40 	vcmp.f64	d0, d0
 8009142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009146:	d709      	bvc.n	800915c <_printf_float+0xc4>
 8009148:	ee10 3a90 	vmov	r3, s1
 800914c:	2b00      	cmp	r3, #0
 800914e:	bfbc      	itt	lt
 8009150:	232d      	movlt	r3, #45	; 0x2d
 8009152:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009156:	487e      	ldr	r0, [pc, #504]	; (8009350 <_printf_float+0x2b8>)
 8009158:	4b7e      	ldr	r3, [pc, #504]	; (8009354 <_printf_float+0x2bc>)
 800915a:	e7d5      	b.n	8009108 <_printf_float+0x70>
 800915c:	6863      	ldr	r3, [r4, #4]
 800915e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009162:	9104      	str	r1, [sp, #16]
 8009164:	1c59      	adds	r1, r3, #1
 8009166:	d13c      	bne.n	80091e2 <_printf_float+0x14a>
 8009168:	2306      	movs	r3, #6
 800916a:	6063      	str	r3, [r4, #4]
 800916c:	2300      	movs	r3, #0
 800916e:	9303      	str	r3, [sp, #12]
 8009170:	ab08      	add	r3, sp, #32
 8009172:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009176:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800917a:	ab07      	add	r3, sp, #28
 800917c:	6861      	ldr	r1, [r4, #4]
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	6022      	str	r2, [r4, #0]
 8009182:	f10d 031b 	add.w	r3, sp, #27
 8009186:	4628      	mov	r0, r5
 8009188:	f7ff fef6 	bl	8008f78 <__cvt>
 800918c:	9b04      	ldr	r3, [sp, #16]
 800918e:	9907      	ldr	r1, [sp, #28]
 8009190:	2b47      	cmp	r3, #71	; 0x47
 8009192:	4680      	mov	r8, r0
 8009194:	d108      	bne.n	80091a8 <_printf_float+0x110>
 8009196:	1cc8      	adds	r0, r1, #3
 8009198:	db02      	blt.n	80091a0 <_printf_float+0x108>
 800919a:	6863      	ldr	r3, [r4, #4]
 800919c:	4299      	cmp	r1, r3
 800919e:	dd41      	ble.n	8009224 <_printf_float+0x18c>
 80091a0:	f1a9 0902 	sub.w	r9, r9, #2
 80091a4:	fa5f f989 	uxtb.w	r9, r9
 80091a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80091ac:	d820      	bhi.n	80091f0 <_printf_float+0x158>
 80091ae:	3901      	subs	r1, #1
 80091b0:	464a      	mov	r2, r9
 80091b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80091b6:	9107      	str	r1, [sp, #28]
 80091b8:	f7ff ff30 	bl	800901c <__exponent>
 80091bc:	9a08      	ldr	r2, [sp, #32]
 80091be:	9004      	str	r0, [sp, #16]
 80091c0:	1813      	adds	r3, r2, r0
 80091c2:	2a01      	cmp	r2, #1
 80091c4:	6123      	str	r3, [r4, #16]
 80091c6:	dc02      	bgt.n	80091ce <_printf_float+0x136>
 80091c8:	6822      	ldr	r2, [r4, #0]
 80091ca:	07d2      	lsls	r2, r2, #31
 80091cc:	d501      	bpl.n	80091d2 <_printf_float+0x13a>
 80091ce:	3301      	adds	r3, #1
 80091d0:	6123      	str	r3, [r4, #16]
 80091d2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d0a2      	beq.n	8009120 <_printf_float+0x88>
 80091da:	232d      	movs	r3, #45	; 0x2d
 80091dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091e0:	e79e      	b.n	8009120 <_printf_float+0x88>
 80091e2:	9904      	ldr	r1, [sp, #16]
 80091e4:	2947      	cmp	r1, #71	; 0x47
 80091e6:	d1c1      	bne.n	800916c <_printf_float+0xd4>
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1bf      	bne.n	800916c <_printf_float+0xd4>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e7bc      	b.n	800916a <_printf_float+0xd2>
 80091f0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80091f4:	d118      	bne.n	8009228 <_printf_float+0x190>
 80091f6:	2900      	cmp	r1, #0
 80091f8:	6863      	ldr	r3, [r4, #4]
 80091fa:	dd0b      	ble.n	8009214 <_printf_float+0x17c>
 80091fc:	6121      	str	r1, [r4, #16]
 80091fe:	b913      	cbnz	r3, 8009206 <_printf_float+0x16e>
 8009200:	6822      	ldr	r2, [r4, #0]
 8009202:	07d0      	lsls	r0, r2, #31
 8009204:	d502      	bpl.n	800920c <_printf_float+0x174>
 8009206:	3301      	adds	r3, #1
 8009208:	440b      	add	r3, r1
 800920a:	6123      	str	r3, [r4, #16]
 800920c:	2300      	movs	r3, #0
 800920e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009210:	9304      	str	r3, [sp, #16]
 8009212:	e7de      	b.n	80091d2 <_printf_float+0x13a>
 8009214:	b913      	cbnz	r3, 800921c <_printf_float+0x184>
 8009216:	6822      	ldr	r2, [r4, #0]
 8009218:	07d2      	lsls	r2, r2, #31
 800921a:	d501      	bpl.n	8009220 <_printf_float+0x188>
 800921c:	3302      	adds	r3, #2
 800921e:	e7f4      	b.n	800920a <_printf_float+0x172>
 8009220:	2301      	movs	r3, #1
 8009222:	e7f2      	b.n	800920a <_printf_float+0x172>
 8009224:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009228:	9b08      	ldr	r3, [sp, #32]
 800922a:	4299      	cmp	r1, r3
 800922c:	db05      	blt.n	800923a <_printf_float+0x1a2>
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	6121      	str	r1, [r4, #16]
 8009232:	07d8      	lsls	r0, r3, #31
 8009234:	d5ea      	bpl.n	800920c <_printf_float+0x174>
 8009236:	1c4b      	adds	r3, r1, #1
 8009238:	e7e7      	b.n	800920a <_printf_float+0x172>
 800923a:	2900      	cmp	r1, #0
 800923c:	bfd4      	ite	le
 800923e:	f1c1 0202 	rsble	r2, r1, #2
 8009242:	2201      	movgt	r2, #1
 8009244:	4413      	add	r3, r2
 8009246:	e7e0      	b.n	800920a <_printf_float+0x172>
 8009248:	6823      	ldr	r3, [r4, #0]
 800924a:	055a      	lsls	r2, r3, #21
 800924c:	d407      	bmi.n	800925e <_printf_float+0x1c6>
 800924e:	6923      	ldr	r3, [r4, #16]
 8009250:	4642      	mov	r2, r8
 8009252:	4631      	mov	r1, r6
 8009254:	4628      	mov	r0, r5
 8009256:	47b8      	blx	r7
 8009258:	3001      	adds	r0, #1
 800925a:	d12a      	bne.n	80092b2 <_printf_float+0x21a>
 800925c:	e76a      	b.n	8009134 <_printf_float+0x9c>
 800925e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009262:	f240 80e2 	bls.w	800942a <_printf_float+0x392>
 8009266:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800926a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800926e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009272:	d133      	bne.n	80092dc <_printf_float+0x244>
 8009274:	4a38      	ldr	r2, [pc, #224]	; (8009358 <_printf_float+0x2c0>)
 8009276:	2301      	movs	r3, #1
 8009278:	4631      	mov	r1, r6
 800927a:	4628      	mov	r0, r5
 800927c:	47b8      	blx	r7
 800927e:	3001      	adds	r0, #1
 8009280:	f43f af58 	beq.w	8009134 <_printf_float+0x9c>
 8009284:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009288:	429a      	cmp	r2, r3
 800928a:	db02      	blt.n	8009292 <_printf_float+0x1fa>
 800928c:	6823      	ldr	r3, [r4, #0]
 800928e:	07d8      	lsls	r0, r3, #31
 8009290:	d50f      	bpl.n	80092b2 <_printf_float+0x21a>
 8009292:	4653      	mov	r3, sl
 8009294:	465a      	mov	r2, fp
 8009296:	4631      	mov	r1, r6
 8009298:	4628      	mov	r0, r5
 800929a:	47b8      	blx	r7
 800929c:	3001      	adds	r0, #1
 800929e:	f43f af49 	beq.w	8009134 <_printf_float+0x9c>
 80092a2:	f04f 0800 	mov.w	r8, #0
 80092a6:	f104 091a 	add.w	r9, r4, #26
 80092aa:	9b08      	ldr	r3, [sp, #32]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	4543      	cmp	r3, r8
 80092b0:	dc09      	bgt.n	80092c6 <_printf_float+0x22e>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	079b      	lsls	r3, r3, #30
 80092b6:	f100 8108 	bmi.w	80094ca <_printf_float+0x432>
 80092ba:	68e0      	ldr	r0, [r4, #12]
 80092bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092be:	4298      	cmp	r0, r3
 80092c0:	bfb8      	it	lt
 80092c2:	4618      	movlt	r0, r3
 80092c4:	e738      	b.n	8009138 <_printf_float+0xa0>
 80092c6:	2301      	movs	r3, #1
 80092c8:	464a      	mov	r2, r9
 80092ca:	4631      	mov	r1, r6
 80092cc:	4628      	mov	r0, r5
 80092ce:	47b8      	blx	r7
 80092d0:	3001      	adds	r0, #1
 80092d2:	f43f af2f 	beq.w	8009134 <_printf_float+0x9c>
 80092d6:	f108 0801 	add.w	r8, r8, #1
 80092da:	e7e6      	b.n	80092aa <_printf_float+0x212>
 80092dc:	9b07      	ldr	r3, [sp, #28]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	dc3c      	bgt.n	800935c <_printf_float+0x2c4>
 80092e2:	4a1d      	ldr	r2, [pc, #116]	; (8009358 <_printf_float+0x2c0>)
 80092e4:	2301      	movs	r3, #1
 80092e6:	4631      	mov	r1, r6
 80092e8:	4628      	mov	r0, r5
 80092ea:	47b8      	blx	r7
 80092ec:	3001      	adds	r0, #1
 80092ee:	f43f af21 	beq.w	8009134 <_printf_float+0x9c>
 80092f2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	d102      	bne.n	8009300 <_printf_float+0x268>
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	07d9      	lsls	r1, r3, #31
 80092fe:	d5d8      	bpl.n	80092b2 <_printf_float+0x21a>
 8009300:	4653      	mov	r3, sl
 8009302:	465a      	mov	r2, fp
 8009304:	4631      	mov	r1, r6
 8009306:	4628      	mov	r0, r5
 8009308:	47b8      	blx	r7
 800930a:	3001      	adds	r0, #1
 800930c:	f43f af12 	beq.w	8009134 <_printf_float+0x9c>
 8009310:	f04f 0900 	mov.w	r9, #0
 8009314:	f104 0a1a 	add.w	sl, r4, #26
 8009318:	9b07      	ldr	r3, [sp, #28]
 800931a:	425b      	negs	r3, r3
 800931c:	454b      	cmp	r3, r9
 800931e:	dc01      	bgt.n	8009324 <_printf_float+0x28c>
 8009320:	9b08      	ldr	r3, [sp, #32]
 8009322:	e795      	b.n	8009250 <_printf_float+0x1b8>
 8009324:	2301      	movs	r3, #1
 8009326:	4652      	mov	r2, sl
 8009328:	4631      	mov	r1, r6
 800932a:	4628      	mov	r0, r5
 800932c:	47b8      	blx	r7
 800932e:	3001      	adds	r0, #1
 8009330:	f43f af00 	beq.w	8009134 <_printf_float+0x9c>
 8009334:	f109 0901 	add.w	r9, r9, #1
 8009338:	e7ee      	b.n	8009318 <_printf_float+0x280>
 800933a:	bf00      	nop
 800933c:	f3af 8000 	nop.w
 8009340:	ffffffff 	.word	0xffffffff
 8009344:	7fefffff 	.word	0x7fefffff
 8009348:	0800bc10 	.word	0x0800bc10
 800934c:	0800bc14 	.word	0x0800bc14
 8009350:	0800bc1c 	.word	0x0800bc1c
 8009354:	0800bc18 	.word	0x0800bc18
 8009358:	0800bc20 	.word	0x0800bc20
 800935c:	9a08      	ldr	r2, [sp, #32]
 800935e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009360:	429a      	cmp	r2, r3
 8009362:	bfa8      	it	ge
 8009364:	461a      	movge	r2, r3
 8009366:	2a00      	cmp	r2, #0
 8009368:	4691      	mov	r9, r2
 800936a:	dc38      	bgt.n	80093de <_printf_float+0x346>
 800936c:	2300      	movs	r3, #0
 800936e:	9305      	str	r3, [sp, #20]
 8009370:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009374:	f104 021a 	add.w	r2, r4, #26
 8009378:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800937a:	9905      	ldr	r1, [sp, #20]
 800937c:	9304      	str	r3, [sp, #16]
 800937e:	eba3 0309 	sub.w	r3, r3, r9
 8009382:	428b      	cmp	r3, r1
 8009384:	dc33      	bgt.n	80093ee <_printf_float+0x356>
 8009386:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800938a:	429a      	cmp	r2, r3
 800938c:	db3c      	blt.n	8009408 <_printf_float+0x370>
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	07da      	lsls	r2, r3, #31
 8009392:	d439      	bmi.n	8009408 <_printf_float+0x370>
 8009394:	9a08      	ldr	r2, [sp, #32]
 8009396:	9b04      	ldr	r3, [sp, #16]
 8009398:	9907      	ldr	r1, [sp, #28]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	eba2 0901 	sub.w	r9, r2, r1
 80093a0:	4599      	cmp	r9, r3
 80093a2:	bfa8      	it	ge
 80093a4:	4699      	movge	r9, r3
 80093a6:	f1b9 0f00 	cmp.w	r9, #0
 80093aa:	dc35      	bgt.n	8009418 <_printf_float+0x380>
 80093ac:	f04f 0800 	mov.w	r8, #0
 80093b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093b4:	f104 0a1a 	add.w	sl, r4, #26
 80093b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80093bc:	1a9b      	subs	r3, r3, r2
 80093be:	eba3 0309 	sub.w	r3, r3, r9
 80093c2:	4543      	cmp	r3, r8
 80093c4:	f77f af75 	ble.w	80092b2 <_printf_float+0x21a>
 80093c8:	2301      	movs	r3, #1
 80093ca:	4652      	mov	r2, sl
 80093cc:	4631      	mov	r1, r6
 80093ce:	4628      	mov	r0, r5
 80093d0:	47b8      	blx	r7
 80093d2:	3001      	adds	r0, #1
 80093d4:	f43f aeae 	beq.w	8009134 <_printf_float+0x9c>
 80093d8:	f108 0801 	add.w	r8, r8, #1
 80093dc:	e7ec      	b.n	80093b8 <_printf_float+0x320>
 80093de:	4613      	mov	r3, r2
 80093e0:	4631      	mov	r1, r6
 80093e2:	4642      	mov	r2, r8
 80093e4:	4628      	mov	r0, r5
 80093e6:	47b8      	blx	r7
 80093e8:	3001      	adds	r0, #1
 80093ea:	d1bf      	bne.n	800936c <_printf_float+0x2d4>
 80093ec:	e6a2      	b.n	8009134 <_printf_float+0x9c>
 80093ee:	2301      	movs	r3, #1
 80093f0:	4631      	mov	r1, r6
 80093f2:	4628      	mov	r0, r5
 80093f4:	9204      	str	r2, [sp, #16]
 80093f6:	47b8      	blx	r7
 80093f8:	3001      	adds	r0, #1
 80093fa:	f43f ae9b 	beq.w	8009134 <_printf_float+0x9c>
 80093fe:	9b05      	ldr	r3, [sp, #20]
 8009400:	9a04      	ldr	r2, [sp, #16]
 8009402:	3301      	adds	r3, #1
 8009404:	9305      	str	r3, [sp, #20]
 8009406:	e7b7      	b.n	8009378 <_printf_float+0x2e0>
 8009408:	4653      	mov	r3, sl
 800940a:	465a      	mov	r2, fp
 800940c:	4631      	mov	r1, r6
 800940e:	4628      	mov	r0, r5
 8009410:	47b8      	blx	r7
 8009412:	3001      	adds	r0, #1
 8009414:	d1be      	bne.n	8009394 <_printf_float+0x2fc>
 8009416:	e68d      	b.n	8009134 <_printf_float+0x9c>
 8009418:	9a04      	ldr	r2, [sp, #16]
 800941a:	464b      	mov	r3, r9
 800941c:	4442      	add	r2, r8
 800941e:	4631      	mov	r1, r6
 8009420:	4628      	mov	r0, r5
 8009422:	47b8      	blx	r7
 8009424:	3001      	adds	r0, #1
 8009426:	d1c1      	bne.n	80093ac <_printf_float+0x314>
 8009428:	e684      	b.n	8009134 <_printf_float+0x9c>
 800942a:	9a08      	ldr	r2, [sp, #32]
 800942c:	2a01      	cmp	r2, #1
 800942e:	dc01      	bgt.n	8009434 <_printf_float+0x39c>
 8009430:	07db      	lsls	r3, r3, #31
 8009432:	d537      	bpl.n	80094a4 <_printf_float+0x40c>
 8009434:	2301      	movs	r3, #1
 8009436:	4642      	mov	r2, r8
 8009438:	4631      	mov	r1, r6
 800943a:	4628      	mov	r0, r5
 800943c:	47b8      	blx	r7
 800943e:	3001      	adds	r0, #1
 8009440:	f43f ae78 	beq.w	8009134 <_printf_float+0x9c>
 8009444:	4653      	mov	r3, sl
 8009446:	465a      	mov	r2, fp
 8009448:	4631      	mov	r1, r6
 800944a:	4628      	mov	r0, r5
 800944c:	47b8      	blx	r7
 800944e:	3001      	adds	r0, #1
 8009450:	f43f ae70 	beq.w	8009134 <_printf_float+0x9c>
 8009454:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009458:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800945c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009460:	d01b      	beq.n	800949a <_printf_float+0x402>
 8009462:	9b08      	ldr	r3, [sp, #32]
 8009464:	f108 0201 	add.w	r2, r8, #1
 8009468:	3b01      	subs	r3, #1
 800946a:	4631      	mov	r1, r6
 800946c:	4628      	mov	r0, r5
 800946e:	47b8      	blx	r7
 8009470:	3001      	adds	r0, #1
 8009472:	d10e      	bne.n	8009492 <_printf_float+0x3fa>
 8009474:	e65e      	b.n	8009134 <_printf_float+0x9c>
 8009476:	2301      	movs	r3, #1
 8009478:	464a      	mov	r2, r9
 800947a:	4631      	mov	r1, r6
 800947c:	4628      	mov	r0, r5
 800947e:	47b8      	blx	r7
 8009480:	3001      	adds	r0, #1
 8009482:	f43f ae57 	beq.w	8009134 <_printf_float+0x9c>
 8009486:	f108 0801 	add.w	r8, r8, #1
 800948a:	9b08      	ldr	r3, [sp, #32]
 800948c:	3b01      	subs	r3, #1
 800948e:	4543      	cmp	r3, r8
 8009490:	dcf1      	bgt.n	8009476 <_printf_float+0x3de>
 8009492:	9b04      	ldr	r3, [sp, #16]
 8009494:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009498:	e6db      	b.n	8009252 <_printf_float+0x1ba>
 800949a:	f04f 0800 	mov.w	r8, #0
 800949e:	f104 091a 	add.w	r9, r4, #26
 80094a2:	e7f2      	b.n	800948a <_printf_float+0x3f2>
 80094a4:	2301      	movs	r3, #1
 80094a6:	4642      	mov	r2, r8
 80094a8:	e7df      	b.n	800946a <_printf_float+0x3d2>
 80094aa:	2301      	movs	r3, #1
 80094ac:	464a      	mov	r2, r9
 80094ae:	4631      	mov	r1, r6
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b8      	blx	r7
 80094b4:	3001      	adds	r0, #1
 80094b6:	f43f ae3d 	beq.w	8009134 <_printf_float+0x9c>
 80094ba:	f108 0801 	add.w	r8, r8, #1
 80094be:	68e3      	ldr	r3, [r4, #12]
 80094c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094c2:	1a5b      	subs	r3, r3, r1
 80094c4:	4543      	cmp	r3, r8
 80094c6:	dcf0      	bgt.n	80094aa <_printf_float+0x412>
 80094c8:	e6f7      	b.n	80092ba <_printf_float+0x222>
 80094ca:	f04f 0800 	mov.w	r8, #0
 80094ce:	f104 0919 	add.w	r9, r4, #25
 80094d2:	e7f4      	b.n	80094be <_printf_float+0x426>

080094d4 <_printf_common>:
 80094d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d8:	4616      	mov	r6, r2
 80094da:	4699      	mov	r9, r3
 80094dc:	688a      	ldr	r2, [r1, #8]
 80094de:	690b      	ldr	r3, [r1, #16]
 80094e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094e4:	4293      	cmp	r3, r2
 80094e6:	bfb8      	it	lt
 80094e8:	4613      	movlt	r3, r2
 80094ea:	6033      	str	r3, [r6, #0]
 80094ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094f0:	4607      	mov	r7, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	b10a      	cbz	r2, 80094fa <_printf_common+0x26>
 80094f6:	3301      	adds	r3, #1
 80094f8:	6033      	str	r3, [r6, #0]
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	0699      	lsls	r1, r3, #26
 80094fe:	bf42      	ittt	mi
 8009500:	6833      	ldrmi	r3, [r6, #0]
 8009502:	3302      	addmi	r3, #2
 8009504:	6033      	strmi	r3, [r6, #0]
 8009506:	6825      	ldr	r5, [r4, #0]
 8009508:	f015 0506 	ands.w	r5, r5, #6
 800950c:	d106      	bne.n	800951c <_printf_common+0x48>
 800950e:	f104 0a19 	add.w	sl, r4, #25
 8009512:	68e3      	ldr	r3, [r4, #12]
 8009514:	6832      	ldr	r2, [r6, #0]
 8009516:	1a9b      	subs	r3, r3, r2
 8009518:	42ab      	cmp	r3, r5
 800951a:	dc26      	bgt.n	800956a <_printf_common+0x96>
 800951c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009520:	1e13      	subs	r3, r2, #0
 8009522:	6822      	ldr	r2, [r4, #0]
 8009524:	bf18      	it	ne
 8009526:	2301      	movne	r3, #1
 8009528:	0692      	lsls	r2, r2, #26
 800952a:	d42b      	bmi.n	8009584 <_printf_common+0xb0>
 800952c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009530:	4649      	mov	r1, r9
 8009532:	4638      	mov	r0, r7
 8009534:	47c0      	blx	r8
 8009536:	3001      	adds	r0, #1
 8009538:	d01e      	beq.n	8009578 <_printf_common+0xa4>
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	68e5      	ldr	r5, [r4, #12]
 800953e:	6832      	ldr	r2, [r6, #0]
 8009540:	f003 0306 	and.w	r3, r3, #6
 8009544:	2b04      	cmp	r3, #4
 8009546:	bf08      	it	eq
 8009548:	1aad      	subeq	r5, r5, r2
 800954a:	68a3      	ldr	r3, [r4, #8]
 800954c:	6922      	ldr	r2, [r4, #16]
 800954e:	bf0c      	ite	eq
 8009550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009554:	2500      	movne	r5, #0
 8009556:	4293      	cmp	r3, r2
 8009558:	bfc4      	itt	gt
 800955a:	1a9b      	subgt	r3, r3, r2
 800955c:	18ed      	addgt	r5, r5, r3
 800955e:	2600      	movs	r6, #0
 8009560:	341a      	adds	r4, #26
 8009562:	42b5      	cmp	r5, r6
 8009564:	d11a      	bne.n	800959c <_printf_common+0xc8>
 8009566:	2000      	movs	r0, #0
 8009568:	e008      	b.n	800957c <_printf_common+0xa8>
 800956a:	2301      	movs	r3, #1
 800956c:	4652      	mov	r2, sl
 800956e:	4649      	mov	r1, r9
 8009570:	4638      	mov	r0, r7
 8009572:	47c0      	blx	r8
 8009574:	3001      	adds	r0, #1
 8009576:	d103      	bne.n	8009580 <_printf_common+0xac>
 8009578:	f04f 30ff 	mov.w	r0, #4294967295
 800957c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009580:	3501      	adds	r5, #1
 8009582:	e7c6      	b.n	8009512 <_printf_common+0x3e>
 8009584:	18e1      	adds	r1, r4, r3
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	2030      	movs	r0, #48	; 0x30
 800958a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800958e:	4422      	add	r2, r4
 8009590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009594:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009598:	3302      	adds	r3, #2
 800959a:	e7c7      	b.n	800952c <_printf_common+0x58>
 800959c:	2301      	movs	r3, #1
 800959e:	4622      	mov	r2, r4
 80095a0:	4649      	mov	r1, r9
 80095a2:	4638      	mov	r0, r7
 80095a4:	47c0      	blx	r8
 80095a6:	3001      	adds	r0, #1
 80095a8:	d0e6      	beq.n	8009578 <_printf_common+0xa4>
 80095aa:	3601      	adds	r6, #1
 80095ac:	e7d9      	b.n	8009562 <_printf_common+0x8e>
	...

080095b0 <_printf_i>:
 80095b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095b4:	460c      	mov	r4, r1
 80095b6:	4691      	mov	r9, r2
 80095b8:	7e27      	ldrb	r7, [r4, #24]
 80095ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80095bc:	2f78      	cmp	r7, #120	; 0x78
 80095be:	4680      	mov	r8, r0
 80095c0:	469a      	mov	sl, r3
 80095c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095c6:	d807      	bhi.n	80095d8 <_printf_i+0x28>
 80095c8:	2f62      	cmp	r7, #98	; 0x62
 80095ca:	d80a      	bhi.n	80095e2 <_printf_i+0x32>
 80095cc:	2f00      	cmp	r7, #0
 80095ce:	f000 80d8 	beq.w	8009782 <_printf_i+0x1d2>
 80095d2:	2f58      	cmp	r7, #88	; 0x58
 80095d4:	f000 80a3 	beq.w	800971e <_printf_i+0x16e>
 80095d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80095dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095e0:	e03a      	b.n	8009658 <_printf_i+0xa8>
 80095e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095e6:	2b15      	cmp	r3, #21
 80095e8:	d8f6      	bhi.n	80095d8 <_printf_i+0x28>
 80095ea:	a001      	add	r0, pc, #4	; (adr r0, 80095f0 <_printf_i+0x40>)
 80095ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80095f0:	08009649 	.word	0x08009649
 80095f4:	0800965d 	.word	0x0800965d
 80095f8:	080095d9 	.word	0x080095d9
 80095fc:	080095d9 	.word	0x080095d9
 8009600:	080095d9 	.word	0x080095d9
 8009604:	080095d9 	.word	0x080095d9
 8009608:	0800965d 	.word	0x0800965d
 800960c:	080095d9 	.word	0x080095d9
 8009610:	080095d9 	.word	0x080095d9
 8009614:	080095d9 	.word	0x080095d9
 8009618:	080095d9 	.word	0x080095d9
 800961c:	08009769 	.word	0x08009769
 8009620:	0800968d 	.word	0x0800968d
 8009624:	0800974b 	.word	0x0800974b
 8009628:	080095d9 	.word	0x080095d9
 800962c:	080095d9 	.word	0x080095d9
 8009630:	0800978b 	.word	0x0800978b
 8009634:	080095d9 	.word	0x080095d9
 8009638:	0800968d 	.word	0x0800968d
 800963c:	080095d9 	.word	0x080095d9
 8009640:	080095d9 	.word	0x080095d9
 8009644:	08009753 	.word	0x08009753
 8009648:	680b      	ldr	r3, [r1, #0]
 800964a:	1d1a      	adds	r2, r3, #4
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	600a      	str	r2, [r1, #0]
 8009650:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009658:	2301      	movs	r3, #1
 800965a:	e0a3      	b.n	80097a4 <_printf_i+0x1f4>
 800965c:	6825      	ldr	r5, [r4, #0]
 800965e:	6808      	ldr	r0, [r1, #0]
 8009660:	062e      	lsls	r6, r5, #24
 8009662:	f100 0304 	add.w	r3, r0, #4
 8009666:	d50a      	bpl.n	800967e <_printf_i+0xce>
 8009668:	6805      	ldr	r5, [r0, #0]
 800966a:	600b      	str	r3, [r1, #0]
 800966c:	2d00      	cmp	r5, #0
 800966e:	da03      	bge.n	8009678 <_printf_i+0xc8>
 8009670:	232d      	movs	r3, #45	; 0x2d
 8009672:	426d      	negs	r5, r5
 8009674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009678:	485e      	ldr	r0, [pc, #376]	; (80097f4 <_printf_i+0x244>)
 800967a:	230a      	movs	r3, #10
 800967c:	e019      	b.n	80096b2 <_printf_i+0x102>
 800967e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009682:	6805      	ldr	r5, [r0, #0]
 8009684:	600b      	str	r3, [r1, #0]
 8009686:	bf18      	it	ne
 8009688:	b22d      	sxthne	r5, r5
 800968a:	e7ef      	b.n	800966c <_printf_i+0xbc>
 800968c:	680b      	ldr	r3, [r1, #0]
 800968e:	6825      	ldr	r5, [r4, #0]
 8009690:	1d18      	adds	r0, r3, #4
 8009692:	6008      	str	r0, [r1, #0]
 8009694:	0628      	lsls	r0, r5, #24
 8009696:	d501      	bpl.n	800969c <_printf_i+0xec>
 8009698:	681d      	ldr	r5, [r3, #0]
 800969a:	e002      	b.n	80096a2 <_printf_i+0xf2>
 800969c:	0669      	lsls	r1, r5, #25
 800969e:	d5fb      	bpl.n	8009698 <_printf_i+0xe8>
 80096a0:	881d      	ldrh	r5, [r3, #0]
 80096a2:	4854      	ldr	r0, [pc, #336]	; (80097f4 <_printf_i+0x244>)
 80096a4:	2f6f      	cmp	r7, #111	; 0x6f
 80096a6:	bf0c      	ite	eq
 80096a8:	2308      	moveq	r3, #8
 80096aa:	230a      	movne	r3, #10
 80096ac:	2100      	movs	r1, #0
 80096ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096b2:	6866      	ldr	r6, [r4, #4]
 80096b4:	60a6      	str	r6, [r4, #8]
 80096b6:	2e00      	cmp	r6, #0
 80096b8:	bfa2      	ittt	ge
 80096ba:	6821      	ldrge	r1, [r4, #0]
 80096bc:	f021 0104 	bicge.w	r1, r1, #4
 80096c0:	6021      	strge	r1, [r4, #0]
 80096c2:	b90d      	cbnz	r5, 80096c8 <_printf_i+0x118>
 80096c4:	2e00      	cmp	r6, #0
 80096c6:	d04d      	beq.n	8009764 <_printf_i+0x1b4>
 80096c8:	4616      	mov	r6, r2
 80096ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80096ce:	fb03 5711 	mls	r7, r3, r1, r5
 80096d2:	5dc7      	ldrb	r7, [r0, r7]
 80096d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096d8:	462f      	mov	r7, r5
 80096da:	42bb      	cmp	r3, r7
 80096dc:	460d      	mov	r5, r1
 80096de:	d9f4      	bls.n	80096ca <_printf_i+0x11a>
 80096e0:	2b08      	cmp	r3, #8
 80096e2:	d10b      	bne.n	80096fc <_printf_i+0x14c>
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	07df      	lsls	r7, r3, #31
 80096e8:	d508      	bpl.n	80096fc <_printf_i+0x14c>
 80096ea:	6923      	ldr	r3, [r4, #16]
 80096ec:	6861      	ldr	r1, [r4, #4]
 80096ee:	4299      	cmp	r1, r3
 80096f0:	bfde      	ittt	le
 80096f2:	2330      	movle	r3, #48	; 0x30
 80096f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096fc:	1b92      	subs	r2, r2, r6
 80096fe:	6122      	str	r2, [r4, #16]
 8009700:	f8cd a000 	str.w	sl, [sp]
 8009704:	464b      	mov	r3, r9
 8009706:	aa03      	add	r2, sp, #12
 8009708:	4621      	mov	r1, r4
 800970a:	4640      	mov	r0, r8
 800970c:	f7ff fee2 	bl	80094d4 <_printf_common>
 8009710:	3001      	adds	r0, #1
 8009712:	d14c      	bne.n	80097ae <_printf_i+0x1fe>
 8009714:	f04f 30ff 	mov.w	r0, #4294967295
 8009718:	b004      	add	sp, #16
 800971a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800971e:	4835      	ldr	r0, [pc, #212]	; (80097f4 <_printf_i+0x244>)
 8009720:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009724:	6823      	ldr	r3, [r4, #0]
 8009726:	680e      	ldr	r6, [r1, #0]
 8009728:	061f      	lsls	r7, r3, #24
 800972a:	f856 5b04 	ldr.w	r5, [r6], #4
 800972e:	600e      	str	r6, [r1, #0]
 8009730:	d514      	bpl.n	800975c <_printf_i+0x1ac>
 8009732:	07d9      	lsls	r1, r3, #31
 8009734:	bf44      	itt	mi
 8009736:	f043 0320 	orrmi.w	r3, r3, #32
 800973a:	6023      	strmi	r3, [r4, #0]
 800973c:	b91d      	cbnz	r5, 8009746 <_printf_i+0x196>
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	f023 0320 	bic.w	r3, r3, #32
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	2310      	movs	r3, #16
 8009748:	e7b0      	b.n	80096ac <_printf_i+0xfc>
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	f043 0320 	orr.w	r3, r3, #32
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	2378      	movs	r3, #120	; 0x78
 8009754:	4828      	ldr	r0, [pc, #160]	; (80097f8 <_printf_i+0x248>)
 8009756:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800975a:	e7e3      	b.n	8009724 <_printf_i+0x174>
 800975c:	065e      	lsls	r6, r3, #25
 800975e:	bf48      	it	mi
 8009760:	b2ad      	uxthmi	r5, r5
 8009762:	e7e6      	b.n	8009732 <_printf_i+0x182>
 8009764:	4616      	mov	r6, r2
 8009766:	e7bb      	b.n	80096e0 <_printf_i+0x130>
 8009768:	680b      	ldr	r3, [r1, #0]
 800976a:	6826      	ldr	r6, [r4, #0]
 800976c:	6960      	ldr	r0, [r4, #20]
 800976e:	1d1d      	adds	r5, r3, #4
 8009770:	600d      	str	r5, [r1, #0]
 8009772:	0635      	lsls	r5, r6, #24
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	d501      	bpl.n	800977c <_printf_i+0x1cc>
 8009778:	6018      	str	r0, [r3, #0]
 800977a:	e002      	b.n	8009782 <_printf_i+0x1d2>
 800977c:	0671      	lsls	r1, r6, #25
 800977e:	d5fb      	bpl.n	8009778 <_printf_i+0x1c8>
 8009780:	8018      	strh	r0, [r3, #0]
 8009782:	2300      	movs	r3, #0
 8009784:	6123      	str	r3, [r4, #16]
 8009786:	4616      	mov	r6, r2
 8009788:	e7ba      	b.n	8009700 <_printf_i+0x150>
 800978a:	680b      	ldr	r3, [r1, #0]
 800978c:	1d1a      	adds	r2, r3, #4
 800978e:	600a      	str	r2, [r1, #0]
 8009790:	681e      	ldr	r6, [r3, #0]
 8009792:	6862      	ldr	r2, [r4, #4]
 8009794:	2100      	movs	r1, #0
 8009796:	4630      	mov	r0, r6
 8009798:	f7f6 fdaa 	bl	80002f0 <memchr>
 800979c:	b108      	cbz	r0, 80097a2 <_printf_i+0x1f2>
 800979e:	1b80      	subs	r0, r0, r6
 80097a0:	6060      	str	r0, [r4, #4]
 80097a2:	6863      	ldr	r3, [r4, #4]
 80097a4:	6123      	str	r3, [r4, #16]
 80097a6:	2300      	movs	r3, #0
 80097a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097ac:	e7a8      	b.n	8009700 <_printf_i+0x150>
 80097ae:	6923      	ldr	r3, [r4, #16]
 80097b0:	4632      	mov	r2, r6
 80097b2:	4649      	mov	r1, r9
 80097b4:	4640      	mov	r0, r8
 80097b6:	47d0      	blx	sl
 80097b8:	3001      	adds	r0, #1
 80097ba:	d0ab      	beq.n	8009714 <_printf_i+0x164>
 80097bc:	6823      	ldr	r3, [r4, #0]
 80097be:	079b      	lsls	r3, r3, #30
 80097c0:	d413      	bmi.n	80097ea <_printf_i+0x23a>
 80097c2:	68e0      	ldr	r0, [r4, #12]
 80097c4:	9b03      	ldr	r3, [sp, #12]
 80097c6:	4298      	cmp	r0, r3
 80097c8:	bfb8      	it	lt
 80097ca:	4618      	movlt	r0, r3
 80097cc:	e7a4      	b.n	8009718 <_printf_i+0x168>
 80097ce:	2301      	movs	r3, #1
 80097d0:	4632      	mov	r2, r6
 80097d2:	4649      	mov	r1, r9
 80097d4:	4640      	mov	r0, r8
 80097d6:	47d0      	blx	sl
 80097d8:	3001      	adds	r0, #1
 80097da:	d09b      	beq.n	8009714 <_printf_i+0x164>
 80097dc:	3501      	adds	r5, #1
 80097de:	68e3      	ldr	r3, [r4, #12]
 80097e0:	9903      	ldr	r1, [sp, #12]
 80097e2:	1a5b      	subs	r3, r3, r1
 80097e4:	42ab      	cmp	r3, r5
 80097e6:	dcf2      	bgt.n	80097ce <_printf_i+0x21e>
 80097e8:	e7eb      	b.n	80097c2 <_printf_i+0x212>
 80097ea:	2500      	movs	r5, #0
 80097ec:	f104 0619 	add.w	r6, r4, #25
 80097f0:	e7f5      	b.n	80097de <_printf_i+0x22e>
 80097f2:	bf00      	nop
 80097f4:	0800bc22 	.word	0x0800bc22
 80097f8:	0800bc33 	.word	0x0800bc33

080097fc <siprintf>:
 80097fc:	b40e      	push	{r1, r2, r3}
 80097fe:	b500      	push	{lr}
 8009800:	b09c      	sub	sp, #112	; 0x70
 8009802:	ab1d      	add	r3, sp, #116	; 0x74
 8009804:	9002      	str	r0, [sp, #8]
 8009806:	9006      	str	r0, [sp, #24]
 8009808:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800980c:	4809      	ldr	r0, [pc, #36]	; (8009834 <siprintf+0x38>)
 800980e:	9107      	str	r1, [sp, #28]
 8009810:	9104      	str	r1, [sp, #16]
 8009812:	4909      	ldr	r1, [pc, #36]	; (8009838 <siprintf+0x3c>)
 8009814:	f853 2b04 	ldr.w	r2, [r3], #4
 8009818:	9105      	str	r1, [sp, #20]
 800981a:	6800      	ldr	r0, [r0, #0]
 800981c:	9301      	str	r3, [sp, #4]
 800981e:	a902      	add	r1, sp, #8
 8009820:	f001 faca 	bl	800adb8 <_svfiprintf_r>
 8009824:	9b02      	ldr	r3, [sp, #8]
 8009826:	2200      	movs	r2, #0
 8009828:	701a      	strb	r2, [r3, #0]
 800982a:	b01c      	add	sp, #112	; 0x70
 800982c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009830:	b003      	add	sp, #12
 8009832:	4770      	bx	lr
 8009834:	24000010 	.word	0x24000010
 8009838:	ffff0208 	.word	0xffff0208

0800983c <quorem>:
 800983c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009840:	6903      	ldr	r3, [r0, #16]
 8009842:	690c      	ldr	r4, [r1, #16]
 8009844:	42a3      	cmp	r3, r4
 8009846:	4607      	mov	r7, r0
 8009848:	f2c0 8081 	blt.w	800994e <quorem+0x112>
 800984c:	3c01      	subs	r4, #1
 800984e:	f101 0814 	add.w	r8, r1, #20
 8009852:	f100 0514 	add.w	r5, r0, #20
 8009856:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800985a:	9301      	str	r3, [sp, #4]
 800985c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009860:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009864:	3301      	adds	r3, #1
 8009866:	429a      	cmp	r2, r3
 8009868:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800986c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009870:	fbb2 f6f3 	udiv	r6, r2, r3
 8009874:	d331      	bcc.n	80098da <quorem+0x9e>
 8009876:	f04f 0e00 	mov.w	lr, #0
 800987a:	4640      	mov	r0, r8
 800987c:	46ac      	mov	ip, r5
 800987e:	46f2      	mov	sl, lr
 8009880:	f850 2b04 	ldr.w	r2, [r0], #4
 8009884:	b293      	uxth	r3, r2
 8009886:	fb06 e303 	mla	r3, r6, r3, lr
 800988a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800988e:	b29b      	uxth	r3, r3
 8009890:	ebaa 0303 	sub.w	r3, sl, r3
 8009894:	0c12      	lsrs	r2, r2, #16
 8009896:	f8dc a000 	ldr.w	sl, [ip]
 800989a:	fb06 e202 	mla	r2, r6, r2, lr
 800989e:	fa13 f38a 	uxtah	r3, r3, sl
 80098a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098a6:	fa1f fa82 	uxth.w	sl, r2
 80098aa:	f8dc 2000 	ldr.w	r2, [ip]
 80098ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80098b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098bc:	4581      	cmp	r9, r0
 80098be:	f84c 3b04 	str.w	r3, [ip], #4
 80098c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80098c6:	d2db      	bcs.n	8009880 <quorem+0x44>
 80098c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80098cc:	b92b      	cbnz	r3, 80098da <quorem+0x9e>
 80098ce:	9b01      	ldr	r3, [sp, #4]
 80098d0:	3b04      	subs	r3, #4
 80098d2:	429d      	cmp	r5, r3
 80098d4:	461a      	mov	r2, r3
 80098d6:	d32e      	bcc.n	8009936 <quorem+0xfa>
 80098d8:	613c      	str	r4, [r7, #16]
 80098da:	4638      	mov	r0, r7
 80098dc:	f001 f856 	bl	800a98c <__mcmp>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	db24      	blt.n	800992e <quorem+0xf2>
 80098e4:	3601      	adds	r6, #1
 80098e6:	4628      	mov	r0, r5
 80098e8:	f04f 0c00 	mov.w	ip, #0
 80098ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80098f0:	f8d0 e000 	ldr.w	lr, [r0]
 80098f4:	b293      	uxth	r3, r2
 80098f6:	ebac 0303 	sub.w	r3, ip, r3
 80098fa:	0c12      	lsrs	r2, r2, #16
 80098fc:	fa13 f38e 	uxtah	r3, r3, lr
 8009900:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009904:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009908:	b29b      	uxth	r3, r3
 800990a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800990e:	45c1      	cmp	r9, r8
 8009910:	f840 3b04 	str.w	r3, [r0], #4
 8009914:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009918:	d2e8      	bcs.n	80098ec <quorem+0xb0>
 800991a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800991e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009922:	b922      	cbnz	r2, 800992e <quorem+0xf2>
 8009924:	3b04      	subs	r3, #4
 8009926:	429d      	cmp	r5, r3
 8009928:	461a      	mov	r2, r3
 800992a:	d30a      	bcc.n	8009942 <quorem+0x106>
 800992c:	613c      	str	r4, [r7, #16]
 800992e:	4630      	mov	r0, r6
 8009930:	b003      	add	sp, #12
 8009932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009936:	6812      	ldr	r2, [r2, #0]
 8009938:	3b04      	subs	r3, #4
 800993a:	2a00      	cmp	r2, #0
 800993c:	d1cc      	bne.n	80098d8 <quorem+0x9c>
 800993e:	3c01      	subs	r4, #1
 8009940:	e7c7      	b.n	80098d2 <quorem+0x96>
 8009942:	6812      	ldr	r2, [r2, #0]
 8009944:	3b04      	subs	r3, #4
 8009946:	2a00      	cmp	r2, #0
 8009948:	d1f0      	bne.n	800992c <quorem+0xf0>
 800994a:	3c01      	subs	r4, #1
 800994c:	e7eb      	b.n	8009926 <quorem+0xea>
 800994e:	2000      	movs	r0, #0
 8009950:	e7ee      	b.n	8009930 <quorem+0xf4>
 8009952:	0000      	movs	r0, r0
 8009954:	0000      	movs	r0, r0
	...

08009958 <_dtoa_r>:
 8009958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	ec59 8b10 	vmov	r8, r9, d0
 8009960:	b095      	sub	sp, #84	; 0x54
 8009962:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009964:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8009966:	9107      	str	r1, [sp, #28]
 8009968:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800996c:	4606      	mov	r6, r0
 800996e:	9209      	str	r2, [sp, #36]	; 0x24
 8009970:	9310      	str	r3, [sp, #64]	; 0x40
 8009972:	b975      	cbnz	r5, 8009992 <_dtoa_r+0x3a>
 8009974:	2010      	movs	r0, #16
 8009976:	f000 fd75 	bl	800a464 <malloc>
 800997a:	4602      	mov	r2, r0
 800997c:	6270      	str	r0, [r6, #36]	; 0x24
 800997e:	b920      	cbnz	r0, 800998a <_dtoa_r+0x32>
 8009980:	4bab      	ldr	r3, [pc, #684]	; (8009c30 <_dtoa_r+0x2d8>)
 8009982:	21ea      	movs	r1, #234	; 0xea
 8009984:	48ab      	ldr	r0, [pc, #684]	; (8009c34 <_dtoa_r+0x2dc>)
 8009986:	f001 fb27 	bl	800afd8 <__assert_func>
 800998a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800998e:	6005      	str	r5, [r0, #0]
 8009990:	60c5      	str	r5, [r0, #12]
 8009992:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009994:	6819      	ldr	r1, [r3, #0]
 8009996:	b151      	cbz	r1, 80099ae <_dtoa_r+0x56>
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	604a      	str	r2, [r1, #4]
 800999c:	2301      	movs	r3, #1
 800999e:	4093      	lsls	r3, r2
 80099a0:	608b      	str	r3, [r1, #8]
 80099a2:	4630      	mov	r0, r6
 80099a4:	f000 fdb4 	bl	800a510 <_Bfree>
 80099a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80099aa:	2200      	movs	r2, #0
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	f1b9 0300 	subs.w	r3, r9, #0
 80099b2:	bfbb      	ittet	lt
 80099b4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80099b8:	9303      	strlt	r3, [sp, #12]
 80099ba:	2300      	movge	r3, #0
 80099bc:	2201      	movlt	r2, #1
 80099be:	bfac      	ite	ge
 80099c0:	6023      	strge	r3, [r4, #0]
 80099c2:	6022      	strlt	r2, [r4, #0]
 80099c4:	4b9c      	ldr	r3, [pc, #624]	; (8009c38 <_dtoa_r+0x2e0>)
 80099c6:	9c03      	ldr	r4, [sp, #12]
 80099c8:	43a3      	bics	r3, r4
 80099ca:	d11a      	bne.n	8009a02 <_dtoa_r+0xaa>
 80099cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80099ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80099d2:	6013      	str	r3, [r2, #0]
 80099d4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80099d8:	ea53 0308 	orrs.w	r3, r3, r8
 80099dc:	f000 8512 	beq.w	800a404 <_dtoa_r+0xaac>
 80099e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80099e2:	b953      	cbnz	r3, 80099fa <_dtoa_r+0xa2>
 80099e4:	4b95      	ldr	r3, [pc, #596]	; (8009c3c <_dtoa_r+0x2e4>)
 80099e6:	e01f      	b.n	8009a28 <_dtoa_r+0xd0>
 80099e8:	4b95      	ldr	r3, [pc, #596]	; (8009c40 <_dtoa_r+0x2e8>)
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	3308      	adds	r3, #8
 80099ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80099f0:	6013      	str	r3, [r2, #0]
 80099f2:	9800      	ldr	r0, [sp, #0]
 80099f4:	b015      	add	sp, #84	; 0x54
 80099f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fa:	4b90      	ldr	r3, [pc, #576]	; (8009c3c <_dtoa_r+0x2e4>)
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	3303      	adds	r3, #3
 8009a00:	e7f5      	b.n	80099ee <_dtoa_r+0x96>
 8009a02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a0e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009a12:	d10b      	bne.n	8009a2c <_dtoa_r+0xd4>
 8009a14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a16:	2301      	movs	r3, #1
 8009a18:	6013      	str	r3, [r2, #0]
 8009a1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f000 84ee 	beq.w	800a3fe <_dtoa_r+0xaa6>
 8009a22:	4888      	ldr	r0, [pc, #544]	; (8009c44 <_dtoa_r+0x2ec>)
 8009a24:	6018      	str	r0, [r3, #0]
 8009a26:	1e43      	subs	r3, r0, #1
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	e7e2      	b.n	80099f2 <_dtoa_r+0x9a>
 8009a2c:	a913      	add	r1, sp, #76	; 0x4c
 8009a2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009a32:	aa12      	add	r2, sp, #72	; 0x48
 8009a34:	4630      	mov	r0, r6
 8009a36:	f001 f84d 	bl	800aad4 <__d2b>
 8009a3a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8009a3e:	4605      	mov	r5, r0
 8009a40:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009a42:	2900      	cmp	r1, #0
 8009a44:	d047      	beq.n	8009ad6 <_dtoa_r+0x17e>
 8009a46:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009a48:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009a4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009a50:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009a54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a58:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009a5c:	2400      	movs	r4, #0
 8009a5e:	ec43 2b16 	vmov	d6, r2, r3
 8009a62:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009a66:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8009c18 <_dtoa_r+0x2c0>
 8009a6a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009a6e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8009c20 <_dtoa_r+0x2c8>
 8009a72:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009a76:	eeb0 7b46 	vmov.f64	d7, d6
 8009a7a:	ee06 1a90 	vmov	s13, r1
 8009a7e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8009a82:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009c28 <_dtoa_r+0x2d0>
 8009a86:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009a8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009a8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a96:	ee16 ba90 	vmov	fp, s13
 8009a9a:	9411      	str	r4, [sp, #68]	; 0x44
 8009a9c:	d508      	bpl.n	8009ab0 <_dtoa_r+0x158>
 8009a9e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009aa2:	eeb4 6b47 	vcmp.f64	d6, d7
 8009aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aaa:	bf18      	it	ne
 8009aac:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009ab0:	f1bb 0f16 	cmp.w	fp, #22
 8009ab4:	d832      	bhi.n	8009b1c <_dtoa_r+0x1c4>
 8009ab6:	4b64      	ldr	r3, [pc, #400]	; (8009c48 <_dtoa_r+0x2f0>)
 8009ab8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009abc:	ed93 7b00 	vldr	d7, [r3]
 8009ac0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8009ac4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009acc:	d501      	bpl.n	8009ad2 <_dtoa_r+0x17a>
 8009ace:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	e023      	b.n	8009b1e <_dtoa_r+0x1c6>
 8009ad6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009ad8:	4401      	add	r1, r0
 8009ada:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009ade:	2b20      	cmp	r3, #32
 8009ae0:	bfc3      	ittte	gt
 8009ae2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009ae6:	fa04 f303 	lslgt.w	r3, r4, r3
 8009aea:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009aee:	f1c3 0320 	rsble	r3, r3, #32
 8009af2:	bfc6      	itte	gt
 8009af4:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009af8:	ea43 0308 	orrgt.w	r3, r3, r8
 8009afc:	fa08 f303 	lslle.w	r3, r8, r3
 8009b00:	ee07 3a90 	vmov	s15, r3
 8009b04:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009b08:	3901      	subs	r1, #1
 8009b0a:	ed8d 7b00 	vstr	d7, [sp]
 8009b0e:	9c01      	ldr	r4, [sp, #4]
 8009b10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b14:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009b18:	2401      	movs	r4, #1
 8009b1a:	e7a0      	b.n	8009a5e <_dtoa_r+0x106>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b20:	1a43      	subs	r3, r0, r1
 8009b22:	1e5a      	subs	r2, r3, #1
 8009b24:	bf45      	ittet	mi
 8009b26:	f1c3 0301 	rsbmi	r3, r3, #1
 8009b2a:	9305      	strmi	r3, [sp, #20]
 8009b2c:	2300      	movpl	r3, #0
 8009b2e:	2300      	movmi	r3, #0
 8009b30:	9206      	str	r2, [sp, #24]
 8009b32:	bf54      	ite	pl
 8009b34:	9305      	strpl	r3, [sp, #20]
 8009b36:	9306      	strmi	r3, [sp, #24]
 8009b38:	f1bb 0f00 	cmp.w	fp, #0
 8009b3c:	db18      	blt.n	8009b70 <_dtoa_r+0x218>
 8009b3e:	9b06      	ldr	r3, [sp, #24]
 8009b40:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009b44:	445b      	add	r3, fp
 8009b46:	9306      	str	r3, [sp, #24]
 8009b48:	2300      	movs	r3, #0
 8009b4a:	9a07      	ldr	r2, [sp, #28]
 8009b4c:	2a09      	cmp	r2, #9
 8009b4e:	d849      	bhi.n	8009be4 <_dtoa_r+0x28c>
 8009b50:	2a05      	cmp	r2, #5
 8009b52:	bfc4      	itt	gt
 8009b54:	3a04      	subgt	r2, #4
 8009b56:	9207      	strgt	r2, [sp, #28]
 8009b58:	9a07      	ldr	r2, [sp, #28]
 8009b5a:	f1a2 0202 	sub.w	r2, r2, #2
 8009b5e:	bfcc      	ite	gt
 8009b60:	2400      	movgt	r4, #0
 8009b62:	2401      	movle	r4, #1
 8009b64:	2a03      	cmp	r2, #3
 8009b66:	d848      	bhi.n	8009bfa <_dtoa_r+0x2a2>
 8009b68:	e8df f002 	tbb	[pc, r2]
 8009b6c:	3a2c2e0b 	.word	0x3a2c2e0b
 8009b70:	9b05      	ldr	r3, [sp, #20]
 8009b72:	2200      	movs	r2, #0
 8009b74:	eba3 030b 	sub.w	r3, r3, fp
 8009b78:	9305      	str	r3, [sp, #20]
 8009b7a:	920e      	str	r2, [sp, #56]	; 0x38
 8009b7c:	f1cb 0300 	rsb	r3, fp, #0
 8009b80:	e7e3      	b.n	8009b4a <_dtoa_r+0x1f2>
 8009b82:	2200      	movs	r2, #0
 8009b84:	9208      	str	r2, [sp, #32]
 8009b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b88:	2a00      	cmp	r2, #0
 8009b8a:	dc39      	bgt.n	8009c00 <_dtoa_r+0x2a8>
 8009b8c:	f04f 0a01 	mov.w	sl, #1
 8009b90:	46d1      	mov	r9, sl
 8009b92:	4652      	mov	r2, sl
 8009b94:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009b98:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	6079      	str	r1, [r7, #4]
 8009b9e:	2004      	movs	r0, #4
 8009ba0:	f100 0c14 	add.w	ip, r0, #20
 8009ba4:	4594      	cmp	ip, r2
 8009ba6:	6879      	ldr	r1, [r7, #4]
 8009ba8:	d92f      	bls.n	8009c0a <_dtoa_r+0x2b2>
 8009baa:	4630      	mov	r0, r6
 8009bac:	930c      	str	r3, [sp, #48]	; 0x30
 8009bae:	f000 fc6f 	bl	800a490 <_Balloc>
 8009bb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bb4:	9000      	str	r0, [sp, #0]
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d149      	bne.n	8009c50 <_dtoa_r+0x2f8>
 8009bbc:	4b23      	ldr	r3, [pc, #140]	; (8009c4c <_dtoa_r+0x2f4>)
 8009bbe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009bc2:	e6df      	b.n	8009984 <_dtoa_r+0x2c>
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	e7dd      	b.n	8009b84 <_dtoa_r+0x22c>
 8009bc8:	2200      	movs	r2, #0
 8009bca:	9208      	str	r2, [sp, #32]
 8009bcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bce:	eb0b 0a02 	add.w	sl, fp, r2
 8009bd2:	f10a 0901 	add.w	r9, sl, #1
 8009bd6:	464a      	mov	r2, r9
 8009bd8:	2a01      	cmp	r2, #1
 8009bda:	bfb8      	it	lt
 8009bdc:	2201      	movlt	r2, #1
 8009bde:	e7db      	b.n	8009b98 <_dtoa_r+0x240>
 8009be0:	2201      	movs	r2, #1
 8009be2:	e7f2      	b.n	8009bca <_dtoa_r+0x272>
 8009be4:	2401      	movs	r4, #1
 8009be6:	2200      	movs	r2, #0
 8009be8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009bec:	f04f 3aff 	mov.w	sl, #4294967295
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	46d1      	mov	r9, sl
 8009bf4:	2212      	movs	r2, #18
 8009bf6:	9109      	str	r1, [sp, #36]	; 0x24
 8009bf8:	e7ce      	b.n	8009b98 <_dtoa_r+0x240>
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	9208      	str	r2, [sp, #32]
 8009bfe:	e7f5      	b.n	8009bec <_dtoa_r+0x294>
 8009c00:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009c04:	46d1      	mov	r9, sl
 8009c06:	4652      	mov	r2, sl
 8009c08:	e7c6      	b.n	8009b98 <_dtoa_r+0x240>
 8009c0a:	3101      	adds	r1, #1
 8009c0c:	6079      	str	r1, [r7, #4]
 8009c0e:	0040      	lsls	r0, r0, #1
 8009c10:	e7c6      	b.n	8009ba0 <_dtoa_r+0x248>
 8009c12:	bf00      	nop
 8009c14:	f3af 8000 	nop.w
 8009c18:	636f4361 	.word	0x636f4361
 8009c1c:	3fd287a7 	.word	0x3fd287a7
 8009c20:	8b60c8b3 	.word	0x8b60c8b3
 8009c24:	3fc68a28 	.word	0x3fc68a28
 8009c28:	509f79fb 	.word	0x509f79fb
 8009c2c:	3fd34413 	.word	0x3fd34413
 8009c30:	0800bc51 	.word	0x0800bc51
 8009c34:	0800bc68 	.word	0x0800bc68
 8009c38:	7ff00000 	.word	0x7ff00000
 8009c3c:	0800bc4d 	.word	0x0800bc4d
 8009c40:	0800bc44 	.word	0x0800bc44
 8009c44:	0800bc21 	.word	0x0800bc21
 8009c48:	0800bd60 	.word	0x0800bd60
 8009c4c:	0800bcc7 	.word	0x0800bcc7
 8009c50:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009c52:	9900      	ldr	r1, [sp, #0]
 8009c54:	6011      	str	r1, [r2, #0]
 8009c56:	f1b9 0f0e 	cmp.w	r9, #14
 8009c5a:	d872      	bhi.n	8009d42 <_dtoa_r+0x3ea>
 8009c5c:	2c00      	cmp	r4, #0
 8009c5e:	d070      	beq.n	8009d42 <_dtoa_r+0x3ea>
 8009c60:	f1bb 0f00 	cmp.w	fp, #0
 8009c64:	f340 80a6 	ble.w	8009db4 <_dtoa_r+0x45c>
 8009c68:	49ca      	ldr	r1, [pc, #808]	; (8009f94 <_dtoa_r+0x63c>)
 8009c6a:	f00b 020f 	and.w	r2, fp, #15
 8009c6e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009c72:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009c76:	ed92 7b00 	vldr	d7, [r2]
 8009c7a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009c7e:	f000 808d 	beq.w	8009d9c <_dtoa_r+0x444>
 8009c82:	4ac5      	ldr	r2, [pc, #788]	; (8009f98 <_dtoa_r+0x640>)
 8009c84:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8009c88:	ed92 6b08 	vldr	d6, [r2, #32]
 8009c8c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8009c90:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009c94:	f001 010f 	and.w	r1, r1, #15
 8009c98:	2203      	movs	r2, #3
 8009c9a:	48bf      	ldr	r0, [pc, #764]	; (8009f98 <_dtoa_r+0x640>)
 8009c9c:	2900      	cmp	r1, #0
 8009c9e:	d17f      	bne.n	8009da0 <_dtoa_r+0x448>
 8009ca0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009ca4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009ca8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009cac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009cae:	2900      	cmp	r1, #0
 8009cb0:	f000 80b2 	beq.w	8009e18 <_dtoa_r+0x4c0>
 8009cb4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009cb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009cbc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc4:	f140 80a8 	bpl.w	8009e18 <_dtoa_r+0x4c0>
 8009cc8:	f1b9 0f00 	cmp.w	r9, #0
 8009ccc:	f000 80a4 	beq.w	8009e18 <_dtoa_r+0x4c0>
 8009cd0:	f1ba 0f00 	cmp.w	sl, #0
 8009cd4:	dd31      	ble.n	8009d3a <_dtoa_r+0x3e2>
 8009cd6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009cda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009cde:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ce2:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009ce6:	3201      	adds	r2, #1
 8009ce8:	4650      	mov	r0, sl
 8009cea:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009cee:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009cf2:	ee07 2a90 	vmov	s15, r2
 8009cf6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009cfa:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009cfe:	ed8d 5b02 	vstr	d5, [sp, #8]
 8009d02:	9c03      	ldr	r4, [sp, #12]
 8009d04:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009d08:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	f040 8086 	bne.w	8009e1e <_dtoa_r+0x4c6>
 8009d12:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009d16:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009d1a:	ec42 1b17 	vmov	d7, r1, r2
 8009d1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d26:	f300 8272 	bgt.w	800a20e <_dtoa_r+0x8b6>
 8009d2a:	eeb1 7b47 	vneg.f64	d7, d7
 8009d2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d36:	f100 8267 	bmi.w	800a208 <_dtoa_r+0x8b0>
 8009d3a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8009d3e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009d42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d44:	2a00      	cmp	r2, #0
 8009d46:	f2c0 8129 	blt.w	8009f9c <_dtoa_r+0x644>
 8009d4a:	f1bb 0f0e 	cmp.w	fp, #14
 8009d4e:	f300 8125 	bgt.w	8009f9c <_dtoa_r+0x644>
 8009d52:	4b90      	ldr	r3, [pc, #576]	; (8009f94 <_dtoa_r+0x63c>)
 8009d54:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009d58:	ed93 6b00 	vldr	d6, [r3]
 8009d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f280 80c3 	bge.w	8009eea <_dtoa_r+0x592>
 8009d64:	f1b9 0f00 	cmp.w	r9, #0
 8009d68:	f300 80bf 	bgt.w	8009eea <_dtoa_r+0x592>
 8009d6c:	f040 824c 	bne.w	800a208 <_dtoa_r+0x8b0>
 8009d70:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009d74:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009d78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d84:	464c      	mov	r4, r9
 8009d86:	464f      	mov	r7, r9
 8009d88:	f280 8222 	bge.w	800a1d0 <_dtoa_r+0x878>
 8009d8c:	f8dd 8000 	ldr.w	r8, [sp]
 8009d90:	2331      	movs	r3, #49	; 0x31
 8009d92:	f808 3b01 	strb.w	r3, [r8], #1
 8009d96:	f10b 0b01 	add.w	fp, fp, #1
 8009d9a:	e21e      	b.n	800a1da <_dtoa_r+0x882>
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	e77c      	b.n	8009c9a <_dtoa_r+0x342>
 8009da0:	07cc      	lsls	r4, r1, #31
 8009da2:	d504      	bpl.n	8009dae <_dtoa_r+0x456>
 8009da4:	ed90 6b00 	vldr	d6, [r0]
 8009da8:	3201      	adds	r2, #1
 8009daa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009dae:	1049      	asrs	r1, r1, #1
 8009db0:	3008      	adds	r0, #8
 8009db2:	e773      	b.n	8009c9c <_dtoa_r+0x344>
 8009db4:	d02e      	beq.n	8009e14 <_dtoa_r+0x4bc>
 8009db6:	f1cb 0100 	rsb	r1, fp, #0
 8009dba:	4a76      	ldr	r2, [pc, #472]	; (8009f94 <_dtoa_r+0x63c>)
 8009dbc:	f001 000f 	and.w	r0, r1, #15
 8009dc0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009dc4:	ed92 7b00 	vldr	d7, [r2]
 8009dc8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8009dcc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009dd0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009dd4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8009dd8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8009ddc:	486e      	ldr	r0, [pc, #440]	; (8009f98 <_dtoa_r+0x640>)
 8009dde:	1109      	asrs	r1, r1, #4
 8009de0:	2400      	movs	r4, #0
 8009de2:	2202      	movs	r2, #2
 8009de4:	b939      	cbnz	r1, 8009df6 <_dtoa_r+0x49e>
 8009de6:	2c00      	cmp	r4, #0
 8009de8:	f43f af60 	beq.w	8009cac <_dtoa_r+0x354>
 8009dec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009df0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009df4:	e75a      	b.n	8009cac <_dtoa_r+0x354>
 8009df6:	07cf      	lsls	r7, r1, #31
 8009df8:	d509      	bpl.n	8009e0e <_dtoa_r+0x4b6>
 8009dfa:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8009dfe:	ed90 7b00 	vldr	d7, [r0]
 8009e02:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009e06:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009e0a:	3201      	adds	r2, #1
 8009e0c:	2401      	movs	r4, #1
 8009e0e:	1049      	asrs	r1, r1, #1
 8009e10:	3008      	adds	r0, #8
 8009e12:	e7e7      	b.n	8009de4 <_dtoa_r+0x48c>
 8009e14:	2202      	movs	r2, #2
 8009e16:	e749      	b.n	8009cac <_dtoa_r+0x354>
 8009e18:	465f      	mov	r7, fp
 8009e1a:	4648      	mov	r0, r9
 8009e1c:	e765      	b.n	8009cea <_dtoa_r+0x392>
 8009e1e:	ec42 1b17 	vmov	d7, r1, r2
 8009e22:	4a5c      	ldr	r2, [pc, #368]	; (8009f94 <_dtoa_r+0x63c>)
 8009e24:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009e28:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009e2c:	9a00      	ldr	r2, [sp, #0]
 8009e2e:	1814      	adds	r4, r2, r0
 8009e30:	9a08      	ldr	r2, [sp, #32]
 8009e32:	b352      	cbz	r2, 8009e8a <_dtoa_r+0x532>
 8009e34:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009e38:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009e3c:	f8dd 8000 	ldr.w	r8, [sp]
 8009e40:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009e44:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009e48:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009e4c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009e50:	ee14 2a90 	vmov	r2, s9
 8009e54:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009e58:	3230      	adds	r2, #48	; 0x30
 8009e5a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009e5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e66:	f808 2b01 	strb.w	r2, [r8], #1
 8009e6a:	d439      	bmi.n	8009ee0 <_dtoa_r+0x588>
 8009e6c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009e70:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e78:	d472      	bmi.n	8009f60 <_dtoa_r+0x608>
 8009e7a:	45a0      	cmp	r8, r4
 8009e7c:	f43f af5d 	beq.w	8009d3a <_dtoa_r+0x3e2>
 8009e80:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009e84:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009e88:	e7e0      	b.n	8009e4c <_dtoa_r+0x4f4>
 8009e8a:	f8dd 8000 	ldr.w	r8, [sp]
 8009e8e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009e92:	4621      	mov	r1, r4
 8009e94:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009e98:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009e9c:	ee14 2a90 	vmov	r2, s9
 8009ea0:	3230      	adds	r2, #48	; 0x30
 8009ea2:	f808 2b01 	strb.w	r2, [r8], #1
 8009ea6:	45a0      	cmp	r8, r4
 8009ea8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009eac:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009eb0:	d118      	bne.n	8009ee4 <_dtoa_r+0x58c>
 8009eb2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009eb6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009eba:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec2:	dc4d      	bgt.n	8009f60 <_dtoa_r+0x608>
 8009ec4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009ec8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ed0:	f57f af33 	bpl.w	8009d3a <_dtoa_r+0x3e2>
 8009ed4:	4688      	mov	r8, r1
 8009ed6:	3901      	subs	r1, #1
 8009ed8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009edc:	2b30      	cmp	r3, #48	; 0x30
 8009ede:	d0f9      	beq.n	8009ed4 <_dtoa_r+0x57c>
 8009ee0:	46bb      	mov	fp, r7
 8009ee2:	e02a      	b.n	8009f3a <_dtoa_r+0x5e2>
 8009ee4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009ee8:	e7d6      	b.n	8009e98 <_dtoa_r+0x540>
 8009eea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009eee:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009ef2:	f8dd 8000 	ldr.w	r8, [sp]
 8009ef6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009efa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009efe:	ee15 3a10 	vmov	r3, s10
 8009f02:	3330      	adds	r3, #48	; 0x30
 8009f04:	f808 3b01 	strb.w	r3, [r8], #1
 8009f08:	9b00      	ldr	r3, [sp, #0]
 8009f0a:	eba8 0303 	sub.w	r3, r8, r3
 8009f0e:	4599      	cmp	r9, r3
 8009f10:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009f14:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009f18:	d133      	bne.n	8009f82 <_dtoa_r+0x62a>
 8009f1a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009f1e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f26:	dc1a      	bgt.n	8009f5e <_dtoa_r+0x606>
 8009f28:	eeb4 7b46 	vcmp.f64	d7, d6
 8009f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f30:	d103      	bne.n	8009f3a <_dtoa_r+0x5e2>
 8009f32:	ee15 3a10 	vmov	r3, s10
 8009f36:	07d9      	lsls	r1, r3, #31
 8009f38:	d411      	bmi.n	8009f5e <_dtoa_r+0x606>
 8009f3a:	4629      	mov	r1, r5
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	f000 fae7 	bl	800a510 <_Bfree>
 8009f42:	2300      	movs	r3, #0
 8009f44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f46:	f888 3000 	strb.w	r3, [r8]
 8009f4a:	f10b 0301 	add.w	r3, fp, #1
 8009f4e:	6013      	str	r3, [r2, #0]
 8009f50:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f43f ad4d 	beq.w	80099f2 <_dtoa_r+0x9a>
 8009f58:	f8c3 8000 	str.w	r8, [r3]
 8009f5c:	e549      	b.n	80099f2 <_dtoa_r+0x9a>
 8009f5e:	465f      	mov	r7, fp
 8009f60:	4643      	mov	r3, r8
 8009f62:	4698      	mov	r8, r3
 8009f64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f68:	2a39      	cmp	r2, #57	; 0x39
 8009f6a:	d106      	bne.n	8009f7a <_dtoa_r+0x622>
 8009f6c:	9a00      	ldr	r2, [sp, #0]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d1f7      	bne.n	8009f62 <_dtoa_r+0x60a>
 8009f72:	9900      	ldr	r1, [sp, #0]
 8009f74:	2230      	movs	r2, #48	; 0x30
 8009f76:	3701      	adds	r7, #1
 8009f78:	700a      	strb	r2, [r1, #0]
 8009f7a:	781a      	ldrb	r2, [r3, #0]
 8009f7c:	3201      	adds	r2, #1
 8009f7e:	701a      	strb	r2, [r3, #0]
 8009f80:	e7ae      	b.n	8009ee0 <_dtoa_r+0x588>
 8009f82:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009f86:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f8e:	d1b2      	bne.n	8009ef6 <_dtoa_r+0x59e>
 8009f90:	e7d3      	b.n	8009f3a <_dtoa_r+0x5e2>
 8009f92:	bf00      	nop
 8009f94:	0800bd60 	.word	0x0800bd60
 8009f98:	0800bd38 	.word	0x0800bd38
 8009f9c:	9908      	ldr	r1, [sp, #32]
 8009f9e:	2900      	cmp	r1, #0
 8009fa0:	f000 80d1 	beq.w	800a146 <_dtoa_r+0x7ee>
 8009fa4:	9907      	ldr	r1, [sp, #28]
 8009fa6:	2901      	cmp	r1, #1
 8009fa8:	f300 80b4 	bgt.w	800a114 <_dtoa_r+0x7bc>
 8009fac:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009fae:	2900      	cmp	r1, #0
 8009fb0:	f000 80ac 	beq.w	800a10c <_dtoa_r+0x7b4>
 8009fb4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009fb8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009fbc:	461c      	mov	r4, r3
 8009fbe:	930a      	str	r3, [sp, #40]	; 0x28
 8009fc0:	9b05      	ldr	r3, [sp, #20]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	9305      	str	r3, [sp, #20]
 8009fc6:	9b06      	ldr	r3, [sp, #24]
 8009fc8:	2101      	movs	r1, #1
 8009fca:	4413      	add	r3, r2
 8009fcc:	4630      	mov	r0, r6
 8009fce:	9306      	str	r3, [sp, #24]
 8009fd0:	f000 fb5a 	bl	800a688 <__i2b>
 8009fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fd6:	4607      	mov	r7, r0
 8009fd8:	f1b8 0f00 	cmp.w	r8, #0
 8009fdc:	dd0d      	ble.n	8009ffa <_dtoa_r+0x6a2>
 8009fde:	9a06      	ldr	r2, [sp, #24]
 8009fe0:	2a00      	cmp	r2, #0
 8009fe2:	dd0a      	ble.n	8009ffa <_dtoa_r+0x6a2>
 8009fe4:	4542      	cmp	r2, r8
 8009fe6:	9905      	ldr	r1, [sp, #20]
 8009fe8:	bfa8      	it	ge
 8009fea:	4642      	movge	r2, r8
 8009fec:	1a89      	subs	r1, r1, r2
 8009fee:	9105      	str	r1, [sp, #20]
 8009ff0:	9906      	ldr	r1, [sp, #24]
 8009ff2:	eba8 0802 	sub.w	r8, r8, r2
 8009ff6:	1a8a      	subs	r2, r1, r2
 8009ff8:	9206      	str	r2, [sp, #24]
 8009ffa:	b303      	cbz	r3, 800a03e <_dtoa_r+0x6e6>
 8009ffc:	9a08      	ldr	r2, [sp, #32]
 8009ffe:	2a00      	cmp	r2, #0
 800a000:	f000 80a6 	beq.w	800a150 <_dtoa_r+0x7f8>
 800a004:	2c00      	cmp	r4, #0
 800a006:	dd13      	ble.n	800a030 <_dtoa_r+0x6d8>
 800a008:	4639      	mov	r1, r7
 800a00a:	4622      	mov	r2, r4
 800a00c:	4630      	mov	r0, r6
 800a00e:	930c      	str	r3, [sp, #48]	; 0x30
 800a010:	f000 fbf6 	bl	800a800 <__pow5mult>
 800a014:	462a      	mov	r2, r5
 800a016:	4601      	mov	r1, r0
 800a018:	4607      	mov	r7, r0
 800a01a:	4630      	mov	r0, r6
 800a01c:	f000 fb4a 	bl	800a6b4 <__multiply>
 800a020:	4629      	mov	r1, r5
 800a022:	900a      	str	r0, [sp, #40]	; 0x28
 800a024:	4630      	mov	r0, r6
 800a026:	f000 fa73 	bl	800a510 <_Bfree>
 800a02a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a02c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a02e:	4615      	mov	r5, r2
 800a030:	1b1a      	subs	r2, r3, r4
 800a032:	d004      	beq.n	800a03e <_dtoa_r+0x6e6>
 800a034:	4629      	mov	r1, r5
 800a036:	4630      	mov	r0, r6
 800a038:	f000 fbe2 	bl	800a800 <__pow5mult>
 800a03c:	4605      	mov	r5, r0
 800a03e:	2101      	movs	r1, #1
 800a040:	4630      	mov	r0, r6
 800a042:	f000 fb21 	bl	800a688 <__i2b>
 800a046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a048:	2b00      	cmp	r3, #0
 800a04a:	4604      	mov	r4, r0
 800a04c:	f340 8082 	ble.w	800a154 <_dtoa_r+0x7fc>
 800a050:	461a      	mov	r2, r3
 800a052:	4601      	mov	r1, r0
 800a054:	4630      	mov	r0, r6
 800a056:	f000 fbd3 	bl	800a800 <__pow5mult>
 800a05a:	9b07      	ldr	r3, [sp, #28]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	4604      	mov	r4, r0
 800a060:	dd7b      	ble.n	800a15a <_dtoa_r+0x802>
 800a062:	2300      	movs	r3, #0
 800a064:	930a      	str	r3, [sp, #40]	; 0x28
 800a066:	6922      	ldr	r2, [r4, #16]
 800a068:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a06c:	6910      	ldr	r0, [r2, #16]
 800a06e:	f000 fabb 	bl	800a5e8 <__hi0bits>
 800a072:	f1c0 0020 	rsb	r0, r0, #32
 800a076:	9b06      	ldr	r3, [sp, #24]
 800a078:	4418      	add	r0, r3
 800a07a:	f010 001f 	ands.w	r0, r0, #31
 800a07e:	f000 808d 	beq.w	800a19c <_dtoa_r+0x844>
 800a082:	f1c0 0220 	rsb	r2, r0, #32
 800a086:	2a04      	cmp	r2, #4
 800a088:	f340 8086 	ble.w	800a198 <_dtoa_r+0x840>
 800a08c:	f1c0 001c 	rsb	r0, r0, #28
 800a090:	9b05      	ldr	r3, [sp, #20]
 800a092:	4403      	add	r3, r0
 800a094:	9305      	str	r3, [sp, #20]
 800a096:	9b06      	ldr	r3, [sp, #24]
 800a098:	4403      	add	r3, r0
 800a09a:	4480      	add	r8, r0
 800a09c:	9306      	str	r3, [sp, #24]
 800a09e:	9b05      	ldr	r3, [sp, #20]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	dd05      	ble.n	800a0b0 <_dtoa_r+0x758>
 800a0a4:	4629      	mov	r1, r5
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	f000 fc03 	bl	800a8b4 <__lshift>
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	9b06      	ldr	r3, [sp, #24]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	dd05      	ble.n	800a0c2 <_dtoa_r+0x76a>
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f000 fbfa 	bl	800a8b4 <__lshift>
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d06b      	beq.n	800a1a0 <_dtoa_r+0x848>
 800a0c8:	4621      	mov	r1, r4
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	f000 fc5e 	bl	800a98c <__mcmp>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	da65      	bge.n	800a1a0 <_dtoa_r+0x848>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	220a      	movs	r2, #10
 800a0da:	4630      	mov	r0, r6
 800a0dc:	f000 fa3a 	bl	800a554 <__multadd>
 800a0e0:	9b08      	ldr	r3, [sp, #32]
 800a0e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 8192 	beq.w	800a412 <_dtoa_r+0xaba>
 800a0ee:	4639      	mov	r1, r7
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	220a      	movs	r2, #10
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	f000 fa2d 	bl	800a554 <__multadd>
 800a0fa:	f1ba 0f00 	cmp.w	sl, #0
 800a0fe:	4607      	mov	r7, r0
 800a100:	f300 808e 	bgt.w	800a220 <_dtoa_r+0x8c8>
 800a104:	9b07      	ldr	r3, [sp, #28]
 800a106:	2b02      	cmp	r3, #2
 800a108:	dc51      	bgt.n	800a1ae <_dtoa_r+0x856>
 800a10a:	e089      	b.n	800a220 <_dtoa_r+0x8c8>
 800a10c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a10e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a112:	e751      	b.n	8009fb8 <_dtoa_r+0x660>
 800a114:	f109 34ff 	add.w	r4, r9, #4294967295
 800a118:	42a3      	cmp	r3, r4
 800a11a:	bfbf      	itttt	lt
 800a11c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a11e:	1ae3      	sublt	r3, r4, r3
 800a120:	18d2      	addlt	r2, r2, r3
 800a122:	4613      	movlt	r3, r2
 800a124:	bfb7      	itett	lt
 800a126:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a128:	1b1c      	subge	r4, r3, r4
 800a12a:	4623      	movlt	r3, r4
 800a12c:	2400      	movlt	r4, #0
 800a12e:	f1b9 0f00 	cmp.w	r9, #0
 800a132:	bfb5      	itete	lt
 800a134:	9a05      	ldrlt	r2, [sp, #20]
 800a136:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800a13a:	eba2 0809 	sublt.w	r8, r2, r9
 800a13e:	464a      	movge	r2, r9
 800a140:	bfb8      	it	lt
 800a142:	2200      	movlt	r2, #0
 800a144:	e73b      	b.n	8009fbe <_dtoa_r+0x666>
 800a146:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a14a:	9f08      	ldr	r7, [sp, #32]
 800a14c:	461c      	mov	r4, r3
 800a14e:	e743      	b.n	8009fd8 <_dtoa_r+0x680>
 800a150:	461a      	mov	r2, r3
 800a152:	e76f      	b.n	800a034 <_dtoa_r+0x6dc>
 800a154:	9b07      	ldr	r3, [sp, #28]
 800a156:	2b01      	cmp	r3, #1
 800a158:	dc18      	bgt.n	800a18c <_dtoa_r+0x834>
 800a15a:	9b02      	ldr	r3, [sp, #8]
 800a15c:	b9b3      	cbnz	r3, 800a18c <_dtoa_r+0x834>
 800a15e:	9b03      	ldr	r3, [sp, #12]
 800a160:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a164:	b9a2      	cbnz	r2, 800a190 <_dtoa_r+0x838>
 800a166:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a16a:	0d12      	lsrs	r2, r2, #20
 800a16c:	0512      	lsls	r2, r2, #20
 800a16e:	b18a      	cbz	r2, 800a194 <_dtoa_r+0x83c>
 800a170:	9b05      	ldr	r3, [sp, #20]
 800a172:	3301      	adds	r3, #1
 800a174:	9305      	str	r3, [sp, #20]
 800a176:	9b06      	ldr	r3, [sp, #24]
 800a178:	3301      	adds	r3, #1
 800a17a:	9306      	str	r3, [sp, #24]
 800a17c:	2301      	movs	r3, #1
 800a17e:	930a      	str	r3, [sp, #40]	; 0x28
 800a180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a182:	2b00      	cmp	r3, #0
 800a184:	f47f af6f 	bne.w	800a066 <_dtoa_r+0x70e>
 800a188:	2001      	movs	r0, #1
 800a18a:	e774      	b.n	800a076 <_dtoa_r+0x71e>
 800a18c:	2300      	movs	r3, #0
 800a18e:	e7f6      	b.n	800a17e <_dtoa_r+0x826>
 800a190:	9b02      	ldr	r3, [sp, #8]
 800a192:	e7f4      	b.n	800a17e <_dtoa_r+0x826>
 800a194:	920a      	str	r2, [sp, #40]	; 0x28
 800a196:	e7f3      	b.n	800a180 <_dtoa_r+0x828>
 800a198:	d081      	beq.n	800a09e <_dtoa_r+0x746>
 800a19a:	4610      	mov	r0, r2
 800a19c:	301c      	adds	r0, #28
 800a19e:	e777      	b.n	800a090 <_dtoa_r+0x738>
 800a1a0:	f1b9 0f00 	cmp.w	r9, #0
 800a1a4:	dc37      	bgt.n	800a216 <_dtoa_r+0x8be>
 800a1a6:	9b07      	ldr	r3, [sp, #28]
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	dd34      	ble.n	800a216 <_dtoa_r+0x8be>
 800a1ac:	46ca      	mov	sl, r9
 800a1ae:	f1ba 0f00 	cmp.w	sl, #0
 800a1b2:	d10d      	bne.n	800a1d0 <_dtoa_r+0x878>
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	4653      	mov	r3, sl
 800a1b8:	2205      	movs	r2, #5
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	f000 f9ca 	bl	800a554 <__multadd>
 800a1c0:	4601      	mov	r1, r0
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	f000 fbe1 	bl	800a98c <__mcmp>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	f73f adde 	bgt.w	8009d8c <_dtoa_r+0x434>
 800a1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d2:	f8dd 8000 	ldr.w	r8, [sp]
 800a1d6:	ea6f 0b03 	mvn.w	fp, r3
 800a1da:	f04f 0900 	mov.w	r9, #0
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f000 f995 	bl	800a510 <_Bfree>
 800a1e6:	2f00      	cmp	r7, #0
 800a1e8:	f43f aea7 	beq.w	8009f3a <_dtoa_r+0x5e2>
 800a1ec:	f1b9 0f00 	cmp.w	r9, #0
 800a1f0:	d005      	beq.n	800a1fe <_dtoa_r+0x8a6>
 800a1f2:	45b9      	cmp	r9, r7
 800a1f4:	d003      	beq.n	800a1fe <_dtoa_r+0x8a6>
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	f000 f989 	bl	800a510 <_Bfree>
 800a1fe:	4639      	mov	r1, r7
 800a200:	4630      	mov	r0, r6
 800a202:	f000 f985 	bl	800a510 <_Bfree>
 800a206:	e698      	b.n	8009f3a <_dtoa_r+0x5e2>
 800a208:	2400      	movs	r4, #0
 800a20a:	4627      	mov	r7, r4
 800a20c:	e7e0      	b.n	800a1d0 <_dtoa_r+0x878>
 800a20e:	46bb      	mov	fp, r7
 800a210:	4604      	mov	r4, r0
 800a212:	4607      	mov	r7, r0
 800a214:	e5ba      	b.n	8009d8c <_dtoa_r+0x434>
 800a216:	9b08      	ldr	r3, [sp, #32]
 800a218:	46ca      	mov	sl, r9
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 8100 	beq.w	800a420 <_dtoa_r+0xac8>
 800a220:	f1b8 0f00 	cmp.w	r8, #0
 800a224:	dd05      	ble.n	800a232 <_dtoa_r+0x8da>
 800a226:	4639      	mov	r1, r7
 800a228:	4642      	mov	r2, r8
 800a22a:	4630      	mov	r0, r6
 800a22c:	f000 fb42 	bl	800a8b4 <__lshift>
 800a230:	4607      	mov	r7, r0
 800a232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a234:	2b00      	cmp	r3, #0
 800a236:	d05d      	beq.n	800a2f4 <_dtoa_r+0x99c>
 800a238:	6879      	ldr	r1, [r7, #4]
 800a23a:	4630      	mov	r0, r6
 800a23c:	f000 f928 	bl	800a490 <_Balloc>
 800a240:	4680      	mov	r8, r0
 800a242:	b928      	cbnz	r0, 800a250 <_dtoa_r+0x8f8>
 800a244:	4b82      	ldr	r3, [pc, #520]	; (800a450 <_dtoa_r+0xaf8>)
 800a246:	4602      	mov	r2, r0
 800a248:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a24c:	f7ff bb9a 	b.w	8009984 <_dtoa_r+0x2c>
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	3202      	adds	r2, #2
 800a254:	0092      	lsls	r2, r2, #2
 800a256:	f107 010c 	add.w	r1, r7, #12
 800a25a:	300c      	adds	r0, #12
 800a25c:	f000 f90a 	bl	800a474 <memcpy>
 800a260:	2201      	movs	r2, #1
 800a262:	4641      	mov	r1, r8
 800a264:	4630      	mov	r0, r6
 800a266:	f000 fb25 	bl	800a8b4 <__lshift>
 800a26a:	9b00      	ldr	r3, [sp, #0]
 800a26c:	3301      	adds	r3, #1
 800a26e:	9305      	str	r3, [sp, #20]
 800a270:	9b00      	ldr	r3, [sp, #0]
 800a272:	4453      	add	r3, sl
 800a274:	9309      	str	r3, [sp, #36]	; 0x24
 800a276:	9b02      	ldr	r3, [sp, #8]
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	46b9      	mov	r9, r7
 800a27e:	9308      	str	r3, [sp, #32]
 800a280:	4607      	mov	r7, r0
 800a282:	9b05      	ldr	r3, [sp, #20]
 800a284:	4621      	mov	r1, r4
 800a286:	3b01      	subs	r3, #1
 800a288:	4628      	mov	r0, r5
 800a28a:	9302      	str	r3, [sp, #8]
 800a28c:	f7ff fad6 	bl	800983c <quorem>
 800a290:	4603      	mov	r3, r0
 800a292:	3330      	adds	r3, #48	; 0x30
 800a294:	9006      	str	r0, [sp, #24]
 800a296:	4649      	mov	r1, r9
 800a298:	4628      	mov	r0, r5
 800a29a:	930a      	str	r3, [sp, #40]	; 0x28
 800a29c:	f000 fb76 	bl	800a98c <__mcmp>
 800a2a0:	463a      	mov	r2, r7
 800a2a2:	4682      	mov	sl, r0
 800a2a4:	4621      	mov	r1, r4
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	f000 fb8c 	bl	800a9c4 <__mdiff>
 800a2ac:	68c2      	ldr	r2, [r0, #12]
 800a2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2b0:	4680      	mov	r8, r0
 800a2b2:	bb0a      	cbnz	r2, 800a2f8 <_dtoa_r+0x9a0>
 800a2b4:	4601      	mov	r1, r0
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	f000 fb68 	bl	800a98c <__mcmp>
 800a2bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2be:	4602      	mov	r2, r0
 800a2c0:	4641      	mov	r1, r8
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	920e      	str	r2, [sp, #56]	; 0x38
 800a2c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a2c8:	f000 f922 	bl	800a510 <_Bfree>
 800a2cc:	9b07      	ldr	r3, [sp, #28]
 800a2ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2d0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a2d4:	ea43 0102 	orr.w	r1, r3, r2
 800a2d8:	9b08      	ldr	r3, [sp, #32]
 800a2da:	430b      	orrs	r3, r1
 800a2dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2de:	d10d      	bne.n	800a2fc <_dtoa_r+0x9a4>
 800a2e0:	2b39      	cmp	r3, #57	; 0x39
 800a2e2:	d029      	beq.n	800a338 <_dtoa_r+0x9e0>
 800a2e4:	f1ba 0f00 	cmp.w	sl, #0
 800a2e8:	dd01      	ble.n	800a2ee <_dtoa_r+0x996>
 800a2ea:	9b06      	ldr	r3, [sp, #24]
 800a2ec:	3331      	adds	r3, #49	; 0x31
 800a2ee:	9a02      	ldr	r2, [sp, #8]
 800a2f0:	7013      	strb	r3, [r2, #0]
 800a2f2:	e774      	b.n	800a1de <_dtoa_r+0x886>
 800a2f4:	4638      	mov	r0, r7
 800a2f6:	e7b8      	b.n	800a26a <_dtoa_r+0x912>
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	e7e1      	b.n	800a2c0 <_dtoa_r+0x968>
 800a2fc:	f1ba 0f00 	cmp.w	sl, #0
 800a300:	db06      	blt.n	800a310 <_dtoa_r+0x9b8>
 800a302:	9907      	ldr	r1, [sp, #28]
 800a304:	ea41 0a0a 	orr.w	sl, r1, sl
 800a308:	9908      	ldr	r1, [sp, #32]
 800a30a:	ea5a 0101 	orrs.w	r1, sl, r1
 800a30e:	d120      	bne.n	800a352 <_dtoa_r+0x9fa>
 800a310:	2a00      	cmp	r2, #0
 800a312:	ddec      	ble.n	800a2ee <_dtoa_r+0x996>
 800a314:	4629      	mov	r1, r5
 800a316:	2201      	movs	r2, #1
 800a318:	4630      	mov	r0, r6
 800a31a:	9305      	str	r3, [sp, #20]
 800a31c:	f000 faca 	bl	800a8b4 <__lshift>
 800a320:	4621      	mov	r1, r4
 800a322:	4605      	mov	r5, r0
 800a324:	f000 fb32 	bl	800a98c <__mcmp>
 800a328:	2800      	cmp	r0, #0
 800a32a:	9b05      	ldr	r3, [sp, #20]
 800a32c:	dc02      	bgt.n	800a334 <_dtoa_r+0x9dc>
 800a32e:	d1de      	bne.n	800a2ee <_dtoa_r+0x996>
 800a330:	07da      	lsls	r2, r3, #31
 800a332:	d5dc      	bpl.n	800a2ee <_dtoa_r+0x996>
 800a334:	2b39      	cmp	r3, #57	; 0x39
 800a336:	d1d8      	bne.n	800a2ea <_dtoa_r+0x992>
 800a338:	9a02      	ldr	r2, [sp, #8]
 800a33a:	2339      	movs	r3, #57	; 0x39
 800a33c:	7013      	strb	r3, [r2, #0]
 800a33e:	4643      	mov	r3, r8
 800a340:	4698      	mov	r8, r3
 800a342:	3b01      	subs	r3, #1
 800a344:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a348:	2a39      	cmp	r2, #57	; 0x39
 800a34a:	d051      	beq.n	800a3f0 <_dtoa_r+0xa98>
 800a34c:	3201      	adds	r2, #1
 800a34e:	701a      	strb	r2, [r3, #0]
 800a350:	e745      	b.n	800a1de <_dtoa_r+0x886>
 800a352:	2a00      	cmp	r2, #0
 800a354:	dd03      	ble.n	800a35e <_dtoa_r+0xa06>
 800a356:	2b39      	cmp	r3, #57	; 0x39
 800a358:	d0ee      	beq.n	800a338 <_dtoa_r+0x9e0>
 800a35a:	3301      	adds	r3, #1
 800a35c:	e7c7      	b.n	800a2ee <_dtoa_r+0x996>
 800a35e:	9a05      	ldr	r2, [sp, #20]
 800a360:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a362:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a366:	428a      	cmp	r2, r1
 800a368:	d02b      	beq.n	800a3c2 <_dtoa_r+0xa6a>
 800a36a:	4629      	mov	r1, r5
 800a36c:	2300      	movs	r3, #0
 800a36e:	220a      	movs	r2, #10
 800a370:	4630      	mov	r0, r6
 800a372:	f000 f8ef 	bl	800a554 <__multadd>
 800a376:	45b9      	cmp	r9, r7
 800a378:	4605      	mov	r5, r0
 800a37a:	f04f 0300 	mov.w	r3, #0
 800a37e:	f04f 020a 	mov.w	r2, #10
 800a382:	4649      	mov	r1, r9
 800a384:	4630      	mov	r0, r6
 800a386:	d107      	bne.n	800a398 <_dtoa_r+0xa40>
 800a388:	f000 f8e4 	bl	800a554 <__multadd>
 800a38c:	4681      	mov	r9, r0
 800a38e:	4607      	mov	r7, r0
 800a390:	9b05      	ldr	r3, [sp, #20]
 800a392:	3301      	adds	r3, #1
 800a394:	9305      	str	r3, [sp, #20]
 800a396:	e774      	b.n	800a282 <_dtoa_r+0x92a>
 800a398:	f000 f8dc 	bl	800a554 <__multadd>
 800a39c:	4639      	mov	r1, r7
 800a39e:	4681      	mov	r9, r0
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	220a      	movs	r2, #10
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f000 f8d5 	bl	800a554 <__multadd>
 800a3aa:	4607      	mov	r7, r0
 800a3ac:	e7f0      	b.n	800a390 <_dtoa_r+0xa38>
 800a3ae:	f1ba 0f00 	cmp.w	sl, #0
 800a3b2:	9a00      	ldr	r2, [sp, #0]
 800a3b4:	bfcc      	ite	gt
 800a3b6:	46d0      	movgt	r8, sl
 800a3b8:	f04f 0801 	movle.w	r8, #1
 800a3bc:	4490      	add	r8, r2
 800a3be:	f04f 0900 	mov.w	r9, #0
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	9302      	str	r3, [sp, #8]
 800a3ca:	f000 fa73 	bl	800a8b4 <__lshift>
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	4605      	mov	r5, r0
 800a3d2:	f000 fadb 	bl	800a98c <__mcmp>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	dcb1      	bgt.n	800a33e <_dtoa_r+0x9e6>
 800a3da:	d102      	bne.n	800a3e2 <_dtoa_r+0xa8a>
 800a3dc:	9b02      	ldr	r3, [sp, #8]
 800a3de:	07db      	lsls	r3, r3, #31
 800a3e0:	d4ad      	bmi.n	800a33e <_dtoa_r+0x9e6>
 800a3e2:	4643      	mov	r3, r8
 800a3e4:	4698      	mov	r8, r3
 800a3e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3ea:	2a30      	cmp	r2, #48	; 0x30
 800a3ec:	d0fa      	beq.n	800a3e4 <_dtoa_r+0xa8c>
 800a3ee:	e6f6      	b.n	800a1de <_dtoa_r+0x886>
 800a3f0:	9a00      	ldr	r2, [sp, #0]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d1a4      	bne.n	800a340 <_dtoa_r+0x9e8>
 800a3f6:	f10b 0b01 	add.w	fp, fp, #1
 800a3fa:	2331      	movs	r3, #49	; 0x31
 800a3fc:	e778      	b.n	800a2f0 <_dtoa_r+0x998>
 800a3fe:	4b15      	ldr	r3, [pc, #84]	; (800a454 <_dtoa_r+0xafc>)
 800a400:	f7ff bb12 	b.w	8009a28 <_dtoa_r+0xd0>
 800a404:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a406:	2b00      	cmp	r3, #0
 800a408:	f47f aaee 	bne.w	80099e8 <_dtoa_r+0x90>
 800a40c:	4b12      	ldr	r3, [pc, #72]	; (800a458 <_dtoa_r+0xb00>)
 800a40e:	f7ff bb0b 	b.w	8009a28 <_dtoa_r+0xd0>
 800a412:	f1ba 0f00 	cmp.w	sl, #0
 800a416:	dc03      	bgt.n	800a420 <_dtoa_r+0xac8>
 800a418:	9b07      	ldr	r3, [sp, #28]
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	f73f aec7 	bgt.w	800a1ae <_dtoa_r+0x856>
 800a420:	f8dd 8000 	ldr.w	r8, [sp]
 800a424:	4621      	mov	r1, r4
 800a426:	4628      	mov	r0, r5
 800a428:	f7ff fa08 	bl	800983c <quorem>
 800a42c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a430:	f808 3b01 	strb.w	r3, [r8], #1
 800a434:	9a00      	ldr	r2, [sp, #0]
 800a436:	eba8 0202 	sub.w	r2, r8, r2
 800a43a:	4592      	cmp	sl, r2
 800a43c:	ddb7      	ble.n	800a3ae <_dtoa_r+0xa56>
 800a43e:	4629      	mov	r1, r5
 800a440:	2300      	movs	r3, #0
 800a442:	220a      	movs	r2, #10
 800a444:	4630      	mov	r0, r6
 800a446:	f000 f885 	bl	800a554 <__multadd>
 800a44a:	4605      	mov	r5, r0
 800a44c:	e7ea      	b.n	800a424 <_dtoa_r+0xacc>
 800a44e:	bf00      	nop
 800a450:	0800bcc7 	.word	0x0800bcc7
 800a454:	0800bc20 	.word	0x0800bc20
 800a458:	0800bc44 	.word	0x0800bc44

0800a45c <_localeconv_r>:
 800a45c:	4800      	ldr	r0, [pc, #0]	; (800a460 <_localeconv_r+0x4>)
 800a45e:	4770      	bx	lr
 800a460:	24000164 	.word	0x24000164

0800a464 <malloc>:
 800a464:	4b02      	ldr	r3, [pc, #8]	; (800a470 <malloc+0xc>)
 800a466:	4601      	mov	r1, r0
 800a468:	6818      	ldr	r0, [r3, #0]
 800a46a:	f000 bbef 	b.w	800ac4c <_malloc_r>
 800a46e:	bf00      	nop
 800a470:	24000010 	.word	0x24000010

0800a474 <memcpy>:
 800a474:	440a      	add	r2, r1
 800a476:	4291      	cmp	r1, r2
 800a478:	f100 33ff 	add.w	r3, r0, #4294967295
 800a47c:	d100      	bne.n	800a480 <memcpy+0xc>
 800a47e:	4770      	bx	lr
 800a480:	b510      	push	{r4, lr}
 800a482:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a48a:	4291      	cmp	r1, r2
 800a48c:	d1f9      	bne.n	800a482 <memcpy+0xe>
 800a48e:	bd10      	pop	{r4, pc}

0800a490 <_Balloc>:
 800a490:	b570      	push	{r4, r5, r6, lr}
 800a492:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a494:	4604      	mov	r4, r0
 800a496:	460d      	mov	r5, r1
 800a498:	b976      	cbnz	r6, 800a4b8 <_Balloc+0x28>
 800a49a:	2010      	movs	r0, #16
 800a49c:	f7ff ffe2 	bl	800a464 <malloc>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	6260      	str	r0, [r4, #36]	; 0x24
 800a4a4:	b920      	cbnz	r0, 800a4b0 <_Balloc+0x20>
 800a4a6:	4b18      	ldr	r3, [pc, #96]	; (800a508 <_Balloc+0x78>)
 800a4a8:	4818      	ldr	r0, [pc, #96]	; (800a50c <_Balloc+0x7c>)
 800a4aa:	2166      	movs	r1, #102	; 0x66
 800a4ac:	f000 fd94 	bl	800afd8 <__assert_func>
 800a4b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4b4:	6006      	str	r6, [r0, #0]
 800a4b6:	60c6      	str	r6, [r0, #12]
 800a4b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a4ba:	68f3      	ldr	r3, [r6, #12]
 800a4bc:	b183      	cbz	r3, 800a4e0 <_Balloc+0x50>
 800a4be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4c6:	b9b8      	cbnz	r0, 800a4f8 <_Balloc+0x68>
 800a4c8:	2101      	movs	r1, #1
 800a4ca:	fa01 f605 	lsl.w	r6, r1, r5
 800a4ce:	1d72      	adds	r2, r6, #5
 800a4d0:	0092      	lsls	r2, r2, #2
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	f000 fb5a 	bl	800ab8c <_calloc_r>
 800a4d8:	b160      	cbz	r0, 800a4f4 <_Balloc+0x64>
 800a4da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4de:	e00e      	b.n	800a4fe <_Balloc+0x6e>
 800a4e0:	2221      	movs	r2, #33	; 0x21
 800a4e2:	2104      	movs	r1, #4
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f000 fb51 	bl	800ab8c <_calloc_r>
 800a4ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4ec:	60f0      	str	r0, [r6, #12]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1e4      	bne.n	800a4be <_Balloc+0x2e>
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	bd70      	pop	{r4, r5, r6, pc}
 800a4f8:	6802      	ldr	r2, [r0, #0]
 800a4fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4fe:	2300      	movs	r3, #0
 800a500:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a504:	e7f7      	b.n	800a4f6 <_Balloc+0x66>
 800a506:	bf00      	nop
 800a508:	0800bc51 	.word	0x0800bc51
 800a50c:	0800bcd8 	.word	0x0800bcd8

0800a510 <_Bfree>:
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a514:	4605      	mov	r5, r0
 800a516:	460c      	mov	r4, r1
 800a518:	b976      	cbnz	r6, 800a538 <_Bfree+0x28>
 800a51a:	2010      	movs	r0, #16
 800a51c:	f7ff ffa2 	bl	800a464 <malloc>
 800a520:	4602      	mov	r2, r0
 800a522:	6268      	str	r0, [r5, #36]	; 0x24
 800a524:	b920      	cbnz	r0, 800a530 <_Bfree+0x20>
 800a526:	4b09      	ldr	r3, [pc, #36]	; (800a54c <_Bfree+0x3c>)
 800a528:	4809      	ldr	r0, [pc, #36]	; (800a550 <_Bfree+0x40>)
 800a52a:	218a      	movs	r1, #138	; 0x8a
 800a52c:	f000 fd54 	bl	800afd8 <__assert_func>
 800a530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a534:	6006      	str	r6, [r0, #0]
 800a536:	60c6      	str	r6, [r0, #12]
 800a538:	b13c      	cbz	r4, 800a54a <_Bfree+0x3a>
 800a53a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a53c:	6862      	ldr	r2, [r4, #4]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a544:	6021      	str	r1, [r4, #0]
 800a546:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a54a:	bd70      	pop	{r4, r5, r6, pc}
 800a54c:	0800bc51 	.word	0x0800bc51
 800a550:	0800bcd8 	.word	0x0800bcd8

0800a554 <__multadd>:
 800a554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a558:	690e      	ldr	r6, [r1, #16]
 800a55a:	4607      	mov	r7, r0
 800a55c:	4698      	mov	r8, r3
 800a55e:	460c      	mov	r4, r1
 800a560:	f101 0014 	add.w	r0, r1, #20
 800a564:	2300      	movs	r3, #0
 800a566:	6805      	ldr	r5, [r0, #0]
 800a568:	b2a9      	uxth	r1, r5
 800a56a:	fb02 8101 	mla	r1, r2, r1, r8
 800a56e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a572:	0c2d      	lsrs	r5, r5, #16
 800a574:	fb02 c505 	mla	r5, r2, r5, ip
 800a578:	b289      	uxth	r1, r1
 800a57a:	3301      	adds	r3, #1
 800a57c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a580:	429e      	cmp	r6, r3
 800a582:	f840 1b04 	str.w	r1, [r0], #4
 800a586:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a58a:	dcec      	bgt.n	800a566 <__multadd+0x12>
 800a58c:	f1b8 0f00 	cmp.w	r8, #0
 800a590:	d022      	beq.n	800a5d8 <__multadd+0x84>
 800a592:	68a3      	ldr	r3, [r4, #8]
 800a594:	42b3      	cmp	r3, r6
 800a596:	dc19      	bgt.n	800a5cc <__multadd+0x78>
 800a598:	6861      	ldr	r1, [r4, #4]
 800a59a:	4638      	mov	r0, r7
 800a59c:	3101      	adds	r1, #1
 800a59e:	f7ff ff77 	bl	800a490 <_Balloc>
 800a5a2:	4605      	mov	r5, r0
 800a5a4:	b928      	cbnz	r0, 800a5b2 <__multadd+0x5e>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	4b0d      	ldr	r3, [pc, #52]	; (800a5e0 <__multadd+0x8c>)
 800a5aa:	480e      	ldr	r0, [pc, #56]	; (800a5e4 <__multadd+0x90>)
 800a5ac:	21b5      	movs	r1, #181	; 0xb5
 800a5ae:	f000 fd13 	bl	800afd8 <__assert_func>
 800a5b2:	6922      	ldr	r2, [r4, #16]
 800a5b4:	3202      	adds	r2, #2
 800a5b6:	f104 010c 	add.w	r1, r4, #12
 800a5ba:	0092      	lsls	r2, r2, #2
 800a5bc:	300c      	adds	r0, #12
 800a5be:	f7ff ff59 	bl	800a474 <memcpy>
 800a5c2:	4621      	mov	r1, r4
 800a5c4:	4638      	mov	r0, r7
 800a5c6:	f7ff ffa3 	bl	800a510 <_Bfree>
 800a5ca:	462c      	mov	r4, r5
 800a5cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a5d0:	3601      	adds	r6, #1
 800a5d2:	f8c3 8014 	str.w	r8, [r3, #20]
 800a5d6:	6126      	str	r6, [r4, #16]
 800a5d8:	4620      	mov	r0, r4
 800a5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5de:	bf00      	nop
 800a5e0:	0800bcc7 	.word	0x0800bcc7
 800a5e4:	0800bcd8 	.word	0x0800bcd8

0800a5e8 <__hi0bits>:
 800a5e8:	0c03      	lsrs	r3, r0, #16
 800a5ea:	041b      	lsls	r3, r3, #16
 800a5ec:	b9d3      	cbnz	r3, 800a624 <__hi0bits+0x3c>
 800a5ee:	0400      	lsls	r0, r0, #16
 800a5f0:	2310      	movs	r3, #16
 800a5f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a5f6:	bf04      	itt	eq
 800a5f8:	0200      	lsleq	r0, r0, #8
 800a5fa:	3308      	addeq	r3, #8
 800a5fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a600:	bf04      	itt	eq
 800a602:	0100      	lsleq	r0, r0, #4
 800a604:	3304      	addeq	r3, #4
 800a606:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a60a:	bf04      	itt	eq
 800a60c:	0080      	lsleq	r0, r0, #2
 800a60e:	3302      	addeq	r3, #2
 800a610:	2800      	cmp	r0, #0
 800a612:	db05      	blt.n	800a620 <__hi0bits+0x38>
 800a614:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a618:	f103 0301 	add.w	r3, r3, #1
 800a61c:	bf08      	it	eq
 800a61e:	2320      	moveq	r3, #32
 800a620:	4618      	mov	r0, r3
 800a622:	4770      	bx	lr
 800a624:	2300      	movs	r3, #0
 800a626:	e7e4      	b.n	800a5f2 <__hi0bits+0xa>

0800a628 <__lo0bits>:
 800a628:	6803      	ldr	r3, [r0, #0]
 800a62a:	f013 0207 	ands.w	r2, r3, #7
 800a62e:	4601      	mov	r1, r0
 800a630:	d00b      	beq.n	800a64a <__lo0bits+0x22>
 800a632:	07da      	lsls	r2, r3, #31
 800a634:	d424      	bmi.n	800a680 <__lo0bits+0x58>
 800a636:	0798      	lsls	r0, r3, #30
 800a638:	bf49      	itett	mi
 800a63a:	085b      	lsrmi	r3, r3, #1
 800a63c:	089b      	lsrpl	r3, r3, #2
 800a63e:	2001      	movmi	r0, #1
 800a640:	600b      	strmi	r3, [r1, #0]
 800a642:	bf5c      	itt	pl
 800a644:	600b      	strpl	r3, [r1, #0]
 800a646:	2002      	movpl	r0, #2
 800a648:	4770      	bx	lr
 800a64a:	b298      	uxth	r0, r3
 800a64c:	b9b0      	cbnz	r0, 800a67c <__lo0bits+0x54>
 800a64e:	0c1b      	lsrs	r3, r3, #16
 800a650:	2010      	movs	r0, #16
 800a652:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a656:	bf04      	itt	eq
 800a658:	0a1b      	lsreq	r3, r3, #8
 800a65a:	3008      	addeq	r0, #8
 800a65c:	071a      	lsls	r2, r3, #28
 800a65e:	bf04      	itt	eq
 800a660:	091b      	lsreq	r3, r3, #4
 800a662:	3004      	addeq	r0, #4
 800a664:	079a      	lsls	r2, r3, #30
 800a666:	bf04      	itt	eq
 800a668:	089b      	lsreq	r3, r3, #2
 800a66a:	3002      	addeq	r0, #2
 800a66c:	07da      	lsls	r2, r3, #31
 800a66e:	d403      	bmi.n	800a678 <__lo0bits+0x50>
 800a670:	085b      	lsrs	r3, r3, #1
 800a672:	f100 0001 	add.w	r0, r0, #1
 800a676:	d005      	beq.n	800a684 <__lo0bits+0x5c>
 800a678:	600b      	str	r3, [r1, #0]
 800a67a:	4770      	bx	lr
 800a67c:	4610      	mov	r0, r2
 800a67e:	e7e8      	b.n	800a652 <__lo0bits+0x2a>
 800a680:	2000      	movs	r0, #0
 800a682:	4770      	bx	lr
 800a684:	2020      	movs	r0, #32
 800a686:	4770      	bx	lr

0800a688 <__i2b>:
 800a688:	b510      	push	{r4, lr}
 800a68a:	460c      	mov	r4, r1
 800a68c:	2101      	movs	r1, #1
 800a68e:	f7ff feff 	bl	800a490 <_Balloc>
 800a692:	4602      	mov	r2, r0
 800a694:	b928      	cbnz	r0, 800a6a2 <__i2b+0x1a>
 800a696:	4b05      	ldr	r3, [pc, #20]	; (800a6ac <__i2b+0x24>)
 800a698:	4805      	ldr	r0, [pc, #20]	; (800a6b0 <__i2b+0x28>)
 800a69a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a69e:	f000 fc9b 	bl	800afd8 <__assert_func>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	6144      	str	r4, [r0, #20]
 800a6a6:	6103      	str	r3, [r0, #16]
 800a6a8:	bd10      	pop	{r4, pc}
 800a6aa:	bf00      	nop
 800a6ac:	0800bcc7 	.word	0x0800bcc7
 800a6b0:	0800bcd8 	.word	0x0800bcd8

0800a6b4 <__multiply>:
 800a6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b8:	4614      	mov	r4, r2
 800a6ba:	690a      	ldr	r2, [r1, #16]
 800a6bc:	6923      	ldr	r3, [r4, #16]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	bfb8      	it	lt
 800a6c2:	460b      	movlt	r3, r1
 800a6c4:	460d      	mov	r5, r1
 800a6c6:	bfbc      	itt	lt
 800a6c8:	4625      	movlt	r5, r4
 800a6ca:	461c      	movlt	r4, r3
 800a6cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a6d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a6d4:	68ab      	ldr	r3, [r5, #8]
 800a6d6:	6869      	ldr	r1, [r5, #4]
 800a6d8:	eb0a 0709 	add.w	r7, sl, r9
 800a6dc:	42bb      	cmp	r3, r7
 800a6de:	b085      	sub	sp, #20
 800a6e0:	bfb8      	it	lt
 800a6e2:	3101      	addlt	r1, #1
 800a6e4:	f7ff fed4 	bl	800a490 <_Balloc>
 800a6e8:	b930      	cbnz	r0, 800a6f8 <__multiply+0x44>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	4b42      	ldr	r3, [pc, #264]	; (800a7f8 <__multiply+0x144>)
 800a6ee:	4843      	ldr	r0, [pc, #268]	; (800a7fc <__multiply+0x148>)
 800a6f0:	f240 115d 	movw	r1, #349	; 0x15d
 800a6f4:	f000 fc70 	bl	800afd8 <__assert_func>
 800a6f8:	f100 0614 	add.w	r6, r0, #20
 800a6fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a700:	4633      	mov	r3, r6
 800a702:	2200      	movs	r2, #0
 800a704:	4543      	cmp	r3, r8
 800a706:	d31e      	bcc.n	800a746 <__multiply+0x92>
 800a708:	f105 0c14 	add.w	ip, r5, #20
 800a70c:	f104 0314 	add.w	r3, r4, #20
 800a710:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a714:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a718:	9202      	str	r2, [sp, #8]
 800a71a:	ebac 0205 	sub.w	r2, ip, r5
 800a71e:	3a15      	subs	r2, #21
 800a720:	f022 0203 	bic.w	r2, r2, #3
 800a724:	3204      	adds	r2, #4
 800a726:	f105 0115 	add.w	r1, r5, #21
 800a72a:	458c      	cmp	ip, r1
 800a72c:	bf38      	it	cc
 800a72e:	2204      	movcc	r2, #4
 800a730:	9201      	str	r2, [sp, #4]
 800a732:	9a02      	ldr	r2, [sp, #8]
 800a734:	9303      	str	r3, [sp, #12]
 800a736:	429a      	cmp	r2, r3
 800a738:	d808      	bhi.n	800a74c <__multiply+0x98>
 800a73a:	2f00      	cmp	r7, #0
 800a73c:	dc55      	bgt.n	800a7ea <__multiply+0x136>
 800a73e:	6107      	str	r7, [r0, #16]
 800a740:	b005      	add	sp, #20
 800a742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a746:	f843 2b04 	str.w	r2, [r3], #4
 800a74a:	e7db      	b.n	800a704 <__multiply+0x50>
 800a74c:	f8b3 a000 	ldrh.w	sl, [r3]
 800a750:	f1ba 0f00 	cmp.w	sl, #0
 800a754:	d020      	beq.n	800a798 <__multiply+0xe4>
 800a756:	f105 0e14 	add.w	lr, r5, #20
 800a75a:	46b1      	mov	r9, r6
 800a75c:	2200      	movs	r2, #0
 800a75e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a762:	f8d9 b000 	ldr.w	fp, [r9]
 800a766:	b2a1      	uxth	r1, r4
 800a768:	fa1f fb8b 	uxth.w	fp, fp
 800a76c:	fb0a b101 	mla	r1, sl, r1, fp
 800a770:	4411      	add	r1, r2
 800a772:	f8d9 2000 	ldr.w	r2, [r9]
 800a776:	0c24      	lsrs	r4, r4, #16
 800a778:	0c12      	lsrs	r2, r2, #16
 800a77a:	fb0a 2404 	mla	r4, sl, r4, r2
 800a77e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a782:	b289      	uxth	r1, r1
 800a784:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a788:	45f4      	cmp	ip, lr
 800a78a:	f849 1b04 	str.w	r1, [r9], #4
 800a78e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a792:	d8e4      	bhi.n	800a75e <__multiply+0xaa>
 800a794:	9901      	ldr	r1, [sp, #4]
 800a796:	5072      	str	r2, [r6, r1]
 800a798:	9a03      	ldr	r2, [sp, #12]
 800a79a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a79e:	3304      	adds	r3, #4
 800a7a0:	f1b9 0f00 	cmp.w	r9, #0
 800a7a4:	d01f      	beq.n	800a7e6 <__multiply+0x132>
 800a7a6:	6834      	ldr	r4, [r6, #0]
 800a7a8:	f105 0114 	add.w	r1, r5, #20
 800a7ac:	46b6      	mov	lr, r6
 800a7ae:	f04f 0a00 	mov.w	sl, #0
 800a7b2:	880a      	ldrh	r2, [r1, #0]
 800a7b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a7b8:	fb09 b202 	mla	r2, r9, r2, fp
 800a7bc:	4492      	add	sl, r2
 800a7be:	b2a4      	uxth	r4, r4
 800a7c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a7c4:	f84e 4b04 	str.w	r4, [lr], #4
 800a7c8:	f851 4b04 	ldr.w	r4, [r1], #4
 800a7cc:	f8be 2000 	ldrh.w	r2, [lr]
 800a7d0:	0c24      	lsrs	r4, r4, #16
 800a7d2:	fb09 2404 	mla	r4, r9, r4, r2
 800a7d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a7da:	458c      	cmp	ip, r1
 800a7dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a7e0:	d8e7      	bhi.n	800a7b2 <__multiply+0xfe>
 800a7e2:	9a01      	ldr	r2, [sp, #4]
 800a7e4:	50b4      	str	r4, [r6, r2]
 800a7e6:	3604      	adds	r6, #4
 800a7e8:	e7a3      	b.n	800a732 <__multiply+0x7e>
 800a7ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1a5      	bne.n	800a73e <__multiply+0x8a>
 800a7f2:	3f01      	subs	r7, #1
 800a7f4:	e7a1      	b.n	800a73a <__multiply+0x86>
 800a7f6:	bf00      	nop
 800a7f8:	0800bcc7 	.word	0x0800bcc7
 800a7fc:	0800bcd8 	.word	0x0800bcd8

0800a800 <__pow5mult>:
 800a800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a804:	4615      	mov	r5, r2
 800a806:	f012 0203 	ands.w	r2, r2, #3
 800a80a:	4606      	mov	r6, r0
 800a80c:	460f      	mov	r7, r1
 800a80e:	d007      	beq.n	800a820 <__pow5mult+0x20>
 800a810:	4c25      	ldr	r4, [pc, #148]	; (800a8a8 <__pow5mult+0xa8>)
 800a812:	3a01      	subs	r2, #1
 800a814:	2300      	movs	r3, #0
 800a816:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a81a:	f7ff fe9b 	bl	800a554 <__multadd>
 800a81e:	4607      	mov	r7, r0
 800a820:	10ad      	asrs	r5, r5, #2
 800a822:	d03d      	beq.n	800a8a0 <__pow5mult+0xa0>
 800a824:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a826:	b97c      	cbnz	r4, 800a848 <__pow5mult+0x48>
 800a828:	2010      	movs	r0, #16
 800a82a:	f7ff fe1b 	bl	800a464 <malloc>
 800a82e:	4602      	mov	r2, r0
 800a830:	6270      	str	r0, [r6, #36]	; 0x24
 800a832:	b928      	cbnz	r0, 800a840 <__pow5mult+0x40>
 800a834:	4b1d      	ldr	r3, [pc, #116]	; (800a8ac <__pow5mult+0xac>)
 800a836:	481e      	ldr	r0, [pc, #120]	; (800a8b0 <__pow5mult+0xb0>)
 800a838:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a83c:	f000 fbcc 	bl	800afd8 <__assert_func>
 800a840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a844:	6004      	str	r4, [r0, #0]
 800a846:	60c4      	str	r4, [r0, #12]
 800a848:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a84c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a850:	b94c      	cbnz	r4, 800a866 <__pow5mult+0x66>
 800a852:	f240 2171 	movw	r1, #625	; 0x271
 800a856:	4630      	mov	r0, r6
 800a858:	f7ff ff16 	bl	800a688 <__i2b>
 800a85c:	2300      	movs	r3, #0
 800a85e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a862:	4604      	mov	r4, r0
 800a864:	6003      	str	r3, [r0, #0]
 800a866:	f04f 0900 	mov.w	r9, #0
 800a86a:	07eb      	lsls	r3, r5, #31
 800a86c:	d50a      	bpl.n	800a884 <__pow5mult+0x84>
 800a86e:	4639      	mov	r1, r7
 800a870:	4622      	mov	r2, r4
 800a872:	4630      	mov	r0, r6
 800a874:	f7ff ff1e 	bl	800a6b4 <__multiply>
 800a878:	4639      	mov	r1, r7
 800a87a:	4680      	mov	r8, r0
 800a87c:	4630      	mov	r0, r6
 800a87e:	f7ff fe47 	bl	800a510 <_Bfree>
 800a882:	4647      	mov	r7, r8
 800a884:	106d      	asrs	r5, r5, #1
 800a886:	d00b      	beq.n	800a8a0 <__pow5mult+0xa0>
 800a888:	6820      	ldr	r0, [r4, #0]
 800a88a:	b938      	cbnz	r0, 800a89c <__pow5mult+0x9c>
 800a88c:	4622      	mov	r2, r4
 800a88e:	4621      	mov	r1, r4
 800a890:	4630      	mov	r0, r6
 800a892:	f7ff ff0f 	bl	800a6b4 <__multiply>
 800a896:	6020      	str	r0, [r4, #0]
 800a898:	f8c0 9000 	str.w	r9, [r0]
 800a89c:	4604      	mov	r4, r0
 800a89e:	e7e4      	b.n	800a86a <__pow5mult+0x6a>
 800a8a0:	4638      	mov	r0, r7
 800a8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8a6:	bf00      	nop
 800a8a8:	0800be28 	.word	0x0800be28
 800a8ac:	0800bc51 	.word	0x0800bc51
 800a8b0:	0800bcd8 	.word	0x0800bcd8

0800a8b4 <__lshift>:
 800a8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	6849      	ldr	r1, [r1, #4]
 800a8bc:	6923      	ldr	r3, [r4, #16]
 800a8be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8c2:	68a3      	ldr	r3, [r4, #8]
 800a8c4:	4607      	mov	r7, r0
 800a8c6:	4691      	mov	r9, r2
 800a8c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8cc:	f108 0601 	add.w	r6, r8, #1
 800a8d0:	42b3      	cmp	r3, r6
 800a8d2:	db0b      	blt.n	800a8ec <__lshift+0x38>
 800a8d4:	4638      	mov	r0, r7
 800a8d6:	f7ff fddb 	bl	800a490 <_Balloc>
 800a8da:	4605      	mov	r5, r0
 800a8dc:	b948      	cbnz	r0, 800a8f2 <__lshift+0x3e>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	4b28      	ldr	r3, [pc, #160]	; (800a984 <__lshift+0xd0>)
 800a8e2:	4829      	ldr	r0, [pc, #164]	; (800a988 <__lshift+0xd4>)
 800a8e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a8e8:	f000 fb76 	bl	800afd8 <__assert_func>
 800a8ec:	3101      	adds	r1, #1
 800a8ee:	005b      	lsls	r3, r3, #1
 800a8f0:	e7ee      	b.n	800a8d0 <__lshift+0x1c>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	f100 0114 	add.w	r1, r0, #20
 800a8f8:	f100 0210 	add.w	r2, r0, #16
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	4553      	cmp	r3, sl
 800a900:	db33      	blt.n	800a96a <__lshift+0xb6>
 800a902:	6920      	ldr	r0, [r4, #16]
 800a904:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a908:	f104 0314 	add.w	r3, r4, #20
 800a90c:	f019 091f 	ands.w	r9, r9, #31
 800a910:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a914:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a918:	d02b      	beq.n	800a972 <__lshift+0xbe>
 800a91a:	f1c9 0e20 	rsb	lr, r9, #32
 800a91e:	468a      	mov	sl, r1
 800a920:	2200      	movs	r2, #0
 800a922:	6818      	ldr	r0, [r3, #0]
 800a924:	fa00 f009 	lsl.w	r0, r0, r9
 800a928:	4302      	orrs	r2, r0
 800a92a:	f84a 2b04 	str.w	r2, [sl], #4
 800a92e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a932:	459c      	cmp	ip, r3
 800a934:	fa22 f20e 	lsr.w	r2, r2, lr
 800a938:	d8f3      	bhi.n	800a922 <__lshift+0x6e>
 800a93a:	ebac 0304 	sub.w	r3, ip, r4
 800a93e:	3b15      	subs	r3, #21
 800a940:	f023 0303 	bic.w	r3, r3, #3
 800a944:	3304      	adds	r3, #4
 800a946:	f104 0015 	add.w	r0, r4, #21
 800a94a:	4584      	cmp	ip, r0
 800a94c:	bf38      	it	cc
 800a94e:	2304      	movcc	r3, #4
 800a950:	50ca      	str	r2, [r1, r3]
 800a952:	b10a      	cbz	r2, 800a958 <__lshift+0xa4>
 800a954:	f108 0602 	add.w	r6, r8, #2
 800a958:	3e01      	subs	r6, #1
 800a95a:	4638      	mov	r0, r7
 800a95c:	612e      	str	r6, [r5, #16]
 800a95e:	4621      	mov	r1, r4
 800a960:	f7ff fdd6 	bl	800a510 <_Bfree>
 800a964:	4628      	mov	r0, r5
 800a966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a96a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a96e:	3301      	adds	r3, #1
 800a970:	e7c5      	b.n	800a8fe <__lshift+0x4a>
 800a972:	3904      	subs	r1, #4
 800a974:	f853 2b04 	ldr.w	r2, [r3], #4
 800a978:	f841 2f04 	str.w	r2, [r1, #4]!
 800a97c:	459c      	cmp	ip, r3
 800a97e:	d8f9      	bhi.n	800a974 <__lshift+0xc0>
 800a980:	e7ea      	b.n	800a958 <__lshift+0xa4>
 800a982:	bf00      	nop
 800a984:	0800bcc7 	.word	0x0800bcc7
 800a988:	0800bcd8 	.word	0x0800bcd8

0800a98c <__mcmp>:
 800a98c:	b530      	push	{r4, r5, lr}
 800a98e:	6902      	ldr	r2, [r0, #16]
 800a990:	690c      	ldr	r4, [r1, #16]
 800a992:	1b12      	subs	r2, r2, r4
 800a994:	d10e      	bne.n	800a9b4 <__mcmp+0x28>
 800a996:	f100 0314 	add.w	r3, r0, #20
 800a99a:	3114      	adds	r1, #20
 800a99c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a9a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a9a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a9a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a9ac:	42a5      	cmp	r5, r4
 800a9ae:	d003      	beq.n	800a9b8 <__mcmp+0x2c>
 800a9b0:	d305      	bcc.n	800a9be <__mcmp+0x32>
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	4610      	mov	r0, r2
 800a9b6:	bd30      	pop	{r4, r5, pc}
 800a9b8:	4283      	cmp	r3, r0
 800a9ba:	d3f3      	bcc.n	800a9a4 <__mcmp+0x18>
 800a9bc:	e7fa      	b.n	800a9b4 <__mcmp+0x28>
 800a9be:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c2:	e7f7      	b.n	800a9b4 <__mcmp+0x28>

0800a9c4 <__mdiff>:
 800a9c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c8:	460c      	mov	r4, r1
 800a9ca:	4606      	mov	r6, r0
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	4617      	mov	r7, r2
 800a9d2:	f7ff ffdb 	bl	800a98c <__mcmp>
 800a9d6:	1e05      	subs	r5, r0, #0
 800a9d8:	d110      	bne.n	800a9fc <__mdiff+0x38>
 800a9da:	4629      	mov	r1, r5
 800a9dc:	4630      	mov	r0, r6
 800a9de:	f7ff fd57 	bl	800a490 <_Balloc>
 800a9e2:	b930      	cbnz	r0, 800a9f2 <__mdiff+0x2e>
 800a9e4:	4b39      	ldr	r3, [pc, #228]	; (800aacc <__mdiff+0x108>)
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	f240 2132 	movw	r1, #562	; 0x232
 800a9ec:	4838      	ldr	r0, [pc, #224]	; (800aad0 <__mdiff+0x10c>)
 800a9ee:	f000 faf3 	bl	800afd8 <__assert_func>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9fc:	bfa4      	itt	ge
 800a9fe:	463b      	movge	r3, r7
 800aa00:	4627      	movge	r7, r4
 800aa02:	4630      	mov	r0, r6
 800aa04:	6879      	ldr	r1, [r7, #4]
 800aa06:	bfa6      	itte	ge
 800aa08:	461c      	movge	r4, r3
 800aa0a:	2500      	movge	r5, #0
 800aa0c:	2501      	movlt	r5, #1
 800aa0e:	f7ff fd3f 	bl	800a490 <_Balloc>
 800aa12:	b920      	cbnz	r0, 800aa1e <__mdiff+0x5a>
 800aa14:	4b2d      	ldr	r3, [pc, #180]	; (800aacc <__mdiff+0x108>)
 800aa16:	4602      	mov	r2, r0
 800aa18:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aa1c:	e7e6      	b.n	800a9ec <__mdiff+0x28>
 800aa1e:	693e      	ldr	r6, [r7, #16]
 800aa20:	60c5      	str	r5, [r0, #12]
 800aa22:	6925      	ldr	r5, [r4, #16]
 800aa24:	f107 0114 	add.w	r1, r7, #20
 800aa28:	f104 0914 	add.w	r9, r4, #20
 800aa2c:	f100 0e14 	add.w	lr, r0, #20
 800aa30:	f107 0210 	add.w	r2, r7, #16
 800aa34:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800aa38:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800aa3c:	46f2      	mov	sl, lr
 800aa3e:	2700      	movs	r7, #0
 800aa40:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa48:	fa1f f883 	uxth.w	r8, r3
 800aa4c:	fa17 f78b 	uxtah	r7, r7, fp
 800aa50:	0c1b      	lsrs	r3, r3, #16
 800aa52:	eba7 0808 	sub.w	r8, r7, r8
 800aa56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa5e:	fa1f f888 	uxth.w	r8, r8
 800aa62:	141f      	asrs	r7, r3, #16
 800aa64:	454d      	cmp	r5, r9
 800aa66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa6a:	f84a 3b04 	str.w	r3, [sl], #4
 800aa6e:	d8e7      	bhi.n	800aa40 <__mdiff+0x7c>
 800aa70:	1b2b      	subs	r3, r5, r4
 800aa72:	3b15      	subs	r3, #21
 800aa74:	f023 0303 	bic.w	r3, r3, #3
 800aa78:	3304      	adds	r3, #4
 800aa7a:	3415      	adds	r4, #21
 800aa7c:	42a5      	cmp	r5, r4
 800aa7e:	bf38      	it	cc
 800aa80:	2304      	movcc	r3, #4
 800aa82:	4419      	add	r1, r3
 800aa84:	4473      	add	r3, lr
 800aa86:	469e      	mov	lr, r3
 800aa88:	460d      	mov	r5, r1
 800aa8a:	4565      	cmp	r5, ip
 800aa8c:	d30e      	bcc.n	800aaac <__mdiff+0xe8>
 800aa8e:	f10c 0203 	add.w	r2, ip, #3
 800aa92:	1a52      	subs	r2, r2, r1
 800aa94:	f022 0203 	bic.w	r2, r2, #3
 800aa98:	3903      	subs	r1, #3
 800aa9a:	458c      	cmp	ip, r1
 800aa9c:	bf38      	it	cc
 800aa9e:	2200      	movcc	r2, #0
 800aaa0:	441a      	add	r2, r3
 800aaa2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aaa6:	b17b      	cbz	r3, 800aac8 <__mdiff+0x104>
 800aaa8:	6106      	str	r6, [r0, #16]
 800aaaa:	e7a5      	b.n	800a9f8 <__mdiff+0x34>
 800aaac:	f855 8b04 	ldr.w	r8, [r5], #4
 800aab0:	fa17 f488 	uxtah	r4, r7, r8
 800aab4:	1422      	asrs	r2, r4, #16
 800aab6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800aaba:	b2a4      	uxth	r4, r4
 800aabc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800aac0:	f84e 4b04 	str.w	r4, [lr], #4
 800aac4:	1417      	asrs	r7, r2, #16
 800aac6:	e7e0      	b.n	800aa8a <__mdiff+0xc6>
 800aac8:	3e01      	subs	r6, #1
 800aaca:	e7ea      	b.n	800aaa2 <__mdiff+0xde>
 800aacc:	0800bcc7 	.word	0x0800bcc7
 800aad0:	0800bcd8 	.word	0x0800bcd8

0800aad4 <__d2b>:
 800aad4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aad8:	4689      	mov	r9, r1
 800aada:	2101      	movs	r1, #1
 800aadc:	ec57 6b10 	vmov	r6, r7, d0
 800aae0:	4690      	mov	r8, r2
 800aae2:	f7ff fcd5 	bl	800a490 <_Balloc>
 800aae6:	4604      	mov	r4, r0
 800aae8:	b930      	cbnz	r0, 800aaf8 <__d2b+0x24>
 800aaea:	4602      	mov	r2, r0
 800aaec:	4b25      	ldr	r3, [pc, #148]	; (800ab84 <__d2b+0xb0>)
 800aaee:	4826      	ldr	r0, [pc, #152]	; (800ab88 <__d2b+0xb4>)
 800aaf0:	f240 310a 	movw	r1, #778	; 0x30a
 800aaf4:	f000 fa70 	bl	800afd8 <__assert_func>
 800aaf8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aafc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab00:	bb35      	cbnz	r5, 800ab50 <__d2b+0x7c>
 800ab02:	2e00      	cmp	r6, #0
 800ab04:	9301      	str	r3, [sp, #4]
 800ab06:	d028      	beq.n	800ab5a <__d2b+0x86>
 800ab08:	4668      	mov	r0, sp
 800ab0a:	9600      	str	r6, [sp, #0]
 800ab0c:	f7ff fd8c 	bl	800a628 <__lo0bits>
 800ab10:	9900      	ldr	r1, [sp, #0]
 800ab12:	b300      	cbz	r0, 800ab56 <__d2b+0x82>
 800ab14:	9a01      	ldr	r2, [sp, #4]
 800ab16:	f1c0 0320 	rsb	r3, r0, #32
 800ab1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab1e:	430b      	orrs	r3, r1
 800ab20:	40c2      	lsrs	r2, r0
 800ab22:	6163      	str	r3, [r4, #20]
 800ab24:	9201      	str	r2, [sp, #4]
 800ab26:	9b01      	ldr	r3, [sp, #4]
 800ab28:	61a3      	str	r3, [r4, #24]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	bf14      	ite	ne
 800ab2e:	2202      	movne	r2, #2
 800ab30:	2201      	moveq	r2, #1
 800ab32:	6122      	str	r2, [r4, #16]
 800ab34:	b1d5      	cbz	r5, 800ab6c <__d2b+0x98>
 800ab36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab3a:	4405      	add	r5, r0
 800ab3c:	f8c9 5000 	str.w	r5, [r9]
 800ab40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab44:	f8c8 0000 	str.w	r0, [r8]
 800ab48:	4620      	mov	r0, r4
 800ab4a:	b003      	add	sp, #12
 800ab4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab54:	e7d5      	b.n	800ab02 <__d2b+0x2e>
 800ab56:	6161      	str	r1, [r4, #20]
 800ab58:	e7e5      	b.n	800ab26 <__d2b+0x52>
 800ab5a:	a801      	add	r0, sp, #4
 800ab5c:	f7ff fd64 	bl	800a628 <__lo0bits>
 800ab60:	9b01      	ldr	r3, [sp, #4]
 800ab62:	6163      	str	r3, [r4, #20]
 800ab64:	2201      	movs	r2, #1
 800ab66:	6122      	str	r2, [r4, #16]
 800ab68:	3020      	adds	r0, #32
 800ab6a:	e7e3      	b.n	800ab34 <__d2b+0x60>
 800ab6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab74:	f8c9 0000 	str.w	r0, [r9]
 800ab78:	6918      	ldr	r0, [r3, #16]
 800ab7a:	f7ff fd35 	bl	800a5e8 <__hi0bits>
 800ab7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab82:	e7df      	b.n	800ab44 <__d2b+0x70>
 800ab84:	0800bcc7 	.word	0x0800bcc7
 800ab88:	0800bcd8 	.word	0x0800bcd8

0800ab8c <_calloc_r>:
 800ab8c:	b513      	push	{r0, r1, r4, lr}
 800ab8e:	434a      	muls	r2, r1
 800ab90:	4611      	mov	r1, r2
 800ab92:	9201      	str	r2, [sp, #4]
 800ab94:	f000 f85a 	bl	800ac4c <_malloc_r>
 800ab98:	4604      	mov	r4, r0
 800ab9a:	b118      	cbz	r0, 800aba4 <_calloc_r+0x18>
 800ab9c:	9a01      	ldr	r2, [sp, #4]
 800ab9e:	2100      	movs	r1, #0
 800aba0:	f7fe f9e2 	bl	8008f68 <memset>
 800aba4:	4620      	mov	r0, r4
 800aba6:	b002      	add	sp, #8
 800aba8:	bd10      	pop	{r4, pc}
	...

0800abac <_free_r>:
 800abac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abae:	2900      	cmp	r1, #0
 800abb0:	d048      	beq.n	800ac44 <_free_r+0x98>
 800abb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abb6:	9001      	str	r0, [sp, #4]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f1a1 0404 	sub.w	r4, r1, #4
 800abbe:	bfb8      	it	lt
 800abc0:	18e4      	addlt	r4, r4, r3
 800abc2:	f000 fa65 	bl	800b090 <__malloc_lock>
 800abc6:	4a20      	ldr	r2, [pc, #128]	; (800ac48 <_free_r+0x9c>)
 800abc8:	9801      	ldr	r0, [sp, #4]
 800abca:	6813      	ldr	r3, [r2, #0]
 800abcc:	4615      	mov	r5, r2
 800abce:	b933      	cbnz	r3, 800abde <_free_r+0x32>
 800abd0:	6063      	str	r3, [r4, #4]
 800abd2:	6014      	str	r4, [r2, #0]
 800abd4:	b003      	add	sp, #12
 800abd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abda:	f000 ba5f 	b.w	800b09c <__malloc_unlock>
 800abde:	42a3      	cmp	r3, r4
 800abe0:	d90b      	bls.n	800abfa <_free_r+0x4e>
 800abe2:	6821      	ldr	r1, [r4, #0]
 800abe4:	1862      	adds	r2, r4, r1
 800abe6:	4293      	cmp	r3, r2
 800abe8:	bf04      	itt	eq
 800abea:	681a      	ldreq	r2, [r3, #0]
 800abec:	685b      	ldreq	r3, [r3, #4]
 800abee:	6063      	str	r3, [r4, #4]
 800abf0:	bf04      	itt	eq
 800abf2:	1852      	addeq	r2, r2, r1
 800abf4:	6022      	streq	r2, [r4, #0]
 800abf6:	602c      	str	r4, [r5, #0]
 800abf8:	e7ec      	b.n	800abd4 <_free_r+0x28>
 800abfa:	461a      	mov	r2, r3
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	b10b      	cbz	r3, 800ac04 <_free_r+0x58>
 800ac00:	42a3      	cmp	r3, r4
 800ac02:	d9fa      	bls.n	800abfa <_free_r+0x4e>
 800ac04:	6811      	ldr	r1, [r2, #0]
 800ac06:	1855      	adds	r5, r2, r1
 800ac08:	42a5      	cmp	r5, r4
 800ac0a:	d10b      	bne.n	800ac24 <_free_r+0x78>
 800ac0c:	6824      	ldr	r4, [r4, #0]
 800ac0e:	4421      	add	r1, r4
 800ac10:	1854      	adds	r4, r2, r1
 800ac12:	42a3      	cmp	r3, r4
 800ac14:	6011      	str	r1, [r2, #0]
 800ac16:	d1dd      	bne.n	800abd4 <_free_r+0x28>
 800ac18:	681c      	ldr	r4, [r3, #0]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	6053      	str	r3, [r2, #4]
 800ac1e:	4421      	add	r1, r4
 800ac20:	6011      	str	r1, [r2, #0]
 800ac22:	e7d7      	b.n	800abd4 <_free_r+0x28>
 800ac24:	d902      	bls.n	800ac2c <_free_r+0x80>
 800ac26:	230c      	movs	r3, #12
 800ac28:	6003      	str	r3, [r0, #0]
 800ac2a:	e7d3      	b.n	800abd4 <_free_r+0x28>
 800ac2c:	6825      	ldr	r5, [r4, #0]
 800ac2e:	1961      	adds	r1, r4, r5
 800ac30:	428b      	cmp	r3, r1
 800ac32:	bf04      	itt	eq
 800ac34:	6819      	ldreq	r1, [r3, #0]
 800ac36:	685b      	ldreq	r3, [r3, #4]
 800ac38:	6063      	str	r3, [r4, #4]
 800ac3a:	bf04      	itt	eq
 800ac3c:	1949      	addeq	r1, r1, r5
 800ac3e:	6021      	streq	r1, [r4, #0]
 800ac40:	6054      	str	r4, [r2, #4]
 800ac42:	e7c7      	b.n	800abd4 <_free_r+0x28>
 800ac44:	b003      	add	sp, #12
 800ac46:	bd30      	pop	{r4, r5, pc}
 800ac48:	24000208 	.word	0x24000208

0800ac4c <_malloc_r>:
 800ac4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4e:	1ccd      	adds	r5, r1, #3
 800ac50:	f025 0503 	bic.w	r5, r5, #3
 800ac54:	3508      	adds	r5, #8
 800ac56:	2d0c      	cmp	r5, #12
 800ac58:	bf38      	it	cc
 800ac5a:	250c      	movcc	r5, #12
 800ac5c:	2d00      	cmp	r5, #0
 800ac5e:	4606      	mov	r6, r0
 800ac60:	db01      	blt.n	800ac66 <_malloc_r+0x1a>
 800ac62:	42a9      	cmp	r1, r5
 800ac64:	d903      	bls.n	800ac6e <_malloc_r+0x22>
 800ac66:	230c      	movs	r3, #12
 800ac68:	6033      	str	r3, [r6, #0]
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac6e:	f000 fa0f 	bl	800b090 <__malloc_lock>
 800ac72:	4921      	ldr	r1, [pc, #132]	; (800acf8 <_malloc_r+0xac>)
 800ac74:	680a      	ldr	r2, [r1, #0]
 800ac76:	4614      	mov	r4, r2
 800ac78:	b99c      	cbnz	r4, 800aca2 <_malloc_r+0x56>
 800ac7a:	4f20      	ldr	r7, [pc, #128]	; (800acfc <_malloc_r+0xb0>)
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	b923      	cbnz	r3, 800ac8a <_malloc_r+0x3e>
 800ac80:	4621      	mov	r1, r4
 800ac82:	4630      	mov	r0, r6
 800ac84:	f000 f998 	bl	800afb8 <_sbrk_r>
 800ac88:	6038      	str	r0, [r7, #0]
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f000 f993 	bl	800afb8 <_sbrk_r>
 800ac92:	1c43      	adds	r3, r0, #1
 800ac94:	d123      	bne.n	800acde <_malloc_r+0x92>
 800ac96:	230c      	movs	r3, #12
 800ac98:	6033      	str	r3, [r6, #0]
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	f000 f9fe 	bl	800b09c <__malloc_unlock>
 800aca0:	e7e3      	b.n	800ac6a <_malloc_r+0x1e>
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	1b5b      	subs	r3, r3, r5
 800aca6:	d417      	bmi.n	800acd8 <_malloc_r+0x8c>
 800aca8:	2b0b      	cmp	r3, #11
 800acaa:	d903      	bls.n	800acb4 <_malloc_r+0x68>
 800acac:	6023      	str	r3, [r4, #0]
 800acae:	441c      	add	r4, r3
 800acb0:	6025      	str	r5, [r4, #0]
 800acb2:	e004      	b.n	800acbe <_malloc_r+0x72>
 800acb4:	6863      	ldr	r3, [r4, #4]
 800acb6:	42a2      	cmp	r2, r4
 800acb8:	bf0c      	ite	eq
 800acba:	600b      	streq	r3, [r1, #0]
 800acbc:	6053      	strne	r3, [r2, #4]
 800acbe:	4630      	mov	r0, r6
 800acc0:	f000 f9ec 	bl	800b09c <__malloc_unlock>
 800acc4:	f104 000b 	add.w	r0, r4, #11
 800acc8:	1d23      	adds	r3, r4, #4
 800acca:	f020 0007 	bic.w	r0, r0, #7
 800acce:	1ac2      	subs	r2, r0, r3
 800acd0:	d0cc      	beq.n	800ac6c <_malloc_r+0x20>
 800acd2:	1a1b      	subs	r3, r3, r0
 800acd4:	50a3      	str	r3, [r4, r2]
 800acd6:	e7c9      	b.n	800ac6c <_malloc_r+0x20>
 800acd8:	4622      	mov	r2, r4
 800acda:	6864      	ldr	r4, [r4, #4]
 800acdc:	e7cc      	b.n	800ac78 <_malloc_r+0x2c>
 800acde:	1cc4      	adds	r4, r0, #3
 800ace0:	f024 0403 	bic.w	r4, r4, #3
 800ace4:	42a0      	cmp	r0, r4
 800ace6:	d0e3      	beq.n	800acb0 <_malloc_r+0x64>
 800ace8:	1a21      	subs	r1, r4, r0
 800acea:	4630      	mov	r0, r6
 800acec:	f000 f964 	bl	800afb8 <_sbrk_r>
 800acf0:	3001      	adds	r0, #1
 800acf2:	d1dd      	bne.n	800acb0 <_malloc_r+0x64>
 800acf4:	e7cf      	b.n	800ac96 <_malloc_r+0x4a>
 800acf6:	bf00      	nop
 800acf8:	24000208 	.word	0x24000208
 800acfc:	2400020c 	.word	0x2400020c

0800ad00 <__ssputs_r>:
 800ad00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad04:	688e      	ldr	r6, [r1, #8]
 800ad06:	429e      	cmp	r6, r3
 800ad08:	4682      	mov	sl, r0
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	4690      	mov	r8, r2
 800ad0e:	461f      	mov	r7, r3
 800ad10:	d838      	bhi.n	800ad84 <__ssputs_r+0x84>
 800ad12:	898a      	ldrh	r2, [r1, #12]
 800ad14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad18:	d032      	beq.n	800ad80 <__ssputs_r+0x80>
 800ad1a:	6825      	ldr	r5, [r4, #0]
 800ad1c:	6909      	ldr	r1, [r1, #16]
 800ad1e:	eba5 0901 	sub.w	r9, r5, r1
 800ad22:	6965      	ldr	r5, [r4, #20]
 800ad24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	444b      	add	r3, r9
 800ad30:	106d      	asrs	r5, r5, #1
 800ad32:	429d      	cmp	r5, r3
 800ad34:	bf38      	it	cc
 800ad36:	461d      	movcc	r5, r3
 800ad38:	0553      	lsls	r3, r2, #21
 800ad3a:	d531      	bpl.n	800ada0 <__ssputs_r+0xa0>
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	f7ff ff85 	bl	800ac4c <_malloc_r>
 800ad42:	4606      	mov	r6, r0
 800ad44:	b950      	cbnz	r0, 800ad5c <__ssputs_r+0x5c>
 800ad46:	230c      	movs	r3, #12
 800ad48:	f8ca 3000 	str.w	r3, [sl]
 800ad4c:	89a3      	ldrh	r3, [r4, #12]
 800ad4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad52:	81a3      	strh	r3, [r4, #12]
 800ad54:	f04f 30ff 	mov.w	r0, #4294967295
 800ad58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad5c:	6921      	ldr	r1, [r4, #16]
 800ad5e:	464a      	mov	r2, r9
 800ad60:	f7ff fb88 	bl	800a474 <memcpy>
 800ad64:	89a3      	ldrh	r3, [r4, #12]
 800ad66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad6e:	81a3      	strh	r3, [r4, #12]
 800ad70:	6126      	str	r6, [r4, #16]
 800ad72:	6165      	str	r5, [r4, #20]
 800ad74:	444e      	add	r6, r9
 800ad76:	eba5 0509 	sub.w	r5, r5, r9
 800ad7a:	6026      	str	r6, [r4, #0]
 800ad7c:	60a5      	str	r5, [r4, #8]
 800ad7e:	463e      	mov	r6, r7
 800ad80:	42be      	cmp	r6, r7
 800ad82:	d900      	bls.n	800ad86 <__ssputs_r+0x86>
 800ad84:	463e      	mov	r6, r7
 800ad86:	4632      	mov	r2, r6
 800ad88:	6820      	ldr	r0, [r4, #0]
 800ad8a:	4641      	mov	r1, r8
 800ad8c:	f000 f966 	bl	800b05c <memmove>
 800ad90:	68a3      	ldr	r3, [r4, #8]
 800ad92:	6822      	ldr	r2, [r4, #0]
 800ad94:	1b9b      	subs	r3, r3, r6
 800ad96:	4432      	add	r2, r6
 800ad98:	60a3      	str	r3, [r4, #8]
 800ad9a:	6022      	str	r2, [r4, #0]
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	e7db      	b.n	800ad58 <__ssputs_r+0x58>
 800ada0:	462a      	mov	r2, r5
 800ada2:	f000 f981 	bl	800b0a8 <_realloc_r>
 800ada6:	4606      	mov	r6, r0
 800ada8:	2800      	cmp	r0, #0
 800adaa:	d1e1      	bne.n	800ad70 <__ssputs_r+0x70>
 800adac:	6921      	ldr	r1, [r4, #16]
 800adae:	4650      	mov	r0, sl
 800adb0:	f7ff fefc 	bl	800abac <_free_r>
 800adb4:	e7c7      	b.n	800ad46 <__ssputs_r+0x46>
	...

0800adb8 <_svfiprintf_r>:
 800adb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adbc:	4698      	mov	r8, r3
 800adbe:	898b      	ldrh	r3, [r1, #12]
 800adc0:	061b      	lsls	r3, r3, #24
 800adc2:	b09d      	sub	sp, #116	; 0x74
 800adc4:	4607      	mov	r7, r0
 800adc6:	460d      	mov	r5, r1
 800adc8:	4614      	mov	r4, r2
 800adca:	d50e      	bpl.n	800adea <_svfiprintf_r+0x32>
 800adcc:	690b      	ldr	r3, [r1, #16]
 800adce:	b963      	cbnz	r3, 800adea <_svfiprintf_r+0x32>
 800add0:	2140      	movs	r1, #64	; 0x40
 800add2:	f7ff ff3b 	bl	800ac4c <_malloc_r>
 800add6:	6028      	str	r0, [r5, #0]
 800add8:	6128      	str	r0, [r5, #16]
 800adda:	b920      	cbnz	r0, 800ade6 <_svfiprintf_r+0x2e>
 800addc:	230c      	movs	r3, #12
 800adde:	603b      	str	r3, [r7, #0]
 800ade0:	f04f 30ff 	mov.w	r0, #4294967295
 800ade4:	e0d1      	b.n	800af8a <_svfiprintf_r+0x1d2>
 800ade6:	2340      	movs	r3, #64	; 0x40
 800ade8:	616b      	str	r3, [r5, #20]
 800adea:	2300      	movs	r3, #0
 800adec:	9309      	str	r3, [sp, #36]	; 0x24
 800adee:	2320      	movs	r3, #32
 800adf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800adf8:	2330      	movs	r3, #48	; 0x30
 800adfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800afa4 <_svfiprintf_r+0x1ec>
 800adfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae02:	f04f 0901 	mov.w	r9, #1
 800ae06:	4623      	mov	r3, r4
 800ae08:	469a      	mov	sl, r3
 800ae0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae0e:	b10a      	cbz	r2, 800ae14 <_svfiprintf_r+0x5c>
 800ae10:	2a25      	cmp	r2, #37	; 0x25
 800ae12:	d1f9      	bne.n	800ae08 <_svfiprintf_r+0x50>
 800ae14:	ebba 0b04 	subs.w	fp, sl, r4
 800ae18:	d00b      	beq.n	800ae32 <_svfiprintf_r+0x7a>
 800ae1a:	465b      	mov	r3, fp
 800ae1c:	4622      	mov	r2, r4
 800ae1e:	4629      	mov	r1, r5
 800ae20:	4638      	mov	r0, r7
 800ae22:	f7ff ff6d 	bl	800ad00 <__ssputs_r>
 800ae26:	3001      	adds	r0, #1
 800ae28:	f000 80aa 	beq.w	800af80 <_svfiprintf_r+0x1c8>
 800ae2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae2e:	445a      	add	r2, fp
 800ae30:	9209      	str	r2, [sp, #36]	; 0x24
 800ae32:	f89a 3000 	ldrb.w	r3, [sl]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f000 80a2 	beq.w	800af80 <_svfiprintf_r+0x1c8>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae46:	f10a 0a01 	add.w	sl, sl, #1
 800ae4a:	9304      	str	r3, [sp, #16]
 800ae4c:	9307      	str	r3, [sp, #28]
 800ae4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae52:	931a      	str	r3, [sp, #104]	; 0x68
 800ae54:	4654      	mov	r4, sl
 800ae56:	2205      	movs	r2, #5
 800ae58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae5c:	4851      	ldr	r0, [pc, #324]	; (800afa4 <_svfiprintf_r+0x1ec>)
 800ae5e:	f7f5 fa47 	bl	80002f0 <memchr>
 800ae62:	9a04      	ldr	r2, [sp, #16]
 800ae64:	b9d8      	cbnz	r0, 800ae9e <_svfiprintf_r+0xe6>
 800ae66:	06d0      	lsls	r0, r2, #27
 800ae68:	bf44      	itt	mi
 800ae6a:	2320      	movmi	r3, #32
 800ae6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae70:	0711      	lsls	r1, r2, #28
 800ae72:	bf44      	itt	mi
 800ae74:	232b      	movmi	r3, #43	; 0x2b
 800ae76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae7e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae80:	d015      	beq.n	800aeae <_svfiprintf_r+0xf6>
 800ae82:	9a07      	ldr	r2, [sp, #28]
 800ae84:	4654      	mov	r4, sl
 800ae86:	2000      	movs	r0, #0
 800ae88:	f04f 0c0a 	mov.w	ip, #10
 800ae8c:	4621      	mov	r1, r4
 800ae8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae92:	3b30      	subs	r3, #48	; 0x30
 800ae94:	2b09      	cmp	r3, #9
 800ae96:	d94e      	bls.n	800af36 <_svfiprintf_r+0x17e>
 800ae98:	b1b0      	cbz	r0, 800aec8 <_svfiprintf_r+0x110>
 800ae9a:	9207      	str	r2, [sp, #28]
 800ae9c:	e014      	b.n	800aec8 <_svfiprintf_r+0x110>
 800ae9e:	eba0 0308 	sub.w	r3, r0, r8
 800aea2:	fa09 f303 	lsl.w	r3, r9, r3
 800aea6:	4313      	orrs	r3, r2
 800aea8:	9304      	str	r3, [sp, #16]
 800aeaa:	46a2      	mov	sl, r4
 800aeac:	e7d2      	b.n	800ae54 <_svfiprintf_r+0x9c>
 800aeae:	9b03      	ldr	r3, [sp, #12]
 800aeb0:	1d19      	adds	r1, r3, #4
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	9103      	str	r1, [sp, #12]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	bfbb      	ittet	lt
 800aeba:	425b      	neglt	r3, r3
 800aebc:	f042 0202 	orrlt.w	r2, r2, #2
 800aec0:	9307      	strge	r3, [sp, #28]
 800aec2:	9307      	strlt	r3, [sp, #28]
 800aec4:	bfb8      	it	lt
 800aec6:	9204      	strlt	r2, [sp, #16]
 800aec8:	7823      	ldrb	r3, [r4, #0]
 800aeca:	2b2e      	cmp	r3, #46	; 0x2e
 800aecc:	d10c      	bne.n	800aee8 <_svfiprintf_r+0x130>
 800aece:	7863      	ldrb	r3, [r4, #1]
 800aed0:	2b2a      	cmp	r3, #42	; 0x2a
 800aed2:	d135      	bne.n	800af40 <_svfiprintf_r+0x188>
 800aed4:	9b03      	ldr	r3, [sp, #12]
 800aed6:	1d1a      	adds	r2, r3, #4
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	9203      	str	r2, [sp, #12]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	bfb8      	it	lt
 800aee0:	f04f 33ff 	movlt.w	r3, #4294967295
 800aee4:	3402      	adds	r4, #2
 800aee6:	9305      	str	r3, [sp, #20]
 800aee8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800afb4 <_svfiprintf_r+0x1fc>
 800aeec:	7821      	ldrb	r1, [r4, #0]
 800aeee:	2203      	movs	r2, #3
 800aef0:	4650      	mov	r0, sl
 800aef2:	f7f5 f9fd 	bl	80002f0 <memchr>
 800aef6:	b140      	cbz	r0, 800af0a <_svfiprintf_r+0x152>
 800aef8:	2340      	movs	r3, #64	; 0x40
 800aefa:	eba0 000a 	sub.w	r0, r0, sl
 800aefe:	fa03 f000 	lsl.w	r0, r3, r0
 800af02:	9b04      	ldr	r3, [sp, #16]
 800af04:	4303      	orrs	r3, r0
 800af06:	3401      	adds	r4, #1
 800af08:	9304      	str	r3, [sp, #16]
 800af0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af0e:	4826      	ldr	r0, [pc, #152]	; (800afa8 <_svfiprintf_r+0x1f0>)
 800af10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af14:	2206      	movs	r2, #6
 800af16:	f7f5 f9eb 	bl	80002f0 <memchr>
 800af1a:	2800      	cmp	r0, #0
 800af1c:	d038      	beq.n	800af90 <_svfiprintf_r+0x1d8>
 800af1e:	4b23      	ldr	r3, [pc, #140]	; (800afac <_svfiprintf_r+0x1f4>)
 800af20:	bb1b      	cbnz	r3, 800af6a <_svfiprintf_r+0x1b2>
 800af22:	9b03      	ldr	r3, [sp, #12]
 800af24:	3307      	adds	r3, #7
 800af26:	f023 0307 	bic.w	r3, r3, #7
 800af2a:	3308      	adds	r3, #8
 800af2c:	9303      	str	r3, [sp, #12]
 800af2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af30:	4433      	add	r3, r6
 800af32:	9309      	str	r3, [sp, #36]	; 0x24
 800af34:	e767      	b.n	800ae06 <_svfiprintf_r+0x4e>
 800af36:	fb0c 3202 	mla	r2, ip, r2, r3
 800af3a:	460c      	mov	r4, r1
 800af3c:	2001      	movs	r0, #1
 800af3e:	e7a5      	b.n	800ae8c <_svfiprintf_r+0xd4>
 800af40:	2300      	movs	r3, #0
 800af42:	3401      	adds	r4, #1
 800af44:	9305      	str	r3, [sp, #20]
 800af46:	4619      	mov	r1, r3
 800af48:	f04f 0c0a 	mov.w	ip, #10
 800af4c:	4620      	mov	r0, r4
 800af4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af52:	3a30      	subs	r2, #48	; 0x30
 800af54:	2a09      	cmp	r2, #9
 800af56:	d903      	bls.n	800af60 <_svfiprintf_r+0x1a8>
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d0c5      	beq.n	800aee8 <_svfiprintf_r+0x130>
 800af5c:	9105      	str	r1, [sp, #20]
 800af5e:	e7c3      	b.n	800aee8 <_svfiprintf_r+0x130>
 800af60:	fb0c 2101 	mla	r1, ip, r1, r2
 800af64:	4604      	mov	r4, r0
 800af66:	2301      	movs	r3, #1
 800af68:	e7f0      	b.n	800af4c <_svfiprintf_r+0x194>
 800af6a:	ab03      	add	r3, sp, #12
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	462a      	mov	r2, r5
 800af70:	4b0f      	ldr	r3, [pc, #60]	; (800afb0 <_svfiprintf_r+0x1f8>)
 800af72:	a904      	add	r1, sp, #16
 800af74:	4638      	mov	r0, r7
 800af76:	f7fe f88f 	bl	8009098 <_printf_float>
 800af7a:	1c42      	adds	r2, r0, #1
 800af7c:	4606      	mov	r6, r0
 800af7e:	d1d6      	bne.n	800af2e <_svfiprintf_r+0x176>
 800af80:	89ab      	ldrh	r3, [r5, #12]
 800af82:	065b      	lsls	r3, r3, #25
 800af84:	f53f af2c 	bmi.w	800ade0 <_svfiprintf_r+0x28>
 800af88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af8a:	b01d      	add	sp, #116	; 0x74
 800af8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af90:	ab03      	add	r3, sp, #12
 800af92:	9300      	str	r3, [sp, #0]
 800af94:	462a      	mov	r2, r5
 800af96:	4b06      	ldr	r3, [pc, #24]	; (800afb0 <_svfiprintf_r+0x1f8>)
 800af98:	a904      	add	r1, sp, #16
 800af9a:	4638      	mov	r0, r7
 800af9c:	f7fe fb08 	bl	80095b0 <_printf_i>
 800afa0:	e7eb      	b.n	800af7a <_svfiprintf_r+0x1c2>
 800afa2:	bf00      	nop
 800afa4:	0800be34 	.word	0x0800be34
 800afa8:	0800be3e 	.word	0x0800be3e
 800afac:	08009099 	.word	0x08009099
 800afb0:	0800ad01 	.word	0x0800ad01
 800afb4:	0800be3a 	.word	0x0800be3a

0800afb8 <_sbrk_r>:
 800afb8:	b538      	push	{r3, r4, r5, lr}
 800afba:	4d06      	ldr	r5, [pc, #24]	; (800afd4 <_sbrk_r+0x1c>)
 800afbc:	2300      	movs	r3, #0
 800afbe:	4604      	mov	r4, r0
 800afc0:	4608      	mov	r0, r1
 800afc2:	602b      	str	r3, [r5, #0]
 800afc4:	f7f6 faca 	bl	800155c <_sbrk>
 800afc8:	1c43      	adds	r3, r0, #1
 800afca:	d102      	bne.n	800afd2 <_sbrk_r+0x1a>
 800afcc:	682b      	ldr	r3, [r5, #0]
 800afce:	b103      	cbz	r3, 800afd2 <_sbrk_r+0x1a>
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	bd38      	pop	{r3, r4, r5, pc}
 800afd4:	240003ac 	.word	0x240003ac

0800afd8 <__assert_func>:
 800afd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afda:	4614      	mov	r4, r2
 800afdc:	461a      	mov	r2, r3
 800afde:	4b09      	ldr	r3, [pc, #36]	; (800b004 <__assert_func+0x2c>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4605      	mov	r5, r0
 800afe4:	68d8      	ldr	r0, [r3, #12]
 800afe6:	b14c      	cbz	r4, 800affc <__assert_func+0x24>
 800afe8:	4b07      	ldr	r3, [pc, #28]	; (800b008 <__assert_func+0x30>)
 800afea:	9100      	str	r1, [sp, #0]
 800afec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aff0:	4906      	ldr	r1, [pc, #24]	; (800b00c <__assert_func+0x34>)
 800aff2:	462b      	mov	r3, r5
 800aff4:	f000 f80e 	bl	800b014 <fiprintf>
 800aff8:	f000 faa4 	bl	800b544 <abort>
 800affc:	4b04      	ldr	r3, [pc, #16]	; (800b010 <__assert_func+0x38>)
 800affe:	461c      	mov	r4, r3
 800b000:	e7f3      	b.n	800afea <__assert_func+0x12>
 800b002:	bf00      	nop
 800b004:	24000010 	.word	0x24000010
 800b008:	0800be45 	.word	0x0800be45
 800b00c:	0800be52 	.word	0x0800be52
 800b010:	0800be80 	.word	0x0800be80

0800b014 <fiprintf>:
 800b014:	b40e      	push	{r1, r2, r3}
 800b016:	b503      	push	{r0, r1, lr}
 800b018:	4601      	mov	r1, r0
 800b01a:	ab03      	add	r3, sp, #12
 800b01c:	4805      	ldr	r0, [pc, #20]	; (800b034 <fiprintf+0x20>)
 800b01e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b022:	6800      	ldr	r0, [r0, #0]
 800b024:	9301      	str	r3, [sp, #4]
 800b026:	f000 f88f 	bl	800b148 <_vfiprintf_r>
 800b02a:	b002      	add	sp, #8
 800b02c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b030:	b003      	add	sp, #12
 800b032:	4770      	bx	lr
 800b034:	24000010 	.word	0x24000010

0800b038 <__ascii_mbtowc>:
 800b038:	b082      	sub	sp, #8
 800b03a:	b901      	cbnz	r1, 800b03e <__ascii_mbtowc+0x6>
 800b03c:	a901      	add	r1, sp, #4
 800b03e:	b142      	cbz	r2, 800b052 <__ascii_mbtowc+0x1a>
 800b040:	b14b      	cbz	r3, 800b056 <__ascii_mbtowc+0x1e>
 800b042:	7813      	ldrb	r3, [r2, #0]
 800b044:	600b      	str	r3, [r1, #0]
 800b046:	7812      	ldrb	r2, [r2, #0]
 800b048:	1e10      	subs	r0, r2, #0
 800b04a:	bf18      	it	ne
 800b04c:	2001      	movne	r0, #1
 800b04e:	b002      	add	sp, #8
 800b050:	4770      	bx	lr
 800b052:	4610      	mov	r0, r2
 800b054:	e7fb      	b.n	800b04e <__ascii_mbtowc+0x16>
 800b056:	f06f 0001 	mvn.w	r0, #1
 800b05a:	e7f8      	b.n	800b04e <__ascii_mbtowc+0x16>

0800b05c <memmove>:
 800b05c:	4288      	cmp	r0, r1
 800b05e:	b510      	push	{r4, lr}
 800b060:	eb01 0402 	add.w	r4, r1, r2
 800b064:	d902      	bls.n	800b06c <memmove+0x10>
 800b066:	4284      	cmp	r4, r0
 800b068:	4623      	mov	r3, r4
 800b06a:	d807      	bhi.n	800b07c <memmove+0x20>
 800b06c:	1e43      	subs	r3, r0, #1
 800b06e:	42a1      	cmp	r1, r4
 800b070:	d008      	beq.n	800b084 <memmove+0x28>
 800b072:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b07a:	e7f8      	b.n	800b06e <memmove+0x12>
 800b07c:	4402      	add	r2, r0
 800b07e:	4601      	mov	r1, r0
 800b080:	428a      	cmp	r2, r1
 800b082:	d100      	bne.n	800b086 <memmove+0x2a>
 800b084:	bd10      	pop	{r4, pc}
 800b086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b08a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b08e:	e7f7      	b.n	800b080 <memmove+0x24>

0800b090 <__malloc_lock>:
 800b090:	4801      	ldr	r0, [pc, #4]	; (800b098 <__malloc_lock+0x8>)
 800b092:	f000 bc17 	b.w	800b8c4 <__retarget_lock_acquire_recursive>
 800b096:	bf00      	nop
 800b098:	240003b4 	.word	0x240003b4

0800b09c <__malloc_unlock>:
 800b09c:	4801      	ldr	r0, [pc, #4]	; (800b0a4 <__malloc_unlock+0x8>)
 800b09e:	f000 bc12 	b.w	800b8c6 <__retarget_lock_release_recursive>
 800b0a2:	bf00      	nop
 800b0a4:	240003b4 	.word	0x240003b4

0800b0a8 <_realloc_r>:
 800b0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	4614      	mov	r4, r2
 800b0ae:	460e      	mov	r6, r1
 800b0b0:	b921      	cbnz	r1, 800b0bc <_realloc_r+0x14>
 800b0b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b0b6:	4611      	mov	r1, r2
 800b0b8:	f7ff bdc8 	b.w	800ac4c <_malloc_r>
 800b0bc:	b922      	cbnz	r2, 800b0c8 <_realloc_r+0x20>
 800b0be:	f7ff fd75 	bl	800abac <_free_r>
 800b0c2:	4625      	mov	r5, r4
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0c8:	f000 fc62 	bl	800b990 <_malloc_usable_size_r>
 800b0cc:	42a0      	cmp	r0, r4
 800b0ce:	d20f      	bcs.n	800b0f0 <_realloc_r+0x48>
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	4638      	mov	r0, r7
 800b0d4:	f7ff fdba 	bl	800ac4c <_malloc_r>
 800b0d8:	4605      	mov	r5, r0
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	d0f2      	beq.n	800b0c4 <_realloc_r+0x1c>
 800b0de:	4631      	mov	r1, r6
 800b0e0:	4622      	mov	r2, r4
 800b0e2:	f7ff f9c7 	bl	800a474 <memcpy>
 800b0e6:	4631      	mov	r1, r6
 800b0e8:	4638      	mov	r0, r7
 800b0ea:	f7ff fd5f 	bl	800abac <_free_r>
 800b0ee:	e7e9      	b.n	800b0c4 <_realloc_r+0x1c>
 800b0f0:	4635      	mov	r5, r6
 800b0f2:	e7e7      	b.n	800b0c4 <_realloc_r+0x1c>

0800b0f4 <__sfputc_r>:
 800b0f4:	6893      	ldr	r3, [r2, #8]
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	b410      	push	{r4}
 800b0fc:	6093      	str	r3, [r2, #8]
 800b0fe:	da08      	bge.n	800b112 <__sfputc_r+0x1e>
 800b100:	6994      	ldr	r4, [r2, #24]
 800b102:	42a3      	cmp	r3, r4
 800b104:	db01      	blt.n	800b10a <__sfputc_r+0x16>
 800b106:	290a      	cmp	r1, #10
 800b108:	d103      	bne.n	800b112 <__sfputc_r+0x1e>
 800b10a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b10e:	f000 b94b 	b.w	800b3a8 <__swbuf_r>
 800b112:	6813      	ldr	r3, [r2, #0]
 800b114:	1c58      	adds	r0, r3, #1
 800b116:	6010      	str	r0, [r2, #0]
 800b118:	7019      	strb	r1, [r3, #0]
 800b11a:	4608      	mov	r0, r1
 800b11c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <__sfputs_r>:
 800b122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b124:	4606      	mov	r6, r0
 800b126:	460f      	mov	r7, r1
 800b128:	4614      	mov	r4, r2
 800b12a:	18d5      	adds	r5, r2, r3
 800b12c:	42ac      	cmp	r4, r5
 800b12e:	d101      	bne.n	800b134 <__sfputs_r+0x12>
 800b130:	2000      	movs	r0, #0
 800b132:	e007      	b.n	800b144 <__sfputs_r+0x22>
 800b134:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b138:	463a      	mov	r2, r7
 800b13a:	4630      	mov	r0, r6
 800b13c:	f7ff ffda 	bl	800b0f4 <__sfputc_r>
 800b140:	1c43      	adds	r3, r0, #1
 800b142:	d1f3      	bne.n	800b12c <__sfputs_r+0xa>
 800b144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b148 <_vfiprintf_r>:
 800b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	460d      	mov	r5, r1
 800b14e:	b09d      	sub	sp, #116	; 0x74
 800b150:	4614      	mov	r4, r2
 800b152:	4698      	mov	r8, r3
 800b154:	4606      	mov	r6, r0
 800b156:	b118      	cbz	r0, 800b160 <_vfiprintf_r+0x18>
 800b158:	6983      	ldr	r3, [r0, #24]
 800b15a:	b90b      	cbnz	r3, 800b160 <_vfiprintf_r+0x18>
 800b15c:	f000 fb14 	bl	800b788 <__sinit>
 800b160:	4b89      	ldr	r3, [pc, #548]	; (800b388 <_vfiprintf_r+0x240>)
 800b162:	429d      	cmp	r5, r3
 800b164:	d11b      	bne.n	800b19e <_vfiprintf_r+0x56>
 800b166:	6875      	ldr	r5, [r6, #4]
 800b168:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b16a:	07d9      	lsls	r1, r3, #31
 800b16c:	d405      	bmi.n	800b17a <_vfiprintf_r+0x32>
 800b16e:	89ab      	ldrh	r3, [r5, #12]
 800b170:	059a      	lsls	r2, r3, #22
 800b172:	d402      	bmi.n	800b17a <_vfiprintf_r+0x32>
 800b174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b176:	f000 fba5 	bl	800b8c4 <__retarget_lock_acquire_recursive>
 800b17a:	89ab      	ldrh	r3, [r5, #12]
 800b17c:	071b      	lsls	r3, r3, #28
 800b17e:	d501      	bpl.n	800b184 <_vfiprintf_r+0x3c>
 800b180:	692b      	ldr	r3, [r5, #16]
 800b182:	b9eb      	cbnz	r3, 800b1c0 <_vfiprintf_r+0x78>
 800b184:	4629      	mov	r1, r5
 800b186:	4630      	mov	r0, r6
 800b188:	f000 f96e 	bl	800b468 <__swsetup_r>
 800b18c:	b1c0      	cbz	r0, 800b1c0 <_vfiprintf_r+0x78>
 800b18e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b190:	07dc      	lsls	r4, r3, #31
 800b192:	d50e      	bpl.n	800b1b2 <_vfiprintf_r+0x6a>
 800b194:	f04f 30ff 	mov.w	r0, #4294967295
 800b198:	b01d      	add	sp, #116	; 0x74
 800b19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19e:	4b7b      	ldr	r3, [pc, #492]	; (800b38c <_vfiprintf_r+0x244>)
 800b1a0:	429d      	cmp	r5, r3
 800b1a2:	d101      	bne.n	800b1a8 <_vfiprintf_r+0x60>
 800b1a4:	68b5      	ldr	r5, [r6, #8]
 800b1a6:	e7df      	b.n	800b168 <_vfiprintf_r+0x20>
 800b1a8:	4b79      	ldr	r3, [pc, #484]	; (800b390 <_vfiprintf_r+0x248>)
 800b1aa:	429d      	cmp	r5, r3
 800b1ac:	bf08      	it	eq
 800b1ae:	68f5      	ldreq	r5, [r6, #12]
 800b1b0:	e7da      	b.n	800b168 <_vfiprintf_r+0x20>
 800b1b2:	89ab      	ldrh	r3, [r5, #12]
 800b1b4:	0598      	lsls	r0, r3, #22
 800b1b6:	d4ed      	bmi.n	800b194 <_vfiprintf_r+0x4c>
 800b1b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1ba:	f000 fb84 	bl	800b8c6 <__retarget_lock_release_recursive>
 800b1be:	e7e9      	b.n	800b194 <_vfiprintf_r+0x4c>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1c4:	2320      	movs	r3, #32
 800b1c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1ce:	2330      	movs	r3, #48	; 0x30
 800b1d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b394 <_vfiprintf_r+0x24c>
 800b1d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1d8:	f04f 0901 	mov.w	r9, #1
 800b1dc:	4623      	mov	r3, r4
 800b1de:	469a      	mov	sl, r3
 800b1e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1e4:	b10a      	cbz	r2, 800b1ea <_vfiprintf_r+0xa2>
 800b1e6:	2a25      	cmp	r2, #37	; 0x25
 800b1e8:	d1f9      	bne.n	800b1de <_vfiprintf_r+0x96>
 800b1ea:	ebba 0b04 	subs.w	fp, sl, r4
 800b1ee:	d00b      	beq.n	800b208 <_vfiprintf_r+0xc0>
 800b1f0:	465b      	mov	r3, fp
 800b1f2:	4622      	mov	r2, r4
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f7ff ff93 	bl	800b122 <__sfputs_r>
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	f000 80aa 	beq.w	800b356 <_vfiprintf_r+0x20e>
 800b202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b204:	445a      	add	r2, fp
 800b206:	9209      	str	r2, [sp, #36]	; 0x24
 800b208:	f89a 3000 	ldrb.w	r3, [sl]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f000 80a2 	beq.w	800b356 <_vfiprintf_r+0x20e>
 800b212:	2300      	movs	r3, #0
 800b214:	f04f 32ff 	mov.w	r2, #4294967295
 800b218:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b21c:	f10a 0a01 	add.w	sl, sl, #1
 800b220:	9304      	str	r3, [sp, #16]
 800b222:	9307      	str	r3, [sp, #28]
 800b224:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b228:	931a      	str	r3, [sp, #104]	; 0x68
 800b22a:	4654      	mov	r4, sl
 800b22c:	2205      	movs	r2, #5
 800b22e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b232:	4858      	ldr	r0, [pc, #352]	; (800b394 <_vfiprintf_r+0x24c>)
 800b234:	f7f5 f85c 	bl	80002f0 <memchr>
 800b238:	9a04      	ldr	r2, [sp, #16]
 800b23a:	b9d8      	cbnz	r0, 800b274 <_vfiprintf_r+0x12c>
 800b23c:	06d1      	lsls	r1, r2, #27
 800b23e:	bf44      	itt	mi
 800b240:	2320      	movmi	r3, #32
 800b242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b246:	0713      	lsls	r3, r2, #28
 800b248:	bf44      	itt	mi
 800b24a:	232b      	movmi	r3, #43	; 0x2b
 800b24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b250:	f89a 3000 	ldrb.w	r3, [sl]
 800b254:	2b2a      	cmp	r3, #42	; 0x2a
 800b256:	d015      	beq.n	800b284 <_vfiprintf_r+0x13c>
 800b258:	9a07      	ldr	r2, [sp, #28]
 800b25a:	4654      	mov	r4, sl
 800b25c:	2000      	movs	r0, #0
 800b25e:	f04f 0c0a 	mov.w	ip, #10
 800b262:	4621      	mov	r1, r4
 800b264:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b268:	3b30      	subs	r3, #48	; 0x30
 800b26a:	2b09      	cmp	r3, #9
 800b26c:	d94e      	bls.n	800b30c <_vfiprintf_r+0x1c4>
 800b26e:	b1b0      	cbz	r0, 800b29e <_vfiprintf_r+0x156>
 800b270:	9207      	str	r2, [sp, #28]
 800b272:	e014      	b.n	800b29e <_vfiprintf_r+0x156>
 800b274:	eba0 0308 	sub.w	r3, r0, r8
 800b278:	fa09 f303 	lsl.w	r3, r9, r3
 800b27c:	4313      	orrs	r3, r2
 800b27e:	9304      	str	r3, [sp, #16]
 800b280:	46a2      	mov	sl, r4
 800b282:	e7d2      	b.n	800b22a <_vfiprintf_r+0xe2>
 800b284:	9b03      	ldr	r3, [sp, #12]
 800b286:	1d19      	adds	r1, r3, #4
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	9103      	str	r1, [sp, #12]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	bfbb      	ittet	lt
 800b290:	425b      	neglt	r3, r3
 800b292:	f042 0202 	orrlt.w	r2, r2, #2
 800b296:	9307      	strge	r3, [sp, #28]
 800b298:	9307      	strlt	r3, [sp, #28]
 800b29a:	bfb8      	it	lt
 800b29c:	9204      	strlt	r2, [sp, #16]
 800b29e:	7823      	ldrb	r3, [r4, #0]
 800b2a0:	2b2e      	cmp	r3, #46	; 0x2e
 800b2a2:	d10c      	bne.n	800b2be <_vfiprintf_r+0x176>
 800b2a4:	7863      	ldrb	r3, [r4, #1]
 800b2a6:	2b2a      	cmp	r3, #42	; 0x2a
 800b2a8:	d135      	bne.n	800b316 <_vfiprintf_r+0x1ce>
 800b2aa:	9b03      	ldr	r3, [sp, #12]
 800b2ac:	1d1a      	adds	r2, r3, #4
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	9203      	str	r2, [sp, #12]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	bfb8      	it	lt
 800b2b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2ba:	3402      	adds	r4, #2
 800b2bc:	9305      	str	r3, [sp, #20]
 800b2be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b3a4 <_vfiprintf_r+0x25c>
 800b2c2:	7821      	ldrb	r1, [r4, #0]
 800b2c4:	2203      	movs	r2, #3
 800b2c6:	4650      	mov	r0, sl
 800b2c8:	f7f5 f812 	bl	80002f0 <memchr>
 800b2cc:	b140      	cbz	r0, 800b2e0 <_vfiprintf_r+0x198>
 800b2ce:	2340      	movs	r3, #64	; 0x40
 800b2d0:	eba0 000a 	sub.w	r0, r0, sl
 800b2d4:	fa03 f000 	lsl.w	r0, r3, r0
 800b2d8:	9b04      	ldr	r3, [sp, #16]
 800b2da:	4303      	orrs	r3, r0
 800b2dc:	3401      	adds	r4, #1
 800b2de:	9304      	str	r3, [sp, #16]
 800b2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2e4:	482c      	ldr	r0, [pc, #176]	; (800b398 <_vfiprintf_r+0x250>)
 800b2e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2ea:	2206      	movs	r2, #6
 800b2ec:	f7f5 f800 	bl	80002f0 <memchr>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d03f      	beq.n	800b374 <_vfiprintf_r+0x22c>
 800b2f4:	4b29      	ldr	r3, [pc, #164]	; (800b39c <_vfiprintf_r+0x254>)
 800b2f6:	bb1b      	cbnz	r3, 800b340 <_vfiprintf_r+0x1f8>
 800b2f8:	9b03      	ldr	r3, [sp, #12]
 800b2fa:	3307      	adds	r3, #7
 800b2fc:	f023 0307 	bic.w	r3, r3, #7
 800b300:	3308      	adds	r3, #8
 800b302:	9303      	str	r3, [sp, #12]
 800b304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b306:	443b      	add	r3, r7
 800b308:	9309      	str	r3, [sp, #36]	; 0x24
 800b30a:	e767      	b.n	800b1dc <_vfiprintf_r+0x94>
 800b30c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b310:	460c      	mov	r4, r1
 800b312:	2001      	movs	r0, #1
 800b314:	e7a5      	b.n	800b262 <_vfiprintf_r+0x11a>
 800b316:	2300      	movs	r3, #0
 800b318:	3401      	adds	r4, #1
 800b31a:	9305      	str	r3, [sp, #20]
 800b31c:	4619      	mov	r1, r3
 800b31e:	f04f 0c0a 	mov.w	ip, #10
 800b322:	4620      	mov	r0, r4
 800b324:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b328:	3a30      	subs	r2, #48	; 0x30
 800b32a:	2a09      	cmp	r2, #9
 800b32c:	d903      	bls.n	800b336 <_vfiprintf_r+0x1ee>
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d0c5      	beq.n	800b2be <_vfiprintf_r+0x176>
 800b332:	9105      	str	r1, [sp, #20]
 800b334:	e7c3      	b.n	800b2be <_vfiprintf_r+0x176>
 800b336:	fb0c 2101 	mla	r1, ip, r1, r2
 800b33a:	4604      	mov	r4, r0
 800b33c:	2301      	movs	r3, #1
 800b33e:	e7f0      	b.n	800b322 <_vfiprintf_r+0x1da>
 800b340:	ab03      	add	r3, sp, #12
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	462a      	mov	r2, r5
 800b346:	4b16      	ldr	r3, [pc, #88]	; (800b3a0 <_vfiprintf_r+0x258>)
 800b348:	a904      	add	r1, sp, #16
 800b34a:	4630      	mov	r0, r6
 800b34c:	f7fd fea4 	bl	8009098 <_printf_float>
 800b350:	4607      	mov	r7, r0
 800b352:	1c78      	adds	r0, r7, #1
 800b354:	d1d6      	bne.n	800b304 <_vfiprintf_r+0x1bc>
 800b356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b358:	07d9      	lsls	r1, r3, #31
 800b35a:	d405      	bmi.n	800b368 <_vfiprintf_r+0x220>
 800b35c:	89ab      	ldrh	r3, [r5, #12]
 800b35e:	059a      	lsls	r2, r3, #22
 800b360:	d402      	bmi.n	800b368 <_vfiprintf_r+0x220>
 800b362:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b364:	f000 faaf 	bl	800b8c6 <__retarget_lock_release_recursive>
 800b368:	89ab      	ldrh	r3, [r5, #12]
 800b36a:	065b      	lsls	r3, r3, #25
 800b36c:	f53f af12 	bmi.w	800b194 <_vfiprintf_r+0x4c>
 800b370:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b372:	e711      	b.n	800b198 <_vfiprintf_r+0x50>
 800b374:	ab03      	add	r3, sp, #12
 800b376:	9300      	str	r3, [sp, #0]
 800b378:	462a      	mov	r2, r5
 800b37a:	4b09      	ldr	r3, [pc, #36]	; (800b3a0 <_vfiprintf_r+0x258>)
 800b37c:	a904      	add	r1, sp, #16
 800b37e:	4630      	mov	r0, r6
 800b380:	f7fe f916 	bl	80095b0 <_printf_i>
 800b384:	e7e4      	b.n	800b350 <_vfiprintf_r+0x208>
 800b386:	bf00      	nop
 800b388:	0800bfac 	.word	0x0800bfac
 800b38c:	0800bfcc 	.word	0x0800bfcc
 800b390:	0800bf8c 	.word	0x0800bf8c
 800b394:	0800be34 	.word	0x0800be34
 800b398:	0800be3e 	.word	0x0800be3e
 800b39c:	08009099 	.word	0x08009099
 800b3a0:	0800b123 	.word	0x0800b123
 800b3a4:	0800be3a 	.word	0x0800be3a

0800b3a8 <__swbuf_r>:
 800b3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3aa:	460e      	mov	r6, r1
 800b3ac:	4614      	mov	r4, r2
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	b118      	cbz	r0, 800b3ba <__swbuf_r+0x12>
 800b3b2:	6983      	ldr	r3, [r0, #24]
 800b3b4:	b90b      	cbnz	r3, 800b3ba <__swbuf_r+0x12>
 800b3b6:	f000 f9e7 	bl	800b788 <__sinit>
 800b3ba:	4b21      	ldr	r3, [pc, #132]	; (800b440 <__swbuf_r+0x98>)
 800b3bc:	429c      	cmp	r4, r3
 800b3be:	d12b      	bne.n	800b418 <__swbuf_r+0x70>
 800b3c0:	686c      	ldr	r4, [r5, #4]
 800b3c2:	69a3      	ldr	r3, [r4, #24]
 800b3c4:	60a3      	str	r3, [r4, #8]
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	071a      	lsls	r2, r3, #28
 800b3ca:	d52f      	bpl.n	800b42c <__swbuf_r+0x84>
 800b3cc:	6923      	ldr	r3, [r4, #16]
 800b3ce:	b36b      	cbz	r3, 800b42c <__swbuf_r+0x84>
 800b3d0:	6923      	ldr	r3, [r4, #16]
 800b3d2:	6820      	ldr	r0, [r4, #0]
 800b3d4:	1ac0      	subs	r0, r0, r3
 800b3d6:	6963      	ldr	r3, [r4, #20]
 800b3d8:	b2f6      	uxtb	r6, r6
 800b3da:	4283      	cmp	r3, r0
 800b3dc:	4637      	mov	r7, r6
 800b3de:	dc04      	bgt.n	800b3ea <__swbuf_r+0x42>
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	f000 f93c 	bl	800b660 <_fflush_r>
 800b3e8:	bb30      	cbnz	r0, 800b438 <__swbuf_r+0x90>
 800b3ea:	68a3      	ldr	r3, [r4, #8]
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	60a3      	str	r3, [r4, #8]
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	6022      	str	r2, [r4, #0]
 800b3f6:	701e      	strb	r6, [r3, #0]
 800b3f8:	6963      	ldr	r3, [r4, #20]
 800b3fa:	3001      	adds	r0, #1
 800b3fc:	4283      	cmp	r3, r0
 800b3fe:	d004      	beq.n	800b40a <__swbuf_r+0x62>
 800b400:	89a3      	ldrh	r3, [r4, #12]
 800b402:	07db      	lsls	r3, r3, #31
 800b404:	d506      	bpl.n	800b414 <__swbuf_r+0x6c>
 800b406:	2e0a      	cmp	r6, #10
 800b408:	d104      	bne.n	800b414 <__swbuf_r+0x6c>
 800b40a:	4621      	mov	r1, r4
 800b40c:	4628      	mov	r0, r5
 800b40e:	f000 f927 	bl	800b660 <_fflush_r>
 800b412:	b988      	cbnz	r0, 800b438 <__swbuf_r+0x90>
 800b414:	4638      	mov	r0, r7
 800b416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b418:	4b0a      	ldr	r3, [pc, #40]	; (800b444 <__swbuf_r+0x9c>)
 800b41a:	429c      	cmp	r4, r3
 800b41c:	d101      	bne.n	800b422 <__swbuf_r+0x7a>
 800b41e:	68ac      	ldr	r4, [r5, #8]
 800b420:	e7cf      	b.n	800b3c2 <__swbuf_r+0x1a>
 800b422:	4b09      	ldr	r3, [pc, #36]	; (800b448 <__swbuf_r+0xa0>)
 800b424:	429c      	cmp	r4, r3
 800b426:	bf08      	it	eq
 800b428:	68ec      	ldreq	r4, [r5, #12]
 800b42a:	e7ca      	b.n	800b3c2 <__swbuf_r+0x1a>
 800b42c:	4621      	mov	r1, r4
 800b42e:	4628      	mov	r0, r5
 800b430:	f000 f81a 	bl	800b468 <__swsetup_r>
 800b434:	2800      	cmp	r0, #0
 800b436:	d0cb      	beq.n	800b3d0 <__swbuf_r+0x28>
 800b438:	f04f 37ff 	mov.w	r7, #4294967295
 800b43c:	e7ea      	b.n	800b414 <__swbuf_r+0x6c>
 800b43e:	bf00      	nop
 800b440:	0800bfac 	.word	0x0800bfac
 800b444:	0800bfcc 	.word	0x0800bfcc
 800b448:	0800bf8c 	.word	0x0800bf8c

0800b44c <__ascii_wctomb>:
 800b44c:	b149      	cbz	r1, 800b462 <__ascii_wctomb+0x16>
 800b44e:	2aff      	cmp	r2, #255	; 0xff
 800b450:	bf85      	ittet	hi
 800b452:	238a      	movhi	r3, #138	; 0x8a
 800b454:	6003      	strhi	r3, [r0, #0]
 800b456:	700a      	strbls	r2, [r1, #0]
 800b458:	f04f 30ff 	movhi.w	r0, #4294967295
 800b45c:	bf98      	it	ls
 800b45e:	2001      	movls	r0, #1
 800b460:	4770      	bx	lr
 800b462:	4608      	mov	r0, r1
 800b464:	4770      	bx	lr
	...

0800b468 <__swsetup_r>:
 800b468:	4b32      	ldr	r3, [pc, #200]	; (800b534 <__swsetup_r+0xcc>)
 800b46a:	b570      	push	{r4, r5, r6, lr}
 800b46c:	681d      	ldr	r5, [r3, #0]
 800b46e:	4606      	mov	r6, r0
 800b470:	460c      	mov	r4, r1
 800b472:	b125      	cbz	r5, 800b47e <__swsetup_r+0x16>
 800b474:	69ab      	ldr	r3, [r5, #24]
 800b476:	b913      	cbnz	r3, 800b47e <__swsetup_r+0x16>
 800b478:	4628      	mov	r0, r5
 800b47a:	f000 f985 	bl	800b788 <__sinit>
 800b47e:	4b2e      	ldr	r3, [pc, #184]	; (800b538 <__swsetup_r+0xd0>)
 800b480:	429c      	cmp	r4, r3
 800b482:	d10f      	bne.n	800b4a4 <__swsetup_r+0x3c>
 800b484:	686c      	ldr	r4, [r5, #4]
 800b486:	89a3      	ldrh	r3, [r4, #12]
 800b488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b48c:	0719      	lsls	r1, r3, #28
 800b48e:	d42c      	bmi.n	800b4ea <__swsetup_r+0x82>
 800b490:	06dd      	lsls	r5, r3, #27
 800b492:	d411      	bmi.n	800b4b8 <__swsetup_r+0x50>
 800b494:	2309      	movs	r3, #9
 800b496:	6033      	str	r3, [r6, #0]
 800b498:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b49c:	81a3      	strh	r3, [r4, #12]
 800b49e:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a2:	e03e      	b.n	800b522 <__swsetup_r+0xba>
 800b4a4:	4b25      	ldr	r3, [pc, #148]	; (800b53c <__swsetup_r+0xd4>)
 800b4a6:	429c      	cmp	r4, r3
 800b4a8:	d101      	bne.n	800b4ae <__swsetup_r+0x46>
 800b4aa:	68ac      	ldr	r4, [r5, #8]
 800b4ac:	e7eb      	b.n	800b486 <__swsetup_r+0x1e>
 800b4ae:	4b24      	ldr	r3, [pc, #144]	; (800b540 <__swsetup_r+0xd8>)
 800b4b0:	429c      	cmp	r4, r3
 800b4b2:	bf08      	it	eq
 800b4b4:	68ec      	ldreq	r4, [r5, #12]
 800b4b6:	e7e6      	b.n	800b486 <__swsetup_r+0x1e>
 800b4b8:	0758      	lsls	r0, r3, #29
 800b4ba:	d512      	bpl.n	800b4e2 <__swsetup_r+0x7a>
 800b4bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4be:	b141      	cbz	r1, 800b4d2 <__swsetup_r+0x6a>
 800b4c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4c4:	4299      	cmp	r1, r3
 800b4c6:	d002      	beq.n	800b4ce <__swsetup_r+0x66>
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	f7ff fb6f 	bl	800abac <_free_r>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	6363      	str	r3, [r4, #52]	; 0x34
 800b4d2:	89a3      	ldrh	r3, [r4, #12]
 800b4d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4d8:	81a3      	strh	r3, [r4, #12]
 800b4da:	2300      	movs	r3, #0
 800b4dc:	6063      	str	r3, [r4, #4]
 800b4de:	6923      	ldr	r3, [r4, #16]
 800b4e0:	6023      	str	r3, [r4, #0]
 800b4e2:	89a3      	ldrh	r3, [r4, #12]
 800b4e4:	f043 0308 	orr.w	r3, r3, #8
 800b4e8:	81a3      	strh	r3, [r4, #12]
 800b4ea:	6923      	ldr	r3, [r4, #16]
 800b4ec:	b94b      	cbnz	r3, 800b502 <__swsetup_r+0x9a>
 800b4ee:	89a3      	ldrh	r3, [r4, #12]
 800b4f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4f8:	d003      	beq.n	800b502 <__swsetup_r+0x9a>
 800b4fa:	4621      	mov	r1, r4
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	f000 fa07 	bl	800b910 <__smakebuf_r>
 800b502:	89a0      	ldrh	r0, [r4, #12]
 800b504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b508:	f010 0301 	ands.w	r3, r0, #1
 800b50c:	d00a      	beq.n	800b524 <__swsetup_r+0xbc>
 800b50e:	2300      	movs	r3, #0
 800b510:	60a3      	str	r3, [r4, #8]
 800b512:	6963      	ldr	r3, [r4, #20]
 800b514:	425b      	negs	r3, r3
 800b516:	61a3      	str	r3, [r4, #24]
 800b518:	6923      	ldr	r3, [r4, #16]
 800b51a:	b943      	cbnz	r3, 800b52e <__swsetup_r+0xc6>
 800b51c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b520:	d1ba      	bne.n	800b498 <__swsetup_r+0x30>
 800b522:	bd70      	pop	{r4, r5, r6, pc}
 800b524:	0781      	lsls	r1, r0, #30
 800b526:	bf58      	it	pl
 800b528:	6963      	ldrpl	r3, [r4, #20]
 800b52a:	60a3      	str	r3, [r4, #8]
 800b52c:	e7f4      	b.n	800b518 <__swsetup_r+0xb0>
 800b52e:	2000      	movs	r0, #0
 800b530:	e7f7      	b.n	800b522 <__swsetup_r+0xba>
 800b532:	bf00      	nop
 800b534:	24000010 	.word	0x24000010
 800b538:	0800bfac 	.word	0x0800bfac
 800b53c:	0800bfcc 	.word	0x0800bfcc
 800b540:	0800bf8c 	.word	0x0800bf8c

0800b544 <abort>:
 800b544:	b508      	push	{r3, lr}
 800b546:	2006      	movs	r0, #6
 800b548:	f000 fa52 	bl	800b9f0 <raise>
 800b54c:	2001      	movs	r0, #1
 800b54e:	f7f5 ff8d 	bl	800146c <_exit>
	...

0800b554 <__sflush_r>:
 800b554:	898a      	ldrh	r2, [r1, #12]
 800b556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b55a:	4605      	mov	r5, r0
 800b55c:	0710      	lsls	r0, r2, #28
 800b55e:	460c      	mov	r4, r1
 800b560:	d458      	bmi.n	800b614 <__sflush_r+0xc0>
 800b562:	684b      	ldr	r3, [r1, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	dc05      	bgt.n	800b574 <__sflush_r+0x20>
 800b568:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	dc02      	bgt.n	800b574 <__sflush_r+0x20>
 800b56e:	2000      	movs	r0, #0
 800b570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b576:	2e00      	cmp	r6, #0
 800b578:	d0f9      	beq.n	800b56e <__sflush_r+0x1a>
 800b57a:	2300      	movs	r3, #0
 800b57c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b580:	682f      	ldr	r7, [r5, #0]
 800b582:	602b      	str	r3, [r5, #0]
 800b584:	d032      	beq.n	800b5ec <__sflush_r+0x98>
 800b586:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	075a      	lsls	r2, r3, #29
 800b58c:	d505      	bpl.n	800b59a <__sflush_r+0x46>
 800b58e:	6863      	ldr	r3, [r4, #4]
 800b590:	1ac0      	subs	r0, r0, r3
 800b592:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b594:	b10b      	cbz	r3, 800b59a <__sflush_r+0x46>
 800b596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b598:	1ac0      	subs	r0, r0, r3
 800b59a:	2300      	movs	r3, #0
 800b59c:	4602      	mov	r2, r0
 800b59e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5a0:	6a21      	ldr	r1, [r4, #32]
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	47b0      	blx	r6
 800b5a6:	1c43      	adds	r3, r0, #1
 800b5a8:	89a3      	ldrh	r3, [r4, #12]
 800b5aa:	d106      	bne.n	800b5ba <__sflush_r+0x66>
 800b5ac:	6829      	ldr	r1, [r5, #0]
 800b5ae:	291d      	cmp	r1, #29
 800b5b0:	d82c      	bhi.n	800b60c <__sflush_r+0xb8>
 800b5b2:	4a2a      	ldr	r2, [pc, #168]	; (800b65c <__sflush_r+0x108>)
 800b5b4:	40ca      	lsrs	r2, r1
 800b5b6:	07d6      	lsls	r6, r2, #31
 800b5b8:	d528      	bpl.n	800b60c <__sflush_r+0xb8>
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	6062      	str	r2, [r4, #4]
 800b5be:	04d9      	lsls	r1, r3, #19
 800b5c0:	6922      	ldr	r2, [r4, #16]
 800b5c2:	6022      	str	r2, [r4, #0]
 800b5c4:	d504      	bpl.n	800b5d0 <__sflush_r+0x7c>
 800b5c6:	1c42      	adds	r2, r0, #1
 800b5c8:	d101      	bne.n	800b5ce <__sflush_r+0x7a>
 800b5ca:	682b      	ldr	r3, [r5, #0]
 800b5cc:	b903      	cbnz	r3, 800b5d0 <__sflush_r+0x7c>
 800b5ce:	6560      	str	r0, [r4, #84]	; 0x54
 800b5d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5d2:	602f      	str	r7, [r5, #0]
 800b5d4:	2900      	cmp	r1, #0
 800b5d6:	d0ca      	beq.n	800b56e <__sflush_r+0x1a>
 800b5d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5dc:	4299      	cmp	r1, r3
 800b5de:	d002      	beq.n	800b5e6 <__sflush_r+0x92>
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	f7ff fae3 	bl	800abac <_free_r>
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	6360      	str	r0, [r4, #52]	; 0x34
 800b5ea:	e7c1      	b.n	800b570 <__sflush_r+0x1c>
 800b5ec:	6a21      	ldr	r1, [r4, #32]
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	47b0      	blx	r6
 800b5f4:	1c41      	adds	r1, r0, #1
 800b5f6:	d1c7      	bne.n	800b588 <__sflush_r+0x34>
 800b5f8:	682b      	ldr	r3, [r5, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d0c4      	beq.n	800b588 <__sflush_r+0x34>
 800b5fe:	2b1d      	cmp	r3, #29
 800b600:	d001      	beq.n	800b606 <__sflush_r+0xb2>
 800b602:	2b16      	cmp	r3, #22
 800b604:	d101      	bne.n	800b60a <__sflush_r+0xb6>
 800b606:	602f      	str	r7, [r5, #0]
 800b608:	e7b1      	b.n	800b56e <__sflush_r+0x1a>
 800b60a:	89a3      	ldrh	r3, [r4, #12]
 800b60c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b610:	81a3      	strh	r3, [r4, #12]
 800b612:	e7ad      	b.n	800b570 <__sflush_r+0x1c>
 800b614:	690f      	ldr	r7, [r1, #16]
 800b616:	2f00      	cmp	r7, #0
 800b618:	d0a9      	beq.n	800b56e <__sflush_r+0x1a>
 800b61a:	0793      	lsls	r3, r2, #30
 800b61c:	680e      	ldr	r6, [r1, #0]
 800b61e:	bf08      	it	eq
 800b620:	694b      	ldreq	r3, [r1, #20]
 800b622:	600f      	str	r7, [r1, #0]
 800b624:	bf18      	it	ne
 800b626:	2300      	movne	r3, #0
 800b628:	eba6 0807 	sub.w	r8, r6, r7
 800b62c:	608b      	str	r3, [r1, #8]
 800b62e:	f1b8 0f00 	cmp.w	r8, #0
 800b632:	dd9c      	ble.n	800b56e <__sflush_r+0x1a>
 800b634:	6a21      	ldr	r1, [r4, #32]
 800b636:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b638:	4643      	mov	r3, r8
 800b63a:	463a      	mov	r2, r7
 800b63c:	4628      	mov	r0, r5
 800b63e:	47b0      	blx	r6
 800b640:	2800      	cmp	r0, #0
 800b642:	dc06      	bgt.n	800b652 <__sflush_r+0xfe>
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b64a:	81a3      	strh	r3, [r4, #12]
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295
 800b650:	e78e      	b.n	800b570 <__sflush_r+0x1c>
 800b652:	4407      	add	r7, r0
 800b654:	eba8 0800 	sub.w	r8, r8, r0
 800b658:	e7e9      	b.n	800b62e <__sflush_r+0xda>
 800b65a:	bf00      	nop
 800b65c:	20400001 	.word	0x20400001

0800b660 <_fflush_r>:
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	690b      	ldr	r3, [r1, #16]
 800b664:	4605      	mov	r5, r0
 800b666:	460c      	mov	r4, r1
 800b668:	b913      	cbnz	r3, 800b670 <_fflush_r+0x10>
 800b66a:	2500      	movs	r5, #0
 800b66c:	4628      	mov	r0, r5
 800b66e:	bd38      	pop	{r3, r4, r5, pc}
 800b670:	b118      	cbz	r0, 800b67a <_fflush_r+0x1a>
 800b672:	6983      	ldr	r3, [r0, #24]
 800b674:	b90b      	cbnz	r3, 800b67a <_fflush_r+0x1a>
 800b676:	f000 f887 	bl	800b788 <__sinit>
 800b67a:	4b14      	ldr	r3, [pc, #80]	; (800b6cc <_fflush_r+0x6c>)
 800b67c:	429c      	cmp	r4, r3
 800b67e:	d11b      	bne.n	800b6b8 <_fflush_r+0x58>
 800b680:	686c      	ldr	r4, [r5, #4]
 800b682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d0ef      	beq.n	800b66a <_fflush_r+0xa>
 800b68a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b68c:	07d0      	lsls	r0, r2, #31
 800b68e:	d404      	bmi.n	800b69a <_fflush_r+0x3a>
 800b690:	0599      	lsls	r1, r3, #22
 800b692:	d402      	bmi.n	800b69a <_fflush_r+0x3a>
 800b694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b696:	f000 f915 	bl	800b8c4 <__retarget_lock_acquire_recursive>
 800b69a:	4628      	mov	r0, r5
 800b69c:	4621      	mov	r1, r4
 800b69e:	f7ff ff59 	bl	800b554 <__sflush_r>
 800b6a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6a4:	07da      	lsls	r2, r3, #31
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	d4e0      	bmi.n	800b66c <_fflush_r+0xc>
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	059b      	lsls	r3, r3, #22
 800b6ae:	d4dd      	bmi.n	800b66c <_fflush_r+0xc>
 800b6b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6b2:	f000 f908 	bl	800b8c6 <__retarget_lock_release_recursive>
 800b6b6:	e7d9      	b.n	800b66c <_fflush_r+0xc>
 800b6b8:	4b05      	ldr	r3, [pc, #20]	; (800b6d0 <_fflush_r+0x70>)
 800b6ba:	429c      	cmp	r4, r3
 800b6bc:	d101      	bne.n	800b6c2 <_fflush_r+0x62>
 800b6be:	68ac      	ldr	r4, [r5, #8]
 800b6c0:	e7df      	b.n	800b682 <_fflush_r+0x22>
 800b6c2:	4b04      	ldr	r3, [pc, #16]	; (800b6d4 <_fflush_r+0x74>)
 800b6c4:	429c      	cmp	r4, r3
 800b6c6:	bf08      	it	eq
 800b6c8:	68ec      	ldreq	r4, [r5, #12]
 800b6ca:	e7da      	b.n	800b682 <_fflush_r+0x22>
 800b6cc:	0800bfac 	.word	0x0800bfac
 800b6d0:	0800bfcc 	.word	0x0800bfcc
 800b6d4:	0800bf8c 	.word	0x0800bf8c

0800b6d8 <std>:
 800b6d8:	2300      	movs	r3, #0
 800b6da:	b510      	push	{r4, lr}
 800b6dc:	4604      	mov	r4, r0
 800b6de:	e9c0 3300 	strd	r3, r3, [r0]
 800b6e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6e6:	6083      	str	r3, [r0, #8]
 800b6e8:	8181      	strh	r1, [r0, #12]
 800b6ea:	6643      	str	r3, [r0, #100]	; 0x64
 800b6ec:	81c2      	strh	r2, [r0, #14]
 800b6ee:	6183      	str	r3, [r0, #24]
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	2208      	movs	r2, #8
 800b6f4:	305c      	adds	r0, #92	; 0x5c
 800b6f6:	f7fd fc37 	bl	8008f68 <memset>
 800b6fa:	4b05      	ldr	r3, [pc, #20]	; (800b710 <std+0x38>)
 800b6fc:	6263      	str	r3, [r4, #36]	; 0x24
 800b6fe:	4b05      	ldr	r3, [pc, #20]	; (800b714 <std+0x3c>)
 800b700:	62a3      	str	r3, [r4, #40]	; 0x28
 800b702:	4b05      	ldr	r3, [pc, #20]	; (800b718 <std+0x40>)
 800b704:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b706:	4b05      	ldr	r3, [pc, #20]	; (800b71c <std+0x44>)
 800b708:	6224      	str	r4, [r4, #32]
 800b70a:	6323      	str	r3, [r4, #48]	; 0x30
 800b70c:	bd10      	pop	{r4, pc}
 800b70e:	bf00      	nop
 800b710:	0800ba29 	.word	0x0800ba29
 800b714:	0800ba4b 	.word	0x0800ba4b
 800b718:	0800ba83 	.word	0x0800ba83
 800b71c:	0800baa7 	.word	0x0800baa7

0800b720 <_cleanup_r>:
 800b720:	4901      	ldr	r1, [pc, #4]	; (800b728 <_cleanup_r+0x8>)
 800b722:	f000 b8af 	b.w	800b884 <_fwalk_reent>
 800b726:	bf00      	nop
 800b728:	0800b661 	.word	0x0800b661

0800b72c <__sfmoreglue>:
 800b72c:	b570      	push	{r4, r5, r6, lr}
 800b72e:	1e4a      	subs	r2, r1, #1
 800b730:	2568      	movs	r5, #104	; 0x68
 800b732:	4355      	muls	r5, r2
 800b734:	460e      	mov	r6, r1
 800b736:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b73a:	f7ff fa87 	bl	800ac4c <_malloc_r>
 800b73e:	4604      	mov	r4, r0
 800b740:	b140      	cbz	r0, 800b754 <__sfmoreglue+0x28>
 800b742:	2100      	movs	r1, #0
 800b744:	e9c0 1600 	strd	r1, r6, [r0]
 800b748:	300c      	adds	r0, #12
 800b74a:	60a0      	str	r0, [r4, #8]
 800b74c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b750:	f7fd fc0a 	bl	8008f68 <memset>
 800b754:	4620      	mov	r0, r4
 800b756:	bd70      	pop	{r4, r5, r6, pc}

0800b758 <__sfp_lock_acquire>:
 800b758:	4801      	ldr	r0, [pc, #4]	; (800b760 <__sfp_lock_acquire+0x8>)
 800b75a:	f000 b8b3 	b.w	800b8c4 <__retarget_lock_acquire_recursive>
 800b75e:	bf00      	nop
 800b760:	240003b8 	.word	0x240003b8

0800b764 <__sfp_lock_release>:
 800b764:	4801      	ldr	r0, [pc, #4]	; (800b76c <__sfp_lock_release+0x8>)
 800b766:	f000 b8ae 	b.w	800b8c6 <__retarget_lock_release_recursive>
 800b76a:	bf00      	nop
 800b76c:	240003b8 	.word	0x240003b8

0800b770 <__sinit_lock_acquire>:
 800b770:	4801      	ldr	r0, [pc, #4]	; (800b778 <__sinit_lock_acquire+0x8>)
 800b772:	f000 b8a7 	b.w	800b8c4 <__retarget_lock_acquire_recursive>
 800b776:	bf00      	nop
 800b778:	240003b3 	.word	0x240003b3

0800b77c <__sinit_lock_release>:
 800b77c:	4801      	ldr	r0, [pc, #4]	; (800b784 <__sinit_lock_release+0x8>)
 800b77e:	f000 b8a2 	b.w	800b8c6 <__retarget_lock_release_recursive>
 800b782:	bf00      	nop
 800b784:	240003b3 	.word	0x240003b3

0800b788 <__sinit>:
 800b788:	b510      	push	{r4, lr}
 800b78a:	4604      	mov	r4, r0
 800b78c:	f7ff fff0 	bl	800b770 <__sinit_lock_acquire>
 800b790:	69a3      	ldr	r3, [r4, #24]
 800b792:	b11b      	cbz	r3, 800b79c <__sinit+0x14>
 800b794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b798:	f7ff bff0 	b.w	800b77c <__sinit_lock_release>
 800b79c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b7a0:	6523      	str	r3, [r4, #80]	; 0x50
 800b7a2:	4b13      	ldr	r3, [pc, #76]	; (800b7f0 <__sinit+0x68>)
 800b7a4:	4a13      	ldr	r2, [pc, #76]	; (800b7f4 <__sinit+0x6c>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b7aa:	42a3      	cmp	r3, r4
 800b7ac:	bf04      	itt	eq
 800b7ae:	2301      	moveq	r3, #1
 800b7b0:	61a3      	streq	r3, [r4, #24]
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f000 f820 	bl	800b7f8 <__sfp>
 800b7b8:	6060      	str	r0, [r4, #4]
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f000 f81c 	bl	800b7f8 <__sfp>
 800b7c0:	60a0      	str	r0, [r4, #8]
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f000 f818 	bl	800b7f8 <__sfp>
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	60e0      	str	r0, [r4, #12]
 800b7cc:	2104      	movs	r1, #4
 800b7ce:	6860      	ldr	r0, [r4, #4]
 800b7d0:	f7ff ff82 	bl	800b6d8 <std>
 800b7d4:	68a0      	ldr	r0, [r4, #8]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	2109      	movs	r1, #9
 800b7da:	f7ff ff7d 	bl	800b6d8 <std>
 800b7de:	68e0      	ldr	r0, [r4, #12]
 800b7e0:	2202      	movs	r2, #2
 800b7e2:	2112      	movs	r1, #18
 800b7e4:	f7ff ff78 	bl	800b6d8 <std>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	61a3      	str	r3, [r4, #24]
 800b7ec:	e7d2      	b.n	800b794 <__sinit+0xc>
 800b7ee:	bf00      	nop
 800b7f0:	0800bc0c 	.word	0x0800bc0c
 800b7f4:	0800b721 	.word	0x0800b721

0800b7f8 <__sfp>:
 800b7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7fa:	4607      	mov	r7, r0
 800b7fc:	f7ff ffac 	bl	800b758 <__sfp_lock_acquire>
 800b800:	4b1e      	ldr	r3, [pc, #120]	; (800b87c <__sfp+0x84>)
 800b802:	681e      	ldr	r6, [r3, #0]
 800b804:	69b3      	ldr	r3, [r6, #24]
 800b806:	b913      	cbnz	r3, 800b80e <__sfp+0x16>
 800b808:	4630      	mov	r0, r6
 800b80a:	f7ff ffbd 	bl	800b788 <__sinit>
 800b80e:	3648      	adds	r6, #72	; 0x48
 800b810:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b814:	3b01      	subs	r3, #1
 800b816:	d503      	bpl.n	800b820 <__sfp+0x28>
 800b818:	6833      	ldr	r3, [r6, #0]
 800b81a:	b30b      	cbz	r3, 800b860 <__sfp+0x68>
 800b81c:	6836      	ldr	r6, [r6, #0]
 800b81e:	e7f7      	b.n	800b810 <__sfp+0x18>
 800b820:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b824:	b9d5      	cbnz	r5, 800b85c <__sfp+0x64>
 800b826:	4b16      	ldr	r3, [pc, #88]	; (800b880 <__sfp+0x88>)
 800b828:	60e3      	str	r3, [r4, #12]
 800b82a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b82e:	6665      	str	r5, [r4, #100]	; 0x64
 800b830:	f000 f847 	bl	800b8c2 <__retarget_lock_init_recursive>
 800b834:	f7ff ff96 	bl	800b764 <__sfp_lock_release>
 800b838:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b83c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b840:	6025      	str	r5, [r4, #0]
 800b842:	61a5      	str	r5, [r4, #24]
 800b844:	2208      	movs	r2, #8
 800b846:	4629      	mov	r1, r5
 800b848:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b84c:	f7fd fb8c 	bl	8008f68 <memset>
 800b850:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b854:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b858:	4620      	mov	r0, r4
 800b85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b85c:	3468      	adds	r4, #104	; 0x68
 800b85e:	e7d9      	b.n	800b814 <__sfp+0x1c>
 800b860:	2104      	movs	r1, #4
 800b862:	4638      	mov	r0, r7
 800b864:	f7ff ff62 	bl	800b72c <__sfmoreglue>
 800b868:	4604      	mov	r4, r0
 800b86a:	6030      	str	r0, [r6, #0]
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d1d5      	bne.n	800b81c <__sfp+0x24>
 800b870:	f7ff ff78 	bl	800b764 <__sfp_lock_release>
 800b874:	230c      	movs	r3, #12
 800b876:	603b      	str	r3, [r7, #0]
 800b878:	e7ee      	b.n	800b858 <__sfp+0x60>
 800b87a:	bf00      	nop
 800b87c:	0800bc0c 	.word	0x0800bc0c
 800b880:	ffff0001 	.word	0xffff0001

0800b884 <_fwalk_reent>:
 800b884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b888:	4606      	mov	r6, r0
 800b88a:	4688      	mov	r8, r1
 800b88c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b890:	2700      	movs	r7, #0
 800b892:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b896:	f1b9 0901 	subs.w	r9, r9, #1
 800b89a:	d505      	bpl.n	800b8a8 <_fwalk_reent+0x24>
 800b89c:	6824      	ldr	r4, [r4, #0]
 800b89e:	2c00      	cmp	r4, #0
 800b8a0:	d1f7      	bne.n	800b892 <_fwalk_reent+0xe>
 800b8a2:	4638      	mov	r0, r7
 800b8a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8a8:	89ab      	ldrh	r3, [r5, #12]
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d907      	bls.n	800b8be <_fwalk_reent+0x3a>
 800b8ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	d003      	beq.n	800b8be <_fwalk_reent+0x3a>
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	47c0      	blx	r8
 800b8bc:	4307      	orrs	r7, r0
 800b8be:	3568      	adds	r5, #104	; 0x68
 800b8c0:	e7e9      	b.n	800b896 <_fwalk_reent+0x12>

0800b8c2 <__retarget_lock_init_recursive>:
 800b8c2:	4770      	bx	lr

0800b8c4 <__retarget_lock_acquire_recursive>:
 800b8c4:	4770      	bx	lr

0800b8c6 <__retarget_lock_release_recursive>:
 800b8c6:	4770      	bx	lr

0800b8c8 <__swhatbuf_r>:
 800b8c8:	b570      	push	{r4, r5, r6, lr}
 800b8ca:	460e      	mov	r6, r1
 800b8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8d0:	2900      	cmp	r1, #0
 800b8d2:	b096      	sub	sp, #88	; 0x58
 800b8d4:	4614      	mov	r4, r2
 800b8d6:	461d      	mov	r5, r3
 800b8d8:	da07      	bge.n	800b8ea <__swhatbuf_r+0x22>
 800b8da:	2300      	movs	r3, #0
 800b8dc:	602b      	str	r3, [r5, #0]
 800b8de:	89b3      	ldrh	r3, [r6, #12]
 800b8e0:	061a      	lsls	r2, r3, #24
 800b8e2:	d410      	bmi.n	800b906 <__swhatbuf_r+0x3e>
 800b8e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8e8:	e00e      	b.n	800b908 <__swhatbuf_r+0x40>
 800b8ea:	466a      	mov	r2, sp
 800b8ec:	f000 f902 	bl	800baf4 <_fstat_r>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	dbf2      	blt.n	800b8da <__swhatbuf_r+0x12>
 800b8f4:	9a01      	ldr	r2, [sp, #4]
 800b8f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8fe:	425a      	negs	r2, r3
 800b900:	415a      	adcs	r2, r3
 800b902:	602a      	str	r2, [r5, #0]
 800b904:	e7ee      	b.n	800b8e4 <__swhatbuf_r+0x1c>
 800b906:	2340      	movs	r3, #64	; 0x40
 800b908:	2000      	movs	r0, #0
 800b90a:	6023      	str	r3, [r4, #0]
 800b90c:	b016      	add	sp, #88	; 0x58
 800b90e:	bd70      	pop	{r4, r5, r6, pc}

0800b910 <__smakebuf_r>:
 800b910:	898b      	ldrh	r3, [r1, #12]
 800b912:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b914:	079d      	lsls	r5, r3, #30
 800b916:	4606      	mov	r6, r0
 800b918:	460c      	mov	r4, r1
 800b91a:	d507      	bpl.n	800b92c <__smakebuf_r+0x1c>
 800b91c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b920:	6023      	str	r3, [r4, #0]
 800b922:	6123      	str	r3, [r4, #16]
 800b924:	2301      	movs	r3, #1
 800b926:	6163      	str	r3, [r4, #20]
 800b928:	b002      	add	sp, #8
 800b92a:	bd70      	pop	{r4, r5, r6, pc}
 800b92c:	ab01      	add	r3, sp, #4
 800b92e:	466a      	mov	r2, sp
 800b930:	f7ff ffca 	bl	800b8c8 <__swhatbuf_r>
 800b934:	9900      	ldr	r1, [sp, #0]
 800b936:	4605      	mov	r5, r0
 800b938:	4630      	mov	r0, r6
 800b93a:	f7ff f987 	bl	800ac4c <_malloc_r>
 800b93e:	b948      	cbnz	r0, 800b954 <__smakebuf_r+0x44>
 800b940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b944:	059a      	lsls	r2, r3, #22
 800b946:	d4ef      	bmi.n	800b928 <__smakebuf_r+0x18>
 800b948:	f023 0303 	bic.w	r3, r3, #3
 800b94c:	f043 0302 	orr.w	r3, r3, #2
 800b950:	81a3      	strh	r3, [r4, #12]
 800b952:	e7e3      	b.n	800b91c <__smakebuf_r+0xc>
 800b954:	4b0d      	ldr	r3, [pc, #52]	; (800b98c <__smakebuf_r+0x7c>)
 800b956:	62b3      	str	r3, [r6, #40]	; 0x28
 800b958:	89a3      	ldrh	r3, [r4, #12]
 800b95a:	6020      	str	r0, [r4, #0]
 800b95c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b960:	81a3      	strh	r3, [r4, #12]
 800b962:	9b00      	ldr	r3, [sp, #0]
 800b964:	6163      	str	r3, [r4, #20]
 800b966:	9b01      	ldr	r3, [sp, #4]
 800b968:	6120      	str	r0, [r4, #16]
 800b96a:	b15b      	cbz	r3, 800b984 <__smakebuf_r+0x74>
 800b96c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b970:	4630      	mov	r0, r6
 800b972:	f000 f8d1 	bl	800bb18 <_isatty_r>
 800b976:	b128      	cbz	r0, 800b984 <__smakebuf_r+0x74>
 800b978:	89a3      	ldrh	r3, [r4, #12]
 800b97a:	f023 0303 	bic.w	r3, r3, #3
 800b97e:	f043 0301 	orr.w	r3, r3, #1
 800b982:	81a3      	strh	r3, [r4, #12]
 800b984:	89a0      	ldrh	r0, [r4, #12]
 800b986:	4305      	orrs	r5, r0
 800b988:	81a5      	strh	r5, [r4, #12]
 800b98a:	e7cd      	b.n	800b928 <__smakebuf_r+0x18>
 800b98c:	0800b721 	.word	0x0800b721

0800b990 <_malloc_usable_size_r>:
 800b990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b994:	1f18      	subs	r0, r3, #4
 800b996:	2b00      	cmp	r3, #0
 800b998:	bfbc      	itt	lt
 800b99a:	580b      	ldrlt	r3, [r1, r0]
 800b99c:	18c0      	addlt	r0, r0, r3
 800b99e:	4770      	bx	lr

0800b9a0 <_raise_r>:
 800b9a0:	291f      	cmp	r1, #31
 800b9a2:	b538      	push	{r3, r4, r5, lr}
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	460d      	mov	r5, r1
 800b9a8:	d904      	bls.n	800b9b4 <_raise_r+0x14>
 800b9aa:	2316      	movs	r3, #22
 800b9ac:	6003      	str	r3, [r0, #0]
 800b9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b2:	bd38      	pop	{r3, r4, r5, pc}
 800b9b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b9b6:	b112      	cbz	r2, 800b9be <_raise_r+0x1e>
 800b9b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9bc:	b94b      	cbnz	r3, 800b9d2 <_raise_r+0x32>
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f000 f830 	bl	800ba24 <_getpid_r>
 800b9c4:	462a      	mov	r2, r5
 800b9c6:	4601      	mov	r1, r0
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9ce:	f000 b817 	b.w	800ba00 <_kill_r>
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d00a      	beq.n	800b9ec <_raise_r+0x4c>
 800b9d6:	1c59      	adds	r1, r3, #1
 800b9d8:	d103      	bne.n	800b9e2 <_raise_r+0x42>
 800b9da:	2316      	movs	r3, #22
 800b9dc:	6003      	str	r3, [r0, #0]
 800b9de:	2001      	movs	r0, #1
 800b9e0:	e7e7      	b.n	800b9b2 <_raise_r+0x12>
 800b9e2:	2400      	movs	r4, #0
 800b9e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	4798      	blx	r3
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	e7e0      	b.n	800b9b2 <_raise_r+0x12>

0800b9f0 <raise>:
 800b9f0:	4b02      	ldr	r3, [pc, #8]	; (800b9fc <raise+0xc>)
 800b9f2:	4601      	mov	r1, r0
 800b9f4:	6818      	ldr	r0, [r3, #0]
 800b9f6:	f7ff bfd3 	b.w	800b9a0 <_raise_r>
 800b9fa:	bf00      	nop
 800b9fc:	24000010 	.word	0x24000010

0800ba00 <_kill_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4d07      	ldr	r5, [pc, #28]	; (800ba20 <_kill_r+0x20>)
 800ba04:	2300      	movs	r3, #0
 800ba06:	4604      	mov	r4, r0
 800ba08:	4608      	mov	r0, r1
 800ba0a:	4611      	mov	r1, r2
 800ba0c:	602b      	str	r3, [r5, #0]
 800ba0e:	f7f5 fd1d 	bl	800144c <_kill>
 800ba12:	1c43      	adds	r3, r0, #1
 800ba14:	d102      	bne.n	800ba1c <_kill_r+0x1c>
 800ba16:	682b      	ldr	r3, [r5, #0]
 800ba18:	b103      	cbz	r3, 800ba1c <_kill_r+0x1c>
 800ba1a:	6023      	str	r3, [r4, #0]
 800ba1c:	bd38      	pop	{r3, r4, r5, pc}
 800ba1e:	bf00      	nop
 800ba20:	240003ac 	.word	0x240003ac

0800ba24 <_getpid_r>:
 800ba24:	f7f5 bd0a 	b.w	800143c <_getpid>

0800ba28 <__sread>:
 800ba28:	b510      	push	{r4, lr}
 800ba2a:	460c      	mov	r4, r1
 800ba2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba30:	f000 f894 	bl	800bb5c <_read_r>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	bfab      	itete	ge
 800ba38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba3a:	89a3      	ldrhlt	r3, [r4, #12]
 800ba3c:	181b      	addge	r3, r3, r0
 800ba3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba42:	bfac      	ite	ge
 800ba44:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba46:	81a3      	strhlt	r3, [r4, #12]
 800ba48:	bd10      	pop	{r4, pc}

0800ba4a <__swrite>:
 800ba4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4e:	461f      	mov	r7, r3
 800ba50:	898b      	ldrh	r3, [r1, #12]
 800ba52:	05db      	lsls	r3, r3, #23
 800ba54:	4605      	mov	r5, r0
 800ba56:	460c      	mov	r4, r1
 800ba58:	4616      	mov	r6, r2
 800ba5a:	d505      	bpl.n	800ba68 <__swrite+0x1e>
 800ba5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba60:	2302      	movs	r3, #2
 800ba62:	2200      	movs	r2, #0
 800ba64:	f000 f868 	bl	800bb38 <_lseek_r>
 800ba68:	89a3      	ldrh	r3, [r4, #12]
 800ba6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba72:	81a3      	strh	r3, [r4, #12]
 800ba74:	4632      	mov	r2, r6
 800ba76:	463b      	mov	r3, r7
 800ba78:	4628      	mov	r0, r5
 800ba7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba7e:	f000 b817 	b.w	800bab0 <_write_r>

0800ba82 <__sseek>:
 800ba82:	b510      	push	{r4, lr}
 800ba84:	460c      	mov	r4, r1
 800ba86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba8a:	f000 f855 	bl	800bb38 <_lseek_r>
 800ba8e:	1c43      	adds	r3, r0, #1
 800ba90:	89a3      	ldrh	r3, [r4, #12]
 800ba92:	bf15      	itete	ne
 800ba94:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba9e:	81a3      	strheq	r3, [r4, #12]
 800baa0:	bf18      	it	ne
 800baa2:	81a3      	strhne	r3, [r4, #12]
 800baa4:	bd10      	pop	{r4, pc}

0800baa6 <__sclose>:
 800baa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baaa:	f000 b813 	b.w	800bad4 <_close_r>
	...

0800bab0 <_write_r>:
 800bab0:	b538      	push	{r3, r4, r5, lr}
 800bab2:	4d07      	ldr	r5, [pc, #28]	; (800bad0 <_write_r+0x20>)
 800bab4:	4604      	mov	r4, r0
 800bab6:	4608      	mov	r0, r1
 800bab8:	4611      	mov	r1, r2
 800baba:	2200      	movs	r2, #0
 800babc:	602a      	str	r2, [r5, #0]
 800babe:	461a      	mov	r2, r3
 800bac0:	f7f5 fcfb 	bl	80014ba <_write>
 800bac4:	1c43      	adds	r3, r0, #1
 800bac6:	d102      	bne.n	800bace <_write_r+0x1e>
 800bac8:	682b      	ldr	r3, [r5, #0]
 800baca:	b103      	cbz	r3, 800bace <_write_r+0x1e>
 800bacc:	6023      	str	r3, [r4, #0]
 800bace:	bd38      	pop	{r3, r4, r5, pc}
 800bad0:	240003ac 	.word	0x240003ac

0800bad4 <_close_r>:
 800bad4:	b538      	push	{r3, r4, r5, lr}
 800bad6:	4d06      	ldr	r5, [pc, #24]	; (800baf0 <_close_r+0x1c>)
 800bad8:	2300      	movs	r3, #0
 800bada:	4604      	mov	r4, r0
 800badc:	4608      	mov	r0, r1
 800bade:	602b      	str	r3, [r5, #0]
 800bae0:	f7f5 fd07 	bl	80014f2 <_close>
 800bae4:	1c43      	adds	r3, r0, #1
 800bae6:	d102      	bne.n	800baee <_close_r+0x1a>
 800bae8:	682b      	ldr	r3, [r5, #0]
 800baea:	b103      	cbz	r3, 800baee <_close_r+0x1a>
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	bd38      	pop	{r3, r4, r5, pc}
 800baf0:	240003ac 	.word	0x240003ac

0800baf4 <_fstat_r>:
 800baf4:	b538      	push	{r3, r4, r5, lr}
 800baf6:	4d07      	ldr	r5, [pc, #28]	; (800bb14 <_fstat_r+0x20>)
 800baf8:	2300      	movs	r3, #0
 800bafa:	4604      	mov	r4, r0
 800bafc:	4608      	mov	r0, r1
 800bafe:	4611      	mov	r1, r2
 800bb00:	602b      	str	r3, [r5, #0]
 800bb02:	f7f5 fd02 	bl	800150a <_fstat>
 800bb06:	1c43      	adds	r3, r0, #1
 800bb08:	d102      	bne.n	800bb10 <_fstat_r+0x1c>
 800bb0a:	682b      	ldr	r3, [r5, #0]
 800bb0c:	b103      	cbz	r3, 800bb10 <_fstat_r+0x1c>
 800bb0e:	6023      	str	r3, [r4, #0]
 800bb10:	bd38      	pop	{r3, r4, r5, pc}
 800bb12:	bf00      	nop
 800bb14:	240003ac 	.word	0x240003ac

0800bb18 <_isatty_r>:
 800bb18:	b538      	push	{r3, r4, r5, lr}
 800bb1a:	4d06      	ldr	r5, [pc, #24]	; (800bb34 <_isatty_r+0x1c>)
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	4604      	mov	r4, r0
 800bb20:	4608      	mov	r0, r1
 800bb22:	602b      	str	r3, [r5, #0]
 800bb24:	f7f5 fd01 	bl	800152a <_isatty>
 800bb28:	1c43      	adds	r3, r0, #1
 800bb2a:	d102      	bne.n	800bb32 <_isatty_r+0x1a>
 800bb2c:	682b      	ldr	r3, [r5, #0]
 800bb2e:	b103      	cbz	r3, 800bb32 <_isatty_r+0x1a>
 800bb30:	6023      	str	r3, [r4, #0]
 800bb32:	bd38      	pop	{r3, r4, r5, pc}
 800bb34:	240003ac 	.word	0x240003ac

0800bb38 <_lseek_r>:
 800bb38:	b538      	push	{r3, r4, r5, lr}
 800bb3a:	4d07      	ldr	r5, [pc, #28]	; (800bb58 <_lseek_r+0x20>)
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	4608      	mov	r0, r1
 800bb40:	4611      	mov	r1, r2
 800bb42:	2200      	movs	r2, #0
 800bb44:	602a      	str	r2, [r5, #0]
 800bb46:	461a      	mov	r2, r3
 800bb48:	f7f5 fcfa 	bl	8001540 <_lseek>
 800bb4c:	1c43      	adds	r3, r0, #1
 800bb4e:	d102      	bne.n	800bb56 <_lseek_r+0x1e>
 800bb50:	682b      	ldr	r3, [r5, #0]
 800bb52:	b103      	cbz	r3, 800bb56 <_lseek_r+0x1e>
 800bb54:	6023      	str	r3, [r4, #0]
 800bb56:	bd38      	pop	{r3, r4, r5, pc}
 800bb58:	240003ac 	.word	0x240003ac

0800bb5c <_read_r>:
 800bb5c:	b538      	push	{r3, r4, r5, lr}
 800bb5e:	4d07      	ldr	r5, [pc, #28]	; (800bb7c <_read_r+0x20>)
 800bb60:	4604      	mov	r4, r0
 800bb62:	4608      	mov	r0, r1
 800bb64:	4611      	mov	r1, r2
 800bb66:	2200      	movs	r2, #0
 800bb68:	602a      	str	r2, [r5, #0]
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	f7f5 fc88 	bl	8001480 <_read>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d102      	bne.n	800bb7a <_read_r+0x1e>
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	b103      	cbz	r3, 800bb7a <_read_r+0x1e>
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	bd38      	pop	{r3, r4, r5, pc}
 800bb7c:	240003ac 	.word	0x240003ac

0800bb80 <_init>:
 800bb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb82:	bf00      	nop
 800bb84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb86:	bc08      	pop	{r3}
 800bb88:	469e      	mov	lr, r3
 800bb8a:	4770      	bx	lr

0800bb8c <_fini>:
 800bb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb8e:	bf00      	nop
 800bb90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb92:	bc08      	pop	{r3}
 800bb94:	469e      	mov	lr, r3
 800bb96:	4770      	bx	lr
