
NUCLEO_H745_CAPACTIVE_SOIL_MOISTURE_SENSOR_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aac0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800ad60  0800ad60  0001ad60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1b4  0800b1b4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b1b4  0800b1b4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b1b4  0800b1b4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1b4  0800b1b4  0001b1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1b8  0800b1b8  0001b1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800b1bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  240001e0  0800b39c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240003b8  0800b39c  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000224ba  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003705  00000000  00000000  000426c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00045dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  00047148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c3d9  00000000  00000000  00048388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017fd1  00000000  00000000  00084761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00191c3d  00000000  00000000  0009c732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022e36f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061ec  00000000  00000000  0022e3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ad48 	.word	0x0800ad48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800ad48 	.word	0x0800ad48

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b3f      	ldr	r3, [pc, #252]	; (8000494 <SystemInit+0x104>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800039a:	4a3e      	ldr	r2, [pc, #248]	; (8000494 <SystemInit+0x104>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b3b      	ldr	r3, [pc, #236]	; (8000494 <SystemInit+0x104>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a3a      	ldr	r2, [pc, #232]	; (8000494 <SystemInit+0x104>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b39      	ldr	r3, [pc, #228]	; (8000498 <SystemInit+0x108>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b36      	ldr	r3, [pc, #216]	; (8000498 <SystemInit+0x108>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a34      	ldr	r2, [pc, #208]	; (8000498 <SystemInit+0x108>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b33      	ldr	r3, [pc, #204]	; (800049c <SystemInit+0x10c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a32      	ldr	r2, [pc, #200]	; (800049c <SystemInit+0x10c>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b30      	ldr	r3, [pc, #192]	; (800049c <SystemInit+0x10c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b2f      	ldr	r3, [pc, #188]	; (800049c <SystemInit+0x10c>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	492e      	ldr	r1, [pc, #184]	; (800049c <SystemInit+0x10c>)
 80003e4:	4b2e      	ldr	r3, [pc, #184]	; (80004a0 <SystemInit+0x110>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b2b      	ldr	r3, [pc, #172]	; (8000498 <SystemInit+0x108>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b28      	ldr	r3, [pc, #160]	; (8000498 <SystemInit+0x108>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a26      	ldr	r2, [pc, #152]	; (8000498 <SystemInit+0x108>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b25      	ldr	r3, [pc, #148]	; (800049c <SystemInit+0x10c>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b23      	ldr	r3, [pc, #140]	; (800049c <SystemInit+0x10c>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b22      	ldr	r3, [pc, #136]	; (800049c <SystemInit+0x10c>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b20      	ldr	r3, [pc, #128]	; (800049c <SystemInit+0x10c>)
 800041a:	4a22      	ldr	r2, [pc, #136]	; (80004a4 <SystemInit+0x114>)
 800041c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b1f      	ldr	r3, [pc, #124]	; (800049c <SystemInit+0x10c>)
 8000420:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <SystemInit+0x118>)
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b1d      	ldr	r3, [pc, #116]	; (800049c <SystemInit+0x10c>)
 8000426:	4a21      	ldr	r2, [pc, #132]	; (80004ac <SystemInit+0x11c>)
 8000428:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b1c      	ldr	r3, [pc, #112]	; (800049c <SystemInit+0x10c>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b1a      	ldr	r3, [pc, #104]	; (800049c <SystemInit+0x10c>)
 8000432:	4a1e      	ldr	r2, [pc, #120]	; (80004ac <SystemInit+0x11c>)
 8000434:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <SystemInit+0x10c>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b17      	ldr	r3, [pc, #92]	; (800049c <SystemInit+0x10c>)
 800043e:	4a1b      	ldr	r2, [pc, #108]	; (80004ac <SystemInit+0x11c>)
 8000440:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b16      	ldr	r3, [pc, #88]	; (800049c <SystemInit+0x10c>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <SystemInit+0x10c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a13      	ldr	r2, [pc, #76]	; (800049c <SystemInit+0x10c>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b11      	ldr	r3, [pc, #68]	; (800049c <SystemInit+0x10c>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <SystemInit+0x120>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800045e:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <SystemInit+0x120>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000464:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <SystemInit+0x124>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <SystemInit+0x128>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <SystemInit+0x12c>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <SystemInit+0x130>)
 800047c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000480:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <SystemInit+0x104>)
 8000484:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000488:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	e000ed00 	.word	0xe000ed00
 8000498:	52002000 	.word	0x52002000
 800049c:	58024400 	.word	0x58024400
 80004a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80004a4:	02020200 	.word	0x02020200
 80004a8:	01ff0000 	.word	0x01ff0000
 80004ac:	01010280 	.word	0x01010280
 80004b0:	580000c0 	.word	0x580000c0
 80004b4:	5c001000 	.word	0x5c001000
 80004b8:	ffff0000 	.word	0xffff0000
 80004bc:	51008108 	.word	0x51008108
 80004c0:	52004000 	.word	0x52004000

080004c4 <us_delay>:
//define the timer handler below
#define timer2 htim2

extern TIM_HandleTypeDef timer2;
void us_delay (uint16_t us)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer2, 0);		//clear timer
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <us_delay+0x30>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2200      	movs	r2, #0
 80004d4:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&timer2);			//start timer
 80004d6:	4807      	ldr	r0, [pc, #28]	; (80004f4 <us_delay+0x30>)
 80004d8:	f007 fadc 	bl	8007a94 <HAL_TIM_Base_Start_IT>
	while (__HAL_TIM_GET_COUNTER(&timer2) < us);
 80004dc:	bf00      	nop
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <us_delay+0x30>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	d3f9      	bcc.n	80004de <us_delay+0x1a>
}
 80004ea:	bf00      	nop
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	24000358 	.word	0x24000358

080004f8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000514:	887b      	ldrh	r3, [r7, #2]
 8000516:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4619      	mov	r1, r3
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f003 ff2a 	bl	8004380 <HAL_GPIO_Init>
}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000550:	887b      	ldrh	r3, [r7, #2]
 8000552:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	4619      	mov	r1, r3
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f003 ff0c 	bl	8004380 <HAL_GPIO_Init>
}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <DHT11_Start>:

void DHT11_Start (void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  		// set the pin as output
 8000574:	2101      	movs	r1, #1
 8000576:	480a      	ldr	r0, [pc, #40]	; (80005a0 <DHT11_Start+0x30>)
 8000578:	f7ff ffdc 	bl	8000534 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 800057c:	2200      	movs	r2, #0
 800057e:	2101      	movs	r1, #1
 8000580:	4807      	ldr	r0, [pc, #28]	; (80005a0 <DHT11_Start+0x30>)
 8000582:	f004 f8c5 	bl	8004710 <HAL_GPIO_WritePin>
	us_delay(18000);   								// wait for 18ms
 8000586:	f244 6050 	movw	r0, #18000	; 0x4650
 800058a:	f7ff ff9b 	bl	80004c4 <us_delay>
	//HAL_Delay(2000);
    //HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
	//two_half_us_delay(13);   								// wait for 30us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    		// set as input
 800058e:	2101      	movs	r1, #1
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <DHT11_Start+0x30>)
 8000592:	f7ff ffb1 	bl	80004f8 <Set_Pin_Input>
	us_delay(30);   								// wait for 30us
 8000596:	201e      	movs	r0, #30
 8000598:	f7ff ff94 	bl	80004c4 <us_delay>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	58020c00 	.word	0x58020c00

080005a4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	71bb      	strb	r3, [r7, #6]
 80005ae:	e037      	b.n	8000620 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   	// wait for the pin to go high
 80005b0:	bf00      	nop
 80005b2:	2101      	movs	r1, #1
 80005b4:	481e      	ldr	r0, [pc, #120]	; (8000630 <DHT11_Read+0x8c>)
 80005b6:	f004 f893 	bl	80046e0 <HAL_GPIO_ReadPin>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0f8      	beq.n	80005b2 <DHT11_Read+0xe>
		us_delay(40);   										// wait for 40 us
 80005c0:	2028      	movs	r0, #40	; 0x28
 80005c2:	f7ff ff7f 	bl	80004c4 <us_delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   		// if the pin is low
 80005c6:	2101      	movs	r1, #1
 80005c8:	4819      	ldr	r0, [pc, #100]	; (8000630 <DHT11_Read+0x8c>)
 80005ca:	f004 f889 	bl	80046e0 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d10e      	bne.n	80005f2 <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   									// write 0
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	f1c3 0307 	rsb	r3, r3, #7
 80005da:	2201      	movs	r2, #1
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	43db      	mvns	r3, r3
 80005e4:	b25a      	sxtb	r2, r3
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	4013      	ands	r3, r2
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	e00b      	b.n	800060a <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  									// if the pin is high, write 1
 80005f2:	79bb      	ldrb	r3, [r7, #6]
 80005f4:	f1c3 0307 	rsb	r3, r3, #7
 80005f8:	2201      	movs	r2, #1
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	b25a      	sxtb	r2, r3
 8000600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000604:	4313      	orrs	r3, r2
 8000606:	b25b      	sxtb	r3, r3
 8000608:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  	// wait for the pin to go low
 800060a:	bf00      	nop
 800060c:	2101      	movs	r1, #1
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <DHT11_Read+0x8c>)
 8000610:	f004 f866 	bl	80046e0 <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f8      	bne.n	800060c <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	3301      	adds	r3, #1
 800061e:	71bb      	strb	r3, [r7, #6]
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	2b07      	cmp	r3, #7
 8000624:	d9c4      	bls.n	80005b0 <DHT11_Read+0xc>
	}
	return i;
 8000626:	79fb      	ldrb	r3, [r7, #7]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	58020c00 	.word	0x58020c00

08000634 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	71fb      	strb	r3, [r7, #7]
	us_delay(40);				//wait 40 us
 800063e:	2028      	movs	r0, #40	; 0x28
 8000640:	f7ff ff40 	bl	80004c4 <us_delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000644:	2101      	movs	r1, #1
 8000646:	4811      	ldr	r0, [pc, #68]	; (800068c <DHT11_Check_Response+0x58>)
 8000648:	f004 f84a 	bl	80046e0 <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d10e      	bne.n	8000670 <DHT11_Check_Response+0x3c>
	{
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //Debugging LED
		us_delay(80);				//wait 80 us
 8000652:	2050      	movs	r0, #80	; 0x50
 8000654:	f7ff ff36 	bl	80004c4 <us_delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000658:	2101      	movs	r1, #1
 800065a:	480c      	ldr	r0, [pc, #48]	; (800068c <DHT11_Check_Response+0x58>)
 800065c:	f004 f840 	bl	80046e0 <HAL_GPIO_ReadPin>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d002      	beq.n	800066c <DHT11_Check_Response+0x38>
 8000666:	2301      	movs	r3, #1
 8000668:	71fb      	strb	r3, [r7, #7]
 800066a:	e001      	b.n	8000670 <DHT11_Check_Response+0x3c>
		else Response = -1; // 255
 800066c:	23ff      	movs	r3, #255	; 0xff
 800066e:	71fb      	strb	r3, [r7, #7]
	}
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8000670:	bf00      	nop
 8000672:	2101      	movs	r1, #1
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <DHT11_Check_Response+0x58>)
 8000676:	f004 f833 	bl	80046e0 <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1f8      	bne.n	8000672 <DHT11_Check_Response+0x3e>

	return Response;
 8000680:	79fb      	ldrb	r3, [r7, #7]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	58020c00 	.word	0x58020c00

08000690 <poll_DHT11>:

void poll_DHT11(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	DHT11_Start();
 8000694:	f7ff ff6c 	bl	8000570 <DHT11_Start>
	Presence = DHT11_Check_Response();
 8000698:	f7ff ffcc 	bl	8000634 <DHT11_Check_Response>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	4b37      	ldr	r3, [pc, #220]	; (8000780 <poll_DHT11+0xf0>)
 80006a2:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
	Rh_byte1 = DHT11_Read ();
 80006a4:	f7ff ff7e 	bl	80005a4 <DHT11_Read>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b35      	ldr	r3, [pc, #212]	; (8000784 <poll_DHT11+0xf4>)
 80006ae:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read ();
 80006b0:	f7ff ff78 	bl	80005a4 <DHT11_Read>
 80006b4:	4603      	mov	r3, r0
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b33      	ldr	r3, [pc, #204]	; (8000788 <poll_DHT11+0xf8>)
 80006ba:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read ();
 80006bc:	f7ff ff72 	bl	80005a4 <DHT11_Read>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b31      	ldr	r3, [pc, #196]	; (800078c <poll_DHT11+0xfc>)
 80006c6:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read ();
 80006c8:	f7ff ff6c 	bl	80005a4 <DHT11_Read>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <poll_DHT11+0x100>)
 80006d2:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 80006d4:	f7ff ff66 	bl	80005a4 <DHT11_Read>
 80006d8:	4603      	mov	r3, r0
 80006da:	ee07 3a90 	vmov	s15, r3
 80006de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006e2:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <poll_DHT11+0x104>)
 80006e4:	edc3 7a00 	vstr	s15, [r3]

	TEMP = (float) (Temp_byte2);
 80006e8:	4b29      	ldr	r3, [pc, #164]	; (8000790 <poll_DHT11+0x100>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	ee07 3a90 	vmov	s15, r3
 80006f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006f4:	4b28      	ldr	r3, [pc, #160]	; (8000798 <poll_DHT11+0x108>)
 80006f6:	edc3 7a00 	vstr	s15, [r3]
	TEMP /= 10.0;
 80006fa:	4b27      	ldr	r3, [pc, #156]	; (8000798 <poll_DHT11+0x108>)
 80006fc:	ed93 7a00 	vldr	s14, [r3]
 8000700:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <poll_DHT11+0x108>)
 800070a:	edc3 7a00 	vstr	s15, [r3]
	TEMP += Temp_byte1;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <poll_DHT11+0xfc>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	ee07 3a90 	vmov	s15, r3
 8000716:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <poll_DHT11+0x108>)
 800071c:	edd3 7a00 	vldr	s15, [r3]
 8000720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <poll_DHT11+0x108>)
 8000726:	edc3 7a00 	vstr	s15, [r3]

	RH = (float) (Rh_byte2);
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <poll_DHT11+0xf8>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	ee07 3a90 	vmov	s15, r3
 8000732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <poll_DHT11+0x10c>)
 8000738:	edc3 7a00 	vstr	s15, [r3]
	RH /= 10.0;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <poll_DHT11+0x10c>)
 800073e:	ed93 7a00 	vldr	s14, [r3]
 8000742:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000746:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <poll_DHT11+0x10c>)
 800074c:	edc3 7a00 	vstr	s15, [r3]
	RH += Rh_byte1;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <poll_DHT11+0xf4>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	ee07 3a90 	vmov	s15, r3
 8000758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <poll_DHT11+0x10c>)
 800075e:	edd3 7a00 	vldr	s15, [r3]
 8000762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <poll_DHT11+0x10c>)
 8000768:	edc3 7a00 	vstr	s15, [r3]

	Temperature = (float) (TEMP);
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <poll_DHT11+0x108>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <poll_DHT11+0x110>)
 8000772:	6013      	str	r3, [r2, #0]
	Humidity = (float) (RH);
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <poll_DHT11+0x10c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <poll_DHT11+0x114>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	240001fc 	.word	0x240001fc
 8000784:	24000210 	.word	0x24000210
 8000788:	2400021d 	.word	0x2400021d
 800078c:	2400021c 	.word	0x2400021c
 8000790:	24000228 	.word	0x24000228
 8000794:	24000220 	.word	0x24000220
 8000798:	24000218 	.word	0x24000218
 800079c:	24000214 	.word	0x24000214
 80007a0:	2400020c 	.word	0x2400020c
 80007a4:	24000224 	.word	0x24000224

080007a8 <Display_Temp_Rh>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Display_Temp_Rh(float Temp, float Rh)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80007b2:	edc7 0a00 	vstr	s1, [r7]
	char str_temp[15] = {0},
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	f8c3 2007 	str.w	r2, [r3, #7]
			str_Rh[15] = {0};
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	f8c3 2007 	str.w	r2, [r3, #7]
	//lcd_clear();
	lcd_put_cur(0, 0);
 80007da:	2100      	movs	r1, #0
 80007dc:	2000      	movs	r0, #0
 80007de:	f000 fbdf 	bl	8000fa0 <lcd_put_cur>

	sprintf (str_temp, "TEMP: %.1f", Temp);
 80007e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80007e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007ea:	f107 0018 	add.w	r0, r7, #24
 80007ee:	ec53 2b17 	vmov	r2, r3, d7
 80007f2:	4913      	ldr	r1, [pc, #76]	; (8000840 <Display_Temp_Rh+0x98>)
 80007f4:	f008 f8e6 	bl	80089c4 <siprintf>
	sprintf (str_Rh, "RH: %.0f", Rh);
 80007f8:	edd7 7a00 	vldr	s15, [r7]
 80007fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000800:	f107 0008 	add.w	r0, r7, #8
 8000804:	ec53 2b17 	vmov	r2, r3, d7
 8000808:	490e      	ldr	r1, [pc, #56]	; (8000844 <Display_Temp_Rh+0x9c>)
 800080a:	f008 f8db 	bl	80089c4 <siprintf>
	lcd_send_string(str_temp);
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fc33 	bl	800107e <lcd_send_string>
	lcd_send_data('C');
 8000818:	2043      	movs	r0, #67	; 0x43
 800081a:	f000 fb9a 	bl	8000f52 <lcd_send_data>
	lcd_put_cur(1, 0);
 800081e:	2100      	movs	r1, #0
 8000820:	2001      	movs	r0, #1
 8000822:	f000 fbbd 	bl	8000fa0 <lcd_put_cur>
	lcd_send_string(str_Rh);
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fc27 	bl	800107e <lcd_send_string>
	lcd_send_data('%');
 8000830:	2025      	movs	r0, #37	; 0x25
 8000832:	f000 fb8e 	bl	8000f52 <lcd_send_data>
}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	0800ad60 	.word	0x0800ad60
 8000844:	0800ad6c 	.word	0x0800ad6c

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800084e:	4b55      	ldr	r3, [pc, #340]	; (80009a4 <main+0x15c>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d11b      	bne.n	8000892 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800085a:	f3bf 8f4f 	dsb	sy
}
 800085e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000860:	f3bf 8f6f 	isb	sy
}
 8000864:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000866:	4b4f      	ldr	r3, [pc, #316]	; (80009a4 <main+0x15c>)
 8000868:	2200      	movs	r2, #0
 800086a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800086e:	f3bf 8f4f 	dsb	sy
}
 8000872:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000874:	f3bf 8f6f 	isb	sy
}
 8000878:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800087a:	4b4a      	ldr	r3, [pc, #296]	; (80009a4 <main+0x15c>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	4a49      	ldr	r2, [pc, #292]	; (80009a4 <main+0x15c>)
 8000880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000884:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000886:	f3bf 8f4f 	dsb	sy
}
 800088a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800088c:	f3bf 8f6f 	isb	sy
}
 8000890:	e000      	b.n	8000894 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000892:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000894:	4b43      	ldr	r3, [pc, #268]	; (80009a4 <main+0x15c>)
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800089c:	2b00      	cmp	r3, #0
 800089e:	d138      	bne.n	8000912 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008a0:	4b40      	ldr	r3, [pc, #256]	; (80009a4 <main+0x15c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008a8:	f3bf 8f4f 	dsb	sy
}
 80008ac:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008ae:	4b3d      	ldr	r3, [pc, #244]	; (80009a4 <main+0x15c>)
 80008b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008b4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	0b5b      	lsrs	r3, r3, #13
 80008ba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008be:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008c8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	015a      	lsls	r2, r3, #5
 80008ce:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008d2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d8:	4932      	ldr	r1, [pc, #200]	; (80009a4 <main+0x15c>)
 80008da:	4313      	orrs	r3, r2
 80008dc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	1e5a      	subs	r2, r3, #1
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1ef      	bne.n	80008ca <main+0x82>
    } while(sets-- != 0U);
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1e5a      	subs	r2, r3, #1
 80008ee:	60ba      	str	r2, [r7, #8]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1e5      	bne.n	80008c0 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80008f4:	f3bf 8f4f 	dsb	sy
}
 80008f8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <main+0x15c>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a29      	ldr	r2, [pc, #164]	; (80009a4 <main+0x15c>)
 8000900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000904:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000906:	f3bf 8f4f 	dsb	sy
}
 800090a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800090c:	f3bf 8f6f 	isb	sy
}
 8000910:	e000      	b.n	8000914 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000912:	bf00      	nop
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000914:	f000 fe16 	bl	8001544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000918:	f000 f850 	bl	80009bc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800091c:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <main+0x160>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000922:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <main+0x160>)
 8000924:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092c:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <main+0x160>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093a:	f000 f9ff 	bl	8000d3c <MX_GPIO_Init>
  MX_TIM1_Init();
 800093e:	f000 f93b 	bl	8000bb8 <MX_TIM1_Init>
  MX_DMA_Init();
 8000942:	f000 f9db 	bl	8000cfc <MX_DMA_Init>
  MX_ADC1_Init();
 8000946:	f000 f8af 	bl	8000aa8 <MX_ADC1_Init>
  MX_TIM2_Init();
 800094a:	f000 f989 	bl	8000c60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */



  nhd_LCD_Init();
 800094e:	f000 fb59 	bl	8001004 <nhd_LCD_Init>
  lcd_put_cur(0,1);
 8000952:	2101      	movs	r1, #1
 8000954:	2000      	movs	r0, #0
 8000956:	f000 fb23 	bl	8000fa0 <lcd_put_cur>
  lcd_send_string("hiiiii there");				//LCD splashscreen
 800095a:	4814      	ldr	r0, [pc, #80]	; (80009ac <main+0x164>)
 800095c:	f000 fb8f 	bl	800107e <lcd_send_string>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   	// pull the pin high
 8000960:	2201      	movs	r2, #1
 8000962:	2101      	movs	r1, #1
 8000964:	4812      	ldr	r0, [pc, #72]	; (80009b0 <main+0x168>)
 8000966:	f003 fed3 	bl	8004710 <HAL_GPIO_WritePin>
  HAL_Delay(1000);				//wait 1 second
 800096a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096e:	f000 fe7b 	bl	8001668 <HAL_Delay>
  while(1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lcd_clear();
 8000972:	f000 fb0b 	bl	8000f8c <lcd_clear>
	  poll_DHT11();
 8000976:	f7ff fe8b 	bl	8000690 <poll_DHT11>
	  Display_Temp_Rh(Temperature,Humidity);
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <main+0x16c>)
 800097c:	edd3 7a00 	vldr	s15, [r3]
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <main+0x170>)
 8000982:	ed93 7a00 	vldr	s14, [r3]
 8000986:	eef0 0a47 	vmov.f32	s1, s14
 800098a:	eeb0 0a67 	vmov.f32	s0, s15
 800098e:	f7ff ff0b 	bl	80007a8 <Display_Temp_Rh>
	  //Display_Rh(Humidity);
	  HAL_Delay(2000);			//display temp data for 4 seconds
 8000992:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000996:	f000 fe67 	bl	8001668 <HAL_Delay>
//	  lcd_clear();
//	  poll_SOIL_SENSOR();
//	  Display_Soil_Moisture(SoilSensor[0],SoilSensor[1]);
	  HAL_Delay(2000);			//display  soil data for 4 seconds
 800099a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800099e:	f000 fe63 	bl	8001668 <HAL_Delay>
	  lcd_clear();
 80009a2:	e7e6      	b.n	8000972 <main+0x12a>
 80009a4:	e000ed00 	.word	0xe000ed00
 80009a8:	58024400 	.word	0x58024400
 80009ac:	0800adac 	.word	0x0800adac
 80009b0:	58020c00 	.word	0x58020c00
 80009b4:	2400020c 	.word	0x2400020c
 80009b8:	24000224 	.word	0x24000224

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b09c      	sub	sp, #112	; 0x70
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c6:	224c      	movs	r2, #76	; 0x4c
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f007 fbb0 	bl	8008130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2220      	movs	r2, #32
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f007 fbaa 	bl	8008130 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009dc:	2004      	movs	r0, #4
 80009de:	f003 feb1 	bl	8004744 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <SystemClock_Config+0xe0>)
 80009e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ea:	4a2c      	ldr	r2, [pc, #176]	; (8000a9c <SystemClock_Config+0xe0>)
 80009ec:	f023 0301 	bic.w	r3, r3, #1
 80009f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009f2:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <SystemClock_Config+0xe0>)
 80009f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <SystemClock_Config+0xe4>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a04:	4a26      	ldr	r2, [pc, #152]	; (8000aa0 <SystemClock_Config+0xe4>)
 8000a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <SystemClock_Config+0xe4>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a18:	bf00      	nop
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <SystemClock_Config+0xe4>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a26:	d1f8      	bne.n	8000a1a <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <SystemClock_Config+0xe8>)
 8000a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a2c:	4a1d      	ldr	r2, [pc, #116]	; (8000aa4 <SystemClock_Config+0xe8>)
 8000a2e:	f023 0303 	bic.w	r3, r3, #3
 8000a32:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a34:	2302      	movs	r3, #2
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3c:	2340      	movs	r3, #64	; 0x40
 8000a3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a44:	2300      	movs	r3, #0
 8000a46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f003 fed3 	bl	80047f8 <HAL_RCC_OscConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000a58:	f000 f9fe 	bl	8000e58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5c:	233f      	movs	r3, #63	; 0x3f
 8000a5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a6c:	2340      	movs	r3, #64	; 0x40
 8000a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a70:	2340      	movs	r3, #64	; 0x40
 8000a72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a7a:	2340      	movs	r3, #64	; 0x40
 8000a7c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f004 fac8 	bl	8005018 <HAL_RCC_ClockConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000a8e:	f000 f9e3 	bl	8000e58 <Error_Handler>
  }
}
 8000a92:	bf00      	nop
 8000a94:	3770      	adds	r7, #112	; 0x70
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	58000400 	.word	0x58000400
 8000aa0:	58024800 	.word	0x58024800
 8000aa4:	58024400 	.word	0x58024400

08000aa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aba:	463b      	mov	r3, r7
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
 8000ac8:	615a      	str	r2, [r3, #20]
 8000aca:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000acc:	4b36      	ldr	r3, [pc, #216]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000ace:	4a37      	ldr	r2, [pc, #220]	; (8000bac <MX_ADC1_Init+0x104>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ad2:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000ad8:	4b33      	ldr	r3, [pc, #204]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ade:	4b32      	ldr	r3, [pc, #200]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae4:	4b30      	ldr	r3, [pc, #192]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aea:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000af0:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000af6:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000af8:	2202      	movs	r2, #2
 8000afa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000afc:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b08:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b0e:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b14:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b1a:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b20:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b28:	481f      	ldr	r0, [pc, #124]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000b2a:	f000 ff59 	bl	80019e0 <HAL_ADC_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b34:	f000 f990 	bl	8000e58 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	4819      	ldr	r0, [pc, #100]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000b44:	f001 fd6c 	bl	8002620 <HAL_ADCEx_MultiModeConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000b4e:	f000 f983 	bl	8000e58 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_ADC1_Init+0x108>)
 8000b54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b56:	2306      	movs	r3, #6
 8000b58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b5e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b62:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b64:	2304      	movs	r3, #4
 8000b66:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b70:	463b      	mov	r3, r7
 8000b72:	4619      	mov	r1, r3
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000b76:	f001 f8d3 	bl	8001d20 <HAL_ADC_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000b80:	f000 f96a 	bl	8000e58 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_ADC1_Init+0x10c>)
 8000b86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b88:	230c      	movs	r3, #12
 8000b8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_ADC1_Init+0x100>)
 8000b92:	f001 f8c5 	bl	8001d20 <HAL_ADC_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000b9c:	f000 f95c 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2400022c 	.word	0x2400022c
 8000bac:	40022000 	.word	0x40022000
 8000bb0:	0c900008 	.word	0x0c900008
 8000bb4:	14f00020 	.word	0x14f00020

08000bb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <MX_TIM1_Init+0xa0>)
 8000bd8:	4a20      	ldr	r2, [pc, #128]	; (8000c5c <MX_TIM1_Init+0xa4>)
 8000bda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <MX_TIM1_Init+0xa0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be2:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <MX_TIM1_Init+0xa0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <MX_TIM1_Init+0xa0>)
 8000bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_TIM1_Init+0xa0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <MX_TIM1_Init+0xa0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_TIM1_Init+0xa0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c02:	4815      	ldr	r0, [pc, #84]	; (8000c58 <MX_TIM1_Init+0xa0>)
 8000c04:	f006 feee 	bl	80079e4 <HAL_TIM_Base_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c0e:	f000 f923 	bl	8000e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480e      	ldr	r0, [pc, #56]	; (8000c58 <MX_TIM1_Init+0xa0>)
 8000c20:	f006 ffa8 	bl	8007b74 <HAL_TIM_ConfigClockSource>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c2a:	f000 f915 	bl	8000e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <MX_TIM1_Init+0xa0>)
 8000c40:	f007 f9c4 	bl	8007fcc <HAL_TIMEx_MasterConfigSynchronization>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c4a:	f000 f905 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	3720      	adds	r7, #32
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	24000308 	.word	0x24000308
 8000c5c:	40010000 	.word	0x40010000

08000c60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <MX_TIM2_Init+0x98>)
 8000c80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <MX_TIM2_Init+0x98>)
 8000c88:	221f      	movs	r2, #31
 8000c8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_TIM2_Init+0x98>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967296-1;
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_TIM2_Init+0x98>)
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_TIM2_Init+0x98>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_TIM2_Init+0x98>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ca6:	4814      	ldr	r0, [pc, #80]	; (8000cf8 <MX_TIM2_Init+0x98>)
 8000ca8:	f006 fe9c 	bl	80079e4 <HAL_TIM_Base_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000cb2:	f000 f8d1 	bl	8000e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <MX_TIM2_Init+0x98>)
 8000cc4:	f006 ff56 	bl	8007b74 <HAL_TIM_ConfigClockSource>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cce:	f000 f8c3 	bl	8000e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <MX_TIM2_Init+0x98>)
 8000ce0:	f007 f974 	bl	8007fcc <HAL_TIMEx_MasterConfigSynchronization>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cea:	f000 f8b5 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	3720      	adds	r7, #32
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	24000358 	.word	0x24000358

08000cfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <MX_DMA_Init+0x3c>)
 8000d04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <MX_DMA_Init+0x3c>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_DMA_Init+0x3c>)
 8000d14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	200b      	movs	r0, #11
 8000d26:	f001 fe34 	bl	8002992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d2a:	200b      	movs	r0, #11
 8000d2c:	f001 fe4b 	bl	80029c6 <HAL_NVIC_EnableIRQ>

}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	58024400 	.word	0x58024400

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <MX_GPIO_Init+0x10c>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d58:	4a3b      	ldr	r2, [pc, #236]	; (8000e48 <MX_GPIO_Init+0x10c>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d62:	4b39      	ldr	r3, [pc, #228]	; (8000e48 <MX_GPIO_Init+0x10c>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d70:	4b35      	ldr	r3, [pc, #212]	; (8000e48 <MX_GPIO_Init+0x10c>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d76:	4a34      	ldr	r2, [pc, #208]	; (8000e48 <MX_GPIO_Init+0x10c>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d80:	4b31      	ldr	r3, [pc, #196]	; (8000e48 <MX_GPIO_Init+0x10c>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8e:	4b2e      	ldr	r3, [pc, #184]	; (8000e48 <MX_GPIO_Init+0x10c>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	4a2c      	ldr	r2, [pc, #176]	; (8000e48 <MX_GPIO_Init+0x10c>)
 8000d96:	f043 0308 	orr.w	r3, r3, #8
 8000d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <MX_GPIO_Init+0x10c>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	f003 0308 	and.w	r3, r3, #8
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dac:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <MX_GPIO_Init+0x10c>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db2:	4a25      	ldr	r2, [pc, #148]	; (8000e48 <MX_GPIO_Init+0x10c>)
 8000db4:	f043 0310 	orr.w	r3, r3, #16
 8000db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <MX_GPIO_Init+0x10c>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc2:	f003 0310 	and.w	r3, r3, #16
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd0:	481e      	ldr	r0, [pc, #120]	; (8000e4c <MX_GPIO_Init+0x110>)
 8000dd2:	f003 fc9d 	bl	8004710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	21ff      	movs	r1, #255	; 0xff
 8000dda:	481d      	ldr	r0, [pc, #116]	; (8000e50 <MX_GPIO_Init+0x114>)
 8000ddc:	f003 fc98 	bl	8004710 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2101      	movs	r1, #1
 8000de4:	481b      	ldr	r0, [pc, #108]	; (8000e54 <MX_GPIO_Init+0x118>)
 8000de6:	f003 fc93 	bl	8004710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000dea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4812      	ldr	r0, [pc, #72]	; (8000e4c <MX_GPIO_Init+0x110>)
 8000e04:	f003 fabc 	bl	8004380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e08:	23ff      	movs	r3, #255	; 0xff
 8000e0a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480c      	ldr	r0, [pc, #48]	; (8000e50 <MX_GPIO_Init+0x114>)
 8000e20:	f003 faae 	bl	8004380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e24:	2301      	movs	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4806      	ldr	r0, [pc, #24]	; (8000e54 <MX_GPIO_Init+0x118>)
 8000e3c:	f003 faa0 	bl	8004380 <HAL_GPIO_Init>

}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	; 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	58024400 	.word	0x58024400
 8000e4c:	58020400 	.word	0x58020400
 8000e50:	58020c00 	.word	0x58020c00
 8000e54:	58021000 	.word	0x58021000

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <Error_Handler+0x8>
	...

08000e64 <thirty_ns_delay>:
//define the timer handler below
#define timer htim1

extern TIM_HandleTypeDef timer;
void thirty_ns_delay (int ns)				//31.25 ns delay
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&timer, 0);	//clear timer
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <thirty_ns_delay+0x30>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&timer);	//start timer
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <thirty_ns_delay+0x30>)
 8000e76:	f006 fe0d 	bl	8007a94 <HAL_TIM_Base_Start_IT>
	while (__HAL_TIM_GET_COUNTER(&timer) < ns);
 8000e7a:	bf00      	nop
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <thirty_ns_delay+0x30>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d3f9      	bcc.n	8000e7c <thirty_ns_delay+0x18>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	24000308 	.word	0x24000308

08000e98 <send_to_lcd>:

void send_to_lcd (char data, int rs)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  //rs = 1 for data, rs = 0 for command
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	2102      	movs	r1, #2
 8000eac:	4819      	ldr	r0, [pc, #100]	; (8000f14 <send_to_lcd+0x7c>)
 8000eae:	f003 fc2f 	bl	8004710 <HAL_GPIO_WritePin>

	// write the data to the respective pin
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	08db      	lsrs	r3, r3, #3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	2180      	movs	r1, #128	; 0x80
 8000ec2:	4814      	ldr	r0, [pc, #80]	; (8000f14 <send_to_lcd+0x7c>)
 8000ec4:	f003 fc24 	bl	8004710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	2140      	movs	r1, #64	; 0x40
 8000ed8:	480e      	ldr	r0, [pc, #56]	; (8000f14 <send_to_lcd+0x7c>)
 8000eda:	f003 fc19 	bl	8004710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	085b      	lsrs	r3, r3, #1
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	2120      	movs	r1, #32
 8000eee:	4809      	ldr	r0, [pc, #36]	; (8000f14 <send_to_lcd+0x7c>)
 8000ef0:	f003 fc0e 	bl	8004710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	2110      	movs	r1, #16
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <send_to_lcd+0x7c>)
 8000f02:	f003 fc05 	bl	8004710 <HAL_GPIO_WritePin>

	lcd_nibble();	//pulse LCD enable pin to initiate data transfer
 8000f06:	f000 f8cf 	bl	80010a8 <lcd_nibble>
	//HAL_Delay(1);  	//wait for 1 ms while the enable pin settles

    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	58020c00 	.word	0x58020c00

08000f18 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    //send upper nibble first
    datatosend = ((cmd>>4)&0x0f);
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	091b      	lsrs	r3, r3, #4
 8000f26:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ffb3 	bl	8000e98 <send_to_lcd>

    //send lower nibble
    datatosend = ((cmd)&0x0f);
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 030f 	and.w	r3, r3, #15
 8000f38:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  //RS must be 0 while sending command
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ffaa 	bl	8000e98 <send_to_lcd>

    HAL_Delay(2);
 8000f44:	2002      	movs	r0, #2
 8000f46:	f000 fb8f 	bl	8001668 <HAL_Delay>
}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b084      	sub	sp, #16
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	71fb      	strb	r3, [r7, #7]
	char datatosend;

    //send upper nibble first
    datatosend = ((data>>4)&0x0f);
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	2101      	movs	r1, #1
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff96 	bl	8000e98 <send_to_lcd>

    //send lower nibble
    datatosend = ((data)&0x0f);
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,1);  //RS must be 1 while sending data
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	2101      	movs	r1, #1
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff8d 	bl	8000e98 <send_to_lcd>

    HAL_Delay(2);
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f000 fb72 	bl	8001668 <HAL_Delay>
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <lcd_clear>:

void lcd_clear (void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f7ff ffc1 	bl	8000f18 <lcd_send_cmd>
	HAL_Delay(2);
 8000f96:	2002      	movs	r0, #2
 8000f98:	f000 fb66 	bl	8001668 <HAL_Delay>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <lcd_put_cur>:

void lcd_put_cur(int row, int col) //fix for 4x20 LCD !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d81f      	bhi.n	8000ff0 <lcd_put_cur+0x50>
 8000fb0:	a201      	add	r2, pc, #4	; (adr r2, 8000fb8 <lcd_put_cur+0x18>)
 8000fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb6:	bf00      	nop
 8000fb8:	08000fc9 	.word	0x08000fc9
 8000fbc:	08000fd3 	.word	0x08000fd3
 8000fc0:	08000fdd 	.word	0x08000fdd
 8000fc4:	08000fe7 	.word	0x08000fe7
    switch (row)
    {
        case 0:
            col |= 0x80;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fce:	603b      	str	r3, [r7, #0]
            break;
 8000fd0:	e00e      	b.n	8000ff0 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000fd8:	603b      	str	r3, [r7, #0]
            break;
 8000fda:	e009      	b.n	8000ff0 <lcd_put_cur+0x50>
        case 2:
            col |= 0x40;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe2:	603b      	str	r3, [r7, #0]
            break;
 8000fe4:	e004      	b.n	8000ff0 <lcd_put_cur+0x50>
        case 3:
            col |= 0xF0;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000fec:	603b      	str	r3, [r7, #0]
            break;
 8000fee:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff8f 	bl	8000f18 <lcd_send_cmd>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop

08001004 <nhd_LCD_Init>:


void nhd_LCD_Init (void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	//4 bit initialization
	HAL_Delay(50);  //wait for >40ms
 8001008:	2032      	movs	r0, #50	; 0x32
 800100a:	f000 fb2d 	bl	8001668 <HAL_Delay>
	lcd_send_cmd (0x30);
 800100e:	2030      	movs	r0, #48	; 0x30
 8001010:	f7ff ff82 	bl	8000f18 <lcd_send_cmd>
	HAL_Delay(5);  //wait for >4.1ms
 8001014:	2005      	movs	r0, #5
 8001016:	f000 fb27 	bl	8001668 <HAL_Delay>
	lcd_send_cmd (0x30);
 800101a:	2030      	movs	r0, #48	; 0x30
 800101c:	f7ff ff7c 	bl	8000f18 <lcd_send_cmd>
	HAL_Delay(1);  //wait for >100us
 8001020:	2001      	movs	r0, #1
 8001022:	f000 fb21 	bl	8001668 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001026:	2030      	movs	r0, #48	; 0x30
 8001028:	f7ff ff76 	bl	8000f18 <lcd_send_cmd>
	HAL_Delay(10);
 800102c:	200a      	movs	r0, #10
 800102e:	f000 fb1b 	bl	8001668 <HAL_Delay>
	lcd_send_cmd (0x20);  //4bit mode
 8001032:	2020      	movs	r0, #32
 8001034:	f7ff ff70 	bl	8000f18 <lcd_send_cmd>
	HAL_Delay(10);
 8001038:	200a      	movs	r0, #10
 800103a:	f000 fb15 	bl	8001668 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	HAL_Delay(1);
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
	*/

	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800103e:	2028      	movs	r0, #40	; 0x28
 8001040:	f7ff ff6a 	bl	8000f18 <lcd_send_cmd>
	HAL_Delay(1);
 8001044:	2001      	movs	r0, #1
 8001046:	f000 fb0f 	bl	8001668 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800104a:	2008      	movs	r0, #8
 800104c:	f7ff ff64 	bl	8000f18 <lcd_send_cmd>
	HAL_Delay(1);
 8001050:	2001      	movs	r0, #1
 8001052:	f000 fb09 	bl	8001668 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001056:	2001      	movs	r0, #1
 8001058:	f7ff ff5e 	bl	8000f18 <lcd_send_cmd>
	HAL_Delay(1);
 800105c:	2001      	movs	r0, #1
 800105e:	f000 fb03 	bl	8001668 <HAL_Delay>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f000 fb00 	bl	8001668 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001068:	2006      	movs	r0, #6
 800106a:	f7ff ff55 	bl	8000f18 <lcd_send_cmd>
	HAL_Delay(1);
 800106e:	2001      	movs	r0, #1
 8001070:	f000 fafa 	bl	8001668 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001074:	200c      	movs	r0, #12
 8001076:	f7ff ff4f 	bl	8000f18 <lcd_send_cmd>


}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}

0800107e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001086:	e006      	b.n	8001096 <lcd_send_string+0x18>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff5e 	bl	8000f52 <lcd_send_data>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f4      	bne.n	8001088 <lcd_send_string+0xa>
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <lcd_nibble>:

void lcd_nibble() {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2108      	movs	r1, #8
 80010b0:	4806      	ldr	r0, [pc, #24]	; (80010cc <lcd_nibble+0x24>)
 80010b2:	f003 fb2d 	bl	8004710 <HAL_GPIO_WritePin>
	thirty_ns_delay(11);			//343.75 ns delay > required 325ns enable pulse width delay
 80010b6:	200b      	movs	r0, #11
 80010b8:	f7ff fed4 	bl	8000e64 <thirty_ns_delay>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); 	//debugging LED
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2108      	movs	r1, #8
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <lcd_nibble+0x24>)
 80010c2:	f003 fb25 	bl	8004710 <HAL_GPIO_WritePin>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	58020c00 	.word	0x58020c00

080010d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_MspInit+0x30>)
 80010d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010dc:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_MspInit+0x30>)
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_MspInit+0x30>)
 80010e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	58024400 	.word	0x58024400

08001104 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b0ba      	sub	sp, #232	; 0xe8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800111c:	f107 0318 	add.w	r3, r7, #24
 8001120:	22bc      	movs	r2, #188	; 0xbc
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f007 f803 	bl	8008130 <memset>
  if(hadc->Instance==ADC1)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a51      	ldr	r2, [pc, #324]	; (8001274 <HAL_ADC_MspInit+0x170>)
 8001130:	4293      	cmp	r3, r2
 8001132:	f040 809b 	bne.w	800126c <HAL_ADC_MspInit+0x168>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001136:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800113a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800113c:	2304      	movs	r3, #4
 800113e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001140:	2309      	movs	r3, #9
 8001142:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001144:	2304      	movs	r3, #4
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001148:	2302      	movs	r3, #2
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800114c:	2302      	movs	r3, #2
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001150:	23c0      	movs	r3, #192	; 0xc0
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001154:	2320      	movs	r3, #32
 8001156:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001158:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800115c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001164:	f107 0318 	add.w	r3, r7, #24
 8001168:	4618      	mov	r0, r3
 800116a:	f004 fab5 	bl	80056d8 <HAL_RCCEx_PeriphCLKConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_ADC_MspInit+0x74>
    {
      Error_Handler();
 8001174:	f7ff fe70 	bl	8000e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001178:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <HAL_ADC_MspInit+0x174>)
 800117a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800117e:	4a3e      	ldr	r2, [pc, #248]	; (8001278 <HAL_ADC_MspInit+0x174>)
 8001180:	f043 0320 	orr.w	r3, r3, #32
 8001184:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001188:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <HAL_ADC_MspInit+0x174>)
 800118a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800118e:	f003 0320 	and.w	r3, r3, #32
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b38      	ldr	r3, [pc, #224]	; (8001278 <HAL_ADC_MspInit+0x174>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119c:	4a36      	ldr	r2, [pc, #216]	; (8001278 <HAL_ADC_MspInit+0x174>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a6:	4b34      	ldr	r3, [pc, #208]	; (8001278 <HAL_ADC_MspInit+0x174>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b4:	4b30      	ldr	r3, [pc, #192]	; (8001278 <HAL_ADC_MspInit+0x174>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ba:	4a2f      	ldr	r2, [pc, #188]	; (8001278 <HAL_ADC_MspInit+0x174>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <HAL_ADC_MspInit+0x174>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011d2:	2340      	movs	r3, #64	; 0x40
 80011d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d8:	2303      	movs	r3, #3
 80011da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011e8:	4619      	mov	r1, r3
 80011ea:	4824      	ldr	r0, [pc, #144]	; (800127c <HAL_ADC_MspInit+0x178>)
 80011ec:	f003 f8c8 	bl	8004380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011f0:	2302      	movs	r3, #2
 80011f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f6:	2303      	movs	r3, #3
 80011f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001206:	4619      	mov	r1, r3
 8001208:	481d      	ldr	r0, [pc, #116]	; (8001280 <HAL_ADC_MspInit+0x17c>)
 800120a:	f003 f8b9 	bl	8004380 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <HAL_ADC_MspInit+0x180>)
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <HAL_ADC_MspInit+0x184>)
 8001212:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_ADC_MspInit+0x180>)
 8001216:	2209      	movs	r2, #9
 8001218:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <HAL_ADC_MspInit+0x180>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_ADC_MspInit+0x180>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <HAL_ADC_MspInit+0x180>)
 8001228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800122c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_ADC_MspInit+0x180>)
 8001230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001234:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_ADC_MspInit+0x180>)
 8001238:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800123c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <HAL_ADC_MspInit+0x180>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_ADC_MspInit+0x180>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <HAL_ADC_MspInit+0x180>)
 800124c:	2200      	movs	r2, #0
 800124e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <HAL_ADC_MspInit+0x180>)
 8001252:	f001 fbd3 	bl	80029fc <HAL_DMA_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_ADC_MspInit+0x15c>
    {
      Error_Handler();
 800125c:	f7ff fdfc 	bl	8000e58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a08      	ldr	r2, [pc, #32]	; (8001284 <HAL_ADC_MspInit+0x180>)
 8001264:	64da      	str	r2, [r3, #76]	; 0x4c
 8001266:	4a07      	ldr	r2, [pc, #28]	; (8001284 <HAL_ADC_MspInit+0x180>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800126c:	bf00      	nop
 800126e:	37e8      	adds	r7, #232	; 0xe8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40022000 	.word	0x40022000
 8001278:	58024400 	.word	0x58024400
 800127c:	58020000 	.word	0x58020000
 8001280:	58020400 	.word	0x58020400
 8001284:	24000290 	.word	0x24000290
 8001288:	40020010 	.word	0x40020010

0800128c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a16      	ldr	r2, [pc, #88]	; (80012f4 <HAL_TIM_Base_MspInit+0x68>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d10f      	bne.n	80012be <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_TIM_Base_MspInit+0x6c>)
 80012a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012a4:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <HAL_TIM_Base_MspInit+0x6c>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_TIM_Base_MspInit+0x6c>)
 80012b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012bc:	e013      	b.n	80012e6 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c6:	d10e      	bne.n	80012e6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_TIM_Base_MspInit+0x6c>)
 80012ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <HAL_TIM_Base_MspInit+0x6c>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <HAL_TIM_Base_MspInit+0x6c>)
 80012da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40010000 	.word	0x40010000
 80012f8:	58024400 	.word	0x58024400

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <NMI_Handler+0x4>

08001302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <HardFault_Handler+0x4>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <MemManage_Handler+0x4>

0800130e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <BusFault_Handler+0x4>

08001314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <UsageFault_Handler+0x4>

0800131a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001348:	f000 f96e 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <DMA1_Stream0_IRQHandler+0x10>)
 8001356:	f001 fead 	bl	80030b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	24000290 	.word	0x24000290

08001364 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	return 1;
 8001368:	2301      	movs	r3, #1
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <_kill>:

int _kill(int pid, int sig)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800137e:	f006 fead 	bl	80080dc <__errno>
 8001382:	4603      	mov	r3, r0
 8001384:	2216      	movs	r2, #22
 8001386:	601a      	str	r2, [r3, #0]
	return -1;
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <_exit>:

void _exit (int status)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ffe7 	bl	8001374 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013a6:	e7fe      	b.n	80013a6 <_exit+0x12>

080013a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	e00a      	b.n	80013d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013ba:	f3af 8000 	nop.w
 80013be:	4601      	mov	r1, r0
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	60ba      	str	r2, [r7, #8]
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbf0      	blt.n	80013ba <_read+0x12>
	}

return len;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e009      	b.n	8001408 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	60ba      	str	r2, [r7, #8]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	dbf1      	blt.n	80013f4 <_write+0x12>
	}
	return len;
 8001410:	687b      	ldr	r3, [r7, #4]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_close>:

int _close(int file)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return -1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001442:	605a      	str	r2, [r3, #4]
	return 0;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <_isatty>:

int _isatty(int file)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
	return 1;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
	return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800148c:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <_sbrk+0x5c>)
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <_sbrk+0x60>)
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <_sbrk+0x64>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <_sbrk+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d207      	bcs.n	80014c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b4:	f006 fe12 	bl	80080dc <__errno>
 80014b8:	4603      	mov	r3, r0
 80014ba:	220c      	movs	r2, #12
 80014bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	e009      	b.n	80014d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <_sbrk+0x64>)
 80014d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	24080000 	.word	0x24080000
 80014e4:	00000400 	.word	0x00000400
 80014e8:	24000200 	.word	0x24000200
 80014ec:	240003b8 	.word	0x240003b8

080014f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001528 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014f4:	f7fe ff4c 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014fa:	490d      	ldr	r1, [pc, #52]	; (8001530 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014fc:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001510:	4c0a      	ldr	r4, [pc, #40]	; (800153c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800151e:	f006 fde3 	bl	80080e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001522:	f7ff f991 	bl	8000848 <main>
  bx  lr
 8001526:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001528:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800152c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001530:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001534:	0800b1bc 	.word	0x0800b1bc
  ldr r2, =_sbss
 8001538:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 800153c:	240003b8 	.word	0x240003b8

08001540 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC3_IRQHandler>
	...

08001544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154a:	2003      	movs	r0, #3
 800154c:	f001 fa16 	bl	800297c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001550:	f003 ff18 	bl	8005384 <HAL_RCC_GetSysClockFreq>
 8001554:	4602      	mov	r2, r0
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_Init+0x68>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	4913      	ldr	r1, [pc, #76]	; (80015b0 <HAL_Init+0x6c>)
 8001562:	5ccb      	ldrb	r3, [r1, r3]
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	fa22 f303 	lsr.w	r3, r2, r3
 800156c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_Init+0x68>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <HAL_Init+0x6c>)
 8001578:	5cd3      	ldrb	r3, [r2, r3]
 800157a:	f003 031f 	and.w	r3, r3, #31
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
 8001584:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <HAL_Init+0x70>)
 8001586:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001588:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <HAL_Init+0x74>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158e:	2000      	movs	r0, #0
 8001590:	f000 f814 	bl	80015bc <HAL_InitTick>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e002      	b.n	80015a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800159e:	f7ff fd97 	bl	80010d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	58024400 	.word	0x58024400
 80015b0:	0800adbc 	.word	0x0800adbc
 80015b4:	24000004 	.word	0x24000004
 80015b8:	24000000 	.word	0x24000000

080015bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_InitTick+0x60>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e021      	b.n	8001614 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_InitTick+0x64>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_InitTick+0x60>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 f9fb 	bl	80029e2 <HAL_SYSTICK_Config>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00e      	b.n	8001614 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d80a      	bhi.n	8001612 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f001 f9c5 	bl	8002992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <HAL_InitTick+0x68>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2400000c 	.word	0x2400000c
 8001620:	24000000 	.word	0x24000000
 8001624:	24000008 	.word	0x24000008

08001628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	2400000c 	.word	0x2400000c
 800164c:	240003a4 	.word	0x240003a4

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	240003a4 	.word	0x240003a4

08001668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001670:	f7ff ffee 	bl	8001650 <HAL_GetTick>
 8001674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001680:	d005      	beq.n	800168e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_Delay+0x44>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168e:	bf00      	nop
 8001690:	f7ff ffde 	bl	8001650 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	429a      	cmp	r2, r3
 800169e:	d8f7      	bhi.n	8001690 <HAL_Delay+0x28>
  {
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2400000c 	.word	0x2400000c

080016b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_GetREVID+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	0c1b      	lsrs	r3, r3, #16
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	5c001000 	.word	0x5c001000

080016c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	609a      	str	r2, [r3, #8]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	609a      	str	r2, [r3, #8]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3360      	adds	r3, #96	; 0x60
 8001742:	461a      	mov	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	430b      	orrs	r3, r1
 800175e:	431a      	orrs	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001764:	bf00      	nop
 8001766:	371c      	adds	r7, #28
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f003 031f 	and.w	r3, r3, #31
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	431a      	orrs	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	611a      	str	r2, [r3, #16]
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b087      	sub	sp, #28
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	3360      	adds	r3, #96	; 0x60
 80017b2:	461a      	mov	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	601a      	str	r2, [r3, #0]
  }
}
 80017cc:	bf00      	nop
 80017ce:	371c      	adds	r7, #28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3330      	adds	r3, #48	; 0x30
 80017e8:	461a      	mov	r2, r3
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	4413      	add	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f003 031f 	and.w	r3, r3, #31
 8001802:	211f      	movs	r1, #31
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	401a      	ands	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	0e9b      	lsrs	r3, r3, #26
 8001810:	f003 011f 	and.w	r1, r3, #31
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	431a      	orrs	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001824:	bf00      	nop
 8001826:	371c      	adds	r7, #28
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	3314      	adds	r3, #20
 8001840:	461a      	mov	r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	0e5b      	lsrs	r3, r3, #25
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	4413      	add	r3, r2
 800184e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	0d1b      	lsrs	r3, r3, #20
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	2107      	movs	r1, #7
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	401a      	ands	r2, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	0d1b      	lsrs	r3, r3, #20
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	431a      	orrs	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800187a:	bf00      	nop
 800187c:	371c      	adds	r7, #28
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0318 	and.w	r3, r3, #24
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80018ac:	40d9      	lsrs	r1, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	400b      	ands	r3, r1
 80018b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018b6:	431a      	orrs	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	000fffff 	.word	0x000fffff

080018d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80018de:	4013      	ands	r3, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6093      	str	r3, [r2, #8]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	5fffffc0 	.word	0x5fffffc0

080018f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001908:	d101      	bne.n	800190e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <LL_ADC_EnableInternalRegulator+0x24>)
 800192a:	4013      	ands	r3, r2
 800192c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	6fffffc0 	.word	0x6fffffc0

08001944 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001954:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001958:	d101      	bne.n	800195e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <LL_ADC_IsEnabled+0x18>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <LL_ADC_IsEnabled+0x1a>
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d101      	bne.n	80019aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d101      	bne.n	80019d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e18e      	b.n	8001d18 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff fb7b 	bl	8001104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff67 	bl	80018f4 <LL_ADC_IsDeepPowerDownEnabled>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff4d 	bl	80018d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff82 	bl	8001944 <LL_ADC_IsInternalRegulatorEnabled>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d114      	bne.n	8001a70 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff66 	bl	800191c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a50:	4b9a      	ldr	r3, [pc, #616]	; (8001cbc <HAL_ADC_Init+0x2dc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	099b      	lsrs	r3, r3, #6
 8001a56:	4a9a      	ldr	r2, [pc, #616]	; (8001cc0 <HAL_ADC_Init+0x2e0>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	3301      	adds	r3, #1
 8001a60:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a62:	e002      	b.n	8001a6a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f9      	bne.n	8001a64 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff65 	bl	8001944 <LL_ADC_IsInternalRegulatorEnabled>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10d      	bne.n	8001a9c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a84:	f043 0210 	orr.w	r2, r3, #16
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a90:	f043 0201 	orr.w	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff76 	bl	8001992 <LL_ADC_REG_IsConversionOngoing>
 8001aa6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f040 8128 	bne.w	8001d06 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f040 8124 	bne.w	8001d06 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ac6:	f043 0202 	orr.w	r2, r3, #2
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff4a 	bl	800196c <LL_ADC_IsEnabled>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d136      	bne.n	8001b4c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a78      	ldr	r2, [pc, #480]	; (8001cc4 <HAL_ADC_Init+0x2e4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d004      	beq.n	8001af2 <HAL_ADC_Init+0x112>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a76      	ldr	r2, [pc, #472]	; (8001cc8 <HAL_ADC_Init+0x2e8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d10e      	bne.n	8001b10 <HAL_ADC_Init+0x130>
 8001af2:	4874      	ldr	r0, [pc, #464]	; (8001cc4 <HAL_ADC_Init+0x2e4>)
 8001af4:	f7ff ff3a 	bl	800196c <LL_ADC_IsEnabled>
 8001af8:	4604      	mov	r4, r0
 8001afa:	4873      	ldr	r0, [pc, #460]	; (8001cc8 <HAL_ADC_Init+0x2e8>)
 8001afc:	f7ff ff36 	bl	800196c <LL_ADC_IsEnabled>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4323      	orrs	r3, r4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	e008      	b.n	8001b22 <HAL_ADC_Init+0x142>
 8001b10:	486e      	ldr	r0, [pc, #440]	; (8001ccc <HAL_ADC_Init+0x2ec>)
 8001b12:	f7ff ff2b 	bl	800196c <LL_ADC_IsEnabled>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf0c      	ite	eq
 8001b1c:	2301      	moveq	r3, #1
 8001b1e:	2300      	movne	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d012      	beq.n	8001b4c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a66      	ldr	r2, [pc, #408]	; (8001cc4 <HAL_ADC_Init+0x2e4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d004      	beq.n	8001b3a <HAL_ADC_Init+0x15a>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a64      	ldr	r2, [pc, #400]	; (8001cc8 <HAL_ADC_Init+0x2e8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_Init+0x15e>
 8001b3a:	4a65      	ldr	r2, [pc, #404]	; (8001cd0 <HAL_ADC_Init+0x2f0>)
 8001b3c:	e000      	b.n	8001b40 <HAL_ADC_Init+0x160>
 8001b3e:	4a65      	ldr	r2, [pc, #404]	; (8001cd4 <HAL_ADC_Init+0x2f4>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4619      	mov	r1, r3
 8001b46:	4610      	mov	r0, r2
 8001b48:	f7ff fdbe 	bl	80016c8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001b4c:	f7ff fdb0 	bl	80016b0 <HAL_GetREVID>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d914      	bls.n	8001b84 <HAL_ADC_Init+0x1a4>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b10      	cmp	r3, #16
 8001b60:	d110      	bne.n	8001b84 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7d5b      	ldrb	r3, [r3, #21]
 8001b66:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b6c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001b72:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7f1b      	ldrb	r3, [r3, #28]
 8001b78:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001b7a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b7c:	f043 030c 	orr.w	r3, r3, #12
 8001b80:	61bb      	str	r3, [r7, #24]
 8001b82:	e00d      	b.n	8001ba0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7d5b      	ldrb	r3, [r3, #21]
 8001b88:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b8e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001b94:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7f1b      	ldrb	r3, [r3, #28]
 8001b9a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7f1b      	ldrb	r3, [r3, #28]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d106      	bne.n	8001bb6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	045b      	lsls	r3, r3, #17
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d009      	beq.n	8001bd2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <HAL_ADC_Init+0x2f8>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	69b9      	ldr	r1, [r7, #24]
 8001be2:	430b      	orrs	r3, r1
 8001be4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fed1 	bl	8001992 <LL_ADC_REG_IsConversionOngoing>
 8001bf0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fede 	bl	80019b8 <LL_ADC_INJ_IsConversionOngoing>
 8001bfc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d14a      	bne.n	8001c9a <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d147      	bne.n	8001c9a <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7d1b      	ldrb	r3, [r3, #20]
 8001c0e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <HAL_ADC_Init+0x2fc>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	69b9      	ldr	r1, [r7, #24]
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d11b      	bne.n	8001c6e <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <HAL_ADC_Init+0x300>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c4a:	3a01      	subs	r2, #1
 8001c4c:	0411      	lsls	r1, r2, #16
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c52:	4311      	orrs	r1, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c58:	4311      	orrs	r1, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	611a      	str	r2, [r3, #16]
 8001c6c:	e007      	b.n	8001c7e <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0201 	bic.w	r2, r2, #1
 8001c7c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fb93 	bl	80023c0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d120      	bne.n	8001ce4 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	f023 010f 	bic.w	r1, r3, #15
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	1e5a      	subs	r2, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	631a      	str	r2, [r3, #48]	; 0x30
 8001cba:	e01b      	b.n	8001cf4 <HAL_ADC_Init+0x314>
 8001cbc:	24000000 	.word	0x24000000
 8001cc0:	053e2d63 	.word	0x053e2d63
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	40022100 	.word	0x40022100
 8001ccc:	58026000 	.word	0x58026000
 8001cd0:	40022300 	.word	0x40022300
 8001cd4:	58026300 	.word	0x58026300
 8001cd8:	fff0c003 	.word	0xfff0c003
 8001cdc:	ffffbffc 	.word	0xffffbffc
 8001ce0:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 020f 	bic.w	r2, r2, #15
 8001cf2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf8:	f023 0303 	bic.w	r3, r3, #3
 8001cfc:	f043 0201 	orr.w	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54
 8001d04:	e007      	b.n	8001d16 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0a:	f043 0210 	orr.w	r2, r3, #16
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d16:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3724      	adds	r7, #36	; 0x24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd90      	pop	{r4, r7, pc}

08001d20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b0a1      	sub	sp, #132	; 0x84
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4a9d      	ldr	r2, [pc, #628]	; (8001fb0 <HAL_ADC_ConfigChannel+0x290>)
 8001d3a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x2a>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e321      	b.n	800238e <HAL_ADC_ConfigChannel+0x66e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fe1b 	bl	8001992 <LL_ADC_REG_IsConversionOngoing>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f040 8306 	bne.w	8002370 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d108      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x62>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0e9b      	lsrs	r3, r3, #26
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	e016      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x90>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d92:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	e003      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001d9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	2201      	movs	r2, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	69d1      	ldr	r1, [r2, #28]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6859      	ldr	r1, [r3, #4]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f7ff fd04 	bl	80017d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fddc 	bl	8001992 <LL_ADC_REG_IsConversionOngoing>
 8001dda:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fde9 	bl	80019b8 <LL_ADC_INJ_IsConversionOngoing>
 8001de6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 80b3 	bne.w	8001f56 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f040 80af 	bne.w	8001f56 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	6819      	ldr	r1, [r3, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	461a      	mov	r2, r3
 8001e06:	f7ff fd13 	bl	8001830 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e0a:	4b6a      	ldr	r3, [pc, #424]	; (8001fb4 <HAL_ADC_ConfigChannel+0x294>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e16:	d10b      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x110>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	e01d      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x14c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10b      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x136>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	695a      	ldr	r2, [r3, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	e00a      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x14c>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d027      	beq.n	8001ec6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6919      	ldr	r1, [r3, #16]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e84:	f7ff fc54 	bl	8001730 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	6919      	ldr	r1, [r3, #16]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	7e5b      	ldrb	r3, [r3, #25]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d102      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x17e>
 8001e98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001e9c:	e000      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x180>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f7ff fc7e 	bl	80017a2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6919      	ldr	r1, [r3, #16]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	7e1b      	ldrb	r3, [r3, #24]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d102      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x19c>
 8001eb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001eba:	e000      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x19e>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f7ff fc56 	bl	8001770 <LL_ADC_SetDataRightShift>
 8001ec4:	e047      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ecc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	069b      	lsls	r3, r3, #26
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d107      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ee8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ef0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	069b      	lsls	r3, r3, #26
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d107      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f0c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	069b      	lsls	r3, r3, #26
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d107      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f30:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	069b      	lsls	r3, r3, #26
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d107      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f54:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fd06 	bl	800196c <LL_ADC_IsEnabled>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f040 820d 	bne.w	8002382 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6819      	ldr	r1, [r3, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	461a      	mov	r2, r3
 8001f76:	f7ff fc87 	bl	8001888 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	4a0c      	ldr	r2, [pc, #48]	; (8001fb0 <HAL_ADC_ConfigChannel+0x290>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	f040 8133 	bne.w	80021ec <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d110      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x298>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	0e9b      	lsrs	r3, r3, #26
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	2b09      	cmp	r3, #9
 8001fa4:	bf94      	ite	ls
 8001fa6:	2301      	movls	r3, #1
 8001fa8:	2300      	movhi	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	e01e      	b.n	8001fec <HAL_ADC_ConfigChannel+0x2cc>
 8001fae:	bf00      	nop
 8001fb0:	47ff0000 	.word	0x47ff0000
 8001fb4:	5c001000 	.word	0x5c001000
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	e003      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	2b09      	cmp	r3, #9
 8001fe4:	bf94      	ite	ls
 8001fe6:	2301      	movls	r3, #1
 8001fe8:	2300      	movhi	r3, #0
 8001fea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d079      	beq.n	80020e4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d107      	bne.n	800200c <HAL_ADC_ConfigChannel+0x2ec>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0e9b      	lsrs	r3, r3, #26
 8002002:	3301      	adds	r3, #1
 8002004:	069b      	lsls	r3, r3, #26
 8002006:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800200a:	e015      	b.n	8002038 <HAL_ADC_ConfigChannel+0x318>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800201a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800201c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800201e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002024:	2320      	movs	r3, #32
 8002026:	e003      	b.n	8002030 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	3301      	adds	r3, #1
 8002032:	069b      	lsls	r3, r3, #26
 8002034:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x338>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0e9b      	lsrs	r3, r3, #26
 800204a:	3301      	adds	r3, #1
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	2101      	movs	r1, #1
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	e017      	b.n	8002088 <HAL_ADC_ConfigChannel+0x368>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002068:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800206a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002070:	2320      	movs	r3, #32
 8002072:	e003      	b.n	800207c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	3301      	adds	r3, #1
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	ea42 0103 	orr.w	r1, r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10a      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x38e>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0e9b      	lsrs	r3, r3, #26
 800209e:	3301      	adds	r3, #1
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	4613      	mov	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	051b      	lsls	r3, r3, #20
 80020ac:	e018      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x3c0>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80020bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80020c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80020c6:	2320      	movs	r3, #32
 80020c8:	e003      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80020ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020cc:	fab3 f383 	clz	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	f003 021f 	and.w	r2, r3, #31
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e0:	430b      	orrs	r3, r1
 80020e2:	e07e      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d107      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x3e0>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	0e9b      	lsrs	r3, r3, #26
 80020f6:	3301      	adds	r3, #1
 80020f8:	069b      	lsls	r3, r3, #26
 80020fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020fe:	e015      	b.n	800212c <HAL_ADC_ConfigChannel+0x40c>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002118:	2320      	movs	r3, #32
 800211a:	e003      	b.n	8002124 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	3301      	adds	r3, #1
 8002126:	069b      	lsls	r3, r3, #26
 8002128:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <HAL_ADC_ConfigChannel+0x42c>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0e9b      	lsrs	r3, r3, #26
 800213e:	3301      	adds	r3, #1
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	2101      	movs	r1, #1
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	e017      	b.n	800217c <HAL_ADC_ConfigChannel+0x45c>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	61bb      	str	r3, [r7, #24]
  return result;
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002164:	2320      	movs	r3, #32
 8002166:	e003      	b.n	8002170 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3301      	adds	r3, #1
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	2101      	movs	r1, #1
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	ea42 0103 	orr.w	r1, r2, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10d      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x488>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	0e9b      	lsrs	r3, r3, #26
 8002192:	3301      	adds	r3, #1
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	3b1e      	subs	r3, #30
 80021a0:	051b      	lsls	r3, r3, #20
 80021a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021a6:	e01b      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x4c0>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	60fb      	str	r3, [r7, #12]
  return result;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80021c0:	2320      	movs	r3, #32
 80021c2:	e003      	b.n	80021cc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	3301      	adds	r3, #1
 80021ce:	f003 021f 	and.w	r2, r3, #31
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	3b1e      	subs	r3, #30
 80021da:	051b      	lsls	r3, r3, #20
 80021dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021e0:	430b      	orrs	r3, r1
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	6892      	ldr	r2, [r2, #8]
 80021e6:	4619      	mov	r1, r3
 80021e8:	f7ff fb22 	bl	8001830 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f280 80c6 	bge.w	8002382 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a67      	ldr	r2, [pc, #412]	; (8002398 <HAL_ADC_ConfigChannel+0x678>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d004      	beq.n	800220a <HAL_ADC_ConfigChannel+0x4ea>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a65      	ldr	r2, [pc, #404]	; (800239c <HAL_ADC_ConfigChannel+0x67c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d101      	bne.n	800220e <HAL_ADC_ConfigChannel+0x4ee>
 800220a:	4b65      	ldr	r3, [pc, #404]	; (80023a0 <HAL_ADC_ConfigChannel+0x680>)
 800220c:	e000      	b.n	8002210 <HAL_ADC_ConfigChannel+0x4f0>
 800220e:	4b65      	ldr	r3, [pc, #404]	; (80023a4 <HAL_ADC_ConfigChannel+0x684>)
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fa7f 	bl	8001714 <LL_ADC_GetCommonPathInternalCh>
 8002216:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a5e      	ldr	r2, [pc, #376]	; (8002398 <HAL_ADC_ConfigChannel+0x678>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d004      	beq.n	800222c <HAL_ADC_ConfigChannel+0x50c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a5d      	ldr	r2, [pc, #372]	; (800239c <HAL_ADC_ConfigChannel+0x67c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d10e      	bne.n	800224a <HAL_ADC_ConfigChannel+0x52a>
 800222c:	485a      	ldr	r0, [pc, #360]	; (8002398 <HAL_ADC_ConfigChannel+0x678>)
 800222e:	f7ff fb9d 	bl	800196c <LL_ADC_IsEnabled>
 8002232:	4604      	mov	r4, r0
 8002234:	4859      	ldr	r0, [pc, #356]	; (800239c <HAL_ADC_ConfigChannel+0x67c>)
 8002236:	f7ff fb99 	bl	800196c <LL_ADC_IsEnabled>
 800223a:	4603      	mov	r3, r0
 800223c:	4323      	orrs	r3, r4
 800223e:	2b00      	cmp	r3, #0
 8002240:	bf0c      	ite	eq
 8002242:	2301      	moveq	r3, #1
 8002244:	2300      	movne	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	e008      	b.n	800225c <HAL_ADC_ConfigChannel+0x53c>
 800224a:	4857      	ldr	r0, [pc, #348]	; (80023a8 <HAL_ADC_ConfigChannel+0x688>)
 800224c:	f7ff fb8e 	bl	800196c <LL_ADC_IsEnabled>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	bf0c      	ite	eq
 8002256:	2301      	moveq	r3, #1
 8002258:	2300      	movne	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d07d      	beq.n	800235c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a51      	ldr	r2, [pc, #324]	; (80023ac <HAL_ADC_ConfigChannel+0x68c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d130      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x5ac>
 800226a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d12b      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a4b      	ldr	r2, [pc, #300]	; (80023a8 <HAL_ADC_ConfigChannel+0x688>)
 800227a:	4293      	cmp	r3, r2
 800227c:	f040 8081 	bne.w	8002382 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a44      	ldr	r2, [pc, #272]	; (8002398 <HAL_ADC_ConfigChannel+0x678>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d004      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x574>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a43      	ldr	r2, [pc, #268]	; (800239c <HAL_ADC_ConfigChannel+0x67c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x578>
 8002294:	4a42      	ldr	r2, [pc, #264]	; (80023a0 <HAL_ADC_ConfigChannel+0x680>)
 8002296:	e000      	b.n	800229a <HAL_ADC_ConfigChannel+0x57a>
 8002298:	4a42      	ldr	r2, [pc, #264]	; (80023a4 <HAL_ADC_ConfigChannel+0x684>)
 800229a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800229c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f7ff fa23 	bl	80016ee <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022a8:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <HAL_ADC_ConfigChannel+0x690>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	4a41      	ldr	r2, [pc, #260]	; (80023b4 <HAL_ADC_ConfigChannel+0x694>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	099b      	lsrs	r3, r3, #6
 80022b6:	3301      	adds	r3, #1
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80022bc:	e002      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f9      	bne.n	80022be <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022ca:	e05a      	b.n	8002382 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a39      	ldr	r2, [pc, #228]	; (80023b8 <HAL_ADC_ConfigChannel+0x698>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d11e      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x5f4>
 80022d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d119      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a30      	ldr	r2, [pc, #192]	; (80023a8 <HAL_ADC_ConfigChannel+0x688>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d14b      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a2a      	ldr	r2, [pc, #168]	; (8002398 <HAL_ADC_ConfigChannel+0x678>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d004      	beq.n	80022fe <HAL_ADC_ConfigChannel+0x5de>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a28      	ldr	r2, [pc, #160]	; (800239c <HAL_ADC_ConfigChannel+0x67c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x5e2>
 80022fe:	4a28      	ldr	r2, [pc, #160]	; (80023a0 <HAL_ADC_ConfigChannel+0x680>)
 8002300:	e000      	b.n	8002304 <HAL_ADC_ConfigChannel+0x5e4>
 8002302:	4a28      	ldr	r2, [pc, #160]	; (80023a4 <HAL_ADC_ConfigChannel+0x684>)
 8002304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800230a:	4619      	mov	r1, r3
 800230c:	4610      	mov	r0, r2
 800230e:	f7ff f9ee 	bl	80016ee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002312:	e036      	b.n	8002382 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a28      	ldr	r2, [pc, #160]	; (80023bc <HAL_ADC_ConfigChannel+0x69c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d131      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x662>
 800231e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002320:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d12c      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1e      	ldr	r2, [pc, #120]	; (80023a8 <HAL_ADC_ConfigChannel+0x688>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d127      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a18      	ldr	r2, [pc, #96]	; (8002398 <HAL_ADC_ConfigChannel+0x678>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d004      	beq.n	8002346 <HAL_ADC_ConfigChannel+0x626>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a16      	ldr	r2, [pc, #88]	; (800239c <HAL_ADC_ConfigChannel+0x67c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d101      	bne.n	800234a <HAL_ADC_ConfigChannel+0x62a>
 8002346:	4a16      	ldr	r2, [pc, #88]	; (80023a0 <HAL_ADC_ConfigChannel+0x680>)
 8002348:	e000      	b.n	800234c <HAL_ADC_ConfigChannel+0x62c>
 800234a:	4a16      	ldr	r2, [pc, #88]	; (80023a4 <HAL_ADC_ConfigChannel+0x684>)
 800234c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002352:	4619      	mov	r1, r3
 8002354:	4610      	mov	r0, r2
 8002356:	f7ff f9ca 	bl	80016ee <LL_ADC_SetCommonPathInternalCh>
 800235a:	e012      	b.n	8002382 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	f043 0220 	orr.w	r2, r3, #32
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800236e:	e008      	b.n	8002382 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002374:	f043 0220 	orr.w	r2, r3, #32
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800238a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800238e:	4618      	mov	r0, r3
 8002390:	3784      	adds	r7, #132	; 0x84
 8002392:	46bd      	mov	sp, r7
 8002394:	bd90      	pop	{r4, r7, pc}
 8002396:	bf00      	nop
 8002398:	40022000 	.word	0x40022000
 800239c:	40022100 	.word	0x40022100
 80023a0:	40022300 	.word	0x40022300
 80023a4:	58026300 	.word	0x58026300
 80023a8:	58026000 	.word	0x58026000
 80023ac:	cb840000 	.word	0xcb840000
 80023b0:	24000000 	.word	0x24000000
 80023b4:	053e2d63 	.word	0x053e2d63
 80023b8:	c7520000 	.word	0xc7520000
 80023bc:	cfb80000 	.word	0xcfb80000

080023c0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a79      	ldr	r2, [pc, #484]	; (80025b4 <ADC_ConfigureBoostMode+0x1f4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d004      	beq.n	80023dc <ADC_ConfigureBoostMode+0x1c>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a78      	ldr	r2, [pc, #480]	; (80025b8 <ADC_ConfigureBoostMode+0x1f8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d109      	bne.n	80023f0 <ADC_ConfigureBoostMode+0x30>
 80023dc:	4b77      	ldr	r3, [pc, #476]	; (80025bc <ADC_ConfigureBoostMode+0x1fc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf14      	ite	ne
 80023e8:	2301      	movne	r3, #1
 80023ea:	2300      	moveq	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	e008      	b.n	8002402 <ADC_ConfigureBoostMode+0x42>
 80023f0:	4b73      	ldr	r3, [pc, #460]	; (80025c0 <ADC_ConfigureBoostMode+0x200>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf14      	ite	ne
 80023fc:	2301      	movne	r3, #1
 80023fe:	2300      	moveq	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d01c      	beq.n	8002440 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002406:	f003 f937 	bl	8005678 <HAL_RCC_GetHCLKFreq>
 800240a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002414:	d010      	beq.n	8002438 <ADC_ConfigureBoostMode+0x78>
 8002416:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800241a:	d871      	bhi.n	8002500 <ADC_ConfigureBoostMode+0x140>
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002420:	d002      	beq.n	8002428 <ADC_ConfigureBoostMode+0x68>
 8002422:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002426:	d16b      	bne.n	8002500 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	0c1b      	lsrs	r3, r3, #16
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	fbb2 f3f3 	udiv	r3, r2, r3
 8002434:	60fb      	str	r3, [r7, #12]
        break;
 8002436:	e066      	b.n	8002506 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	60fb      	str	r3, [r7, #12]
        break;
 800243e:	e062      	b.n	8002506 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002440:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002444:	f004 f888 	bl	8006558 <HAL_RCCEx_GetPeriphCLKFreq>
 8002448:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002452:	d051      	beq.n	80024f8 <ADC_ConfigureBoostMode+0x138>
 8002454:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002458:	d854      	bhi.n	8002504 <ADC_ConfigureBoostMode+0x144>
 800245a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800245e:	d047      	beq.n	80024f0 <ADC_ConfigureBoostMode+0x130>
 8002460:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002464:	d84e      	bhi.n	8002504 <ADC_ConfigureBoostMode+0x144>
 8002466:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800246a:	d03d      	beq.n	80024e8 <ADC_ConfigureBoostMode+0x128>
 800246c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002470:	d848      	bhi.n	8002504 <ADC_ConfigureBoostMode+0x144>
 8002472:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002476:	d033      	beq.n	80024e0 <ADC_ConfigureBoostMode+0x120>
 8002478:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800247c:	d842      	bhi.n	8002504 <ADC_ConfigureBoostMode+0x144>
 800247e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002482:	d029      	beq.n	80024d8 <ADC_ConfigureBoostMode+0x118>
 8002484:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002488:	d83c      	bhi.n	8002504 <ADC_ConfigureBoostMode+0x144>
 800248a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800248e:	d01a      	beq.n	80024c6 <ADC_ConfigureBoostMode+0x106>
 8002490:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002494:	d836      	bhi.n	8002504 <ADC_ConfigureBoostMode+0x144>
 8002496:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800249a:	d014      	beq.n	80024c6 <ADC_ConfigureBoostMode+0x106>
 800249c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80024a0:	d830      	bhi.n	8002504 <ADC_ConfigureBoostMode+0x144>
 80024a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024a6:	d00e      	beq.n	80024c6 <ADC_ConfigureBoostMode+0x106>
 80024a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024ac:	d82a      	bhi.n	8002504 <ADC_ConfigureBoostMode+0x144>
 80024ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80024b2:	d008      	beq.n	80024c6 <ADC_ConfigureBoostMode+0x106>
 80024b4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80024b8:	d824      	bhi.n	8002504 <ADC_ConfigureBoostMode+0x144>
 80024ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024be:	d002      	beq.n	80024c6 <ADC_ConfigureBoostMode+0x106>
 80024c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024c4:	d11e      	bne.n	8002504 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	0c9b      	lsrs	r3, r3, #18
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d4:	60fb      	str	r3, [r7, #12]
        break;
 80024d6:	e016      	b.n	8002506 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	60fb      	str	r3, [r7, #12]
        break;
 80024de:	e012      	b.n	8002506 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	60fb      	str	r3, [r7, #12]
        break;
 80024e6:	e00e      	b.n	8002506 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	099b      	lsrs	r3, r3, #6
 80024ec:	60fb      	str	r3, [r7, #12]
        break;
 80024ee:	e00a      	b.n	8002506 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	09db      	lsrs	r3, r3, #7
 80024f4:	60fb      	str	r3, [r7, #12]
        break;
 80024f6:	e006      	b.n	8002506 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	0a1b      	lsrs	r3, r3, #8
 80024fc:	60fb      	str	r3, [r7, #12]
        break;
 80024fe:	e002      	b.n	8002506 <ADC_ConfigureBoostMode+0x146>
        break;
 8002500:	bf00      	nop
 8002502:	e000      	b.n	8002506 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002504:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002506:	f7ff f8d3 	bl	80016b0 <HAL_GetREVID>
 800250a:	4603      	mov	r3, r0
 800250c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002510:	4293      	cmp	r3, r2
 8002512:	d815      	bhi.n	8002540 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4a2b      	ldr	r2, [pc, #172]	; (80025c4 <ADC_ConfigureBoostMode+0x204>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d908      	bls.n	800252e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800252a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800252c:	e03e      	b.n	80025ac <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800253c:	609a      	str	r2, [r3, #8]
}
 800253e:	e035      	b.n	80025ac <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	085b      	lsrs	r3, r3, #1
 8002544:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4a1f      	ldr	r2, [pc, #124]	; (80025c8 <ADC_ConfigureBoostMode+0x208>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d808      	bhi.n	8002560 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800255c:	609a      	str	r2, [r3, #8]
}
 800255e:	e025      	b.n	80025ac <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4a1a      	ldr	r2, [pc, #104]	; (80025cc <ADC_ConfigureBoostMode+0x20c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d80a      	bhi.n	800257e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800257a:	609a      	str	r2, [r3, #8]
}
 800257c:	e016      	b.n	80025ac <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4a13      	ldr	r2, [pc, #76]	; (80025d0 <ADC_ConfigureBoostMode+0x210>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d80a      	bhi.n	800259c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002598:	609a      	str	r2, [r3, #8]
}
 800259a:	e007      	b.n	80025ac <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80025aa:	609a      	str	r2, [r3, #8]
}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40022000 	.word	0x40022000
 80025b8:	40022100 	.word	0x40022100
 80025bc:	40022300 	.word	0x40022300
 80025c0:	58026300 	.word	0x58026300
 80025c4:	01312d00 	.word	0x01312d00
 80025c8:	005f5e10 	.word	0x005f5e10
 80025cc:	00bebc20 	.word	0x00bebc20
 80025d0:	017d7840 	.word	0x017d7840

080025d4 <LL_ADC_IsEnabled>:
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <LL_ADC_IsEnabled+0x18>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <LL_ADC_IsEnabled+0x1a>
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_ADC_REG_IsConversionOngoing>:
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b04      	cmp	r3, #4
 800260c:	d101      	bne.n	8002612 <LL_ADC_REG_IsConversionOngoing+0x18>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b09f      	sub	sp, #124	; 0x7c
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800263a:	2302      	movs	r3, #2
 800263c:	e0be      	b.n	80027bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800264a:	2300      	movs	r3, #0
 800264c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a5c      	ldr	r2, [pc, #368]	; (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d102      	bne.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002658:	4b5b      	ldr	r3, [pc, #364]	; (80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	e001      	b.n	8002662 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800265e:	2300      	movs	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10b      	bne.n	8002680 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266c:	f043 0220 	orr.w	r2, r3, #32
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e09d      	b.n	80027bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff ffb9 	bl	80025fa <LL_ADC_REG_IsConversionOngoing>
 8002688:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ffb3 	bl	80025fa <LL_ADC_REG_IsConversionOngoing>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d17f      	bne.n	800279a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800269a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800269c:	2b00      	cmp	r3, #0
 800269e:	d17c      	bne.n	800279a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a47      	ldr	r2, [pc, #284]	; (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d004      	beq.n	80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a46      	ldr	r2, [pc, #280]	; (80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d101      	bne.n	80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80026b4:	4b45      	ldr	r3, [pc, #276]	; (80027cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80026b6:	e000      	b.n	80026ba <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80026b8:	4b45      	ldr	r3, [pc, #276]	; (80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80026ba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d039      	beq.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80026c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a3a      	ldr	r2, [pc, #232]	; (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d004      	beq.n	80026ea <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a38      	ldr	r2, [pc, #224]	; (80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10e      	bne.n	8002708 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80026ea:	4836      	ldr	r0, [pc, #216]	; (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80026ec:	f7ff ff72 	bl	80025d4 <LL_ADC_IsEnabled>
 80026f0:	4604      	mov	r4, r0
 80026f2:	4835      	ldr	r0, [pc, #212]	; (80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80026f4:	f7ff ff6e 	bl	80025d4 <LL_ADC_IsEnabled>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4323      	orrs	r3, r4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf0c      	ite	eq
 8002700:	2301      	moveq	r3, #1
 8002702:	2300      	movne	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	e008      	b.n	800271a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002708:	4832      	ldr	r0, [pc, #200]	; (80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800270a:	f7ff ff63 	bl	80025d4 <LL_ADC_IsEnabled>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d047      	beq.n	80027ae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800271e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002724:	4013      	ands	r3, r2
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	6811      	ldr	r1, [r2, #0]
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	6892      	ldr	r2, [r2, #8]
 800272e:	430a      	orrs	r2, r1
 8002730:	431a      	orrs	r2, r3
 8002732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002734:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002736:	e03a      	b.n	80027ae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002742:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a1e      	ldr	r2, [pc, #120]	; (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d004      	beq.n	8002758 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d10e      	bne.n	8002776 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002758:	481a      	ldr	r0, [pc, #104]	; (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800275a:	f7ff ff3b 	bl	80025d4 <LL_ADC_IsEnabled>
 800275e:	4604      	mov	r4, r0
 8002760:	4819      	ldr	r0, [pc, #100]	; (80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002762:	f7ff ff37 	bl	80025d4 <LL_ADC_IsEnabled>
 8002766:	4603      	mov	r3, r0
 8002768:	4323      	orrs	r3, r4
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf0c      	ite	eq
 800276e:	2301      	moveq	r3, #1
 8002770:	2300      	movne	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	e008      	b.n	8002788 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002776:	4817      	ldr	r0, [pc, #92]	; (80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002778:	f7ff ff2c 	bl	80025d4 <LL_ADC_IsEnabled>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d010      	beq.n	80027ae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800278c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002792:	4013      	ands	r3, r2
 8002794:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002796:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002798:	e009      	b.n	80027ae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	f043 0220 	orr.w	r2, r3, #32
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80027ac:	e000      	b.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027ae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80027bc:	4618      	mov	r0, r3
 80027be:	377c      	adds	r7, #124	; 0x7c
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd90      	pop	{r4, r7, pc}
 80027c4:	40022000 	.word	0x40022000
 80027c8:	40022100 	.word	0x40022100
 80027cc:	40022300 	.word	0x40022300
 80027d0:	58026300 	.word	0x58026300
 80027d4:	58026000 	.word	0x58026000
 80027d8:	fffff0e0 	.word	0xfffff0e0

080027dc <__NVIC_SetPriorityGrouping>:
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <__NVIC_SetPriorityGrouping+0x40>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 8002806:	4313      	orrs	r3, r2
 8002808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280a:	4a04      	ldr	r2, [pc, #16]	; (800281c <__NVIC_SetPriorityGrouping+0x40>)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	60d3      	str	r3, [r2, #12]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	e000ed00 	.word	0xe000ed00
 8002820:	05fa0000 	.word	0x05fa0000

08002824 <__NVIC_GetPriorityGrouping>:
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <__NVIC_GetPriorityGrouping+0x18>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0307 	and.w	r3, r3, #7
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_EnableIRQ>:
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800284a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db0b      	blt.n	800286a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	4907      	ldr	r1, [pc, #28]	; (8002878 <__NVIC_EnableIRQ+0x38>)
 800285a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2001      	movs	r0, #1
 8002862:	fa00 f202 	lsl.w	r2, r0, r2
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000e100 	.word	0xe000e100

0800287c <__NVIC_SetPriority>:
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800288c:	2b00      	cmp	r3, #0
 800288e:	db0a      	blt.n	80028a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	b2da      	uxtb	r2, r3
 8002894:	490c      	ldr	r1, [pc, #48]	; (80028c8 <__NVIC_SetPriority+0x4c>)
 8002896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800289a:	0112      	lsls	r2, r2, #4
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	440b      	add	r3, r1
 80028a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028a4:	e00a      	b.n	80028bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4908      	ldr	r1, [pc, #32]	; (80028cc <__NVIC_SetPriority+0x50>)
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	3b04      	subs	r3, #4
 80028b4:	0112      	lsls	r2, r2, #4
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	440b      	add	r3, r1
 80028ba:	761a      	strb	r2, [r3, #24]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000e100 	.word	0xe000e100
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <NVIC_EncodePriority>:
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	; 0x24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f1c3 0307 	rsb	r3, r3, #7
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	bf28      	it	cs
 80028ee:	2304      	movcs	r3, #4
 80028f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3304      	adds	r3, #4
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	d902      	bls.n	8002900 <NVIC_EncodePriority+0x30>
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3b03      	subs	r3, #3
 80028fe:	e000      	b.n	8002902 <NVIC_EncodePriority+0x32>
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	f04f 32ff 	mov.w	r2, #4294967295
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43da      	mvns	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	401a      	ands	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002918:	f04f 31ff 	mov.w	r1, #4294967295
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	fa01 f303 	lsl.w	r3, r1, r3
 8002922:	43d9      	mvns	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	4313      	orrs	r3, r2
}
 800292a:	4618      	mov	r0, r3
 800292c:	3724      	adds	r7, #36	; 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002948:	d301      	bcc.n	800294e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800294a:	2301      	movs	r3, #1
 800294c:	e00f      	b.n	800296e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800294e:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <SysTick_Config+0x40>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002956:	210f      	movs	r1, #15
 8002958:	f04f 30ff 	mov.w	r0, #4294967295
 800295c:	f7ff ff8e 	bl	800287c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <SysTick_Config+0x40>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002966:	4b04      	ldr	r3, [pc, #16]	; (8002978 <SysTick_Config+0x40>)
 8002968:	2207      	movs	r2, #7
 800296a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	e000e010 	.word	0xe000e010

0800297c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ff29 	bl	80027dc <__NVIC_SetPriorityGrouping>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029a0:	f7ff ff40 	bl	8002824 <__NVIC_GetPriorityGrouping>
 80029a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	6978      	ldr	r0, [r7, #20]
 80029ac:	f7ff ff90 	bl	80028d0 <NVIC_EncodePriority>
 80029b0:	4602      	mov	r2, r0
 80029b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff5f 	bl	800287c <__NVIC_SetPriority>
}
 80029be:	bf00      	nop
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff33 	bl	8002840 <__NVIC_EnableIRQ>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff ffa4 	bl	8002938 <SysTick_Config>
 80029f0:	4603      	mov	r3, r0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002a04:	f7fe fe24 	bl	8001650 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e316      	b.n	8003042 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a66      	ldr	r2, [pc, #408]	; (8002bb4 <HAL_DMA_Init+0x1b8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d04a      	beq.n	8002ab4 <HAL_DMA_Init+0xb8>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a65      	ldr	r2, [pc, #404]	; (8002bb8 <HAL_DMA_Init+0x1bc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d045      	beq.n	8002ab4 <HAL_DMA_Init+0xb8>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a63      	ldr	r2, [pc, #396]	; (8002bbc <HAL_DMA_Init+0x1c0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d040      	beq.n	8002ab4 <HAL_DMA_Init+0xb8>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a62      	ldr	r2, [pc, #392]	; (8002bc0 <HAL_DMA_Init+0x1c4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d03b      	beq.n	8002ab4 <HAL_DMA_Init+0xb8>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a60      	ldr	r2, [pc, #384]	; (8002bc4 <HAL_DMA_Init+0x1c8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d036      	beq.n	8002ab4 <HAL_DMA_Init+0xb8>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a5f      	ldr	r2, [pc, #380]	; (8002bc8 <HAL_DMA_Init+0x1cc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d031      	beq.n	8002ab4 <HAL_DMA_Init+0xb8>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a5d      	ldr	r2, [pc, #372]	; (8002bcc <HAL_DMA_Init+0x1d0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d02c      	beq.n	8002ab4 <HAL_DMA_Init+0xb8>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a5c      	ldr	r2, [pc, #368]	; (8002bd0 <HAL_DMA_Init+0x1d4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d027      	beq.n	8002ab4 <HAL_DMA_Init+0xb8>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a5a      	ldr	r2, [pc, #360]	; (8002bd4 <HAL_DMA_Init+0x1d8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d022      	beq.n	8002ab4 <HAL_DMA_Init+0xb8>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a59      	ldr	r2, [pc, #356]	; (8002bd8 <HAL_DMA_Init+0x1dc>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d01d      	beq.n	8002ab4 <HAL_DMA_Init+0xb8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a57      	ldr	r2, [pc, #348]	; (8002bdc <HAL_DMA_Init+0x1e0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d018      	beq.n	8002ab4 <HAL_DMA_Init+0xb8>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a56      	ldr	r2, [pc, #344]	; (8002be0 <HAL_DMA_Init+0x1e4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d013      	beq.n	8002ab4 <HAL_DMA_Init+0xb8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a54      	ldr	r2, [pc, #336]	; (8002be4 <HAL_DMA_Init+0x1e8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00e      	beq.n	8002ab4 <HAL_DMA_Init+0xb8>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a53      	ldr	r2, [pc, #332]	; (8002be8 <HAL_DMA_Init+0x1ec>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d009      	beq.n	8002ab4 <HAL_DMA_Init+0xb8>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a51      	ldr	r2, [pc, #324]	; (8002bec <HAL_DMA_Init+0x1f0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_DMA_Init+0xb8>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a50      	ldr	r2, [pc, #320]	; (8002bf0 <HAL_DMA_Init+0x1f4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d101      	bne.n	8002ab8 <HAL_DMA_Init+0xbc>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <HAL_DMA_Init+0xbe>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 813b 	beq.w	8002d36 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a37      	ldr	r2, [pc, #220]	; (8002bb4 <HAL_DMA_Init+0x1b8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d04a      	beq.n	8002b70 <HAL_DMA_Init+0x174>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a36      	ldr	r2, [pc, #216]	; (8002bb8 <HAL_DMA_Init+0x1bc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d045      	beq.n	8002b70 <HAL_DMA_Init+0x174>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a34      	ldr	r2, [pc, #208]	; (8002bbc <HAL_DMA_Init+0x1c0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d040      	beq.n	8002b70 <HAL_DMA_Init+0x174>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a33      	ldr	r2, [pc, #204]	; (8002bc0 <HAL_DMA_Init+0x1c4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d03b      	beq.n	8002b70 <HAL_DMA_Init+0x174>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a31      	ldr	r2, [pc, #196]	; (8002bc4 <HAL_DMA_Init+0x1c8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d036      	beq.n	8002b70 <HAL_DMA_Init+0x174>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a30      	ldr	r2, [pc, #192]	; (8002bc8 <HAL_DMA_Init+0x1cc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d031      	beq.n	8002b70 <HAL_DMA_Init+0x174>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a2e      	ldr	r2, [pc, #184]	; (8002bcc <HAL_DMA_Init+0x1d0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d02c      	beq.n	8002b70 <HAL_DMA_Init+0x174>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2d      	ldr	r2, [pc, #180]	; (8002bd0 <HAL_DMA_Init+0x1d4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d027      	beq.n	8002b70 <HAL_DMA_Init+0x174>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2b      	ldr	r2, [pc, #172]	; (8002bd4 <HAL_DMA_Init+0x1d8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d022      	beq.n	8002b70 <HAL_DMA_Init+0x174>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a2a      	ldr	r2, [pc, #168]	; (8002bd8 <HAL_DMA_Init+0x1dc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d01d      	beq.n	8002b70 <HAL_DMA_Init+0x174>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a28      	ldr	r2, [pc, #160]	; (8002bdc <HAL_DMA_Init+0x1e0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d018      	beq.n	8002b70 <HAL_DMA_Init+0x174>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a27      	ldr	r2, [pc, #156]	; (8002be0 <HAL_DMA_Init+0x1e4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d013      	beq.n	8002b70 <HAL_DMA_Init+0x174>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a25      	ldr	r2, [pc, #148]	; (8002be4 <HAL_DMA_Init+0x1e8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00e      	beq.n	8002b70 <HAL_DMA_Init+0x174>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a24      	ldr	r2, [pc, #144]	; (8002be8 <HAL_DMA_Init+0x1ec>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d009      	beq.n	8002b70 <HAL_DMA_Init+0x174>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a22      	ldr	r2, [pc, #136]	; (8002bec <HAL_DMA_Init+0x1f0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d004      	beq.n	8002b70 <HAL_DMA_Init+0x174>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <HAL_DMA_Init+0x1f4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d108      	bne.n	8002b82 <HAL_DMA_Init+0x186>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e007      	b.n	8002b92 <HAL_DMA_Init+0x196>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b92:	e02f      	b.n	8002bf4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b94:	f7fe fd5c 	bl	8001650 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b05      	cmp	r3, #5
 8002ba0:	d928      	bls.n	8002bf4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2203      	movs	r2, #3
 8002bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e246      	b.n	8003042 <HAL_DMA_Init+0x646>
 8002bb4:	40020010 	.word	0x40020010
 8002bb8:	40020028 	.word	0x40020028
 8002bbc:	40020040 	.word	0x40020040
 8002bc0:	40020058 	.word	0x40020058
 8002bc4:	40020070 	.word	0x40020070
 8002bc8:	40020088 	.word	0x40020088
 8002bcc:	400200a0 	.word	0x400200a0
 8002bd0:	400200b8 	.word	0x400200b8
 8002bd4:	40020410 	.word	0x40020410
 8002bd8:	40020428 	.word	0x40020428
 8002bdc:	40020440 	.word	0x40020440
 8002be0:	40020458 	.word	0x40020458
 8002be4:	40020470 	.word	0x40020470
 8002be8:	40020488 	.word	0x40020488
 8002bec:	400204a0 	.word	0x400204a0
 8002bf0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1c8      	bne.n	8002b94 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4b83      	ldr	r3, [pc, #524]	; (8002e1c <HAL_DMA_Init+0x420>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002c1a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c26:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c32:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d107      	bne.n	8002c58 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	4313      	orrs	r3, r2
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002c58:	4b71      	ldr	r3, [pc, #452]	; (8002e20 <HAL_DMA_Init+0x424>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b71      	ldr	r3, [pc, #452]	; (8002e24 <HAL_DMA_Init+0x428>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c64:	d328      	bcc.n	8002cb8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b28      	cmp	r3, #40	; 0x28
 8002c6c:	d903      	bls.n	8002c76 <HAL_DMA_Init+0x27a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b2e      	cmp	r3, #46	; 0x2e
 8002c74:	d917      	bls.n	8002ca6 <HAL_DMA_Init+0x2aa>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8002c7c:	d903      	bls.n	8002c86 <HAL_DMA_Init+0x28a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b42      	cmp	r3, #66	; 0x42
 8002c84:	d90f      	bls.n	8002ca6 <HAL_DMA_Init+0x2aa>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b46      	cmp	r3, #70	; 0x46
 8002c8c:	d903      	bls.n	8002c96 <HAL_DMA_Init+0x29a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b48      	cmp	r3, #72	; 0x48
 8002c94:	d907      	bls.n	8002ca6 <HAL_DMA_Init+0x2aa>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b4e      	cmp	r3, #78	; 0x4e
 8002c9c:	d905      	bls.n	8002caa <HAL_DMA_Init+0x2ae>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b52      	cmp	r3, #82	; 0x52
 8002ca4:	d801      	bhi.n	8002caa <HAL_DMA_Init+0x2ae>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_DMA_Init+0x2b0>
 8002caa:	2300      	movs	r3, #0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f023 0307 	bic.w	r3, r3, #7
 8002cce:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d117      	bne.n	8002d12 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00e      	beq.n	8002d12 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f001 f9b9 	bl	800406c <DMA_CheckFifoParam>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2240      	movs	r2, #64	; 0x40
 8002d04:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e197      	b.n	8003042 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f001 f8f4 	bl	8003f08 <DMA_CalcBaseAndBitshift>
 8002d20:	4603      	mov	r3, r0
 8002d22:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	223f      	movs	r2, #63	; 0x3f
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	e0cd      	b.n	8002ed2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a3b      	ldr	r2, [pc, #236]	; (8002e28 <HAL_DMA_Init+0x42c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d022      	beq.n	8002d86 <HAL_DMA_Init+0x38a>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a39      	ldr	r2, [pc, #228]	; (8002e2c <HAL_DMA_Init+0x430>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d01d      	beq.n	8002d86 <HAL_DMA_Init+0x38a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a38      	ldr	r2, [pc, #224]	; (8002e30 <HAL_DMA_Init+0x434>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d018      	beq.n	8002d86 <HAL_DMA_Init+0x38a>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a36      	ldr	r2, [pc, #216]	; (8002e34 <HAL_DMA_Init+0x438>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d013      	beq.n	8002d86 <HAL_DMA_Init+0x38a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a35      	ldr	r2, [pc, #212]	; (8002e38 <HAL_DMA_Init+0x43c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00e      	beq.n	8002d86 <HAL_DMA_Init+0x38a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a33      	ldr	r2, [pc, #204]	; (8002e3c <HAL_DMA_Init+0x440>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d009      	beq.n	8002d86 <HAL_DMA_Init+0x38a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a32      	ldr	r2, [pc, #200]	; (8002e40 <HAL_DMA_Init+0x444>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d004      	beq.n	8002d86 <HAL_DMA_Init+0x38a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a30      	ldr	r2, [pc, #192]	; (8002e44 <HAL_DMA_Init+0x448>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <HAL_DMA_Init+0x38e>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_DMA_Init+0x390>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 8097 	beq.w	8002ec0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a24      	ldr	r2, [pc, #144]	; (8002e28 <HAL_DMA_Init+0x42c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d021      	beq.n	8002de0 <HAL_DMA_Init+0x3e4>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <HAL_DMA_Init+0x430>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01c      	beq.n	8002de0 <HAL_DMA_Init+0x3e4>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a21      	ldr	r2, [pc, #132]	; (8002e30 <HAL_DMA_Init+0x434>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d017      	beq.n	8002de0 <HAL_DMA_Init+0x3e4>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1f      	ldr	r2, [pc, #124]	; (8002e34 <HAL_DMA_Init+0x438>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d012      	beq.n	8002de0 <HAL_DMA_Init+0x3e4>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1e      	ldr	r2, [pc, #120]	; (8002e38 <HAL_DMA_Init+0x43c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00d      	beq.n	8002de0 <HAL_DMA_Init+0x3e4>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a1c      	ldr	r2, [pc, #112]	; (8002e3c <HAL_DMA_Init+0x440>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d008      	beq.n	8002de0 <HAL_DMA_Init+0x3e4>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a1b      	ldr	r2, [pc, #108]	; (8002e40 <HAL_DMA_Init+0x444>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d003      	beq.n	8002de0 <HAL_DMA_Init+0x3e4>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a19      	ldr	r2, [pc, #100]	; (8002e44 <HAL_DMA_Init+0x448>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2202      	movs	r2, #2
 8002dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_DMA_Init+0x44c>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b40      	cmp	r3, #64	; 0x40
 8002e08:	d020      	beq.n	8002e4c <HAL_DMA_Init+0x450>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b80      	cmp	r3, #128	; 0x80
 8002e10:	d102      	bne.n	8002e18 <HAL_DMA_Init+0x41c>
 8002e12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e16:	e01a      	b.n	8002e4e <HAL_DMA_Init+0x452>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e018      	b.n	8002e4e <HAL_DMA_Init+0x452>
 8002e1c:	fe10803f 	.word	0xfe10803f
 8002e20:	5c001000 	.word	0x5c001000
 8002e24:	ffff0000 	.word	0xffff0000
 8002e28:	58025408 	.word	0x58025408
 8002e2c:	5802541c 	.word	0x5802541c
 8002e30:	58025430 	.word	0x58025430
 8002e34:	58025444 	.word	0x58025444
 8002e38:	58025458 	.word	0x58025458
 8002e3c:	5802546c 	.word	0x5802546c
 8002e40:	58025480 	.word	0x58025480
 8002e44:	58025494 	.word	0x58025494
 8002e48:	fffe000f 	.word	0xfffe000f
 8002e4c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68d2      	ldr	r2, [r2, #12]
 8002e52:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e7c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b6e      	ldr	r3, [pc, #440]	; (800304c <HAL_DMA_Init+0x650>)
 8002e94:	4413      	add	r3, r2
 8002e96:	4a6e      	ldr	r2, [pc, #440]	; (8003050 <HAL_DMA_Init+0x654>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	009a      	lsls	r2, r3, #2
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f001 f82f 	bl	8003f08 <DMA_CalcBaseAndBitshift>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	e008      	b.n	8002ed2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2240      	movs	r2, #64	; 0x40
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2203      	movs	r2, #3
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e0b7      	b.n	8003042 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a5f      	ldr	r2, [pc, #380]	; (8003054 <HAL_DMA_Init+0x658>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d072      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a5d      	ldr	r2, [pc, #372]	; (8003058 <HAL_DMA_Init+0x65c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d06d      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a5c      	ldr	r2, [pc, #368]	; (800305c <HAL_DMA_Init+0x660>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d068      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a5a      	ldr	r2, [pc, #360]	; (8003060 <HAL_DMA_Init+0x664>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d063      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a59      	ldr	r2, [pc, #356]	; (8003064 <HAL_DMA_Init+0x668>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d05e      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a57      	ldr	r2, [pc, #348]	; (8003068 <HAL_DMA_Init+0x66c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d059      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a56      	ldr	r2, [pc, #344]	; (800306c <HAL_DMA_Init+0x670>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d054      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a54      	ldr	r2, [pc, #336]	; (8003070 <HAL_DMA_Init+0x674>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d04f      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a53      	ldr	r2, [pc, #332]	; (8003074 <HAL_DMA_Init+0x678>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d04a      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a51      	ldr	r2, [pc, #324]	; (8003078 <HAL_DMA_Init+0x67c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d045      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a50      	ldr	r2, [pc, #320]	; (800307c <HAL_DMA_Init+0x680>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d040      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a4e      	ldr	r2, [pc, #312]	; (8003080 <HAL_DMA_Init+0x684>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d03b      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a4d      	ldr	r2, [pc, #308]	; (8003084 <HAL_DMA_Init+0x688>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d036      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a4b      	ldr	r2, [pc, #300]	; (8003088 <HAL_DMA_Init+0x68c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d031      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a4a      	ldr	r2, [pc, #296]	; (800308c <HAL_DMA_Init+0x690>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d02c      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a48      	ldr	r2, [pc, #288]	; (8003090 <HAL_DMA_Init+0x694>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d027      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a47      	ldr	r2, [pc, #284]	; (8003094 <HAL_DMA_Init+0x698>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d022      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a45      	ldr	r2, [pc, #276]	; (8003098 <HAL_DMA_Init+0x69c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d01d      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a44      	ldr	r2, [pc, #272]	; (800309c <HAL_DMA_Init+0x6a0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d018      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a42      	ldr	r2, [pc, #264]	; (80030a0 <HAL_DMA_Init+0x6a4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a41      	ldr	r2, [pc, #260]	; (80030a4 <HAL_DMA_Init+0x6a8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00e      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a3f      	ldr	r2, [pc, #252]	; (80030a8 <HAL_DMA_Init+0x6ac>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a3e      	ldr	r2, [pc, #248]	; (80030ac <HAL_DMA_Init+0x6b0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d004      	beq.n	8002fc2 <HAL_DMA_Init+0x5c6>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a3c      	ldr	r2, [pc, #240]	; (80030b0 <HAL_DMA_Init+0x6b4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d101      	bne.n	8002fc6 <HAL_DMA_Init+0x5ca>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_DMA_Init+0x5cc>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d032      	beq.n	8003032 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f001 f8c9 	bl	8004164 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b80      	cmp	r3, #128	; 0x80
 8002fd8:	d102      	bne.n	8002fe0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ff4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d010      	beq.n	8003020 <HAL_DMA_Init+0x624>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b08      	cmp	r3, #8
 8003004:	d80c      	bhi.n	8003020 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f001 f946 	bl	8004298 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	e008      	b.n	8003032 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	a7fdabf8 	.word	0xa7fdabf8
 8003050:	cccccccd 	.word	0xcccccccd
 8003054:	40020010 	.word	0x40020010
 8003058:	40020028 	.word	0x40020028
 800305c:	40020040 	.word	0x40020040
 8003060:	40020058 	.word	0x40020058
 8003064:	40020070 	.word	0x40020070
 8003068:	40020088 	.word	0x40020088
 800306c:	400200a0 	.word	0x400200a0
 8003070:	400200b8 	.word	0x400200b8
 8003074:	40020410 	.word	0x40020410
 8003078:	40020428 	.word	0x40020428
 800307c:	40020440 	.word	0x40020440
 8003080:	40020458 	.word	0x40020458
 8003084:	40020470 	.word	0x40020470
 8003088:	40020488 	.word	0x40020488
 800308c:	400204a0 	.word	0x400204a0
 8003090:	400204b8 	.word	0x400204b8
 8003094:	58025408 	.word	0x58025408
 8003098:	5802541c 	.word	0x5802541c
 800309c:	58025430 	.word	0x58025430
 80030a0:	58025444 	.word	0x58025444
 80030a4:	58025458 	.word	0x58025458
 80030a8:	5802546c 	.word	0x5802546c
 80030ac:	58025480 	.word	0x58025480
 80030b0:	58025494 	.word	0x58025494

080030b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030c0:	4b67      	ldr	r3, [pc, #412]	; (8003260 <HAL_DMA_IRQHandler+0x1ac>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a67      	ldr	r2, [pc, #412]	; (8003264 <HAL_DMA_IRQHandler+0x1b0>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	0a9b      	lsrs	r3, r3, #10
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a5f      	ldr	r2, [pc, #380]	; (8003268 <HAL_DMA_IRQHandler+0x1b4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d04a      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a5d      	ldr	r2, [pc, #372]	; (800326c <HAL_DMA_IRQHandler+0x1b8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d045      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a5c      	ldr	r2, [pc, #368]	; (8003270 <HAL_DMA_IRQHandler+0x1bc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d040      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a5a      	ldr	r2, [pc, #360]	; (8003274 <HAL_DMA_IRQHandler+0x1c0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d03b      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a59      	ldr	r2, [pc, #356]	; (8003278 <HAL_DMA_IRQHandler+0x1c4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d036      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a57      	ldr	r2, [pc, #348]	; (800327c <HAL_DMA_IRQHandler+0x1c8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d031      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a56      	ldr	r2, [pc, #344]	; (8003280 <HAL_DMA_IRQHandler+0x1cc>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d02c      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a54      	ldr	r2, [pc, #336]	; (8003284 <HAL_DMA_IRQHandler+0x1d0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d027      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a53      	ldr	r2, [pc, #332]	; (8003288 <HAL_DMA_IRQHandler+0x1d4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d022      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a51      	ldr	r2, [pc, #324]	; (800328c <HAL_DMA_IRQHandler+0x1d8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01d      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a50      	ldr	r2, [pc, #320]	; (8003290 <HAL_DMA_IRQHandler+0x1dc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d018      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a4e      	ldr	r2, [pc, #312]	; (8003294 <HAL_DMA_IRQHandler+0x1e0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a4d      	ldr	r2, [pc, #308]	; (8003298 <HAL_DMA_IRQHandler+0x1e4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00e      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a4b      	ldr	r2, [pc, #300]	; (800329c <HAL_DMA_IRQHandler+0x1e8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d009      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a4a      	ldr	r2, [pc, #296]	; (80032a0 <HAL_DMA_IRQHandler+0x1ec>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d004      	beq.n	8003186 <HAL_DMA_IRQHandler+0xd2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a48      	ldr	r2, [pc, #288]	; (80032a4 <HAL_DMA_IRQHandler+0x1f0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d101      	bne.n	800318a <HAL_DMA_IRQHandler+0xd6>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_DMA_IRQHandler+0xd8>
 800318a:	2300      	movs	r3, #0
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 842b 	beq.w	80039e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	2208      	movs	r2, #8
 800319c:	409a      	lsls	r2, r3
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 80a2 	beq.w	80032ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a2e      	ldr	r2, [pc, #184]	; (8003268 <HAL_DMA_IRQHandler+0x1b4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d04a      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2d      	ldr	r2, [pc, #180]	; (800326c <HAL_DMA_IRQHandler+0x1b8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d045      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2b      	ldr	r2, [pc, #172]	; (8003270 <HAL_DMA_IRQHandler+0x1bc>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d040      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2a      	ldr	r2, [pc, #168]	; (8003274 <HAL_DMA_IRQHandler+0x1c0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d03b      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a28      	ldr	r2, [pc, #160]	; (8003278 <HAL_DMA_IRQHandler+0x1c4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d036      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a27      	ldr	r2, [pc, #156]	; (800327c <HAL_DMA_IRQHandler+0x1c8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d031      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a25      	ldr	r2, [pc, #148]	; (8003280 <HAL_DMA_IRQHandler+0x1cc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d02c      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a24      	ldr	r2, [pc, #144]	; (8003284 <HAL_DMA_IRQHandler+0x1d0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d027      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a22      	ldr	r2, [pc, #136]	; (8003288 <HAL_DMA_IRQHandler+0x1d4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d022      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a21      	ldr	r2, [pc, #132]	; (800328c <HAL_DMA_IRQHandler+0x1d8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d01d      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1f      	ldr	r2, [pc, #124]	; (8003290 <HAL_DMA_IRQHandler+0x1dc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d018      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1e      	ldr	r2, [pc, #120]	; (8003294 <HAL_DMA_IRQHandler+0x1e0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d013      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <HAL_DMA_IRQHandler+0x1e4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00e      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1b      	ldr	r2, [pc, #108]	; (800329c <HAL_DMA_IRQHandler+0x1e8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d009      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a19      	ldr	r2, [pc, #100]	; (80032a0 <HAL_DMA_IRQHandler+0x1ec>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d004      	beq.n	8003248 <HAL_DMA_IRQHandler+0x194>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <HAL_DMA_IRQHandler+0x1f0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d12f      	bne.n	80032a8 <HAL_DMA_IRQHandler+0x1f4>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	bf14      	ite	ne
 8003256:	2301      	movne	r3, #1
 8003258:	2300      	moveq	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	e02e      	b.n	80032bc <HAL_DMA_IRQHandler+0x208>
 800325e:	bf00      	nop
 8003260:	24000000 	.word	0x24000000
 8003264:	1b4e81b5 	.word	0x1b4e81b5
 8003268:	40020010 	.word	0x40020010
 800326c:	40020028 	.word	0x40020028
 8003270:	40020040 	.word	0x40020040
 8003274:	40020058 	.word	0x40020058
 8003278:	40020070 	.word	0x40020070
 800327c:	40020088 	.word	0x40020088
 8003280:	400200a0 	.word	0x400200a0
 8003284:	400200b8 	.word	0x400200b8
 8003288:	40020410 	.word	0x40020410
 800328c:	40020428 	.word	0x40020428
 8003290:	40020440 	.word	0x40020440
 8003294:	40020458 	.word	0x40020458
 8003298:	40020470 	.word	0x40020470
 800329c:	40020488 	.word	0x40020488
 80032a0:	400204a0 	.word	0x400204a0
 80032a4:	400204b8 	.word	0x400204b8
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	bf14      	ite	ne
 80032b6:	2301      	movne	r3, #1
 80032b8:	2300      	moveq	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d015      	beq.n	80032ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0204 	bic.w	r2, r2, #4
 80032ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	2208      	movs	r2, #8
 80032da:	409a      	lsls	r2, r3
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f043 0201 	orr.w	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	fa22 f303 	lsr.w	r3, r2, r3
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d06e      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a69      	ldr	r2, [pc, #420]	; (80034ac <HAL_DMA_IRQHandler+0x3f8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d04a      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a67      	ldr	r2, [pc, #412]	; (80034b0 <HAL_DMA_IRQHandler+0x3fc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d045      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a66      	ldr	r2, [pc, #408]	; (80034b4 <HAL_DMA_IRQHandler+0x400>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d040      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a64      	ldr	r2, [pc, #400]	; (80034b8 <HAL_DMA_IRQHandler+0x404>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d03b      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a63      	ldr	r2, [pc, #396]	; (80034bc <HAL_DMA_IRQHandler+0x408>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d036      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a61      	ldr	r2, [pc, #388]	; (80034c0 <HAL_DMA_IRQHandler+0x40c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d031      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a60      	ldr	r2, [pc, #384]	; (80034c4 <HAL_DMA_IRQHandler+0x410>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d02c      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a5e      	ldr	r2, [pc, #376]	; (80034c8 <HAL_DMA_IRQHandler+0x414>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d027      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a5d      	ldr	r2, [pc, #372]	; (80034cc <HAL_DMA_IRQHandler+0x418>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d022      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a5b      	ldr	r2, [pc, #364]	; (80034d0 <HAL_DMA_IRQHandler+0x41c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d01d      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a5a      	ldr	r2, [pc, #360]	; (80034d4 <HAL_DMA_IRQHandler+0x420>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d018      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a58      	ldr	r2, [pc, #352]	; (80034d8 <HAL_DMA_IRQHandler+0x424>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a57      	ldr	r2, [pc, #348]	; (80034dc <HAL_DMA_IRQHandler+0x428>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00e      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a55      	ldr	r2, [pc, #340]	; (80034e0 <HAL_DMA_IRQHandler+0x42c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d009      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a54      	ldr	r2, [pc, #336]	; (80034e4 <HAL_DMA_IRQHandler+0x430>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d004      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2ee>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a52      	ldr	r2, [pc, #328]	; (80034e8 <HAL_DMA_IRQHandler+0x434>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d10a      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x304>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf14      	ite	ne
 80033b0:	2301      	movne	r3, #1
 80033b2:	2300      	moveq	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	e003      	b.n	80033c0 <HAL_DMA_IRQHandler+0x30c>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2300      	movs	r3, #0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00d      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	2201      	movs	r2, #1
 80033ce:	409a      	lsls	r2, r3
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	f043 0202 	orr.w	r2, r3, #2
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	2204      	movs	r2, #4
 80033ea:	409a      	lsls	r2, r3
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 808f 	beq.w	8003514 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a2c      	ldr	r2, [pc, #176]	; (80034ac <HAL_DMA_IRQHandler+0x3f8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d04a      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a2a      	ldr	r2, [pc, #168]	; (80034b0 <HAL_DMA_IRQHandler+0x3fc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d045      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a29      	ldr	r2, [pc, #164]	; (80034b4 <HAL_DMA_IRQHandler+0x400>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d040      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a27      	ldr	r2, [pc, #156]	; (80034b8 <HAL_DMA_IRQHandler+0x404>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d03b      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a26      	ldr	r2, [pc, #152]	; (80034bc <HAL_DMA_IRQHandler+0x408>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d036      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a24      	ldr	r2, [pc, #144]	; (80034c0 <HAL_DMA_IRQHandler+0x40c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d031      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a23      	ldr	r2, [pc, #140]	; (80034c4 <HAL_DMA_IRQHandler+0x410>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d02c      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a21      	ldr	r2, [pc, #132]	; (80034c8 <HAL_DMA_IRQHandler+0x414>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d027      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a20      	ldr	r2, [pc, #128]	; (80034cc <HAL_DMA_IRQHandler+0x418>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d022      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1e      	ldr	r2, [pc, #120]	; (80034d0 <HAL_DMA_IRQHandler+0x41c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01d      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <HAL_DMA_IRQHandler+0x420>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d018      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1b      	ldr	r2, [pc, #108]	; (80034d8 <HAL_DMA_IRQHandler+0x424>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1a      	ldr	r2, [pc, #104]	; (80034dc <HAL_DMA_IRQHandler+0x428>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d00e      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a18      	ldr	r2, [pc, #96]	; (80034e0 <HAL_DMA_IRQHandler+0x42c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d009      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a17      	ldr	r2, [pc, #92]	; (80034e4 <HAL_DMA_IRQHandler+0x430>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d004      	beq.n	8003496 <HAL_DMA_IRQHandler+0x3e2>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a15      	ldr	r2, [pc, #84]	; (80034e8 <HAL_DMA_IRQHandler+0x434>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d12a      	bne.n	80034ec <HAL_DMA_IRQHandler+0x438>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e023      	b.n	80034f4 <HAL_DMA_IRQHandler+0x440>
 80034ac:	40020010 	.word	0x40020010
 80034b0:	40020028 	.word	0x40020028
 80034b4:	40020040 	.word	0x40020040
 80034b8:	40020058 	.word	0x40020058
 80034bc:	40020070 	.word	0x40020070
 80034c0:	40020088 	.word	0x40020088
 80034c4:	400200a0 	.word	0x400200a0
 80034c8:	400200b8 	.word	0x400200b8
 80034cc:	40020410 	.word	0x40020410
 80034d0:	40020428 	.word	0x40020428
 80034d4:	40020440 	.word	0x40020440
 80034d8:	40020458 	.word	0x40020458
 80034dc:	40020470 	.word	0x40020470
 80034e0:	40020488 	.word	0x40020488
 80034e4:	400204a0 	.word	0x400204a0
 80034e8:	400204b8 	.word	0x400204b8
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2300      	movs	r3, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00d      	beq.n	8003514 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	2204      	movs	r2, #4
 8003502:	409a      	lsls	r2, r3
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350c:	f043 0204 	orr.w	r2, r3, #4
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	2210      	movs	r2, #16
 800351e:	409a      	lsls	r2, r3
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80a6 	beq.w	8003676 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a85      	ldr	r2, [pc, #532]	; (8003744 <HAL_DMA_IRQHandler+0x690>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d04a      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a83      	ldr	r2, [pc, #524]	; (8003748 <HAL_DMA_IRQHandler+0x694>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d045      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a82      	ldr	r2, [pc, #520]	; (800374c <HAL_DMA_IRQHandler+0x698>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d040      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a80      	ldr	r2, [pc, #512]	; (8003750 <HAL_DMA_IRQHandler+0x69c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d03b      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a7f      	ldr	r2, [pc, #508]	; (8003754 <HAL_DMA_IRQHandler+0x6a0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d036      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a7d      	ldr	r2, [pc, #500]	; (8003758 <HAL_DMA_IRQHandler+0x6a4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d031      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a7c      	ldr	r2, [pc, #496]	; (800375c <HAL_DMA_IRQHandler+0x6a8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d02c      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a7a      	ldr	r2, [pc, #488]	; (8003760 <HAL_DMA_IRQHandler+0x6ac>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d027      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a79      	ldr	r2, [pc, #484]	; (8003764 <HAL_DMA_IRQHandler+0x6b0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d022      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a77      	ldr	r2, [pc, #476]	; (8003768 <HAL_DMA_IRQHandler+0x6b4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01d      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a76      	ldr	r2, [pc, #472]	; (800376c <HAL_DMA_IRQHandler+0x6b8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d018      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a74      	ldr	r2, [pc, #464]	; (8003770 <HAL_DMA_IRQHandler+0x6bc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d013      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a73      	ldr	r2, [pc, #460]	; (8003774 <HAL_DMA_IRQHandler+0x6c0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00e      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a71      	ldr	r2, [pc, #452]	; (8003778 <HAL_DMA_IRQHandler+0x6c4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d009      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a70      	ldr	r2, [pc, #448]	; (800377c <HAL_DMA_IRQHandler+0x6c8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d004      	beq.n	80035ca <HAL_DMA_IRQHandler+0x516>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a6e      	ldr	r2, [pc, #440]	; (8003780 <HAL_DMA_IRQHandler+0x6cc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d10a      	bne.n	80035e0 <HAL_DMA_IRQHandler+0x52c>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf14      	ite	ne
 80035d8:	2301      	movne	r3, #1
 80035da:	2300      	moveq	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	e009      	b.n	80035f4 <HAL_DMA_IRQHandler+0x540>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf14      	ite	ne
 80035ee:	2301      	movne	r3, #1
 80035f0:	2300      	moveq	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d03e      	beq.n	8003676 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fc:	f003 031f 	and.w	r3, r3, #31
 8003600:	2210      	movs	r2, #16
 8003602:	409a      	lsls	r2, r3
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d018      	beq.n	8003648 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d108      	bne.n	8003636 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d024      	beq.n	8003676 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
 8003634:	e01f      	b.n	8003676 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363a:	2b00      	cmp	r3, #0
 800363c:	d01b      	beq.n	8003676 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4798      	blx	r3
 8003646:	e016      	b.n	8003676 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d107      	bne.n	8003666 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0208 	bic.w	r2, r2, #8
 8003664:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	2220      	movs	r2, #32
 8003680:	409a      	lsls	r2, r3
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 8110 	beq.w	80038ac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2c      	ldr	r2, [pc, #176]	; (8003744 <HAL_DMA_IRQHandler+0x690>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d04a      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2b      	ldr	r2, [pc, #172]	; (8003748 <HAL_DMA_IRQHandler+0x694>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d045      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a29      	ldr	r2, [pc, #164]	; (800374c <HAL_DMA_IRQHandler+0x698>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d040      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a28      	ldr	r2, [pc, #160]	; (8003750 <HAL_DMA_IRQHandler+0x69c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d03b      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a26      	ldr	r2, [pc, #152]	; (8003754 <HAL_DMA_IRQHandler+0x6a0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d036      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a25      	ldr	r2, [pc, #148]	; (8003758 <HAL_DMA_IRQHandler+0x6a4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d031      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a23      	ldr	r2, [pc, #140]	; (800375c <HAL_DMA_IRQHandler+0x6a8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d02c      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a22      	ldr	r2, [pc, #136]	; (8003760 <HAL_DMA_IRQHandler+0x6ac>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d027      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a20      	ldr	r2, [pc, #128]	; (8003764 <HAL_DMA_IRQHandler+0x6b0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d022      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1f      	ldr	r2, [pc, #124]	; (8003768 <HAL_DMA_IRQHandler+0x6b4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d01d      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1d      	ldr	r2, [pc, #116]	; (800376c <HAL_DMA_IRQHandler+0x6b8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d018      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1c      	ldr	r2, [pc, #112]	; (8003770 <HAL_DMA_IRQHandler+0x6bc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1a      	ldr	r2, [pc, #104]	; (8003774 <HAL_DMA_IRQHandler+0x6c0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00e      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a19      	ldr	r2, [pc, #100]	; (8003778 <HAL_DMA_IRQHandler+0x6c4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d009      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a17      	ldr	r2, [pc, #92]	; (800377c <HAL_DMA_IRQHandler+0x6c8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d004      	beq.n	800372c <HAL_DMA_IRQHandler+0x678>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a16      	ldr	r2, [pc, #88]	; (8003780 <HAL_DMA_IRQHandler+0x6cc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d12b      	bne.n	8003784 <HAL_DMA_IRQHandler+0x6d0>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b00      	cmp	r3, #0
 8003738:	bf14      	ite	ne
 800373a:	2301      	movne	r3, #1
 800373c:	2300      	moveq	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	e02a      	b.n	8003798 <HAL_DMA_IRQHandler+0x6e4>
 8003742:	bf00      	nop
 8003744:	40020010 	.word	0x40020010
 8003748:	40020028 	.word	0x40020028
 800374c:	40020040 	.word	0x40020040
 8003750:	40020058 	.word	0x40020058
 8003754:	40020070 	.word	0x40020070
 8003758:	40020088 	.word	0x40020088
 800375c:	400200a0 	.word	0x400200a0
 8003760:	400200b8 	.word	0x400200b8
 8003764:	40020410 	.word	0x40020410
 8003768:	40020428 	.word	0x40020428
 800376c:	40020440 	.word	0x40020440
 8003770:	40020458 	.word	0x40020458
 8003774:	40020470 	.word	0x40020470
 8003778:	40020488 	.word	0x40020488
 800377c:	400204a0 	.word	0x400204a0
 8003780:	400204b8 	.word	0x400204b8
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	bf14      	ite	ne
 8003792:	2301      	movne	r3, #1
 8003794:	2300      	moveq	r3, #0
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8087 	beq.w	80038ac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a2:	f003 031f 	and.w	r3, r3, #31
 80037a6:	2220      	movs	r2, #32
 80037a8:	409a      	lsls	r2, r3
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d139      	bne.n	800382e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0216 	bic.w	r2, r2, #22
 80037c8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037d8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_DMA_IRQHandler+0x736>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0208 	bic.w	r2, r2, #8
 80037f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	223f      	movs	r2, #63	; 0x3f
 8003804:	409a      	lsls	r2, r3
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 834a 	beq.w	8003eb8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
          }
          return;
 800382c:	e344      	b.n	8003eb8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d018      	beq.n	800386e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d108      	bne.n	800385c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	2b00      	cmp	r3, #0
 8003850:	d02c      	beq.n	80038ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
 800385a:	e027      	b.n	80038ac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d023      	beq.n	80038ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	4798      	blx	r3
 800386c:	e01e      	b.n	80038ac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10f      	bne.n	800389c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0210 	bic.w	r2, r2, #16
 800388a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8306 	beq.w	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8088 	beq.w	80039d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2204      	movs	r2, #4
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a7a      	ldr	r2, [pc, #488]	; (8003abc <HAL_DMA_IRQHandler+0xa08>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d04a      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a79      	ldr	r2, [pc, #484]	; (8003ac0 <HAL_DMA_IRQHandler+0xa0c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d045      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a77      	ldr	r2, [pc, #476]	; (8003ac4 <HAL_DMA_IRQHandler+0xa10>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d040      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a76      	ldr	r2, [pc, #472]	; (8003ac8 <HAL_DMA_IRQHandler+0xa14>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d03b      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a74      	ldr	r2, [pc, #464]	; (8003acc <HAL_DMA_IRQHandler+0xa18>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d036      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a73      	ldr	r2, [pc, #460]	; (8003ad0 <HAL_DMA_IRQHandler+0xa1c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d031      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a71      	ldr	r2, [pc, #452]	; (8003ad4 <HAL_DMA_IRQHandler+0xa20>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d02c      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a70      	ldr	r2, [pc, #448]	; (8003ad8 <HAL_DMA_IRQHandler+0xa24>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d027      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a6e      	ldr	r2, [pc, #440]	; (8003adc <HAL_DMA_IRQHandler+0xa28>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d022      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a6d      	ldr	r2, [pc, #436]	; (8003ae0 <HAL_DMA_IRQHandler+0xa2c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d01d      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a6b      	ldr	r2, [pc, #428]	; (8003ae4 <HAL_DMA_IRQHandler+0xa30>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d018      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6a      	ldr	r2, [pc, #424]	; (8003ae8 <HAL_DMA_IRQHandler+0xa34>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d013      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a68      	ldr	r2, [pc, #416]	; (8003aec <HAL_DMA_IRQHandler+0xa38>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00e      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a67      	ldr	r2, [pc, #412]	; (8003af0 <HAL_DMA_IRQHandler+0xa3c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d009      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a65      	ldr	r2, [pc, #404]	; (8003af4 <HAL_DMA_IRQHandler+0xa40>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <HAL_DMA_IRQHandler+0x8b8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a64      	ldr	r2, [pc, #400]	; (8003af8 <HAL_DMA_IRQHandler+0xa44>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d108      	bne.n	800397e <HAL_DMA_IRQHandler+0x8ca>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0201 	bic.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	e007      	b.n	800398e <HAL_DMA_IRQHandler+0x8da>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0201 	bic.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	3301      	adds	r3, #1
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003996:	429a      	cmp	r2, r3
 8003998:	d307      	bcc.n	80039aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f2      	bne.n	800398e <HAL_DMA_IRQHandler+0x8da>
 80039a8:	e000      	b.n	80039ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 80039aa:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2203      	movs	r2, #3
 80039c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80039ca:	e003      	b.n	80039d4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 8272 	beq.w	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
 80039e6:	e26c      	b.n	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a43      	ldr	r2, [pc, #268]	; (8003afc <HAL_DMA_IRQHandler+0xa48>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d022      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x984>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a42      	ldr	r2, [pc, #264]	; (8003b00 <HAL_DMA_IRQHandler+0xa4c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d01d      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x984>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a40      	ldr	r2, [pc, #256]	; (8003b04 <HAL_DMA_IRQHandler+0xa50>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d018      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x984>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a3f      	ldr	r2, [pc, #252]	; (8003b08 <HAL_DMA_IRQHandler+0xa54>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d013      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x984>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a3d      	ldr	r2, [pc, #244]	; (8003b0c <HAL_DMA_IRQHandler+0xa58>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00e      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x984>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a3c      	ldr	r2, [pc, #240]	; (8003b10 <HAL_DMA_IRQHandler+0xa5c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d009      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x984>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a3a      	ldr	r2, [pc, #232]	; (8003b14 <HAL_DMA_IRQHandler+0xa60>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d004      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x984>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a39      	ldr	r2, [pc, #228]	; (8003b18 <HAL_DMA_IRQHandler+0xa64>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d101      	bne.n	8003a3c <HAL_DMA_IRQHandler+0x988>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_DMA_IRQHandler+0x98a>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 823f 	beq.w	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	2204      	movs	r2, #4
 8003a56:	409a      	lsls	r2, r3
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80cd 	beq.w	8003bfc <HAL_DMA_IRQHandler+0xb48>
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80c7 	beq.w	8003bfc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	2204      	movs	r2, #4
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d049      	beq.n	8003b1c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8210 	beq.w	8003ebc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aa4:	e20a      	b.n	8003ebc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 8206 	beq.w	8003ebc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ab8:	e200      	b.n	8003ebc <HAL_DMA_IRQHandler+0xe08>
 8003aba:	bf00      	nop
 8003abc:	40020010 	.word	0x40020010
 8003ac0:	40020028 	.word	0x40020028
 8003ac4:	40020040 	.word	0x40020040
 8003ac8:	40020058 	.word	0x40020058
 8003acc:	40020070 	.word	0x40020070
 8003ad0:	40020088 	.word	0x40020088
 8003ad4:	400200a0 	.word	0x400200a0
 8003ad8:	400200b8 	.word	0x400200b8
 8003adc:	40020410 	.word	0x40020410
 8003ae0:	40020428 	.word	0x40020428
 8003ae4:	40020440 	.word	0x40020440
 8003ae8:	40020458 	.word	0x40020458
 8003aec:	40020470 	.word	0x40020470
 8003af0:	40020488 	.word	0x40020488
 8003af4:	400204a0 	.word	0x400204a0
 8003af8:	400204b8 	.word	0x400204b8
 8003afc:	58025408 	.word	0x58025408
 8003b00:	5802541c 	.word	0x5802541c
 8003b04:	58025430 	.word	0x58025430
 8003b08:	58025444 	.word	0x58025444
 8003b0c:	58025458 	.word	0x58025458
 8003b10:	5802546c 	.word	0x5802546c
 8003b14:	58025480 	.word	0x58025480
 8003b18:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d160      	bne.n	8003be8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a8c      	ldr	r2, [pc, #560]	; (8003d5c <HAL_DMA_IRQHandler+0xca8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d04a      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a8a      	ldr	r2, [pc, #552]	; (8003d60 <HAL_DMA_IRQHandler+0xcac>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d045      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a89      	ldr	r2, [pc, #548]	; (8003d64 <HAL_DMA_IRQHandler+0xcb0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d040      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a87      	ldr	r2, [pc, #540]	; (8003d68 <HAL_DMA_IRQHandler+0xcb4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d03b      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a86      	ldr	r2, [pc, #536]	; (8003d6c <HAL_DMA_IRQHandler+0xcb8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d036      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a84      	ldr	r2, [pc, #528]	; (8003d70 <HAL_DMA_IRQHandler+0xcbc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d031      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a83      	ldr	r2, [pc, #524]	; (8003d74 <HAL_DMA_IRQHandler+0xcc0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d02c      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a81      	ldr	r2, [pc, #516]	; (8003d78 <HAL_DMA_IRQHandler+0xcc4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d027      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a80      	ldr	r2, [pc, #512]	; (8003d7c <HAL_DMA_IRQHandler+0xcc8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d022      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a7e      	ldr	r2, [pc, #504]	; (8003d80 <HAL_DMA_IRQHandler+0xccc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d01d      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7d      	ldr	r2, [pc, #500]	; (8003d84 <HAL_DMA_IRQHandler+0xcd0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d018      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a7b      	ldr	r2, [pc, #492]	; (8003d88 <HAL_DMA_IRQHandler+0xcd4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d013      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a7a      	ldr	r2, [pc, #488]	; (8003d8c <HAL_DMA_IRQHandler+0xcd8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a78      	ldr	r2, [pc, #480]	; (8003d90 <HAL_DMA_IRQHandler+0xcdc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d009      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a77      	ldr	r2, [pc, #476]	; (8003d94 <HAL_DMA_IRQHandler+0xce0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d004      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xb12>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a75      	ldr	r2, [pc, #468]	; (8003d98 <HAL_DMA_IRQHandler+0xce4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d108      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0xb24>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0208 	bic.w	r2, r2, #8
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e007      	b.n	8003be8 <HAL_DMA_IRQHandler+0xb34>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0204 	bic.w	r2, r2, #4
 8003be6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8165 	beq.w	8003ebc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bfa:	e15f      	b.n	8003ebc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	2202      	movs	r2, #2
 8003c06:	409a      	lsls	r2, r3
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80c5 	beq.w	8003d9c <HAL_DMA_IRQHandler+0xce8>
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80bf 	beq.w	8003d9c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c22:	f003 031f 	and.w	r3, r3, #31
 8003c26:	2202      	movs	r2, #2
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d018      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 813a 	beq.w	8003ec0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c54:	e134      	b.n	8003ec0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8130 	beq.w	8003ec0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c68:	e12a      	b.n	8003ec0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d168      	bne.n	8003d46 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a38      	ldr	r2, [pc, #224]	; (8003d5c <HAL_DMA_IRQHandler+0xca8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d04a      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xc60>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a37      	ldr	r2, [pc, #220]	; (8003d60 <HAL_DMA_IRQHandler+0xcac>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d045      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xc60>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a35      	ldr	r2, [pc, #212]	; (8003d64 <HAL_DMA_IRQHandler+0xcb0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d040      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xc60>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a34      	ldr	r2, [pc, #208]	; (8003d68 <HAL_DMA_IRQHandler+0xcb4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d03b      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xc60>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a32      	ldr	r2, [pc, #200]	; (8003d6c <HAL_DMA_IRQHandler+0xcb8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d036      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xc60>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a31      	ldr	r2, [pc, #196]	; (8003d70 <HAL_DMA_IRQHandler+0xcbc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d031      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xc60>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a2f      	ldr	r2, [pc, #188]	; (8003d74 <HAL_DMA_IRQHandler+0xcc0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d02c      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xc60>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a2e      	ldr	r2, [pc, #184]	; (8003d78 <HAL_DMA_IRQHandler+0xcc4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d027      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xc60>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a2c      	ldr	r2, [pc, #176]	; (8003d7c <HAL_DMA_IRQHandler+0xcc8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d022      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xc60>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a2b      	ldr	r2, [pc, #172]	; (8003d80 <HAL_DMA_IRQHandler+0xccc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d01d      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xc60>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a29      	ldr	r2, [pc, #164]	; (8003d84 <HAL_DMA_IRQHandler+0xcd0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d018      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xc60>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a28      	ldr	r2, [pc, #160]	; (8003d88 <HAL_DMA_IRQHandler+0xcd4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d013      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xc60>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a26      	ldr	r2, [pc, #152]	; (8003d8c <HAL_DMA_IRQHandler+0xcd8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00e      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xc60>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a25      	ldr	r2, [pc, #148]	; (8003d90 <HAL_DMA_IRQHandler+0xcdc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d009      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xc60>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a23      	ldr	r2, [pc, #140]	; (8003d94 <HAL_DMA_IRQHandler+0xce0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d004      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xc60>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a22      	ldr	r2, [pc, #136]	; (8003d98 <HAL_DMA_IRQHandler+0xce4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d108      	bne.n	8003d26 <HAL_DMA_IRQHandler+0xc72>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0214 	bic.w	r2, r2, #20
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	e007      	b.n	8003d36 <HAL_DMA_IRQHandler+0xc82>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 020a 	bic.w	r2, r2, #10
 8003d34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 80b8 	beq.w	8003ec0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d58:	e0b2      	b.n	8003ec0 <HAL_DMA_IRQHandler+0xe0c>
 8003d5a:	bf00      	nop
 8003d5c:	40020010 	.word	0x40020010
 8003d60:	40020028 	.word	0x40020028
 8003d64:	40020040 	.word	0x40020040
 8003d68:	40020058 	.word	0x40020058
 8003d6c:	40020070 	.word	0x40020070
 8003d70:	40020088 	.word	0x40020088
 8003d74:	400200a0 	.word	0x400200a0
 8003d78:	400200b8 	.word	0x400200b8
 8003d7c:	40020410 	.word	0x40020410
 8003d80:	40020428 	.word	0x40020428
 8003d84:	40020440 	.word	0x40020440
 8003d88:	40020458 	.word	0x40020458
 8003d8c:	40020470 	.word	0x40020470
 8003d90:	40020488 	.word	0x40020488
 8003d94:	400204a0 	.word	0x400204a0
 8003d98:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da0:	f003 031f 	and.w	r3, r3, #31
 8003da4:	2208      	movs	r2, #8
 8003da6:	409a      	lsls	r2, r3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 8088 	beq.w	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8082 	beq.w	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a41      	ldr	r2, [pc, #260]	; (8003ec8 <HAL_DMA_IRQHandler+0xe14>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d04a      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a3f      	ldr	r2, [pc, #252]	; (8003ecc <HAL_DMA_IRQHandler+0xe18>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d045      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a3e      	ldr	r2, [pc, #248]	; (8003ed0 <HAL_DMA_IRQHandler+0xe1c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d040      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a3c      	ldr	r2, [pc, #240]	; (8003ed4 <HAL_DMA_IRQHandler+0xe20>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d03b      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a3b      	ldr	r2, [pc, #236]	; (8003ed8 <HAL_DMA_IRQHandler+0xe24>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d036      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a39      	ldr	r2, [pc, #228]	; (8003edc <HAL_DMA_IRQHandler+0xe28>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d031      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a38      	ldr	r2, [pc, #224]	; (8003ee0 <HAL_DMA_IRQHandler+0xe2c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d02c      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a36      	ldr	r2, [pc, #216]	; (8003ee4 <HAL_DMA_IRQHandler+0xe30>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d027      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a35      	ldr	r2, [pc, #212]	; (8003ee8 <HAL_DMA_IRQHandler+0xe34>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d022      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a33      	ldr	r2, [pc, #204]	; (8003eec <HAL_DMA_IRQHandler+0xe38>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d01d      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a32      	ldr	r2, [pc, #200]	; (8003ef0 <HAL_DMA_IRQHandler+0xe3c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d018      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a30      	ldr	r2, [pc, #192]	; (8003ef4 <HAL_DMA_IRQHandler+0xe40>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a2f      	ldr	r2, [pc, #188]	; (8003ef8 <HAL_DMA_IRQHandler+0xe44>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00e      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2d      	ldr	r2, [pc, #180]	; (8003efc <HAL_DMA_IRQHandler+0xe48>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d009      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2c      	ldr	r2, [pc, #176]	; (8003f00 <HAL_DMA_IRQHandler+0xe4c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d004      	beq.n	8003e5e <HAL_DMA_IRQHandler+0xdaa>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a2a      	ldr	r2, [pc, #168]	; (8003f04 <HAL_DMA_IRQHandler+0xe50>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d108      	bne.n	8003e70 <HAL_DMA_IRQHandler+0xdbc>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 021c 	bic.w	r2, r2, #28
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e007      	b.n	8003e80 <HAL_DMA_IRQHandler+0xdcc>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 020e 	bic.w	r2, r2, #14
 8003e7e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	2201      	movs	r2, #1
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	4798      	blx	r3
 8003eb6:	e004      	b.n	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003eb8:	bf00      	nop
 8003eba:	e002      	b.n	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ebc:	bf00      	nop
 8003ebe:	e000      	b.n	8003ec2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ec0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ec2:	3728      	adds	r7, #40	; 0x28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40020010 	.word	0x40020010
 8003ecc:	40020028 	.word	0x40020028
 8003ed0:	40020040 	.word	0x40020040
 8003ed4:	40020058 	.word	0x40020058
 8003ed8:	40020070 	.word	0x40020070
 8003edc:	40020088 	.word	0x40020088
 8003ee0:	400200a0 	.word	0x400200a0
 8003ee4:	400200b8 	.word	0x400200b8
 8003ee8:	40020410 	.word	0x40020410
 8003eec:	40020428 	.word	0x40020428
 8003ef0:	40020440 	.word	0x40020440
 8003ef4:	40020458 	.word	0x40020458
 8003ef8:	40020470 	.word	0x40020470
 8003efc:	40020488 	.word	0x40020488
 8003f00:	400204a0 	.word	0x400204a0
 8003f04:	400204b8 	.word	0x400204b8

08003f08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a42      	ldr	r2, [pc, #264]	; (8004020 <DMA_CalcBaseAndBitshift+0x118>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d04a      	beq.n	8003fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a41      	ldr	r2, [pc, #260]	; (8004024 <DMA_CalcBaseAndBitshift+0x11c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d045      	beq.n	8003fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a3f      	ldr	r2, [pc, #252]	; (8004028 <DMA_CalcBaseAndBitshift+0x120>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d040      	beq.n	8003fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a3e      	ldr	r2, [pc, #248]	; (800402c <DMA_CalcBaseAndBitshift+0x124>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d03b      	beq.n	8003fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a3c      	ldr	r2, [pc, #240]	; (8004030 <DMA_CalcBaseAndBitshift+0x128>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d036      	beq.n	8003fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a3b      	ldr	r2, [pc, #236]	; (8004034 <DMA_CalcBaseAndBitshift+0x12c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d031      	beq.n	8003fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a39      	ldr	r2, [pc, #228]	; (8004038 <DMA_CalcBaseAndBitshift+0x130>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d02c      	beq.n	8003fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a38      	ldr	r2, [pc, #224]	; (800403c <DMA_CalcBaseAndBitshift+0x134>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d027      	beq.n	8003fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a36      	ldr	r2, [pc, #216]	; (8004040 <DMA_CalcBaseAndBitshift+0x138>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d022      	beq.n	8003fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a35      	ldr	r2, [pc, #212]	; (8004044 <DMA_CalcBaseAndBitshift+0x13c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d01d      	beq.n	8003fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a33      	ldr	r2, [pc, #204]	; (8004048 <DMA_CalcBaseAndBitshift+0x140>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d018      	beq.n	8003fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a32      	ldr	r2, [pc, #200]	; (800404c <DMA_CalcBaseAndBitshift+0x144>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d013      	beq.n	8003fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a30      	ldr	r2, [pc, #192]	; (8004050 <DMA_CalcBaseAndBitshift+0x148>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00e      	beq.n	8003fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a2f      	ldr	r2, [pc, #188]	; (8004054 <DMA_CalcBaseAndBitshift+0x14c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d009      	beq.n	8003fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a2d      	ldr	r2, [pc, #180]	; (8004058 <DMA_CalcBaseAndBitshift+0x150>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a2c      	ldr	r2, [pc, #176]	; (800405c <DMA_CalcBaseAndBitshift+0x154>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d101      	bne.n	8003fb4 <DMA_CalcBaseAndBitshift+0xac>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <DMA_CalcBaseAndBitshift+0xae>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d024      	beq.n	8004004 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	3b10      	subs	r3, #16
 8003fc2:	4a27      	ldr	r2, [pc, #156]	; (8004060 <DMA_CalcBaseAndBitshift+0x158>)
 8003fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	4a24      	ldr	r2, [pc, #144]	; (8004064 <DMA_CalcBaseAndBitshift+0x15c>)
 8003fd4:	5cd3      	ldrb	r3, [r2, r3]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d908      	bls.n	8003ff4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4b1f      	ldr	r3, [pc, #124]	; (8004068 <DMA_CalcBaseAndBitshift+0x160>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	1d1a      	adds	r2, r3, #4
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	659a      	str	r2, [r3, #88]	; 0x58
 8003ff2:	e00d      	b.n	8004010 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <DMA_CalcBaseAndBitshift+0x160>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6593      	str	r3, [r2, #88]	; 0x58
 8004002:	e005      	b.n	8004010 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40020010 	.word	0x40020010
 8004024:	40020028 	.word	0x40020028
 8004028:	40020040 	.word	0x40020040
 800402c:	40020058 	.word	0x40020058
 8004030:	40020070 	.word	0x40020070
 8004034:	40020088 	.word	0x40020088
 8004038:	400200a0 	.word	0x400200a0
 800403c:	400200b8 	.word	0x400200b8
 8004040:	40020410 	.word	0x40020410
 8004044:	40020428 	.word	0x40020428
 8004048:	40020440 	.word	0x40020440
 800404c:	40020458 	.word	0x40020458
 8004050:	40020470 	.word	0x40020470
 8004054:	40020488 	.word	0x40020488
 8004058:	400204a0 	.word	0x400204a0
 800405c:	400204b8 	.word	0x400204b8
 8004060:	aaaaaaab 	.word	0xaaaaaaab
 8004064:	0800adcc 	.word	0x0800adcc
 8004068:	fffffc00 	.word	0xfffffc00

0800406c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d120      	bne.n	80040c2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	2b03      	cmp	r3, #3
 8004086:	d858      	bhi.n	800413a <DMA_CheckFifoParam+0xce>
 8004088:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <DMA_CheckFifoParam+0x24>)
 800408a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408e:	bf00      	nop
 8004090:	080040a1 	.word	0x080040a1
 8004094:	080040b3 	.word	0x080040b3
 8004098:	080040a1 	.word	0x080040a1
 800409c:	0800413b 	.word	0x0800413b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d048      	beq.n	800413e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040b0:	e045      	b.n	800413e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040ba:	d142      	bne.n	8004142 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040c0:	e03f      	b.n	8004142 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ca:	d123      	bne.n	8004114 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d838      	bhi.n	8004146 <DMA_CheckFifoParam+0xda>
 80040d4:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <DMA_CheckFifoParam+0x70>)
 80040d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040da:	bf00      	nop
 80040dc:	080040ed 	.word	0x080040ed
 80040e0:	080040f3 	.word	0x080040f3
 80040e4:	080040ed 	.word	0x080040ed
 80040e8:	08004105 	.word	0x08004105
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	73fb      	strb	r3, [r7, #15]
        break;
 80040f0:	e030      	b.n	8004154 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d025      	beq.n	800414a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004102:	e022      	b.n	800414a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800410c:	d11f      	bne.n	800414e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004112:	e01c      	b.n	800414e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004118:	2b02      	cmp	r3, #2
 800411a:	d902      	bls.n	8004122 <DMA_CheckFifoParam+0xb6>
 800411c:	2b03      	cmp	r3, #3
 800411e:	d003      	beq.n	8004128 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004120:	e018      	b.n	8004154 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	73fb      	strb	r3, [r7, #15]
        break;
 8004126:	e015      	b.n	8004154 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00e      	beq.n	8004152 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
    break;
 8004138:	e00b      	b.n	8004152 <DMA_CheckFifoParam+0xe6>
        break;
 800413a:	bf00      	nop
 800413c:	e00a      	b.n	8004154 <DMA_CheckFifoParam+0xe8>
        break;
 800413e:	bf00      	nop
 8004140:	e008      	b.n	8004154 <DMA_CheckFifoParam+0xe8>
        break;
 8004142:	bf00      	nop
 8004144:	e006      	b.n	8004154 <DMA_CheckFifoParam+0xe8>
        break;
 8004146:	bf00      	nop
 8004148:	e004      	b.n	8004154 <DMA_CheckFifoParam+0xe8>
        break;
 800414a:	bf00      	nop
 800414c:	e002      	b.n	8004154 <DMA_CheckFifoParam+0xe8>
        break;
 800414e:	bf00      	nop
 8004150:	e000      	b.n	8004154 <DMA_CheckFifoParam+0xe8>
    break;
 8004152:	bf00      	nop
    }
  }

  return status;
 8004154:	7bfb      	ldrb	r3, [r7, #15]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop

08004164 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a38      	ldr	r2, [pc, #224]	; (8004258 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d022      	beq.n	80041c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a36      	ldr	r2, [pc, #216]	; (800425c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d01d      	beq.n	80041c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a35      	ldr	r2, [pc, #212]	; (8004260 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d018      	beq.n	80041c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a33      	ldr	r2, [pc, #204]	; (8004264 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d013      	beq.n	80041c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a32      	ldr	r2, [pc, #200]	; (8004268 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00e      	beq.n	80041c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a30      	ldr	r2, [pc, #192]	; (800426c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d009      	beq.n	80041c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a2f      	ldr	r2, [pc, #188]	; (8004270 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a2d      	ldr	r2, [pc, #180]	; (8004274 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d101      	bne.n	80041c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80041c6:	2300      	movs	r3, #0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01a      	beq.n	8004202 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	3b08      	subs	r3, #8
 80041d4:	4a28      	ldr	r2, [pc, #160]	; (8004278 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	091b      	lsrs	r3, r3, #4
 80041dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4b26      	ldr	r3, [pc, #152]	; (800427c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	461a      	mov	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a24      	ldr	r2, [pc, #144]	; (8004280 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80041f0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	2201      	movs	r2, #1
 80041fa:	409a      	lsls	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004200:	e024      	b.n	800424c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	3b10      	subs	r3, #16
 800420a:	4a1e      	ldr	r2, [pc, #120]	; (8004284 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800420c:	fba2 2303 	umull	r2, r3, r2, r3
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4a1c      	ldr	r2, [pc, #112]	; (8004288 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d806      	bhi.n	800422a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4a1b      	ldr	r2, [pc, #108]	; (800428c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d902      	bls.n	800422a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3308      	adds	r3, #8
 8004228:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4b18      	ldr	r3, [pc, #96]	; (8004290 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800422e:	4413      	add	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	461a      	mov	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a16      	ldr	r2, [pc, #88]	; (8004294 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800423c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2201      	movs	r2, #1
 8004246:	409a      	lsls	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	58025408 	.word	0x58025408
 800425c:	5802541c 	.word	0x5802541c
 8004260:	58025430 	.word	0x58025430
 8004264:	58025444 	.word	0x58025444
 8004268:	58025458 	.word	0x58025458
 800426c:	5802546c 	.word	0x5802546c
 8004270:	58025480 	.word	0x58025480
 8004274:	58025494 	.word	0x58025494
 8004278:	cccccccd 	.word	0xcccccccd
 800427c:	16009600 	.word	0x16009600
 8004280:	58025880 	.word	0x58025880
 8004284:	aaaaaaab 	.word	0xaaaaaaab
 8004288:	400204b8 	.word	0x400204b8
 800428c:	4002040f 	.word	0x4002040f
 8004290:	10008200 	.word	0x10008200
 8004294:	40020880 	.word	0x40020880

08004298 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d04a      	beq.n	8004344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d847      	bhi.n	8004344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a25      	ldr	r2, [pc, #148]	; (8004350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d022      	beq.n	8004304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a24      	ldr	r2, [pc, #144]	; (8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d01d      	beq.n	8004304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a22      	ldr	r2, [pc, #136]	; (8004358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d018      	beq.n	8004304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a21      	ldr	r2, [pc, #132]	; (800435c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d013      	beq.n	8004304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1f      	ldr	r2, [pc, #124]	; (8004360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00e      	beq.n	8004304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1e      	ldr	r2, [pc, #120]	; (8004364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d009      	beq.n	8004304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1c      	ldr	r2, [pc, #112]	; (8004368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d004      	beq.n	8004304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1b      	ldr	r2, [pc, #108]	; (800436c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d101      	bne.n	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004308:	2300      	movs	r3, #0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4b17      	ldr	r3, [pc, #92]	; (8004370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	461a      	mov	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a15      	ldr	r2, [pc, #84]	; (8004374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004320:	671a      	str	r2, [r3, #112]	; 0x70
 8004322:	e009      	b.n	8004338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4b14      	ldr	r3, [pc, #80]	; (8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	461a      	mov	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a11      	ldr	r2, [pc, #68]	; (800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004336:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3b01      	subs	r3, #1
 800433c:	2201      	movs	r2, #1
 800433e:	409a      	lsls	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004344:	bf00      	nop
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	58025408 	.word	0x58025408
 8004354:	5802541c 	.word	0x5802541c
 8004358:	58025430 	.word	0x58025430
 800435c:	58025444 	.word	0x58025444
 8004360:	58025458 	.word	0x58025458
 8004364:	5802546c 	.word	0x5802546c
 8004368:	58025480 	.word	0x58025480
 800436c:	58025494 	.word	0x58025494
 8004370:	1600963f 	.word	0x1600963f
 8004374:	58025940 	.word	0x58025940
 8004378:	1000823f 	.word	0x1000823f
 800437c:	40020940 	.word	0x40020940

08004380 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004380:	b480      	push	{r7}
 8004382:	b089      	sub	sp, #36	; 0x24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800438e:	4b89      	ldr	r3, [pc, #548]	; (80045b4 <HAL_GPIO_Init+0x234>)
 8004390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004392:	e194      	b.n	80046be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	2101      	movs	r1, #1
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	fa01 f303 	lsl.w	r3, r1, r3
 80043a0:	4013      	ands	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 8186 	beq.w	80046b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d00b      	beq.n	80043cc <HAL_GPIO_Init+0x4c>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d007      	beq.n	80043cc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043c0:	2b11      	cmp	r3, #17
 80043c2:	d003      	beq.n	80043cc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b12      	cmp	r3, #18
 80043ca:	d130      	bne.n	800442e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	2203      	movs	r2, #3
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4013      	ands	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004402:	2201      	movs	r2, #1
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	43db      	mvns	r3, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4013      	ands	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	091b      	lsrs	r3, r3, #4
 8004418:	f003 0201 	and.w	r2, r3, #1
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4313      	orrs	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	2203      	movs	r2, #3
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4013      	ands	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d003      	beq.n	800446e <HAL_GPIO_Init+0xee>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b12      	cmp	r3, #18
 800446c:	d123      	bne.n	80044b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	08da      	lsrs	r2, r3, #3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3208      	adds	r2, #8
 8004476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800447a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	220f      	movs	r2, #15
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43db      	mvns	r3, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4013      	ands	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	08da      	lsrs	r2, r3, #3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3208      	adds	r2, #8
 80044b0:	69b9      	ldr	r1, [r7, #24]
 80044b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	2203      	movs	r2, #3
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43db      	mvns	r3, r3
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4013      	ands	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f003 0203 	and.w	r2, r3, #3
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80e0 	beq.w	80046b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f8:	4b2f      	ldr	r3, [pc, #188]	; (80045b8 <HAL_GPIO_Init+0x238>)
 80044fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044fe:	4a2e      	ldr	r2, [pc, #184]	; (80045b8 <HAL_GPIO_Init+0x238>)
 8004500:	f043 0302 	orr.w	r3, r3, #2
 8004504:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004508:	4b2b      	ldr	r3, [pc, #172]	; (80045b8 <HAL_GPIO_Init+0x238>)
 800450a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004516:	4a29      	ldr	r2, [pc, #164]	; (80045bc <HAL_GPIO_Init+0x23c>)
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	3302      	adds	r3, #2
 800451e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	220f      	movs	r2, #15
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a20      	ldr	r2, [pc, #128]	; (80045c0 <HAL_GPIO_Init+0x240>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d052      	beq.n	80045e8 <HAL_GPIO_Init+0x268>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a1f      	ldr	r2, [pc, #124]	; (80045c4 <HAL_GPIO_Init+0x244>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d031      	beq.n	80045ae <HAL_GPIO_Init+0x22e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a1e      	ldr	r2, [pc, #120]	; (80045c8 <HAL_GPIO_Init+0x248>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d02b      	beq.n	80045aa <HAL_GPIO_Init+0x22a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <HAL_GPIO_Init+0x24c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d025      	beq.n	80045a6 <HAL_GPIO_Init+0x226>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a1c      	ldr	r2, [pc, #112]	; (80045d0 <HAL_GPIO_Init+0x250>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d01f      	beq.n	80045a2 <HAL_GPIO_Init+0x222>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a1b      	ldr	r2, [pc, #108]	; (80045d4 <HAL_GPIO_Init+0x254>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d019      	beq.n	800459e <HAL_GPIO_Init+0x21e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a1a      	ldr	r2, [pc, #104]	; (80045d8 <HAL_GPIO_Init+0x258>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d013      	beq.n	800459a <HAL_GPIO_Init+0x21a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a19      	ldr	r2, [pc, #100]	; (80045dc <HAL_GPIO_Init+0x25c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00d      	beq.n	8004596 <HAL_GPIO_Init+0x216>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a18      	ldr	r2, [pc, #96]	; (80045e0 <HAL_GPIO_Init+0x260>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d007      	beq.n	8004592 <HAL_GPIO_Init+0x212>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a17      	ldr	r2, [pc, #92]	; (80045e4 <HAL_GPIO_Init+0x264>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d101      	bne.n	800458e <HAL_GPIO_Init+0x20e>
 800458a:	2309      	movs	r3, #9
 800458c:	e02d      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 800458e:	230a      	movs	r3, #10
 8004590:	e02b      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 8004592:	2308      	movs	r3, #8
 8004594:	e029      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 8004596:	2307      	movs	r3, #7
 8004598:	e027      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 800459a:	2306      	movs	r3, #6
 800459c:	e025      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 800459e:	2305      	movs	r3, #5
 80045a0:	e023      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 80045a2:	2304      	movs	r3, #4
 80045a4:	e021      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 80045a6:	2303      	movs	r3, #3
 80045a8:	e01f      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e01d      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e01b      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 80045b2:	bf00      	nop
 80045b4:	58000080 	.word	0x58000080
 80045b8:	58024400 	.word	0x58024400
 80045bc:	58000400 	.word	0x58000400
 80045c0:	58020000 	.word	0x58020000
 80045c4:	58020400 	.word	0x58020400
 80045c8:	58020800 	.word	0x58020800
 80045cc:	58020c00 	.word	0x58020c00
 80045d0:	58021000 	.word	0x58021000
 80045d4:	58021400 	.word	0x58021400
 80045d8:	58021800 	.word	0x58021800
 80045dc:	58021c00 	.word	0x58021c00
 80045e0:	58022000 	.word	0x58022000
 80045e4:	58022400 	.word	0x58022400
 80045e8:	2300      	movs	r3, #0
 80045ea:	69fa      	ldr	r2, [r7, #28]
 80045ec:	f002 0203 	and.w	r2, r2, #3
 80045f0:	0092      	lsls	r2, r2, #2
 80045f2:	4093      	lsls	r3, r2
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045fa:	4938      	ldr	r1, [pc, #224]	; (80046dc <HAL_GPIO_Init+0x35c>)
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	089b      	lsrs	r3, r3, #2
 8004600:	3302      	adds	r3, #2
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	43db      	mvns	r3, r3
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	4013      	ands	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	43db      	mvns	r3, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4013      	ands	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800465c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800468a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	43db      	mvns	r3, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4013      	ands	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80046b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	3301      	adds	r3, #1
 80046bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	fa22 f303 	lsr.w	r3, r2, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f47f ae63 	bne.w	8004394 <HAL_GPIO_Init+0x14>
  }
}
 80046ce:	bf00      	nop
 80046d0:	bf00      	nop
 80046d2:	3724      	adds	r7, #36	; 0x24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	58000400 	.word	0x58000400

080046e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	887b      	ldrh	r3, [r7, #2]
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
 80046fc:	e001      	b.n	8004702 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046fe:	2300      	movs	r3, #0
 8004700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004702:	7bfb      	ldrb	r3, [r7, #15]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	807b      	strh	r3, [r7, #2]
 800471c:	4613      	mov	r3, r2
 800471e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004720:	787b      	ldrb	r3, [r7, #1]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004726:	887a      	ldrh	r2, [r7, #2]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800472c:	e003      	b.n	8004736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800472e:	887b      	ldrh	r3, [r7, #2]
 8004730:	041a      	lsls	r2, r3, #16
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	619a      	str	r2, [r3, #24]
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800474c:	4b29      	ldr	r3, [pc, #164]	; (80047f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	2b06      	cmp	r3, #6
 8004756:	d00a      	beq.n	800476e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004758:	4b26      	ldr	r3, [pc, #152]	; (80047f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	429a      	cmp	r2, r3
 8004764:	d001      	beq.n	800476a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e040      	b.n	80047ec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	e03e      	b.n	80047ec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800476e:	4b21      	ldr	r3, [pc, #132]	; (80047f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004776:	491f      	ldr	r1, [pc, #124]	; (80047f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4313      	orrs	r3, r2
 800477c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800477e:	f7fc ff67 	bl	8001650 <HAL_GetTick>
 8004782:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004784:	e009      	b.n	800479a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004786:	f7fc ff63 	bl	8001650 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004794:	d901      	bls.n	800479a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e028      	b.n	80047ec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800479a:	4b16      	ldr	r3, [pc, #88]	; (80047f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a6:	d1ee      	bne.n	8004786 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b1e      	cmp	r3, #30
 80047ac:	d008      	beq.n	80047c0 <HAL_PWREx_ConfigSupply+0x7c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b2e      	cmp	r3, #46	; 0x2e
 80047b2:	d005      	beq.n	80047c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b1d      	cmp	r3, #29
 80047b8:	d002      	beq.n	80047c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b2d      	cmp	r3, #45	; 0x2d
 80047be:	d114      	bne.n	80047ea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80047c0:	f7fc ff46 	bl	8001650 <HAL_GetTick>
 80047c4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80047c6:	e009      	b.n	80047dc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80047c8:	f7fc ff42 	bl	8001650 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047d6:	d901      	bls.n	80047dc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e007      	b.n	80047ec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <HAL_PWREx_ConfigSupply+0xb0>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e8:	d1ee      	bne.n	80047c8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	58024800 	.word	0x58024800

080047f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08c      	sub	sp, #48	; 0x30
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e3ff      	b.n	800500a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 8087 	beq.w	8004926 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004818:	4b99      	ldr	r3, [pc, #612]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004820:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004822:	4b97      	ldr	r3, [pc, #604]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	2b10      	cmp	r3, #16
 800482c:	d007      	beq.n	800483e <HAL_RCC_OscConfig+0x46>
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	2b18      	cmp	r3, #24
 8004832:	d110      	bne.n	8004856 <HAL_RCC_OscConfig+0x5e>
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d10b      	bne.n	8004856 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800483e:	4b90      	ldr	r3, [pc, #576]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d06c      	beq.n	8004924 <HAL_RCC_OscConfig+0x12c>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d168      	bne.n	8004924 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e3d9      	b.n	800500a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800485e:	d106      	bne.n	800486e <HAL_RCC_OscConfig+0x76>
 8004860:	4b87      	ldr	r3, [pc, #540]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a86      	ldr	r2, [pc, #536]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	e02e      	b.n	80048cc <HAL_RCC_OscConfig+0xd4>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10c      	bne.n	8004890 <HAL_RCC_OscConfig+0x98>
 8004876:	4b82      	ldr	r3, [pc, #520]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a81      	ldr	r2, [pc, #516]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 800487c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	4b7f      	ldr	r3, [pc, #508]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a7e      	ldr	r2, [pc, #504]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	e01d      	b.n	80048cc <HAL_RCC_OscConfig+0xd4>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004898:	d10c      	bne.n	80048b4 <HAL_RCC_OscConfig+0xbc>
 800489a:	4b79      	ldr	r3, [pc, #484]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a78      	ldr	r2, [pc, #480]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 80048a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4b76      	ldr	r3, [pc, #472]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a75      	ldr	r2, [pc, #468]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 80048ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	e00b      	b.n	80048cc <HAL_RCC_OscConfig+0xd4>
 80048b4:	4b72      	ldr	r3, [pc, #456]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a71      	ldr	r2, [pc, #452]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 80048ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	4b6f      	ldr	r3, [pc, #444]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a6e      	ldr	r2, [pc, #440]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 80048c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d013      	beq.n	80048fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fc febc 	bl	8001650 <HAL_GetTick>
 80048d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048dc:	f7fc feb8 	bl	8001650 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e38d      	b.n	800500a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048ee:	4b64      	ldr	r3, [pc, #400]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0xe4>
 80048fa:	e014      	b.n	8004926 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fc:	f7fc fea8 	bl	8001650 <HAL_GetTick>
 8004900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004904:	f7fc fea4 	bl	8001650 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b64      	cmp	r3, #100	; 0x64
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e379      	b.n	800500a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004916:	4b5a      	ldr	r3, [pc, #360]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x10c>
 8004922:	e000      	b.n	8004926 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80ae 	beq.w	8004a90 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004934:	4b52      	ldr	r3, [pc, #328]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800493c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800493e:	4b50      	ldr	r3, [pc, #320]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <HAL_RCC_OscConfig+0x162>
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	2b18      	cmp	r3, #24
 800494e:	d13a      	bne.n	80049c6 <HAL_RCC_OscConfig+0x1ce>
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d135      	bne.n	80049c6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800495a:	4b49      	ldr	r3, [pc, #292]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b00      	cmp	r3, #0
 8004964:	d005      	beq.n	8004972 <HAL_RCC_OscConfig+0x17a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e34b      	b.n	800500a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004972:	f7fc fe9d 	bl	80016b0 <HAL_GetREVID>
 8004976:	4603      	mov	r3, r0
 8004978:	f241 0203 	movw	r2, #4099	; 0x1003
 800497c:	4293      	cmp	r3, r2
 800497e:	d817      	bhi.n	80049b0 <HAL_RCC_OscConfig+0x1b8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d108      	bne.n	800499a <HAL_RCC_OscConfig+0x1a2>
 8004988:	4b3d      	ldr	r3, [pc, #244]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004990:	4a3b      	ldr	r2, [pc, #236]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004996:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004998:	e07a      	b.n	8004a90 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800499a:	4b39      	ldr	r3, [pc, #228]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	031b      	lsls	r3, r3, #12
 80049a8:	4935      	ldr	r1, [pc, #212]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049ae:	e06f      	b.n	8004a90 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b0:	4b33      	ldr	r3, [pc, #204]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	061b      	lsls	r3, r3, #24
 80049be:	4930      	ldr	r1, [pc, #192]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049c4:	e064      	b.n	8004a90 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d045      	beq.n	8004a5a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80049ce:	4b2c      	ldr	r3, [pc, #176]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 0219 	bic.w	r2, r3, #25
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	4929      	ldr	r1, [pc, #164]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e0:	f7fc fe36 	bl	8001650 <HAL_GetTick>
 80049e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049e8:	f7fc fe32 	bl	8001650 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e307      	b.n	800500a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049fa:	4b21      	ldr	r3, [pc, #132]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a06:	f7fc fe53 	bl	80016b0 <HAL_GetREVID>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d817      	bhi.n	8004a44 <HAL_RCC_OscConfig+0x24c>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b40      	cmp	r3, #64	; 0x40
 8004a1a:	d108      	bne.n	8004a2e <HAL_RCC_OscConfig+0x236>
 8004a1c:	4b18      	ldr	r3, [pc, #96]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a24:	4a16      	ldr	r2, [pc, #88]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a2a:	6053      	str	r3, [r2, #4]
 8004a2c:	e030      	b.n	8004a90 <HAL_RCC_OscConfig+0x298>
 8004a2e:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	031b      	lsls	r3, r3, #12
 8004a3c:	4910      	ldr	r1, [pc, #64]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	604b      	str	r3, [r1, #4]
 8004a42:	e025      	b.n	8004a90 <HAL_RCC_OscConfig+0x298>
 8004a44:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	061b      	lsls	r3, r3, #24
 8004a52:	490b      	ldr	r1, [pc, #44]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	604b      	str	r3, [r1, #4]
 8004a58:	e01a      	b.n	8004a90 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a5a:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a08      	ldr	r2, [pc, #32]	; (8004a80 <HAL_RCC_OscConfig+0x288>)
 8004a60:	f023 0301 	bic.w	r3, r3, #1
 8004a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a66:	f7fc fdf3 	bl	8001650 <HAL_GetTick>
 8004a6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a6c:	e00a      	b.n	8004a84 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a6e:	f7fc fdef 	bl	8001650 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d903      	bls.n	8004a84 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e2c4      	b.n	800500a <HAL_RCC_OscConfig+0x812>
 8004a80:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a84:	4ba4      	ldr	r3, [pc, #656]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1ee      	bne.n	8004a6e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80a9 	beq.w	8004bf0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a9e:	4b9e      	ldr	r3, [pc, #632]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004aa6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004aa8:	4b9b      	ldr	r3, [pc, #620]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d007      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x2cc>
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	2b18      	cmp	r3, #24
 8004ab8:	d13a      	bne.n	8004b30 <HAL_RCC_OscConfig+0x338>
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d135      	bne.n	8004b30 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ac4:	4b94      	ldr	r3, [pc, #592]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d005      	beq.n	8004adc <HAL_RCC_OscConfig+0x2e4>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	2b80      	cmp	r3, #128	; 0x80
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e296      	b.n	800500a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004adc:	f7fc fde8 	bl	80016b0 <HAL_GetREVID>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d817      	bhi.n	8004b1a <HAL_RCC_OscConfig+0x322>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	d108      	bne.n	8004b04 <HAL_RCC_OscConfig+0x30c>
 8004af2:	4b89      	ldr	r3, [pc, #548]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004afa:	4a87      	ldr	r2, [pc, #540]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004afc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b00:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b02:	e075      	b.n	8004bf0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b04:	4b84      	ldr	r3, [pc, #528]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	069b      	lsls	r3, r3, #26
 8004b12:	4981      	ldr	r1, [pc, #516]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b18:	e06a      	b.n	8004bf0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b1a:	4b7f      	ldr	r3, [pc, #508]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	061b      	lsls	r3, r3, #24
 8004b28:	497b      	ldr	r1, [pc, #492]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b2e:	e05f      	b.n	8004bf0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d042      	beq.n	8004bbe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004b38:	4b77      	ldr	r3, [pc, #476]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a76      	ldr	r2, [pc, #472]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fc fd84 	bl	8001650 <HAL_GetTick>
 8004b48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004b4c:	f7fc fd80 	bl	8001650 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e255      	b.n	800500a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b5e:	4b6e      	ldr	r3, [pc, #440]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b6a:	f7fc fda1 	bl	80016b0 <HAL_GetREVID>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d817      	bhi.n	8004ba8 <HAL_RCC_OscConfig+0x3b0>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d108      	bne.n	8004b92 <HAL_RCC_OscConfig+0x39a>
 8004b80:	4b65      	ldr	r3, [pc, #404]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004b88:	4a63      	ldr	r2, [pc, #396]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004b8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b8e:	6053      	str	r3, [r2, #4]
 8004b90:	e02e      	b.n	8004bf0 <HAL_RCC_OscConfig+0x3f8>
 8004b92:	4b61      	ldr	r3, [pc, #388]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	069b      	lsls	r3, r3, #26
 8004ba0:	495d      	ldr	r1, [pc, #372]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	604b      	str	r3, [r1, #4]
 8004ba6:	e023      	b.n	8004bf0 <HAL_RCC_OscConfig+0x3f8>
 8004ba8:	4b5b      	ldr	r3, [pc, #364]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	061b      	lsls	r3, r3, #24
 8004bb6:	4958      	ldr	r1, [pc, #352]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60cb      	str	r3, [r1, #12]
 8004bbc:	e018      	b.n	8004bf0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004bbe:	4b56      	ldr	r3, [pc, #344]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a55      	ldr	r2, [pc, #340]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bca:	f7fc fd41 	bl	8001650 <HAL_GetTick>
 8004bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004bd2:	f7fc fd3d 	bl	8001650 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e212      	b.n	800500a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004be4:	4b4c      	ldr	r3, [pc, #304]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f0      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d036      	beq.n	8004c6a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d019      	beq.n	8004c38 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c04:	4b44      	ldr	r3, [pc, #272]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c08:	4a43      	ldr	r2, [pc, #268]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004c0a:	f043 0301 	orr.w	r3, r3, #1
 8004c0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c10:	f7fc fd1e 	bl	8001650 <HAL_GetTick>
 8004c14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c18:	f7fc fd1a 	bl	8001650 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e1ef      	b.n	800500a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c2a:	4b3b      	ldr	r3, [pc, #236]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0x420>
 8004c36:	e018      	b.n	8004c6a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c38:	4b37      	ldr	r3, [pc, #220]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3c:	4a36      	ldr	r2, [pc, #216]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c44:	f7fc fd04 	bl	8001650 <HAL_GetTick>
 8004c48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c4c:	f7fc fd00 	bl	8001650 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e1d5      	b.n	800500a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c5e:	4b2e      	ldr	r3, [pc, #184]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d036      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d019      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c7e:	4b26      	ldr	r3, [pc, #152]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a25      	ldr	r2, [pc, #148]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c8a:	f7fc fce1 	bl	8001650 <HAL_GetTick>
 8004c8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004c92:	f7fc fcdd 	bl	8001650 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e1b2      	b.n	800500a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ca4:	4b1c      	ldr	r3, [pc, #112]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCC_OscConfig+0x49a>
 8004cb0:	e018      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004cb2:	4b19      	ldr	r3, [pc, #100]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cbc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cbe:	f7fc fcc7 	bl	8001650 <HAL_GetTick>
 8004cc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004cc6:	f7fc fcc3 	bl	8001650 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e198      	b.n	800500a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004cd8:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <HAL_RCC_OscConfig+0x520>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1f0      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8085 	beq.w	8004dfc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004cf2:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <HAL_RCC_OscConfig+0x524>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <HAL_RCC_OscConfig+0x524>)
 8004cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cfe:	f7fc fca7 	bl	8001650 <HAL_GetTick>
 8004d02:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d04:	e00c      	b.n	8004d20 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d06:	f7fc fca3 	bl	8001650 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b64      	cmp	r3, #100	; 0x64
 8004d12:	d905      	bls.n	8004d20 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e178      	b.n	800500a <HAL_RCC_OscConfig+0x812>
 8004d18:	58024400 	.word	0x58024400
 8004d1c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d20:	4b96      	ldr	r3, [pc, #600]	; (8004f7c <HAL_RCC_OscConfig+0x784>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0ec      	beq.n	8004d06 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d106      	bne.n	8004d42 <HAL_RCC_OscConfig+0x54a>
 8004d34:	4b92      	ldr	r3, [pc, #584]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d38:	4a91      	ldr	r2, [pc, #580]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d40:	e02d      	b.n	8004d9e <HAL_RCC_OscConfig+0x5a6>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10c      	bne.n	8004d64 <HAL_RCC_OscConfig+0x56c>
 8004d4a:	4b8d      	ldr	r3, [pc, #564]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4e:	4a8c      	ldr	r2, [pc, #560]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004d50:	f023 0301 	bic.w	r3, r3, #1
 8004d54:	6713      	str	r3, [r2, #112]	; 0x70
 8004d56:	4b8a      	ldr	r3, [pc, #552]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	4a89      	ldr	r2, [pc, #548]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004d5c:	f023 0304 	bic.w	r3, r3, #4
 8004d60:	6713      	str	r3, [r2, #112]	; 0x70
 8004d62:	e01c      	b.n	8004d9e <HAL_RCC_OscConfig+0x5a6>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b05      	cmp	r3, #5
 8004d6a:	d10c      	bne.n	8004d86 <HAL_RCC_OscConfig+0x58e>
 8004d6c:	4b84      	ldr	r3, [pc, #528]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d70:	4a83      	ldr	r2, [pc, #524]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004d72:	f043 0304 	orr.w	r3, r3, #4
 8004d76:	6713      	str	r3, [r2, #112]	; 0x70
 8004d78:	4b81      	ldr	r3, [pc, #516]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7c:	4a80      	ldr	r2, [pc, #512]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	6713      	str	r3, [r2, #112]	; 0x70
 8004d84:	e00b      	b.n	8004d9e <HAL_RCC_OscConfig+0x5a6>
 8004d86:	4b7e      	ldr	r3, [pc, #504]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8a:	4a7d      	ldr	r2, [pc, #500]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004d8c:	f023 0301 	bic.w	r3, r3, #1
 8004d90:	6713      	str	r3, [r2, #112]	; 0x70
 8004d92:	4b7b      	ldr	r3, [pc, #492]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d96:	4a7a      	ldr	r2, [pc, #488]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004d98:	f023 0304 	bic.w	r3, r3, #4
 8004d9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d015      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da6:	f7fc fc53 	bl	8001650 <HAL_GetTick>
 8004daa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dac:	e00a      	b.n	8004dc4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dae:	f7fc fc4f 	bl	8001650 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e122      	b.n	800500a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dc4:	4b6e      	ldr	r3, [pc, #440]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0ee      	beq.n	8004dae <HAL_RCC_OscConfig+0x5b6>
 8004dd0:	e014      	b.n	8004dfc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd2:	f7fc fc3d 	bl	8001650 <HAL_GetTick>
 8004dd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dda:	f7fc fc39 	bl	8001650 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e10c      	b.n	800500a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004df0:	4b63      	ldr	r3, [pc, #396]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1ee      	bne.n	8004dda <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8101 	beq.w	8005008 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e06:	4b5e      	ldr	r3, [pc, #376]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e0e:	2b18      	cmp	r3, #24
 8004e10:	f000 80bc 	beq.w	8004f8c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	f040 8095 	bne.w	8004f48 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1e:	4b58      	ldr	r3, [pc, #352]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a57      	ldr	r2, [pc, #348]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004e24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2a:	f7fc fc11 	bl	8001650 <HAL_GetTick>
 8004e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e32:	f7fc fc0d 	bl	8001650 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e0e2      	b.n	800500a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e44:	4b4e      	ldr	r3, [pc, #312]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1f0      	bne.n	8004e32 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e50:	4b4b      	ldr	r3, [pc, #300]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004e52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e54:	4b4b      	ldr	r3, [pc, #300]	; (8004f84 <HAL_RCC_OscConfig+0x78c>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e60:	0112      	lsls	r2, r2, #4
 8004e62:	430a      	orrs	r2, r1
 8004e64:	4946      	ldr	r1, [pc, #280]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	628b      	str	r3, [r1, #40]	; 0x28
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	025b      	lsls	r3, r3, #9
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	3b01      	subs	r3, #1
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e92:	3b01      	subs	r3, #1
 8004e94:	061b      	lsls	r3, r3, #24
 8004e96:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e9a:	4939      	ldr	r1, [pc, #228]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004ea0:	4b37      	ldr	r3, [pc, #220]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	4a36      	ldr	r2, [pc, #216]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004eac:	4b34      	ldr	r3, [pc, #208]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb0:	4b35      	ldr	r3, [pc, #212]	; (8004f88 <HAL_RCC_OscConfig+0x790>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004eb8:	00d2      	lsls	r2, r2, #3
 8004eba:	4931      	ldr	r1, [pc, #196]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ec0:	4b2f      	ldr	r3, [pc, #188]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	f023 020c 	bic.w	r2, r3, #12
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	492c      	ldr	r1, [pc, #176]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004ed2:	4b2b      	ldr	r3, [pc, #172]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	f023 0202 	bic.w	r2, r3, #2
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ede:	4928      	ldr	r1, [pc, #160]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ee4:	4b26      	ldr	r3, [pc, #152]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	4a25      	ldr	r2, [pc, #148]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ef0:	4b23      	ldr	r3, [pc, #140]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	4a22      	ldr	r2, [pc, #136]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004efa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004efc:	4b20      	ldr	r3, [pc, #128]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	4a1f      	ldr	r2, [pc, #124]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004f02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004f08:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f14:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a19      	ldr	r2, [pc, #100]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7fc fb96 	bl	8001650 <HAL_GetTick>
 8004f24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f28:	f7fc fb92 	bl	8001650 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e067      	b.n	800500a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f3a:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCC_OscConfig+0x730>
 8004f46:	e05f      	b.n	8005008 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f48:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a0c      	ldr	r2, [pc, #48]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f54:	f7fc fb7c 	bl	8001650 <HAL_GetTick>
 8004f58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f5c:	f7fc fb78 	bl	8001650 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e04d      	b.n	800500a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f6e:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <HAL_RCC_OscConfig+0x788>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x764>
 8004f7a:	e045      	b.n	8005008 <HAL_RCC_OscConfig+0x810>
 8004f7c:	58024800 	.word	0x58024800
 8004f80:	58024400 	.word	0x58024400
 8004f84:	fffffc0c 	.word	0xfffffc0c
 8004f88:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004f8c:	4b21      	ldr	r3, [pc, #132]	; (8005014 <HAL_RCC_OscConfig+0x81c>)
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004f92:	4b20      	ldr	r3, [pc, #128]	; (8005014 <HAL_RCC_OscConfig+0x81c>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d031      	beq.n	8005004 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f003 0203 	and.w	r2, r3, #3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d12a      	bne.n	8005004 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	091b      	lsrs	r3, r3, #4
 8004fb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d122      	bne.n	8005004 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d11a      	bne.n	8005004 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	0a5b      	lsrs	r3, r3, #9
 8004fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fda:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d111      	bne.n	8005004 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	0c1b      	lsrs	r3, r3, #16
 8004fe4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d108      	bne.n	8005004 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	0e1b      	lsrs	r3, r3, #24
 8004ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005000:	429a      	cmp	r2, r3
 8005002:	d001      	beq.n	8005008 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e000      	b.n	800500a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3730      	adds	r7, #48	; 0x30
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	58024400 	.word	0x58024400

08005018 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e19c      	b.n	8005366 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800502c:	4b8a      	ldr	r3, [pc, #552]	; (8005258 <HAL_RCC_ClockConfig+0x240>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 030f 	and.w	r3, r3, #15
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d910      	bls.n	800505c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503a:	4b87      	ldr	r3, [pc, #540]	; (8005258 <HAL_RCC_ClockConfig+0x240>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f023 020f 	bic.w	r2, r3, #15
 8005042:	4985      	ldr	r1, [pc, #532]	; (8005258 <HAL_RCC_ClockConfig+0x240>)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	4313      	orrs	r3, r2
 8005048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800504a:	4b83      	ldr	r3, [pc, #524]	; (8005258 <HAL_RCC_ClockConfig+0x240>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d001      	beq.n	800505c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e184      	b.n	8005366 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d010      	beq.n	800508a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	4b7b      	ldr	r3, [pc, #492]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005074:	429a      	cmp	r2, r3
 8005076:	d908      	bls.n	800508a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005078:	4b78      	ldr	r3, [pc, #480]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	4975      	ldr	r1, [pc, #468]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 8005086:	4313      	orrs	r3, r2
 8005088:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d010      	beq.n	80050b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	4b70      	ldr	r3, [pc, #448]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d908      	bls.n	80050b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050a6:	4b6d      	ldr	r3, [pc, #436]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	496a      	ldr	r1, [pc, #424]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0310 	and.w	r3, r3, #16
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d010      	beq.n	80050e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	699a      	ldr	r2, [r3, #24]
 80050c8:	4b64      	ldr	r3, [pc, #400]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d908      	bls.n	80050e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050d4:	4b61      	ldr	r3, [pc, #388]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	495e      	ldr	r1, [pc, #376]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d010      	beq.n	8005114 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69da      	ldr	r2, [r3, #28]
 80050f6:	4b59      	ldr	r3, [pc, #356]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050fe:	429a      	cmp	r2, r3
 8005100:	d908      	bls.n	8005114 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005102:	4b56      	ldr	r3, [pc, #344]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	4953      	ldr	r1, [pc, #332]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 8005110:	4313      	orrs	r3, r2
 8005112:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d010      	beq.n	8005142 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	4b4d      	ldr	r3, [pc, #308]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f003 030f 	and.w	r3, r3, #15
 800512c:	429a      	cmp	r2, r3
 800512e:	d908      	bls.n	8005142 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005130:	4b4a      	ldr	r3, [pc, #296]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	f023 020f 	bic.w	r2, r3, #15
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4947      	ldr	r1, [pc, #284]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 800513e:	4313      	orrs	r3, r2
 8005140:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d055      	beq.n	80051fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800514e:	4b43      	ldr	r3, [pc, #268]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	4940      	ldr	r1, [pc, #256]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 800515c:	4313      	orrs	r3, r2
 800515e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b02      	cmp	r3, #2
 8005166:	d107      	bne.n	8005178 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005168:	4b3c      	ldr	r3, [pc, #240]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d121      	bne.n	80051b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e0f6      	b.n	8005366 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b03      	cmp	r3, #3
 800517e:	d107      	bne.n	8005190 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005180:	4b36      	ldr	r3, [pc, #216]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d115      	bne.n	80051b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0ea      	b.n	8005366 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d107      	bne.n	80051a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005198:	4b30      	ldr	r3, [pc, #192]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d109      	bne.n	80051b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e0de      	b.n	8005366 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051a8:	4b2c      	ldr	r3, [pc, #176]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0d6      	b.n	8005366 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051b8:	4b28      	ldr	r3, [pc, #160]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f023 0207 	bic.w	r2, r3, #7
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	4925      	ldr	r1, [pc, #148]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ca:	f7fc fa41 	bl	8001650 <HAL_GetTick>
 80051ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d0:	e00a      	b.n	80051e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d2:	f7fc fa3d 	bl	8001650 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e0be      	b.n	8005366 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e8:	4b1c      	ldr	r3, [pc, #112]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d1eb      	bne.n	80051d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d010      	beq.n	8005228 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	4b14      	ldr	r3, [pc, #80]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	429a      	cmp	r2, r3
 8005214:	d208      	bcs.n	8005228 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005216:	4b11      	ldr	r3, [pc, #68]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f023 020f 	bic.w	r2, r3, #15
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	490e      	ldr	r1, [pc, #56]	; (800525c <HAL_RCC_ClockConfig+0x244>)
 8005224:	4313      	orrs	r3, r2
 8005226:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <HAL_RCC_ClockConfig+0x240>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 030f 	and.w	r3, r3, #15
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d214      	bcs.n	8005260 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005236:	4b08      	ldr	r3, [pc, #32]	; (8005258 <HAL_RCC_ClockConfig+0x240>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f023 020f 	bic.w	r2, r3, #15
 800523e:	4906      	ldr	r1, [pc, #24]	; (8005258 <HAL_RCC_ClockConfig+0x240>)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	4313      	orrs	r3, r2
 8005244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005246:	4b04      	ldr	r3, [pc, #16]	; (8005258 <HAL_RCC_ClockConfig+0x240>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	d005      	beq.n	8005260 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e086      	b.n	8005366 <HAL_RCC_ClockConfig+0x34e>
 8005258:	52002000 	.word	0x52002000
 800525c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d010      	beq.n	800528e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	4b3f      	ldr	r3, [pc, #252]	; (8005370 <HAL_RCC_ClockConfig+0x358>)
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005278:	429a      	cmp	r2, r3
 800527a:	d208      	bcs.n	800528e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800527c:	4b3c      	ldr	r3, [pc, #240]	; (8005370 <HAL_RCC_ClockConfig+0x358>)
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	4939      	ldr	r1, [pc, #228]	; (8005370 <HAL_RCC_ClockConfig+0x358>)
 800528a:	4313      	orrs	r3, r2
 800528c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d010      	beq.n	80052bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695a      	ldr	r2, [r3, #20]
 800529e:	4b34      	ldr	r3, [pc, #208]	; (8005370 <HAL_RCC_ClockConfig+0x358>)
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d208      	bcs.n	80052bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052aa:	4b31      	ldr	r3, [pc, #196]	; (8005370 <HAL_RCC_ClockConfig+0x358>)
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	492e      	ldr	r1, [pc, #184]	; (8005370 <HAL_RCC_ClockConfig+0x358>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d010      	beq.n	80052ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699a      	ldr	r2, [r3, #24]
 80052cc:	4b28      	ldr	r3, [pc, #160]	; (8005370 <HAL_RCC_ClockConfig+0x358>)
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d208      	bcs.n	80052ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052d8:	4b25      	ldr	r3, [pc, #148]	; (8005370 <HAL_RCC_ClockConfig+0x358>)
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	4922      	ldr	r1, [pc, #136]	; (8005370 <HAL_RCC_ClockConfig+0x358>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d010      	beq.n	8005318 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69da      	ldr	r2, [r3, #28]
 80052fa:	4b1d      	ldr	r3, [pc, #116]	; (8005370 <HAL_RCC_ClockConfig+0x358>)
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005302:	429a      	cmp	r2, r3
 8005304:	d208      	bcs.n	8005318 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005306:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <HAL_RCC_ClockConfig+0x358>)
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	4917      	ldr	r1, [pc, #92]	; (8005370 <HAL_RCC_ClockConfig+0x358>)
 8005314:	4313      	orrs	r3, r2
 8005316:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005318:	f000 f834 	bl	8005384 <HAL_RCC_GetSysClockFreq>
 800531c:	4602      	mov	r2, r0
 800531e:	4b14      	ldr	r3, [pc, #80]	; (8005370 <HAL_RCC_ClockConfig+0x358>)
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	0a1b      	lsrs	r3, r3, #8
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	4912      	ldr	r1, [pc, #72]	; (8005374 <HAL_RCC_ClockConfig+0x35c>)
 800532a:	5ccb      	ldrb	r3, [r1, r3]
 800532c:	f003 031f 	and.w	r3, r3, #31
 8005330:	fa22 f303 	lsr.w	r3, r2, r3
 8005334:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005336:	4b0e      	ldr	r3, [pc, #56]	; (8005370 <HAL_RCC_ClockConfig+0x358>)
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	4a0d      	ldr	r2, [pc, #52]	; (8005374 <HAL_RCC_ClockConfig+0x35c>)
 8005340:	5cd3      	ldrb	r3, [r2, r3]
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	fa22 f303 	lsr.w	r3, r2, r3
 800534c:	4a0a      	ldr	r2, [pc, #40]	; (8005378 <HAL_RCC_ClockConfig+0x360>)
 800534e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005350:	4a0a      	ldr	r2, [pc, #40]	; (800537c <HAL_RCC_ClockConfig+0x364>)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005356:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <HAL_RCC_ClockConfig+0x368>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f7fc f92e 	bl	80015bc <HAL_InitTick>
 8005360:	4603      	mov	r3, r0
 8005362:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	58024400 	.word	0x58024400
 8005374:	0800adbc 	.word	0x0800adbc
 8005378:	24000004 	.word	0x24000004
 800537c:	24000000 	.word	0x24000000
 8005380:	24000008 	.word	0x24000008

08005384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005384:	b480      	push	{r7}
 8005386:	b089      	sub	sp, #36	; 0x24
 8005388:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800538a:	4bb3      	ldr	r3, [pc, #716]	; (8005658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005392:	2b18      	cmp	r3, #24
 8005394:	f200 8155 	bhi.w	8005642 <HAL_RCC_GetSysClockFreq+0x2be>
 8005398:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800539a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539e:	bf00      	nop
 80053a0:	08005405 	.word	0x08005405
 80053a4:	08005643 	.word	0x08005643
 80053a8:	08005643 	.word	0x08005643
 80053ac:	08005643 	.word	0x08005643
 80053b0:	08005643 	.word	0x08005643
 80053b4:	08005643 	.word	0x08005643
 80053b8:	08005643 	.word	0x08005643
 80053bc:	08005643 	.word	0x08005643
 80053c0:	0800542b 	.word	0x0800542b
 80053c4:	08005643 	.word	0x08005643
 80053c8:	08005643 	.word	0x08005643
 80053cc:	08005643 	.word	0x08005643
 80053d0:	08005643 	.word	0x08005643
 80053d4:	08005643 	.word	0x08005643
 80053d8:	08005643 	.word	0x08005643
 80053dc:	08005643 	.word	0x08005643
 80053e0:	08005431 	.word	0x08005431
 80053e4:	08005643 	.word	0x08005643
 80053e8:	08005643 	.word	0x08005643
 80053ec:	08005643 	.word	0x08005643
 80053f0:	08005643 	.word	0x08005643
 80053f4:	08005643 	.word	0x08005643
 80053f8:	08005643 	.word	0x08005643
 80053fc:	08005643 	.word	0x08005643
 8005400:	08005437 	.word	0x08005437
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005404:	4b94      	ldr	r3, [pc, #592]	; (8005658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b00      	cmp	r3, #0
 800540e:	d009      	beq.n	8005424 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005410:	4b91      	ldr	r3, [pc, #580]	; (8005658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	08db      	lsrs	r3, r3, #3
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	4a90      	ldr	r2, [pc, #576]	; (800565c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800541c:	fa22 f303 	lsr.w	r3, r2, r3
 8005420:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005422:	e111      	b.n	8005648 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005424:	4b8d      	ldr	r3, [pc, #564]	; (800565c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005426:	61bb      	str	r3, [r7, #24]
    break;
 8005428:	e10e      	b.n	8005648 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800542a:	4b8d      	ldr	r3, [pc, #564]	; (8005660 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800542c:	61bb      	str	r3, [r7, #24]
    break;
 800542e:	e10b      	b.n	8005648 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005430:	4b8c      	ldr	r3, [pc, #560]	; (8005664 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005432:	61bb      	str	r3, [r7, #24]
    break;
 8005434:	e108      	b.n	8005648 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005436:	4b88      	ldr	r3, [pc, #544]	; (8005658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005440:	4b85      	ldr	r3, [pc, #532]	; (8005658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	091b      	lsrs	r3, r3, #4
 8005446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800544a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800544c:	4b82      	ldr	r3, [pc, #520]	; (8005658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005456:	4b80      	ldr	r3, [pc, #512]	; (8005658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545a:	08db      	lsrs	r3, r3, #3
 800545c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	fb02 f303 	mul.w	r3, r2, r3
 8005466:	ee07 3a90 	vmov	s15, r3
 800546a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 80e1 	beq.w	800563c <HAL_RCC_GetSysClockFreq+0x2b8>
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2b02      	cmp	r3, #2
 800547e:	f000 8083 	beq.w	8005588 <HAL_RCC_GetSysClockFreq+0x204>
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b02      	cmp	r3, #2
 8005486:	f200 80a1 	bhi.w	80055cc <HAL_RCC_GetSysClockFreq+0x248>
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d003      	beq.n	8005498 <HAL_RCC_GetSysClockFreq+0x114>
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d056      	beq.n	8005544 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005496:	e099      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005498:	4b6f      	ldr	r3, [pc, #444]	; (8005658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d02d      	beq.n	8005500 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054a4:	4b6c      	ldr	r3, [pc, #432]	; (8005658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	08db      	lsrs	r3, r3, #3
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	4a6b      	ldr	r2, [pc, #428]	; (800565c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
 80054b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	ee07 3a90 	vmov	s15, r3
 80054bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ce:	4b62      	ldr	r3, [pc, #392]	; (8005658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054de:	ed97 6a02 	vldr	s12, [r7, #8]
 80054e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005668 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80054fe:	e087      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	ee07 3a90 	vmov	s15, r3
 8005506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800566c <HAL_RCC_GetSysClockFreq+0x2e8>
 800550e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005512:	4b51      	ldr	r3, [pc, #324]	; (8005658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005522:	ed97 6a02 	vldr	s12, [r7, #8]
 8005526:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005668 <HAL_RCC_GetSysClockFreq+0x2e4>
 800552a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800552e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800553a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005542:	e065      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005670 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005556:	4b40      	ldr	r3, [pc, #256]	; (8005658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005566:	ed97 6a02 	vldr	s12, [r7, #8]
 800556a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005668 <HAL_RCC_GetSysClockFreq+0x2e4>
 800556e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800557a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800557e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005586:	e043      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005592:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005674 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800559a:	4b2f      	ldr	r3, [pc, #188]	; (8005658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80055ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005668 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055ca:	e021      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	ee07 3a90 	vmov	s15, r3
 80055d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005670 <HAL_RCC_GetSysClockFreq+0x2ec>
 80055da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055de:	4b1e      	ldr	r3, [pc, #120]	; (8005658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80055f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005668 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800560e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005610:	4b11      	ldr	r3, [pc, #68]	; (8005658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	0a5b      	lsrs	r3, r3, #9
 8005616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800561a:	3301      	adds	r3, #1
 800561c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	ee07 3a90 	vmov	s15, r3
 8005624:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005628:	edd7 6a07 	vldr	s13, [r7, #28]
 800562c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005634:	ee17 3a90 	vmov	r3, s15
 8005638:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800563a:	e005      	b.n	8005648 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	61bb      	str	r3, [r7, #24]
    break;
 8005640:	e002      	b.n	8005648 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005642:	4b07      	ldr	r3, [pc, #28]	; (8005660 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005644:	61bb      	str	r3, [r7, #24]
    break;
 8005646:	bf00      	nop
  }

  return sysclockfreq;
 8005648:	69bb      	ldr	r3, [r7, #24]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3724      	adds	r7, #36	; 0x24
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	58024400 	.word	0x58024400
 800565c:	03d09000 	.word	0x03d09000
 8005660:	003d0900 	.word	0x003d0900
 8005664:	017d7840 	.word	0x017d7840
 8005668:	46000000 	.word	0x46000000
 800566c:	4c742400 	.word	0x4c742400
 8005670:	4a742400 	.word	0x4a742400
 8005674:	4bbebc20 	.word	0x4bbebc20

08005678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800567e:	f7ff fe81 	bl	8005384 <HAL_RCC_GetSysClockFreq>
 8005682:	4602      	mov	r2, r0
 8005684:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	0a1b      	lsrs	r3, r3, #8
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	490f      	ldr	r1, [pc, #60]	; (80056cc <HAL_RCC_GetHCLKFreq+0x54>)
 8005690:	5ccb      	ldrb	r3, [r1, r3]
 8005692:	f003 031f 	and.w	r3, r3, #31
 8005696:	fa22 f303 	lsr.w	r3, r2, r3
 800569a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800569c:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	4a09      	ldr	r2, [pc, #36]	; (80056cc <HAL_RCC_GetHCLKFreq+0x54>)
 80056a6:	5cd3      	ldrb	r3, [r2, r3]
 80056a8:	f003 031f 	and.w	r3, r3, #31
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	fa22 f303 	lsr.w	r3, r2, r3
 80056b2:	4a07      	ldr	r2, [pc, #28]	; (80056d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80056b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056b6:	4a07      	ldr	r2, [pc, #28]	; (80056d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80056be:	681b      	ldr	r3, [r3, #0]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	58024400 	.word	0x58024400
 80056cc:	0800adbc 	.word	0x0800adbc
 80056d0:	24000004 	.word	0x24000004
 80056d4:	24000000 	.word	0x24000000

080056d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056e0:	2300      	movs	r3, #0
 80056e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056e4:	2300      	movs	r3, #0
 80056e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d03f      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056fc:	d02a      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80056fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005702:	d824      	bhi.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005704:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005708:	d018      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800570a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800570e:	d81e      	bhi.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005714:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005718:	d007      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800571a:	e018      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800571c:	4bab      	ldr	r3, [pc, #684]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	4aaa      	ldr	r2, [pc, #680]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005726:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005728:	e015      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3304      	adds	r3, #4
 800572e:	2102      	movs	r1, #2
 8005730:	4618      	mov	r0, r3
 8005732:	f001 fff3 	bl	800771c <RCCEx_PLL2_Config>
 8005736:	4603      	mov	r3, r0
 8005738:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800573a:	e00c      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3324      	adds	r3, #36	; 0x24
 8005740:	2102      	movs	r1, #2
 8005742:	4618      	mov	r0, r3
 8005744:	f002 f89c 	bl	8007880 <RCCEx_PLL3_Config>
 8005748:	4603      	mov	r3, r0
 800574a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800574c:	e003      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	75fb      	strb	r3, [r7, #23]
      break;
 8005752:	e000      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005756:	7dfb      	ldrb	r3, [r7, #23]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d109      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800575c:	4b9b      	ldr	r3, [pc, #620]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800575e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005768:	4998      	ldr	r1, [pc, #608]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800576a:	4313      	orrs	r3, r2
 800576c:	650b      	str	r3, [r1, #80]	; 0x50
 800576e:	e001      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005770:	7dfb      	ldrb	r3, [r7, #23]
 8005772:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577c:	2b00      	cmp	r3, #0
 800577e:	d03d      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005784:	2b04      	cmp	r3, #4
 8005786:	d826      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005788:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800578a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578e:	bf00      	nop
 8005790:	080057a5 	.word	0x080057a5
 8005794:	080057b3 	.word	0x080057b3
 8005798:	080057c5 	.word	0x080057c5
 800579c:	080057dd 	.word	0x080057dd
 80057a0:	080057dd 	.word	0x080057dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a4:	4b89      	ldr	r3, [pc, #548]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	4a88      	ldr	r2, [pc, #544]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057b0:	e015      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3304      	adds	r3, #4
 80057b6:	2100      	movs	r1, #0
 80057b8:	4618      	mov	r0, r3
 80057ba:	f001 ffaf 	bl	800771c <RCCEx_PLL2_Config>
 80057be:	4603      	mov	r3, r0
 80057c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057c2:	e00c      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3324      	adds	r3, #36	; 0x24
 80057c8:	2100      	movs	r1, #0
 80057ca:	4618      	mov	r0, r3
 80057cc:	f002 f858 	bl	8007880 <RCCEx_PLL3_Config>
 80057d0:	4603      	mov	r3, r0
 80057d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057d4:	e003      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	75fb      	strb	r3, [r7, #23]
      break;
 80057da:	e000      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80057dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057de:	7dfb      	ldrb	r3, [r7, #23]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d109      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057e4:	4b79      	ldr	r3, [pc, #484]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e8:	f023 0207 	bic.w	r2, r3, #7
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f0:	4976      	ldr	r1, [pc, #472]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	650b      	str	r3, [r1, #80]	; 0x50
 80057f6:	e001      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f8:	7dfb      	ldrb	r3, [r7, #23]
 80057fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005804:	2b00      	cmp	r3, #0
 8005806:	d042      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005810:	d02b      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005816:	d825      	bhi.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005818:	2bc0      	cmp	r3, #192	; 0xc0
 800581a:	d028      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800581c:	2bc0      	cmp	r3, #192	; 0xc0
 800581e:	d821      	bhi.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005820:	2b80      	cmp	r3, #128	; 0x80
 8005822:	d016      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005824:	2b80      	cmp	r3, #128	; 0x80
 8005826:	d81d      	bhi.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d007      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005830:	e018      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005832:	4b66      	ldr	r3, [pc, #408]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	4a65      	ldr	r2, [pc, #404]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800583c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800583e:	e017      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3304      	adds	r3, #4
 8005844:	2100      	movs	r1, #0
 8005846:	4618      	mov	r0, r3
 8005848:	f001 ff68 	bl	800771c <RCCEx_PLL2_Config>
 800584c:	4603      	mov	r3, r0
 800584e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005850:	e00e      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3324      	adds	r3, #36	; 0x24
 8005856:	2100      	movs	r1, #0
 8005858:	4618      	mov	r0, r3
 800585a:	f002 f811 	bl	8007880 <RCCEx_PLL3_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005862:	e005      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	75fb      	strb	r3, [r7, #23]
      break;
 8005868:	e002      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800586a:	bf00      	nop
 800586c:	e000      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800586e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005870:	7dfb      	ldrb	r3, [r7, #23]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d109      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005876:	4b55      	ldr	r3, [pc, #340]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005882:	4952      	ldr	r1, [pc, #328]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005884:	4313      	orrs	r3, r2
 8005886:	650b      	str	r3, [r1, #80]	; 0x50
 8005888:	e001      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588a:	7dfb      	ldrb	r3, [r7, #23]
 800588c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005896:	2b00      	cmp	r3, #0
 8005898:	d049      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80058a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058a4:	d030      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80058a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058aa:	d82a      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80058ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80058b0:	d02c      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80058b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80058b6:	d824      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80058b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058bc:	d018      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80058be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058c2:	d81e      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80058c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058cc:	d007      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x206>
 80058ce:	e018      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d0:	4b3e      	ldr	r3, [pc, #248]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	4a3d      	ldr	r2, [pc, #244]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058dc:	e017      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3304      	adds	r3, #4
 80058e2:	2100      	movs	r1, #0
 80058e4:	4618      	mov	r0, r3
 80058e6:	f001 ff19 	bl	800771c <RCCEx_PLL2_Config>
 80058ea:	4603      	mov	r3, r0
 80058ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80058ee:	e00e      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3324      	adds	r3, #36	; 0x24
 80058f4:	2100      	movs	r1, #0
 80058f6:	4618      	mov	r0, r3
 80058f8:	f001 ffc2 	bl	8007880 <RCCEx_PLL3_Config>
 80058fc:	4603      	mov	r3, r0
 80058fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005900:	e005      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	75fb      	strb	r3, [r7, #23]
      break;
 8005906:	e002      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005908:	bf00      	nop
 800590a:	e000      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800590c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005914:	4b2d      	ldr	r3, [pc, #180]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005918:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005922:	492a      	ldr	r1, [pc, #168]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005924:	4313      	orrs	r3, r2
 8005926:	658b      	str	r3, [r1, #88]	; 0x58
 8005928:	e001      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592a:	7dfb      	ldrb	r3, [r7, #23]
 800592c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005936:	2b00      	cmp	r3, #0
 8005938:	d04c      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005940:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005944:	d030      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005946:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800594a:	d82a      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800594c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005950:	d02c      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005952:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005956:	d824      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005958:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800595c:	d018      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800595e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005962:	d81e      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800596c:	d007      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800596e:	e018      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005970:	4b16      	ldr	r3, [pc, #88]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	4a15      	ldr	r2, [pc, #84]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800597a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800597c:	e017      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	3304      	adds	r3, #4
 8005982:	2100      	movs	r1, #0
 8005984:	4618      	mov	r0, r3
 8005986:	f001 fec9 	bl	800771c <RCCEx_PLL2_Config>
 800598a:	4603      	mov	r3, r0
 800598c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800598e:	e00e      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3324      	adds	r3, #36	; 0x24
 8005994:	2100      	movs	r1, #0
 8005996:	4618      	mov	r0, r3
 8005998:	f001 ff72 	bl	8007880 <RCCEx_PLL3_Config>
 800599c:	4603      	mov	r3, r0
 800599e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059a0:	e005      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	75fb      	strb	r3, [r7, #23]
      break;
 80059a6:	e002      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80059a8:	bf00      	nop
 80059aa:	e000      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80059ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10d      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80059c2:	4902      	ldr	r1, [pc, #8]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	658b      	str	r3, [r1, #88]	; 0x58
 80059c8:	e004      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80059ca:	bf00      	nop
 80059cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
 80059d2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d032      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e4:	2b30      	cmp	r3, #48	; 0x30
 80059e6:	d01c      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80059e8:	2b30      	cmp	r3, #48	; 0x30
 80059ea:	d817      	bhi.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80059ec:	2b20      	cmp	r3, #32
 80059ee:	d00c      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x332>
 80059f0:	2b20      	cmp	r3, #32
 80059f2:	d813      	bhi.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d016      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80059f8:	2b10      	cmp	r3, #16
 80059fa:	d10f      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059fc:	4baf      	ldr	r3, [pc, #700]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	4aae      	ldr	r2, [pc, #696]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005a08:	e00e      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	2102      	movs	r1, #2
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 fe83 	bl	800771c <RCCEx_PLL2_Config>
 8005a16:	4603      	mov	r3, r0
 8005a18:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005a1a:	e005      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a20:	e002      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005a22:	bf00      	nop
 8005a24:	e000      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a2e:	4ba3      	ldr	r3, [pc, #652]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a3a:	49a0      	ldr	r1, [pc, #640]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005a40:	e001      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d047      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a5a:	d030      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a60:	d82a      	bhi.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005a62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a66:	d02c      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005a68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a6c:	d824      	bhi.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a72:	d018      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a78:	d81e      	bhi.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a82:	d007      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005a84:	e018      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a86:	4b8d      	ldr	r3, [pc, #564]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	4a8c      	ldr	r2, [pc, #560]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005a92:	e017      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3304      	adds	r3, #4
 8005a98:	2100      	movs	r1, #0
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f001 fe3e 	bl	800771c <RCCEx_PLL2_Config>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005aa4:	e00e      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3324      	adds	r3, #36	; 0x24
 8005aaa:	2100      	movs	r1, #0
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 fee7 	bl	8007880 <RCCEx_PLL3_Config>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ab6:	e005      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	75fb      	strb	r3, [r7, #23]
      break;
 8005abc:	e002      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005abe:	bf00      	nop
 8005ac0:	e000      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d109      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005aca:	4b7c      	ldr	r3, [pc, #496]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ace:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad6:	4979      	ldr	r1, [pc, #484]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	650b      	str	r3, [r1, #80]	; 0x50
 8005adc:	e001      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ade:	7dfb      	ldrb	r3, [r7, #23]
 8005ae0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d049      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005af6:	d02e      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005afc:	d828      	bhi.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005afe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b02:	d02a      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005b04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b08:	d822      	bhi.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005b0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b0e:	d026      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005b10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b14:	d81c      	bhi.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005b16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b1a:	d010      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005b1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b20:	d816      	bhi.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d01d      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2a:	d111      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	2101      	movs	r1, #1
 8005b32:	4618      	mov	r0, r3
 8005b34:	f001 fdf2 	bl	800771c <RCCEx_PLL2_Config>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005b3c:	e012      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3324      	adds	r3, #36	; 0x24
 8005b42:	2101      	movs	r1, #1
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 fe9b 	bl	8007880 <RCCEx_PLL3_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005b4e:	e009      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	75fb      	strb	r3, [r7, #23]
      break;
 8005b54:	e006      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005b56:	bf00      	nop
 8005b58:	e004      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005b5a:	bf00      	nop
 8005b5c:	e002      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005b5e:	bf00      	nop
 8005b60:	e000      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d109      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b6a:	4b54      	ldr	r3, [pc, #336]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b76:	4951      	ldr	r1, [pc, #324]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	650b      	str	r3, [r1, #80]	; 0x50
 8005b7c:	e001      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
 8005b80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d04b      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b98:	d02e      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b9e:	d828      	bhi.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba4:	d02a      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005baa:	d822      	bhi.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005bac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bb0:	d026      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005bb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bb6:	d81c      	bhi.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bbc:	d010      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005bbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bc2:	d816      	bhi.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01d      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005bc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bcc:	d111      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 fda1 	bl	800771c <RCCEx_PLL2_Config>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005bde:	e012      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3324      	adds	r3, #36	; 0x24
 8005be4:	2101      	movs	r1, #1
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 fe4a 	bl	8007880 <RCCEx_PLL3_Config>
 8005bec:	4603      	mov	r3, r0
 8005bee:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005bf0:	e009      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8005bf6:	e006      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005bf8:	bf00      	nop
 8005bfa:	e004      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005bfc:	bf00      	nop
 8005bfe:	e002      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005c00:	bf00      	nop
 8005c02:	e000      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005c04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c0c:	4b2b      	ldr	r3, [pc, #172]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c10:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c1a:	4928      	ldr	r1, [pc, #160]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	658b      	str	r3, [r1, #88]	; 0x58
 8005c20:	e001      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d02f      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c3a:	d00e      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c40:	d814      	bhi.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d015      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c4a:	d10f      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c4c:	4b1b      	ldr	r3, [pc, #108]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	4a1a      	ldr	r2, [pc, #104]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005c58:	e00c      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	2101      	movs	r1, #1
 8005c60:	4618      	mov	r0, r3
 8005c62:	f001 fd5b 	bl	800771c <RCCEx_PLL2_Config>
 8005c66:	4603      	mov	r3, r0
 8005c68:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005c6a:	e003      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c70:	e000      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d109      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c7a:	4b10      	ldr	r3, [pc, #64]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c86:	490d      	ldr	r1, [pc, #52]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	650b      	str	r3, [r1, #80]	; 0x50
 8005c8c:	e001      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8e:	7dfb      	ldrb	r3, [r7, #23]
 8005c90:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d033      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d81c      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005ca6:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005ce7 	.word	0x08005ce7
 8005cb0:	08005cc1 	.word	0x08005cc1
 8005cb4:	08005ccf 	.word	0x08005ccf
 8005cb8:	08005ce7 	.word	0x08005ce7
 8005cbc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cc0:	4bb8      	ldr	r3, [pc, #736]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	4ab7      	ldr	r2, [pc, #732]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005ccc:	e00c      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	2102      	movs	r1, #2
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f001 fd21 	bl	800771c <RCCEx_PLL2_Config>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005cde:	e003      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce4:	e000      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005ce6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d109      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005cee:	4bad      	ldr	r3, [pc, #692]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf2:	f023 0203 	bic.w	r2, r3, #3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfa:	49aa      	ldr	r1, [pc, #680]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d00:	e001      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d02:	7dfb      	ldrb	r3, [r7, #23]
 8005d04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 8086 	beq.w	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d14:	4ba4      	ldr	r3, [pc, #656]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4aa3      	ldr	r2, [pc, #652]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d20:	f7fb fc96 	bl	8001650 <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d26:	e009      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d28:	f7fb fc92 	bl	8001650 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b64      	cmp	r3, #100	; 0x64
 8005d34:	d902      	bls.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	75fb      	strb	r3, [r7, #23]
        break;
 8005d3a:	e005      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d3c:	4b9a      	ldr	r3, [pc, #616]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0ef      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d166      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d4e:	4b95      	ldr	r3, [pc, #596]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d58:	4053      	eors	r3, r2
 8005d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d013      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d62:	4b90      	ldr	r3, [pc, #576]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d6c:	4b8d      	ldr	r3, [pc, #564]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d70:	4a8c      	ldr	r2, [pc, #560]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d76:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d78:	4b8a      	ldr	r3, [pc, #552]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7c:	4a89      	ldr	r2, [pc, #548]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d82:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d84:	4a87      	ldr	r2, [pc, #540]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d94:	d115      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d96:	f7fb fc5b 	bl	8001650 <HAL_GetTick>
 8005d9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d9c:	e00b      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d9e:	f7fb fc57 	bl	8001650 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d902      	bls.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	75fb      	strb	r3, [r7, #23]
            break;
 8005db4:	e005      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005db6:	4b7b      	ldr	r3, [pc, #492]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0ed      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005dc2:	7dfb      	ldrb	r3, [r7, #23]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d126      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dd6:	d10d      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005dd8:	4b72      	ldr	r3, [pc, #456]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005de6:	0919      	lsrs	r1, r3, #4
 8005de8:	4b70      	ldr	r3, [pc, #448]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005dea:	400b      	ands	r3, r1
 8005dec:	496d      	ldr	r1, [pc, #436]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	610b      	str	r3, [r1, #16]
 8005df2:	e005      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005df4:	4b6b      	ldr	r3, [pc, #428]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	4a6a      	ldr	r2, [pc, #424]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dfa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005dfe:	6113      	str	r3, [r2, #16]
 8005e00:	4b68      	ldr	r3, [pc, #416]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e0e:	4965      	ldr	r1, [pc, #404]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	670b      	str	r3, [r1, #112]	; 0x70
 8005e14:	e004      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e16:	7dfb      	ldrb	r3, [r7, #23]
 8005e18:	75bb      	strb	r3, [r7, #22]
 8005e1a:	e001      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1c:	7dfb      	ldrb	r3, [r7, #23]
 8005e1e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d07e      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e30:	2b28      	cmp	r3, #40	; 0x28
 8005e32:	d867      	bhi.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005e34:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3a:	bf00      	nop
 8005e3c:	08005f0b 	.word	0x08005f0b
 8005e40:	08005f05 	.word	0x08005f05
 8005e44:	08005f05 	.word	0x08005f05
 8005e48:	08005f05 	.word	0x08005f05
 8005e4c:	08005f05 	.word	0x08005f05
 8005e50:	08005f05 	.word	0x08005f05
 8005e54:	08005f05 	.word	0x08005f05
 8005e58:	08005f05 	.word	0x08005f05
 8005e5c:	08005ee1 	.word	0x08005ee1
 8005e60:	08005f05 	.word	0x08005f05
 8005e64:	08005f05 	.word	0x08005f05
 8005e68:	08005f05 	.word	0x08005f05
 8005e6c:	08005f05 	.word	0x08005f05
 8005e70:	08005f05 	.word	0x08005f05
 8005e74:	08005f05 	.word	0x08005f05
 8005e78:	08005f05 	.word	0x08005f05
 8005e7c:	08005ef3 	.word	0x08005ef3
 8005e80:	08005f05 	.word	0x08005f05
 8005e84:	08005f05 	.word	0x08005f05
 8005e88:	08005f05 	.word	0x08005f05
 8005e8c:	08005f05 	.word	0x08005f05
 8005e90:	08005f05 	.word	0x08005f05
 8005e94:	08005f05 	.word	0x08005f05
 8005e98:	08005f05 	.word	0x08005f05
 8005e9c:	08005f0b 	.word	0x08005f0b
 8005ea0:	08005f05 	.word	0x08005f05
 8005ea4:	08005f05 	.word	0x08005f05
 8005ea8:	08005f05 	.word	0x08005f05
 8005eac:	08005f05 	.word	0x08005f05
 8005eb0:	08005f05 	.word	0x08005f05
 8005eb4:	08005f05 	.word	0x08005f05
 8005eb8:	08005f05 	.word	0x08005f05
 8005ebc:	08005f0b 	.word	0x08005f0b
 8005ec0:	08005f05 	.word	0x08005f05
 8005ec4:	08005f05 	.word	0x08005f05
 8005ec8:	08005f05 	.word	0x08005f05
 8005ecc:	08005f05 	.word	0x08005f05
 8005ed0:	08005f05 	.word	0x08005f05
 8005ed4:	08005f05 	.word	0x08005f05
 8005ed8:	08005f05 	.word	0x08005f05
 8005edc:	08005f0b 	.word	0x08005f0b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 fc18 	bl	800771c <RCCEx_PLL2_Config>
 8005eec:	4603      	mov	r3, r0
 8005eee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005ef0:	e00c      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3324      	adds	r3, #36	; 0x24
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f001 fcc1 	bl	8007880 <RCCEx_PLL3_Config>
 8005efe:	4603      	mov	r3, r0
 8005f00:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005f02:	e003      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	75fb      	strb	r3, [r7, #23]
      break;
 8005f08:	e000      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d109      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f12:	4b24      	ldr	r3, [pc, #144]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f16:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f1e:	4921      	ldr	r1, [pc, #132]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	654b      	str	r3, [r1, #84]	; 0x54
 8005f24:	e001      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
 8005f28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d03e      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f3a:	2b05      	cmp	r3, #5
 8005f3c:	d820      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005f3e:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005f87 	.word	0x08005f87
 8005f48:	08005f5d 	.word	0x08005f5d
 8005f4c:	08005f6f 	.word	0x08005f6f
 8005f50:	08005f87 	.word	0x08005f87
 8005f54:	08005f87 	.word	0x08005f87
 8005f58:	08005f87 	.word	0x08005f87
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	2101      	movs	r1, #1
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 fbda 	bl	800771c <RCCEx_PLL2_Config>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005f6c:	e00c      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3324      	adds	r3, #36	; 0x24
 8005f72:	2101      	movs	r1, #1
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 fc83 	bl	8007880 <RCCEx_PLL3_Config>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005f7e:	e003      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	75fb      	strb	r3, [r7, #23]
      break;
 8005f84:	e000      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f88:	7dfb      	ldrb	r3, [r7, #23]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d110      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f8e:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f92:	f023 0207 	bic.w	r2, r3, #7
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f9a:	4902      	ldr	r1, [pc, #8]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	654b      	str	r3, [r1, #84]	; 0x54
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005fa2:	bf00      	nop
 8005fa4:	58024400 	.word	0x58024400
 8005fa8:	58024800 	.word	0x58024800
 8005fac:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb0:	7dfb      	ldrb	r3, [r7, #23]
 8005fb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d039      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc6:	2b05      	cmp	r3, #5
 8005fc8:	d820      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005fca:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	08006013 	.word	0x08006013
 8005fd4:	08005fe9 	.word	0x08005fe9
 8005fd8:	08005ffb 	.word	0x08005ffb
 8005fdc:	08006013 	.word	0x08006013
 8005fe0:	08006013 	.word	0x08006013
 8005fe4:	08006013 	.word	0x08006013
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3304      	adds	r3, #4
 8005fec:	2101      	movs	r1, #1
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f001 fb94 	bl	800771c <RCCEx_PLL2_Config>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005ff8:	e00c      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	3324      	adds	r3, #36	; 0x24
 8005ffe:	2101      	movs	r1, #1
 8006000:	4618      	mov	r0, r3
 8006002:	f001 fc3d 	bl	8007880 <RCCEx_PLL3_Config>
 8006006:	4603      	mov	r3, r0
 8006008:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800600a:	e003      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	75fb      	strb	r3, [r7, #23]
      break;
 8006010:	e000      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006012:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006014:	7dfb      	ldrb	r3, [r7, #23]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10a      	bne.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800601a:	4bb7      	ldr	r3, [pc, #732]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601e:	f023 0207 	bic.w	r2, r3, #7
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006028:	49b3      	ldr	r1, [pc, #716]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800602a:	4313      	orrs	r3, r2
 800602c:	658b      	str	r3, [r1, #88]	; 0x58
 800602e:	e001      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006030:	7dfb      	ldrb	r3, [r7, #23]
 8006032:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d04b      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800604a:	d02e      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800604c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006050:	d828      	bhi.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006056:	d02a      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605c:	d822      	bhi.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800605e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006062:	d026      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006064:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006068:	d81c      	bhi.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800606a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800606e:	d010      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006074:	d816      	bhi.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d01d      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800607a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800607e:	d111      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3304      	adds	r3, #4
 8006084:	2100      	movs	r1, #0
 8006086:	4618      	mov	r0, r3
 8006088:	f001 fb48 	bl	800771c <RCCEx_PLL2_Config>
 800608c:	4603      	mov	r3, r0
 800608e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006090:	e012      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3324      	adds	r3, #36	; 0x24
 8006096:	2102      	movs	r1, #2
 8006098:	4618      	mov	r0, r3
 800609a:	f001 fbf1 	bl	8007880 <RCCEx_PLL3_Config>
 800609e:	4603      	mov	r3, r0
 80060a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80060a2:	e009      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	75fb      	strb	r3, [r7, #23]
      break;
 80060a8:	e006      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80060aa:	bf00      	nop
 80060ac:	e004      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80060ae:	bf00      	nop
 80060b0:	e002      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80060b2:	bf00      	nop
 80060b4:	e000      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80060b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10a      	bne.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060be:	4b8e      	ldr	r3, [pc, #568]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80060c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060cc:	498a      	ldr	r1, [pc, #552]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	654b      	str	r3, [r1, #84]	; 0x54
 80060d2:	e001      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d04b      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80060ee:	d02e      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80060f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80060f4:	d828      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80060f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fa:	d02a      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80060fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006100:	d822      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006102:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006106:	d026      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006108:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800610c:	d81c      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800610e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006112:	d010      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006118:	d816      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01d      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800611e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006122:	d111      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3304      	adds	r3, #4
 8006128:	2100      	movs	r1, #0
 800612a:	4618      	mov	r0, r3
 800612c:	f001 faf6 	bl	800771c <RCCEx_PLL2_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006134:	e012      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3324      	adds	r3, #36	; 0x24
 800613a:	2102      	movs	r1, #2
 800613c:	4618      	mov	r0, r3
 800613e:	f001 fb9f 	bl	8007880 <RCCEx_PLL3_Config>
 8006142:	4603      	mov	r3, r0
 8006144:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006146:	e009      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	75fb      	strb	r3, [r7, #23]
      break;
 800614c:	e006      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800614e:	bf00      	nop
 8006150:	e004      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006152:	bf00      	nop
 8006154:	e002      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006156:	bf00      	nop
 8006158:	e000      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800615a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10a      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006162:	4b65      	ldr	r3, [pc, #404]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006166:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006170:	4961      	ldr	r1, [pc, #388]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006172:	4313      	orrs	r3, r2
 8006174:	658b      	str	r3, [r1, #88]	; 0x58
 8006176:	e001      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006178:	7dfb      	ldrb	r3, [r7, #23]
 800617a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006184:	2b00      	cmp	r3, #0
 8006186:	d04b      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800618e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006192:	d02e      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006194:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006198:	d828      	bhi.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800619a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800619e:	d02a      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80061a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061a4:	d822      	bhi.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80061a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80061aa:	d026      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80061ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80061b0:	d81c      	bhi.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80061b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061b6:	d010      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80061b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061bc:	d816      	bhi.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d01d      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80061c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061c6:	d111      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3304      	adds	r3, #4
 80061cc:	2100      	movs	r1, #0
 80061ce:	4618      	mov	r0, r3
 80061d0:	f001 faa4 	bl	800771c <RCCEx_PLL2_Config>
 80061d4:	4603      	mov	r3, r0
 80061d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80061d8:	e012      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	3324      	adds	r3, #36	; 0x24
 80061de:	2102      	movs	r1, #2
 80061e0:	4618      	mov	r0, r3
 80061e2:	f001 fb4d 	bl	8007880 <RCCEx_PLL3_Config>
 80061e6:	4603      	mov	r3, r0
 80061e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80061ea:	e009      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	75fb      	strb	r3, [r7, #23]
      break;
 80061f0:	e006      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80061f2:	bf00      	nop
 80061f4:	e004      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80061f6:	bf00      	nop
 80061f8:	e002      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80061fa:	bf00      	nop
 80061fc:	e000      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80061fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10a      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006206:	4b3c      	ldr	r3, [pc, #240]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006214:	4938      	ldr	r1, [pc, #224]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006216:	4313      	orrs	r3, r2
 8006218:	658b      	str	r3, [r1, #88]	; 0x58
 800621a:	e001      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621c:	7dfb      	ldrb	r3, [r7, #23]
 800621e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0308 	and.w	r3, r3, #8
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01a      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006236:	d10a      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3324      	adds	r3, #36	; 0x24
 800623c:	2102      	movs	r1, #2
 800623e:	4618      	mov	r0, r3
 8006240:	f001 fb1e 	bl	8007880 <RCCEx_PLL3_Config>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800624e:	4b2a      	ldr	r3, [pc, #168]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006252:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800625c:	4926      	ldr	r1, [pc, #152]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800625e:	4313      	orrs	r3, r2
 8006260:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0310 	and.w	r3, r3, #16
 800626a:	2b00      	cmp	r3, #0
 800626c:	d01a      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006278:	d10a      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3324      	adds	r3, #36	; 0x24
 800627e:	2102      	movs	r1, #2
 8006280:	4618      	mov	r0, r3
 8006282:	f001 fafd 	bl	8007880 <RCCEx_PLL3_Config>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006290:	4b19      	ldr	r3, [pc, #100]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800629e:	4916      	ldr	r1, [pc, #88]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d036      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80062b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062ba:	d01f      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80062bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062c0:	d817      	bhi.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80062c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ca:	d009      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80062cc:	e011      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3304      	adds	r3, #4
 80062d2:	2100      	movs	r1, #0
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 fa21 	bl	800771c <RCCEx_PLL2_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80062de:	e00e      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3324      	adds	r3, #36	; 0x24
 80062e4:	2102      	movs	r1, #2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f001 faca 	bl	8007880 <RCCEx_PLL3_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80062f0:	e005      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	75fb      	strb	r3, [r7, #23]
      break;
 80062f6:	e002      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80062f8:	58024400 	.word	0x58024400
      break;
 80062fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006304:	4b93      	ldr	r3, [pc, #588]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006308:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006312:	4990      	ldr	r1, [pc, #576]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006314:	4313      	orrs	r3, r2
 8006316:	658b      	str	r3, [r1, #88]	; 0x58
 8006318:	e001      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d033      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006330:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006334:	d01c      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006336:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800633a:	d816      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800633c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006340:	d003      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006346:	d007      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006348:	e00f      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800634a:	4b82      	ldr	r3, [pc, #520]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800634c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634e:	4a81      	ldr	r2, [pc, #516]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006354:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006356:	e00c      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3324      	adds	r3, #36	; 0x24
 800635c:	2101      	movs	r1, #1
 800635e:	4618      	mov	r0, r3
 8006360:	f001 fa8e 	bl	8007880 <RCCEx_PLL3_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006368:	e003      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	75fb      	strb	r3, [r7, #23]
      break;
 800636e:	e000      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006372:	7dfb      	ldrb	r3, [r7, #23]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006378:	4b76      	ldr	r3, [pc, #472]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800637a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006386:	4973      	ldr	r1, [pc, #460]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006388:	4313      	orrs	r3, r2
 800638a:	654b      	str	r3, [r1, #84]	; 0x54
 800638c:	e001      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638e:	7dfb      	ldrb	r3, [r7, #23]
 8006390:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d029      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80063a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063aa:	d007      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80063ac:	e00f      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ae:	4b69      	ldr	r3, [pc, #420]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	4a68      	ldr	r2, [pc, #416]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80063ba:	e00b      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3304      	adds	r3, #4
 80063c0:	2102      	movs	r1, #2
 80063c2:	4618      	mov	r0, r3
 80063c4:	f001 f9aa 	bl	800771c <RCCEx_PLL2_Config>
 80063c8:	4603      	mov	r3, r0
 80063ca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80063cc:	e002      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	75fb      	strb	r3, [r7, #23]
      break;
 80063d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d109      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80063da:	4b5e      	ldr	r3, [pc, #376]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e6:	495b      	ldr	r1, [pc, #364]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80063ec:	e001      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ee:	7dfb      	ldrb	r3, [r7, #23]
 80063f0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3324      	adds	r3, #36	; 0x24
 8006402:	2102      	movs	r1, #2
 8006404:	4618      	mov	r0, r3
 8006406:	f001 fa3b 	bl	8007880 <RCCEx_PLL3_Config>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d030      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006424:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006428:	d017      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800642a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800642e:	d811      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006434:	d013      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800643a:	d80b      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800643c:	2b00      	cmp	r3, #0
 800643e:	d010      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006444:	d106      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006446:	4b43      	ldr	r3, [pc, #268]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644a:	4a42      	ldr	r2, [pc, #264]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800644c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006450:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006452:	e007      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	75fb      	strb	r3, [r7, #23]
      break;
 8006458:	e004      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800645a:	bf00      	nop
 800645c:	e002      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800645e:	bf00      	nop
 8006460:	e000      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006464:	7dfb      	ldrb	r3, [r7, #23]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d109      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800646a:	4b3a      	ldr	r3, [pc, #232]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800646c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006476:	4937      	ldr	r1, [pc, #220]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006478:	4313      	orrs	r3, r2
 800647a:	654b      	str	r3, [r1, #84]	; 0x54
 800647c:	e001      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647e:	7dfb      	ldrb	r3, [r7, #23]
 8006480:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d008      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800648e:	4b31      	ldr	r3, [pc, #196]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006492:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649a:	492e      	ldr	r1, [pc, #184]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800649c:	4313      	orrs	r3, r2
 800649e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d009      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80064ac:	4b29      	ldr	r3, [pc, #164]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80064ba:	4926      	ldr	r1, [pc, #152]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d008      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064cc:	4b21      	ldr	r3, [pc, #132]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064d8:	491e      	ldr	r1, [pc, #120]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00d      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064ea:	4b1a      	ldr	r3, [pc, #104]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	4a19      	ldr	r2, [pc, #100]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064f4:	6113      	str	r3, [r2, #16]
 80064f6:	4b17      	ldr	r3, [pc, #92]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064f8:	691a      	ldr	r2, [r3, #16]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006500:	4914      	ldr	r1, [pc, #80]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006502:	4313      	orrs	r3, r2
 8006504:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	da08      	bge.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800650e:	4b11      	ldr	r3, [pc, #68]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006512:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651a:	490e      	ldr	r1, [pc, #56]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800651c:	4313      	orrs	r3, r2
 800651e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d009      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800652c:	4b09      	ldr	r3, [pc, #36]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800652e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006530:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653a:	4906      	ldr	r1, [pc, #24]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800653c:	4313      	orrs	r3, r2
 800653e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006540:	7dbb      	ldrb	r3, [r7, #22]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	e000      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	58024400 	.word	0x58024400

08006558 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b090      	sub	sp, #64	; 0x40
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006566:	f040 8095 	bne.w	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800656a:	4bae      	ldr	r3, [pc, #696]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800656c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	633b      	str	r3, [r7, #48]	; 0x30
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	2b04      	cmp	r3, #4
 8006578:	f200 8088 	bhi.w	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800657c:	a201      	add	r2, pc, #4	; (adr r2, 8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800657e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006582:	bf00      	nop
 8006584:	08006599 	.word	0x08006599
 8006588:	080065c1 	.word	0x080065c1
 800658c:	080065e9 	.word	0x080065e9
 8006590:	08006685 	.word	0x08006685
 8006594:	08006611 	.word	0x08006611

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006598:	4ba2      	ldr	r3, [pc, #648]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065a4:	d108      	bne.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 ff64 	bl	8007478 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065b4:	f000 bc95 	b.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80065b8:	2300      	movs	r3, #0
 80065ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065bc:	f000 bc91 	b.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065c0:	4b98      	ldr	r3, [pc, #608]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065cc:	d108      	bne.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ce:	f107 0318 	add.w	r3, r7, #24
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fca8 	bl	8006f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065dc:	f000 bc81 	b.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065e4:	f000 bc7d 	b.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065e8:	4b8e      	ldr	r3, [pc, #568]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065f4:	d108      	bne.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065f6:	f107 030c 	add.w	r3, r7, #12
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fde8 	bl	80071d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006604:	f000 bc6d 	b.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006608:	2300      	movs	r3, #0
 800660a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800660c:	f000 bc69 	b.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006610:	4b84      	ldr	r3, [pc, #528]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006614:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006618:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800661a:	4b82      	ldr	r3, [pc, #520]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0304 	and.w	r3, r3, #4
 8006622:	2b04      	cmp	r3, #4
 8006624:	d10c      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8006626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006628:	2b00      	cmp	r3, #0
 800662a:	d109      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800662c:	4b7d      	ldr	r3, [pc, #500]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	08db      	lsrs	r3, r3, #3
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	4a7c      	ldr	r2, [pc, #496]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006638:	fa22 f303 	lsr.w	r3, r2, r3
 800663c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800663e:	e01f      	b.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006640:	4b78      	ldr	r3, [pc, #480]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800664c:	d106      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800664e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006650:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006654:	d102      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006656:	4b75      	ldr	r3, [pc, #468]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800665a:	e011      	b.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800665c:	4b71      	ldr	r3, [pc, #452]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006668:	d106      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800666a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006670:	d102      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006672:	4b6f      	ldr	r3, [pc, #444]	; (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006676:	e003      	b.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006678:	2300      	movs	r3, #0
 800667a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800667c:	f000 bc31 	b.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006680:	f000 bc2f 	b.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006684:	4b6b      	ldr	r3, [pc, #428]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006686:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006688:	f000 bc2b 	b.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006690:	f000 bc27 	b.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800669a:	f040 8095 	bne.w	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800669e:	4b61      	ldr	r3, [pc, #388]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80066a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80066a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ae:	d04d      	beq.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b6:	f200 8084 	bhi.w	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	2bc0      	cmp	r3, #192	; 0xc0
 80066be:	d07d      	beq.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	2bc0      	cmp	r3, #192	; 0xc0
 80066c4:	d87d      	bhi.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	2b80      	cmp	r3, #128	; 0x80
 80066ca:	d02d      	beq.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	2b80      	cmp	r3, #128	; 0x80
 80066d0:	d877      	bhi.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80066d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066da:	2b40      	cmp	r3, #64	; 0x40
 80066dc:	d012      	beq.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80066de:	e070      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066e0:	4b50      	ldr	r3, [pc, #320]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066ec:	d107      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 fec0 	bl	8007478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066fc:	e3f1      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006702:	e3ee      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006704:	4b47      	ldr	r3, [pc, #284]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800670c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006710:	d107      	bne.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006712:	f107 0318 	add.w	r3, r7, #24
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fc06 	bl	8006f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006720:	e3df      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006722:	2300      	movs	r3, #0
 8006724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006726:	e3dc      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006728:	4b3e      	ldr	r3, [pc, #248]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006734:	d107      	bne.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006736:	f107 030c 	add.w	r3, r7, #12
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fd48 	bl	80071d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006744:	e3cd      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006746:	2300      	movs	r3, #0
 8006748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800674a:	e3ca      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800674c:	4b35      	ldr	r3, [pc, #212]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800674e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006750:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006754:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006756:	4b33      	ldr	r3, [pc, #204]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0304 	and.w	r3, r3, #4
 800675e:	2b04      	cmp	r3, #4
 8006760:	d10c      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006764:	2b00      	cmp	r3, #0
 8006766:	d109      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006768:	4b2e      	ldr	r3, [pc, #184]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	08db      	lsrs	r3, r3, #3
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	4a2d      	ldr	r2, [pc, #180]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006774:	fa22 f303 	lsr.w	r3, r2, r3
 8006778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800677a:	e01e      	b.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800677c:	4b29      	ldr	r3, [pc, #164]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006788:	d106      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006790:	d102      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006792:	4b26      	ldr	r3, [pc, #152]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006796:	e010      	b.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006798:	4b22      	ldr	r3, [pc, #136]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067a4:	d106      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80067a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ac:	d102      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80067ae:	4b20      	ldr	r3, [pc, #128]	; (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067b2:	e002      	b.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80067b4:	2300      	movs	r3, #0
 80067b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80067b8:	e393      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80067ba:	e392      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80067bc:	4b1d      	ldr	r3, [pc, #116]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067c0:	e38f      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80067c2:	2300      	movs	r3, #0
 80067c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067c6:	e38c      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ce:	f040 80a7 	bne.w	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80067d2:	4b14      	ldr	r3, [pc, #80]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80067d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80067da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80067dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067e2:	d05f      	beq.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067ea:	f200 8096 	bhi.w	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80067f4:	f000 808e 	beq.w	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80067fe:	f200 808c 	bhi.w	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006808:	d03a      	beq.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006810:	f200 8083 	bhi.w	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00e      	beq.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006820:	d01c      	beq.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006822:	e07a      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006824:	58024400 	.word	0x58024400
 8006828:	03d09000 	.word	0x03d09000
 800682c:	003d0900 	.word	0x003d0900
 8006830:	017d7840 	.word	0x017d7840
 8006834:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006838:	4baa      	ldr	r3, [pc, #680]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006844:	d107      	bne.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800684a:	4618      	mov	r0, r3
 800684c:	f000 fe14 	bl	8007478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006854:	e345      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800685a:	e342      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800685c:	4ba1      	ldr	r3, [pc, #644]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006868:	d107      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800686a:	f107 0318 	add.w	r3, r7, #24
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fb5a 	bl	8006f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006878:	e333      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800687a:	2300      	movs	r3, #0
 800687c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800687e:	e330      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006880:	4b98      	ldr	r3, [pc, #608]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800688c:	d107      	bne.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800688e:	f107 030c 	add.w	r3, r7, #12
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fc9c 	bl	80071d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800689c:	e321      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068a2:	e31e      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80068a4:	4b8f      	ldr	r3, [pc, #572]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068ac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068ae:	4b8d      	ldr	r3, [pc, #564]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0304 	and.w	r3, r3, #4
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d10c      	bne.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80068ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d109      	bne.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068c0:	4b88      	ldr	r3, [pc, #544]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	08db      	lsrs	r3, r3, #3
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	4a87      	ldr	r2, [pc, #540]	; (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068cc:	fa22 f303 	lsr.w	r3, r2, r3
 80068d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d2:	e01e      	b.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068d4:	4b83      	ldr	r3, [pc, #524]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e0:	d106      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80068e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068e8:	d102      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80068ea:	4b80      	ldr	r3, [pc, #512]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ee:	e010      	b.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068f0:	4b7c      	ldr	r3, [pc, #496]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068fc:	d106      	bne.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80068fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006904:	d102      	bne.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006906:	4b7a      	ldr	r3, [pc, #488]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800690a:	e002      	b.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800690c:	2300      	movs	r3, #0
 800690e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006910:	e2e7      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006912:	e2e6      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006914:	4b77      	ldr	r3, [pc, #476]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006918:	e2e3      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800691e:	e2e0      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006926:	f040 809c 	bne.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800692a:	4b6e      	ldr	r3, [pc, #440]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800692c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800692e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006932:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800693a:	d054      	beq.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006942:	f200 808b 	bhi.w	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800694c:	f000 8083 	beq.w	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006956:	f200 8081 	bhi.w	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006960:	d02f      	beq.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006968:	d878      	bhi.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696c:	2b00      	cmp	r3, #0
 800696e:	d004      	beq.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006976:	d012      	beq.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006978:	e070      	b.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800697a:	4b5a      	ldr	r3, [pc, #360]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006982:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006986:	d107      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fd73 	bl	8007478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006994:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006996:	e2a4      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800699c:	e2a1      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800699e:	4b51      	ldr	r3, [pc, #324]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069aa:	d107      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ac:	f107 0318 	add.w	r3, r7, #24
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fab9 	bl	8006f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80069ba:	e292      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069c0:	e28f      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069c2:	4b48      	ldr	r3, [pc, #288]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ce:	d107      	bne.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069d0:	f107 030c 	add.w	r3, r7, #12
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 fbfb 	bl	80071d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069de:	e280      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069e4:	e27d      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80069e6:	4b3f      	ldr	r3, [pc, #252]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069ee:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069f0:	4b3c      	ldr	r3, [pc, #240]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d10c      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80069fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d109      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a02:	4b38      	ldr	r3, [pc, #224]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	08db      	lsrs	r3, r3, #3
 8006a08:	f003 0303 	and.w	r3, r3, #3
 8006a0c:	4a36      	ldr	r2, [pc, #216]	; (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a14:	e01e      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a16:	4b33      	ldr	r3, [pc, #204]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a22:	d106      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a2a:	d102      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006a2c:	4b2f      	ldr	r3, [pc, #188]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a30:	e010      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a32:	4b2c      	ldr	r3, [pc, #176]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a3e:	d106      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a46:	d102      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006a48:	4b29      	ldr	r3, [pc, #164]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a4c:	e002      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006a52:	e246      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006a54:	e245      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006a56:	4b27      	ldr	r3, [pc, #156]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a5a:	e242      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a60:	e23f      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a68:	f040 80a8 	bne.w	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006a6c:	4b1d      	ldr	r3, [pc, #116]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a70:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006a74:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a7c:	d060      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a84:	f200 8097 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a8e:	f000 808f 	beq.w	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a98:	f200 808d 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aa2:	d03b      	beq.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aaa:	f200 8084 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d004      	beq.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aba:	d01d      	beq.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8006abc:	e07b      	b.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006abe:	4b09      	ldr	r3, [pc, #36]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006aca:	d107      	bne.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 fcd1 	bl	8007478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ada:	e202      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006adc:	2300      	movs	r3, #0
 8006ade:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ae0:	e1ff      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006ae2:	bf00      	nop
 8006ae4:	58024400 	.word	0x58024400
 8006ae8:	03d09000 	.word	0x03d09000
 8006aec:	003d0900 	.word	0x003d0900
 8006af0:	017d7840 	.word	0x017d7840
 8006af4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006af8:	4ba3      	ldr	r3, [pc, #652]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b04:	d107      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b06:	f107 0318 	add.w	r3, r7, #24
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fa0c 	bl	8006f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b14:	e1e5      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b1a:	e1e2      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b1c:	4b9a      	ldr	r3, [pc, #616]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b28:	d107      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b2a:	f107 030c 	add.w	r3, r7, #12
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 fb4e 	bl	80071d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b38:	e1d3      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b3e:	e1d0      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006b40:	4b91      	ldr	r3, [pc, #580]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b48:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b4a:	4b8f      	ldr	r3, [pc, #572]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0304 	and.w	r3, r3, #4
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	d10c      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d109      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b5c:	4b8a      	ldr	r3, [pc, #552]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	08db      	lsrs	r3, r3, #3
 8006b62:	f003 0303 	and.w	r3, r3, #3
 8006b66:	4a89      	ldr	r2, [pc, #548]	; (8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b68:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b6e:	e01e      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b70:	4b85      	ldr	r3, [pc, #532]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b7c:	d106      	bne.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8006b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b84:	d102      	bne.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006b86:	4b82      	ldr	r3, [pc, #520]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006b88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b8a:	e010      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b8c:	4b7e      	ldr	r3, [pc, #504]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b98:	d106      	bne.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ba0:	d102      	bne.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006ba2:	4b7c      	ldr	r3, [pc, #496]	; (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ba6:	e002      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006bac:	e199      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006bae:	e198      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006bb0:	4b79      	ldr	r3, [pc, #484]	; (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bb4:	e195      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bba:	e192      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006bc2:	d173      	bne.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006bc4:	4b70      	ldr	r3, [pc, #448]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bcc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bd4:	d02f      	beq.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bdc:	d863      	bhi.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d004      	beq.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bea:	d012      	beq.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8006bec:	e05b      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bee:	4b66      	ldr	r3, [pc, #408]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bfa:	d107      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bfc:	f107 0318 	add.w	r3, r7, #24
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 f991 	bl	8006f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c0a:	e16a      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c10:	e167      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c12:	4b5d      	ldr	r3, [pc, #372]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c1e:	d107      	bne.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c20:	f107 030c 	add.w	r3, r7, #12
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 fad3 	bl	80071d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c2e:	e158      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c34:	e155      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006c36:	4b54      	ldr	r3, [pc, #336]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c3e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c40:	4b51      	ldr	r3, [pc, #324]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d10c      	bne.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8006c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d109      	bne.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c52:	4b4d      	ldr	r3, [pc, #308]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	08db      	lsrs	r3, r3, #3
 8006c58:	f003 0303 	and.w	r3, r3, #3
 8006c5c:	4a4b      	ldr	r2, [pc, #300]	; (8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c64:	e01e      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c66:	4b48      	ldr	r3, [pc, #288]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c72:	d106      	bne.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c7a:	d102      	bne.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006c7c:	4b44      	ldr	r3, [pc, #272]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c80:	e010      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c82:	4b41      	ldr	r3, [pc, #260]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c8e:	d106      	bne.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c96:	d102      	bne.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006c98:	4b3e      	ldr	r3, [pc, #248]	; (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c9c:	e002      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006ca2:	e11e      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006ca4:	e11d      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006caa:	e11a      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb2:	d133      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006cb4:	4b34      	ldr	r3, [pc, #208]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cbc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d004      	beq.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cca:	d012      	beq.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8006ccc:	e023      	b.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cce:	4b2e      	ldr	r3, [pc, #184]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cda:	d107      	bne.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 fbc9 	bl	8007478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006cea:	e0fa      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cf0:	e0f7      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cf2:	4b25      	ldr	r3, [pc, #148]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cfe:	d107      	bne.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d00:	f107 0318 	add.w	r3, r7, #24
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 f90f 	bl	8006f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d0e:	e0e8      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d14:	e0e5      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d1a:	e0e2      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d22:	f040 808f 	bne.w	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006d26:	4b18      	ldr	r3, [pc, #96]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006d2e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d36:	d075      	beq.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8006d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d3e:	d87e      	bhi.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d46:	d060      	beq.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4e:	d876      	bhi.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d56:	d045      	beq.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8006d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d5e:	d86e      	bhi.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d66:	d02b      	beq.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d6e:	d866      	bhi.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d004      	beq.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8006d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d7c:	d00e      	beq.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8006d7e:	e05e      	b.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006d80:	f000 f8bc 	bl	8006efc <HAL_RCCEx_GetD3PCLK1Freq>
 8006d84:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006d86:	e0ac      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	03d09000 	.word	0x03d09000
 8006d90:	003d0900 	.word	0x003d0900
 8006d94:	017d7840 	.word	0x017d7840
 8006d98:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d9c:	4b53      	ldr	r3, [pc, #332]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006da8:	d107      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006daa:	f107 0318 	add.w	r3, r7, #24
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 f8ba 	bl	8006f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006db8:	e093      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dbe:	e090      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dc0:	4b4a      	ldr	r3, [pc, #296]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dcc:	d107      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dce:	f107 030c 	add.w	r3, r7, #12
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 f9fc 	bl	80071d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ddc:	e081      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006de2:	e07e      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006de4:	4b41      	ldr	r3, [pc, #260]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d109      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006df0:	4b3e      	ldr	r3, [pc, #248]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	08db      	lsrs	r3, r3, #3
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	4a3d      	ldr	r2, [pc, #244]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006e00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e02:	e06e      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e08:	e06b      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006e0a:	4b38      	ldr	r3, [pc, #224]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e16:	d102      	bne.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8006e18:	4b36      	ldr	r3, [pc, #216]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e1c:	e061      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e22:	e05e      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e24:	4b31      	ldr	r3, [pc, #196]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e30:	d102      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8006e32:	4b31      	ldr	r3, [pc, #196]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006e34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e36:	e054      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e3c:	e051      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e42:	e04e      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e4a:	d148      	bne.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006e4c:	4b27      	ldr	r3, [pc, #156]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e54:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e5c:	d02a      	beq.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e64:	d838      	bhi.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d004      	beq.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e72:	d00d      	beq.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006e74:	e030      	b.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e76:	4b1d      	ldr	r3, [pc, #116]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e82:	d102      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8006e84:	4b1c      	ldr	r3, [pc, #112]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006e86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e88:	e02b      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e8e:	e028      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e90:	4b16      	ldr	r3, [pc, #88]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e9c:	d107      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 fae8 	bl	8007478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006eac:	e019      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eb2:	e016      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006eb4:	4b0d      	ldr	r3, [pc, #52]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ebc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ec0:	d107      	bne.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ec2:	f107 0318 	add.w	r3, r7, #24
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 f82e 	bl	8006f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ed0:	e007      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ed6:	e004      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006edc:	e001      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3740      	adds	r7, #64	; 0x40
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	58024400 	.word	0x58024400
 8006ef0:	03d09000 	.word	0x03d09000
 8006ef4:	003d0900 	.word	0x003d0900
 8006ef8:	017d7840 	.word	0x017d7840

08006efc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f00:	f7fe fbba 	bl	8005678 <HAL_RCC_GetHCLKFreq>
 8006f04:	4602      	mov	r2, r0
 8006f06:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	091b      	lsrs	r3, r3, #4
 8006f0c:	f003 0307 	and.w	r3, r3, #7
 8006f10:	4904      	ldr	r1, [pc, #16]	; (8006f24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f12:	5ccb      	ldrb	r3, [r1, r3]
 8006f14:	f003 031f 	and.w	r3, r3, #31
 8006f18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	58024400 	.word	0x58024400
 8006f24:	0800adbc 	.word	0x0800adbc

08006f28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b089      	sub	sp, #36	; 0x24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f30:	4ba1      	ldr	r3, [pc, #644]	; (80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f34:	f003 0303 	and.w	r3, r3, #3
 8006f38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006f3a:	4b9f      	ldr	r3, [pc, #636]	; (80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3e:	0b1b      	lsrs	r3, r3, #12
 8006f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f46:	4b9c      	ldr	r3, [pc, #624]	; (80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	091b      	lsrs	r3, r3, #4
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006f52:	4b99      	ldr	r3, [pc, #612]	; (80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f56:	08db      	lsrs	r3, r3, #3
 8006f58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	fb02 f303 	mul.w	r3, r2, r3
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f000 8111 	beq.w	8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	f000 8083 	beq.w	8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	f200 80a1 	bhi.w	80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d003      	beq.n	8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d056      	beq.n	8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f92:	e099      	b.n	80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f94:	4b88      	ldr	r3, [pc, #544]	; (80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0320 	and.w	r3, r3, #32
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d02d      	beq.n	8006ffc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fa0:	4b85      	ldr	r3, [pc, #532]	; (80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	08db      	lsrs	r3, r3, #3
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	4a84      	ldr	r2, [pc, #528]	; (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006fac:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	ee07 3a90 	vmov	s15, r3
 8006fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fca:	4b7b      	ldr	r3, [pc, #492]	; (80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd2:	ee07 3a90 	vmov	s15, r3
 8006fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fde:	eddf 5a78 	vldr	s11, [pc, #480]	; 80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006ffa:	e087      	b.n	800710c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007006:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800700a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700e:	4b6a      	ldr	r3, [pc, #424]	; (80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007022:	eddf 5a67 	vldr	s11, [pc, #412]	; 80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800702a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800703a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800703e:	e065      	b.n	800710c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	ee07 3a90 	vmov	s15, r3
 8007046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800704e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007052:	4b59      	ldr	r3, [pc, #356]	; (80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800705a:	ee07 3a90 	vmov	s15, r3
 800705e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007062:	ed97 6a03 	vldr	s12, [r7, #12]
 8007066:	eddf 5a56 	vldr	s11, [pc, #344]	; 80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800706a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800706e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800707a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007082:	e043      	b.n	800710c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007096:	4b48      	ldr	r3, [pc, #288]	; (80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070c6:	e021      	b.n	800710c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070da:	4b37      	ldr	r3, [pc, #220]	; (80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e2:	ee07 3a90 	vmov	s15, r3
 80070e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007106:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800710a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800710c:	4b2a      	ldr	r3, [pc, #168]	; (80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007110:	0a5b      	lsrs	r3, r3, #9
 8007112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007122:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007126:	edd7 6a07 	vldr	s13, [r7, #28]
 800712a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800712e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007132:	ee17 2a90 	vmov	r2, s15
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800713a:	4b1f      	ldr	r3, [pc, #124]	; (80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800713c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713e:	0c1b      	lsrs	r3, r3, #16
 8007140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007144:	ee07 3a90 	vmov	s15, r3
 8007148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007150:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007154:	edd7 6a07 	vldr	s13, [r7, #28]
 8007158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800715c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007160:	ee17 2a90 	vmov	r2, s15
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007168:	4b13      	ldr	r3, [pc, #76]	; (80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800716a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716c:	0e1b      	lsrs	r3, r3, #24
 800716e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800717e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007182:	edd7 6a07 	vldr	s13, [r7, #28]
 8007186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800718a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800718e:	ee17 2a90 	vmov	r2, s15
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007196:	e008      	b.n	80071aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	609a      	str	r2, [r3, #8]
}
 80071aa:	bf00      	nop
 80071ac:	3724      	adds	r7, #36	; 0x24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	58024400 	.word	0x58024400
 80071bc:	03d09000 	.word	0x03d09000
 80071c0:	46000000 	.word	0x46000000
 80071c4:	4c742400 	.word	0x4c742400
 80071c8:	4a742400 	.word	0x4a742400
 80071cc:	4bbebc20 	.word	0x4bbebc20

080071d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b089      	sub	sp, #36	; 0x24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071d8:	4ba1      	ldr	r3, [pc, #644]	; (8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071dc:	f003 0303 	and.w	r3, r3, #3
 80071e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80071e2:	4b9f      	ldr	r3, [pc, #636]	; (8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e6:	0d1b      	lsrs	r3, r3, #20
 80071e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80071ee:	4b9c      	ldr	r3, [pc, #624]	; (8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f2:	0a1b      	lsrs	r3, r3, #8
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80071fa:	4b99      	ldr	r3, [pc, #612]	; (8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fe:	08db      	lsrs	r3, r3, #3
 8007200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	fb02 f303 	mul.w	r3, r2, r3
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007212:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 8111 	beq.w	8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b02      	cmp	r3, #2
 8007222:	f000 8083 	beq.w	800732c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	2b02      	cmp	r3, #2
 800722a:	f200 80a1 	bhi.w	8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d056      	beq.n	80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800723a:	e099      	b.n	8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800723c:	4b88      	ldr	r3, [pc, #544]	; (8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0320 	and.w	r3, r3, #32
 8007244:	2b00      	cmp	r3, #0
 8007246:	d02d      	beq.n	80072a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007248:	4b85      	ldr	r3, [pc, #532]	; (8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	08db      	lsrs	r3, r3, #3
 800724e:	f003 0303 	and.w	r3, r3, #3
 8007252:	4a84      	ldr	r2, [pc, #528]	; (8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007254:	fa22 f303 	lsr.w	r3, r2, r3
 8007258:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	ee07 3a90 	vmov	s15, r3
 8007260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	ee07 3a90 	vmov	s15, r3
 800726a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007272:	4b7b      	ldr	r3, [pc, #492]	; (8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007282:	ed97 6a03 	vldr	s12, [r7, #12]
 8007286:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800728a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800729a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80072a2:	e087      	b.n	80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800746c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80072b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b6:	4b6a      	ldr	r3, [pc, #424]	; (8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072e6:	e065      	b.n	80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072fa:	4b59      	ldr	r3, [pc, #356]	; (8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800730a:	ed97 6a03 	vldr	s12, [r7, #12]
 800730e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800731a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800731e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007326:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800732a:	e043      	b.n	80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007336:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800733a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733e:	4b48      	ldr	r3, [pc, #288]	; (8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007352:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800736e:	e021      	b.n	80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800737e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007382:	4b37      	ldr	r3, [pc, #220]	; (8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007392:	ed97 6a03 	vldr	s12, [r7, #12]
 8007396:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800739a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800739e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80073b4:	4b2a      	ldr	r3, [pc, #168]	; (8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b8:	0a5b      	lsrs	r3, r3, #9
 80073ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80073d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073da:	ee17 2a90 	vmov	r2, s15
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80073e2:	4b1f      	ldr	r3, [pc, #124]	; (8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	0c1b      	lsrs	r3, r3, #16
 80073e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ec:	ee07 3a90 	vmov	s15, r3
 80073f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007408:	ee17 2a90 	vmov	r2, s15
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007410:	4b13      	ldr	r3, [pc, #76]	; (8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007414:	0e1b      	lsrs	r3, r3, #24
 8007416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007422:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007426:	ee37 7a87 	vadd.f32	s14, s15, s14
 800742a:	edd7 6a07 	vldr	s13, [r7, #28]
 800742e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007436:	ee17 2a90 	vmov	r2, s15
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800743e:	e008      	b.n	8007452 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	609a      	str	r2, [r3, #8]
}
 8007452:	bf00      	nop
 8007454:	3724      	adds	r7, #36	; 0x24
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	58024400 	.word	0x58024400
 8007464:	03d09000 	.word	0x03d09000
 8007468:	46000000 	.word	0x46000000
 800746c:	4c742400 	.word	0x4c742400
 8007470:	4a742400 	.word	0x4a742400
 8007474:	4bbebc20 	.word	0x4bbebc20

08007478 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007478:	b480      	push	{r7}
 800747a:	b089      	sub	sp, #36	; 0x24
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007480:	4ba0      	ldr	r3, [pc, #640]	; (8007704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007484:	f003 0303 	and.w	r3, r3, #3
 8007488:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800748a:	4b9e      	ldr	r3, [pc, #632]	; (8007704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800748c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748e:	091b      	lsrs	r3, r3, #4
 8007490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007494:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007496:	4b9b      	ldr	r3, [pc, #620]	; (8007704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80074a0:	4b98      	ldr	r3, [pc, #608]	; (8007704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a4:	08db      	lsrs	r3, r3, #3
 80074a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	fb02 f303 	mul.w	r3, r2, r3
 80074b0:	ee07 3a90 	vmov	s15, r3
 80074b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 8111 	beq.w	80076e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	f000 8083 	beq.w	80075d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	f200 80a1 	bhi.w	8007616 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d056      	beq.n	800758e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80074e0:	e099      	b.n	8007616 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074e2:	4b88      	ldr	r3, [pc, #544]	; (8007704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0320 	and.w	r3, r3, #32
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d02d      	beq.n	800754a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074ee:	4b85      	ldr	r3, [pc, #532]	; (8007704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	08db      	lsrs	r3, r3, #3
 80074f4:	f003 0303 	and.w	r3, r3, #3
 80074f8:	4a83      	ldr	r2, [pc, #524]	; (8007708 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80074fa:	fa22 f303 	lsr.w	r3, r2, r3
 80074fe:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	ee07 3a90 	vmov	s15, r3
 8007510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007518:	4b7a      	ldr	r3, [pc, #488]	; (8007704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800751a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007520:	ee07 3a90 	vmov	s15, r3
 8007524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007528:	ed97 6a03 	vldr	s12, [r7, #12]
 800752c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800770c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007538:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007544:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007548:	e087      	b.n	800765a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	ee07 3a90 	vmov	s15, r3
 8007550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007554:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007710 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755c:	4b69      	ldr	r3, [pc, #420]	; (8007704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007564:	ee07 3a90 	vmov	s15, r3
 8007568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007570:	eddf 5a66 	vldr	s11, [pc, #408]	; 800770c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007588:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800758c:	e065      	b.n	800765a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	ee07 3a90 	vmov	s15, r3
 8007594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007598:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007714 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800759c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a0:	4b58      	ldr	r3, [pc, #352]	; (8007704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a8:	ee07 3a90 	vmov	s15, r3
 80075ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80075b4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800770c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075d0:	e043      	b.n	800765a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	ee07 3a90 	vmov	s15, r3
 80075d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80075e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e4:	4b47      	ldr	r3, [pc, #284]	; (8007704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ec:	ee07 3a90 	vmov	s15, r3
 80075f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80075f8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800770c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800760c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007610:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007614:	e021      	b.n	800765a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	ee07 3a90 	vmov	s15, r3
 800761c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007620:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007710 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007628:	4b36      	ldr	r3, [pc, #216]	; (8007704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800762a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007630:	ee07 3a90 	vmov	s15, r3
 8007634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007638:	ed97 6a03 	vldr	s12, [r7, #12]
 800763c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800770c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007648:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800764c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007654:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007658:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800765a:	4b2a      	ldr	r3, [pc, #168]	; (8007704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800765c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765e:	0a5b      	lsrs	r3, r3, #9
 8007660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007664:	ee07 3a90 	vmov	s15, r3
 8007668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007670:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007674:	edd7 6a07 	vldr	s13, [r7, #28]
 8007678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800767c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007680:	ee17 2a90 	vmov	r2, s15
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007688:	4b1e      	ldr	r3, [pc, #120]	; (8007704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800768a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768c:	0c1b      	lsrs	r3, r3, #16
 800768e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007692:	ee07 3a90 	vmov	s15, r3
 8007696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800769a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800769e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80076a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076ae:	ee17 2a90 	vmov	r2, s15
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80076b6:	4b13      	ldr	r3, [pc, #76]	; (8007704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	0e1b      	lsrs	r3, r3, #24
 80076bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076c0:	ee07 3a90 	vmov	s15, r3
 80076c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80076d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076dc:	ee17 2a90 	vmov	r2, s15
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80076e4:	e008      	b.n	80076f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	609a      	str	r2, [r3, #8]
}
 80076f8:	bf00      	nop
 80076fa:	3724      	adds	r7, #36	; 0x24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	58024400 	.word	0x58024400
 8007708:	03d09000 	.word	0x03d09000
 800770c:	46000000 	.word	0x46000000
 8007710:	4c742400 	.word	0x4c742400
 8007714:	4a742400 	.word	0x4a742400
 8007718:	4bbebc20 	.word	0x4bbebc20

0800771c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800772a:	4b53      	ldr	r3, [pc, #332]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 800772c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	2b03      	cmp	r3, #3
 8007734:	d101      	bne.n	800773a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e099      	b.n	800786e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800773a:	4b4f      	ldr	r3, [pc, #316]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a4e      	ldr	r2, [pc, #312]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 8007740:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007746:	f7f9 ff83 	bl	8001650 <HAL_GetTick>
 800774a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800774c:	e008      	b.n	8007760 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800774e:	f7f9 ff7f 	bl	8001650 <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	2b02      	cmp	r3, #2
 800775a:	d901      	bls.n	8007760 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e086      	b.n	800786e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007760:	4b45      	ldr	r3, [pc, #276]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1f0      	bne.n	800774e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800776c:	4b42      	ldr	r3, [pc, #264]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 800776e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007770:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	031b      	lsls	r3, r3, #12
 800777a:	493f      	ldr	r1, [pc, #252]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 800777c:	4313      	orrs	r3, r2
 800777e:	628b      	str	r3, [r1, #40]	; 0x28
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	3b01      	subs	r3, #1
 8007786:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	3b01      	subs	r3, #1
 8007790:	025b      	lsls	r3, r3, #9
 8007792:	b29b      	uxth	r3, r3
 8007794:	431a      	orrs	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	3b01      	subs	r3, #1
 800779c:	041b      	lsls	r3, r3, #16
 800779e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077a2:	431a      	orrs	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	3b01      	subs	r3, #1
 80077aa:	061b      	lsls	r3, r3, #24
 80077ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077b0:	4931      	ldr	r1, [pc, #196]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80077b6:	4b30      	ldr	r3, [pc, #192]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 80077b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	492d      	ldr	r1, [pc, #180]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80077c8:	4b2b      	ldr	r3, [pc, #172]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	f023 0220 	bic.w	r2, r3, #32
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	4928      	ldr	r1, [pc, #160]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80077da:	4b27      	ldr	r3, [pc, #156]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 80077dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077de:	4a26      	ldr	r2, [pc, #152]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 80077e0:	f023 0310 	bic.w	r3, r3, #16
 80077e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077e6:	4b24      	ldr	r3, [pc, #144]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 80077e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077ea:	4b24      	ldr	r3, [pc, #144]	; (800787c <RCCEx_PLL2_Config+0x160>)
 80077ec:	4013      	ands	r3, r2
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	69d2      	ldr	r2, [r2, #28]
 80077f2:	00d2      	lsls	r2, r2, #3
 80077f4:	4920      	ldr	r1, [pc, #128]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80077fa:	4b1f      	ldr	r3, [pc, #124]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 80077fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fe:	4a1e      	ldr	r2, [pc, #120]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 8007800:	f043 0310 	orr.w	r3, r3, #16
 8007804:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d106      	bne.n	800781a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800780c:	4b1a      	ldr	r3, [pc, #104]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 800780e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007810:	4a19      	ldr	r2, [pc, #100]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 8007812:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007816:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007818:	e00f      	b.n	800783a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d106      	bne.n	800782e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007820:	4b15      	ldr	r3, [pc, #84]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	4a14      	ldr	r2, [pc, #80]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 8007826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800782a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800782c:	e005      	b.n	800783a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800782e:	4b12      	ldr	r3, [pc, #72]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 8007830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007832:	4a11      	ldr	r2, [pc, #68]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 8007834:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007838:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800783a:	4b0f      	ldr	r3, [pc, #60]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a0e      	ldr	r2, [pc, #56]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 8007840:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007846:	f7f9 ff03 	bl	8001650 <HAL_GetTick>
 800784a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800784c:	e008      	b.n	8007860 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800784e:	f7f9 feff 	bl	8001650 <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	2b02      	cmp	r3, #2
 800785a:	d901      	bls.n	8007860 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e006      	b.n	800786e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007860:	4b05      	ldr	r3, [pc, #20]	; (8007878 <RCCEx_PLL2_Config+0x15c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d0f0      	beq.n	800784e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800786c:	7bfb      	ldrb	r3, [r7, #15]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	58024400 	.word	0x58024400
 800787c:	ffff0007 	.word	0xffff0007

08007880 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800788e:	4b53      	ldr	r3, [pc, #332]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 8007890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007892:	f003 0303 	and.w	r3, r3, #3
 8007896:	2b03      	cmp	r3, #3
 8007898:	d101      	bne.n	800789e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e099      	b.n	80079d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800789e:	4b4f      	ldr	r3, [pc, #316]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a4e      	ldr	r2, [pc, #312]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 80078a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078aa:	f7f9 fed1 	bl	8001650 <HAL_GetTick>
 80078ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078b0:	e008      	b.n	80078c4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80078b2:	f7f9 fecd 	bl	8001650 <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d901      	bls.n	80078c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e086      	b.n	80079d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078c4:	4b45      	ldr	r3, [pc, #276]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1f0      	bne.n	80078b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078d0:	4b42      	ldr	r3, [pc, #264]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 80078d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	051b      	lsls	r3, r3, #20
 80078de:	493f      	ldr	r1, [pc, #252]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 80078e0:	4313      	orrs	r3, r2
 80078e2:	628b      	str	r3, [r1, #40]	; 0x28
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	3b01      	subs	r3, #1
 80078ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	3b01      	subs	r3, #1
 80078f4:	025b      	lsls	r3, r3, #9
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	431a      	orrs	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	3b01      	subs	r3, #1
 8007900:	041b      	lsls	r3, r3, #16
 8007902:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007906:	431a      	orrs	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	3b01      	subs	r3, #1
 800790e:	061b      	lsls	r3, r3, #24
 8007910:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007914:	4931      	ldr	r1, [pc, #196]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 8007916:	4313      	orrs	r3, r2
 8007918:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800791a:	4b30      	ldr	r3, [pc, #192]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 800791c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	492d      	ldr	r1, [pc, #180]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 8007928:	4313      	orrs	r3, r2
 800792a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800792c:	4b2b      	ldr	r3, [pc, #172]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	4928      	ldr	r1, [pc, #160]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 800793a:	4313      	orrs	r3, r2
 800793c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800793e:	4b27      	ldr	r3, [pc, #156]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 8007940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007942:	4a26      	ldr	r2, [pc, #152]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 8007944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007948:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800794a:	4b24      	ldr	r3, [pc, #144]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 800794c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800794e:	4b24      	ldr	r3, [pc, #144]	; (80079e0 <RCCEx_PLL3_Config+0x160>)
 8007950:	4013      	ands	r3, r2
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	69d2      	ldr	r2, [r2, #28]
 8007956:	00d2      	lsls	r2, r2, #3
 8007958:	4920      	ldr	r1, [pc, #128]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 800795a:	4313      	orrs	r3, r2
 800795c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800795e:	4b1f      	ldr	r3, [pc, #124]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	4a1e      	ldr	r2, [pc, #120]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 8007964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007968:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d106      	bne.n	800797e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007970:	4b1a      	ldr	r3, [pc, #104]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 8007972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007974:	4a19      	ldr	r2, [pc, #100]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 8007976:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800797a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800797c:	e00f      	b.n	800799e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d106      	bne.n	8007992 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007984:	4b15      	ldr	r3, [pc, #84]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	4a14      	ldr	r2, [pc, #80]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 800798a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800798e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007990:	e005      	b.n	800799e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007992:	4b12      	ldr	r3, [pc, #72]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 8007994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007996:	4a11      	ldr	r2, [pc, #68]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 8007998:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800799c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800799e:	4b0f      	ldr	r3, [pc, #60]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a0e      	ldr	r2, [pc, #56]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 80079a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079aa:	f7f9 fe51 	bl	8001650 <HAL_GetTick>
 80079ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079b0:	e008      	b.n	80079c4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80079b2:	f7f9 fe4d 	bl	8001650 <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d901      	bls.n	80079c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e006      	b.n	80079d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079c4:	4b05      	ldr	r3, [pc, #20]	; (80079dc <RCCEx_PLL3_Config+0x15c>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d0f0      	beq.n	80079b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	58024400 	.word	0x58024400
 80079e0:	ffff0007 	.word	0xffff0007

080079e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e049      	b.n	8007a8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d106      	bne.n	8007a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7f9 fc3e 	bl	800128c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3304      	adds	r3, #4
 8007a20:	4619      	mov	r1, r3
 8007a22:	4610      	mov	r0, r2
 8007a24:	f000 f99a 	bl	8007d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d001      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e04f      	b.n	8007b4c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f042 0201 	orr.w	r2, r2, #1
 8007ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a23      	ldr	r2, [pc, #140]	; (8007b58 <HAL_TIM_Base_Start_IT+0xc4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d01d      	beq.n	8007b0a <HAL_TIM_Base_Start_IT+0x76>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad6:	d018      	beq.n	8007b0a <HAL_TIM_Base_Start_IT+0x76>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a1f      	ldr	r2, [pc, #124]	; (8007b5c <HAL_TIM_Base_Start_IT+0xc8>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d013      	beq.n	8007b0a <HAL_TIM_Base_Start_IT+0x76>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a1e      	ldr	r2, [pc, #120]	; (8007b60 <HAL_TIM_Base_Start_IT+0xcc>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d00e      	beq.n	8007b0a <HAL_TIM_Base_Start_IT+0x76>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a1c      	ldr	r2, [pc, #112]	; (8007b64 <HAL_TIM_Base_Start_IT+0xd0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d009      	beq.n	8007b0a <HAL_TIM_Base_Start_IT+0x76>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a1b      	ldr	r2, [pc, #108]	; (8007b68 <HAL_TIM_Base_Start_IT+0xd4>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d004      	beq.n	8007b0a <HAL_TIM_Base_Start_IT+0x76>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a19      	ldr	r2, [pc, #100]	; (8007b6c <HAL_TIM_Base_Start_IT+0xd8>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d115      	bne.n	8007b36 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	4b17      	ldr	r3, [pc, #92]	; (8007b70 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b12:	4013      	ands	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2b06      	cmp	r3, #6
 8007b1a:	d015      	beq.n	8007b48 <HAL_TIM_Base_Start_IT+0xb4>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b22:	d011      	beq.n	8007b48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f042 0201 	orr.w	r2, r2, #1
 8007b32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b34:	e008      	b.n	8007b48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f042 0201 	orr.w	r2, r2, #1
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	e000      	b.n	8007b4a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	40010000 	.word	0x40010000
 8007b5c:	40000400 	.word	0x40000400
 8007b60:	40000800 	.word	0x40000800
 8007b64:	40000c00 	.word	0x40000c00
 8007b68:	40010400 	.word	0x40010400
 8007b6c:	40001800 	.word	0x40001800
 8007b70:	00010007 	.word	0x00010007

08007b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d101      	bne.n	8007b8c <HAL_TIM_ConfigClockSource+0x18>
 8007b88:	2302      	movs	r3, #2
 8007b8a:	e0db      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x1d0>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4b69      	ldr	r3, [pc, #420]	; (8007d4c <HAL_TIM_ConfigClockSource+0x1d8>)
 8007ba8:	4013      	ands	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a63      	ldr	r2, [pc, #396]	; (8007d50 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	f000 80a9 	beq.w	8007d1a <HAL_TIM_ConfigClockSource+0x1a6>
 8007bc8:	4a61      	ldr	r2, [pc, #388]	; (8007d50 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	f200 80ae 	bhi.w	8007d2c <HAL_TIM_ConfigClockSource+0x1b8>
 8007bd0:	4a60      	ldr	r2, [pc, #384]	; (8007d54 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	f000 80a1 	beq.w	8007d1a <HAL_TIM_ConfigClockSource+0x1a6>
 8007bd8:	4a5e      	ldr	r2, [pc, #376]	; (8007d54 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	f200 80a6 	bhi.w	8007d2c <HAL_TIM_ConfigClockSource+0x1b8>
 8007be0:	4a5d      	ldr	r2, [pc, #372]	; (8007d58 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	f000 8099 	beq.w	8007d1a <HAL_TIM_ConfigClockSource+0x1a6>
 8007be8:	4a5b      	ldr	r2, [pc, #364]	; (8007d58 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	f200 809e 	bhi.w	8007d2c <HAL_TIM_ConfigClockSource+0x1b8>
 8007bf0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007bf4:	f000 8091 	beq.w	8007d1a <HAL_TIM_ConfigClockSource+0x1a6>
 8007bf8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007bfc:	f200 8096 	bhi.w	8007d2c <HAL_TIM_ConfigClockSource+0x1b8>
 8007c00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c04:	f000 8089 	beq.w	8007d1a <HAL_TIM_ConfigClockSource+0x1a6>
 8007c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c0c:	f200 808e 	bhi.w	8007d2c <HAL_TIM_ConfigClockSource+0x1b8>
 8007c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c14:	d03e      	beq.n	8007c94 <HAL_TIM_ConfigClockSource+0x120>
 8007c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c1a:	f200 8087 	bhi.w	8007d2c <HAL_TIM_ConfigClockSource+0x1b8>
 8007c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c22:	f000 8085 	beq.w	8007d30 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c2a:	d87f      	bhi.n	8007d2c <HAL_TIM_ConfigClockSource+0x1b8>
 8007c2c:	2b70      	cmp	r3, #112	; 0x70
 8007c2e:	d01a      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0xf2>
 8007c30:	2b70      	cmp	r3, #112	; 0x70
 8007c32:	d87b      	bhi.n	8007d2c <HAL_TIM_ConfigClockSource+0x1b8>
 8007c34:	2b60      	cmp	r3, #96	; 0x60
 8007c36:	d050      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x166>
 8007c38:	2b60      	cmp	r3, #96	; 0x60
 8007c3a:	d877      	bhi.n	8007d2c <HAL_TIM_ConfigClockSource+0x1b8>
 8007c3c:	2b50      	cmp	r3, #80	; 0x50
 8007c3e:	d03c      	beq.n	8007cba <HAL_TIM_ConfigClockSource+0x146>
 8007c40:	2b50      	cmp	r3, #80	; 0x50
 8007c42:	d873      	bhi.n	8007d2c <HAL_TIM_ConfigClockSource+0x1b8>
 8007c44:	2b40      	cmp	r3, #64	; 0x40
 8007c46:	d058      	beq.n	8007cfa <HAL_TIM_ConfigClockSource+0x186>
 8007c48:	2b40      	cmp	r3, #64	; 0x40
 8007c4a:	d86f      	bhi.n	8007d2c <HAL_TIM_ConfigClockSource+0x1b8>
 8007c4c:	2b30      	cmp	r3, #48	; 0x30
 8007c4e:	d064      	beq.n	8007d1a <HAL_TIM_ConfigClockSource+0x1a6>
 8007c50:	2b30      	cmp	r3, #48	; 0x30
 8007c52:	d86b      	bhi.n	8007d2c <HAL_TIM_ConfigClockSource+0x1b8>
 8007c54:	2b20      	cmp	r3, #32
 8007c56:	d060      	beq.n	8007d1a <HAL_TIM_ConfigClockSource+0x1a6>
 8007c58:	2b20      	cmp	r3, #32
 8007c5a:	d867      	bhi.n	8007d2c <HAL_TIM_ConfigClockSource+0x1b8>
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d05c      	beq.n	8007d1a <HAL_TIM_ConfigClockSource+0x1a6>
 8007c60:	2b10      	cmp	r3, #16
 8007c62:	d05a      	beq.n	8007d1a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007c64:	e062      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6818      	ldr	r0, [r3, #0]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	6899      	ldr	r1, [r3, #8]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	f000 f989 	bl	8007f8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	609a      	str	r2, [r3, #8]
      break;
 8007c92:	e04e      	b.n	8007d32 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6818      	ldr	r0, [r3, #0]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	6899      	ldr	r1, [r3, #8]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f000 f972 	bl	8007f8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689a      	ldr	r2, [r3, #8]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cb6:	609a      	str	r2, [r3, #8]
      break;
 8007cb8:	e03b      	b.n	8007d32 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	6859      	ldr	r1, [r3, #4]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	f000 f8e2 	bl	8007e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2150      	movs	r1, #80	; 0x50
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 f93c 	bl	8007f50 <TIM_ITRx_SetConfig>
      break;
 8007cd8:	e02b      	b.n	8007d32 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6818      	ldr	r0, [r3, #0]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	6859      	ldr	r1, [r3, #4]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f000 f901 	bl	8007eee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2160      	movs	r1, #96	; 0x60
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 f92c 	bl	8007f50 <TIM_ITRx_SetConfig>
      break;
 8007cf8:	e01b      	b.n	8007d32 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	6859      	ldr	r1, [r3, #4]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	461a      	mov	r2, r3
 8007d08:	f000 f8c2 	bl	8007e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2140      	movs	r1, #64	; 0x40
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 f91c 	bl	8007f50 <TIM_ITRx_SetConfig>
      break;
 8007d18:	e00b      	b.n	8007d32 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4619      	mov	r1, r3
 8007d24:	4610      	mov	r0, r2
 8007d26:	f000 f913 	bl	8007f50 <TIM_ITRx_SetConfig>
        break;
 8007d2a:	e002      	b.n	8007d32 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007d2c:	bf00      	nop
 8007d2e:	e000      	b.n	8007d32 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007d30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	ffceff88 	.word	0xffceff88
 8007d50:	00100040 	.word	0x00100040
 8007d54:	00100030 	.word	0x00100030
 8007d58:	00100020 	.word	0x00100020

08007d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a40      	ldr	r2, [pc, #256]	; (8007e70 <TIM_Base_SetConfig+0x114>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d013      	beq.n	8007d9c <TIM_Base_SetConfig+0x40>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d7a:	d00f      	beq.n	8007d9c <TIM_Base_SetConfig+0x40>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a3d      	ldr	r2, [pc, #244]	; (8007e74 <TIM_Base_SetConfig+0x118>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00b      	beq.n	8007d9c <TIM_Base_SetConfig+0x40>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a3c      	ldr	r2, [pc, #240]	; (8007e78 <TIM_Base_SetConfig+0x11c>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d007      	beq.n	8007d9c <TIM_Base_SetConfig+0x40>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a3b      	ldr	r2, [pc, #236]	; (8007e7c <TIM_Base_SetConfig+0x120>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d003      	beq.n	8007d9c <TIM_Base_SetConfig+0x40>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a3a      	ldr	r2, [pc, #232]	; (8007e80 <TIM_Base_SetConfig+0x124>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d108      	bne.n	8007dae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a2f      	ldr	r2, [pc, #188]	; (8007e70 <TIM_Base_SetConfig+0x114>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d01f      	beq.n	8007df6 <TIM_Base_SetConfig+0x9a>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dbc:	d01b      	beq.n	8007df6 <TIM_Base_SetConfig+0x9a>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a2c      	ldr	r2, [pc, #176]	; (8007e74 <TIM_Base_SetConfig+0x118>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d017      	beq.n	8007df6 <TIM_Base_SetConfig+0x9a>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a2b      	ldr	r2, [pc, #172]	; (8007e78 <TIM_Base_SetConfig+0x11c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d013      	beq.n	8007df6 <TIM_Base_SetConfig+0x9a>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a2a      	ldr	r2, [pc, #168]	; (8007e7c <TIM_Base_SetConfig+0x120>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d00f      	beq.n	8007df6 <TIM_Base_SetConfig+0x9a>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a29      	ldr	r2, [pc, #164]	; (8007e80 <TIM_Base_SetConfig+0x124>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d00b      	beq.n	8007df6 <TIM_Base_SetConfig+0x9a>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a28      	ldr	r2, [pc, #160]	; (8007e84 <TIM_Base_SetConfig+0x128>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d007      	beq.n	8007df6 <TIM_Base_SetConfig+0x9a>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a27      	ldr	r2, [pc, #156]	; (8007e88 <TIM_Base_SetConfig+0x12c>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d003      	beq.n	8007df6 <TIM_Base_SetConfig+0x9a>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a26      	ldr	r2, [pc, #152]	; (8007e8c <TIM_Base_SetConfig+0x130>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d108      	bne.n	8007e08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	689a      	ldr	r2, [r3, #8]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a10      	ldr	r2, [pc, #64]	; (8007e70 <TIM_Base_SetConfig+0x114>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d00f      	beq.n	8007e54 <TIM_Base_SetConfig+0xf8>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a12      	ldr	r2, [pc, #72]	; (8007e80 <TIM_Base_SetConfig+0x124>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d00b      	beq.n	8007e54 <TIM_Base_SetConfig+0xf8>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a11      	ldr	r2, [pc, #68]	; (8007e84 <TIM_Base_SetConfig+0x128>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d007      	beq.n	8007e54 <TIM_Base_SetConfig+0xf8>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a10      	ldr	r2, [pc, #64]	; (8007e88 <TIM_Base_SetConfig+0x12c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d003      	beq.n	8007e54 <TIM_Base_SetConfig+0xf8>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a0f      	ldr	r2, [pc, #60]	; (8007e8c <TIM_Base_SetConfig+0x130>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d103      	bne.n	8007e5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	691a      	ldr	r2, [r3, #16]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	615a      	str	r2, [r3, #20]
}
 8007e62:	bf00      	nop
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	40010000 	.word	0x40010000
 8007e74:	40000400 	.word	0x40000400
 8007e78:	40000800 	.word	0x40000800
 8007e7c:	40000c00 	.word	0x40000c00
 8007e80:	40010400 	.word	0x40010400
 8007e84:	40014000 	.word	0x40014000
 8007e88:	40014400 	.word	0x40014400
 8007e8c:	40014800 	.word	0x40014800

08007e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b087      	sub	sp, #28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	f023 0201 	bic.w	r2, r3, #1
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	011b      	lsls	r3, r3, #4
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f023 030a 	bic.w	r3, r3, #10
 8007ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	621a      	str	r2, [r3, #32]
}
 8007ee2:	bf00      	nop
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b087      	sub	sp, #28
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	f023 0210 	bic.w	r2, r3, #16
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	031b      	lsls	r3, r3, #12
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	011b      	lsls	r3, r3, #4
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	621a      	str	r2, [r3, #32]
}
 8007f42:	bf00      	nop
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
	...

08007f50 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	4b09      	ldr	r3, [pc, #36]	; (8007f88 <TIM_ITRx_SetConfig+0x38>)
 8007f64:	4013      	ands	r3, r2
 8007f66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	f043 0307 	orr.w	r3, r3, #7
 8007f72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	609a      	str	r2, [r3, #8]
}
 8007f7a:	bf00      	nop
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	ffcfff8f 	.word	0xffcfff8f

08007f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	021a      	lsls	r2, r3, #8
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	609a      	str	r2, [r3, #8]
}
 8007fc0:	bf00      	nop
 8007fc2:	371c      	adds	r7, #28
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d101      	bne.n	8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	e068      	b.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2202      	movs	r2, #2
 8007ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a2e      	ldr	r2, [pc, #184]	; (80080c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d004      	beq.n	8008018 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a2d      	ldr	r2, [pc, #180]	; (80080c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d108      	bne.n	800802a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800801e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008030:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	4313      	orrs	r3, r2
 800803a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a1e      	ldr	r2, [pc, #120]	; (80080c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d01d      	beq.n	800808a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008056:	d018      	beq.n	800808a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a1b      	ldr	r2, [pc, #108]	; (80080cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d013      	beq.n	800808a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a1a      	ldr	r2, [pc, #104]	; (80080d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d00e      	beq.n	800808a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a18      	ldr	r2, [pc, #96]	; (80080d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d009      	beq.n	800808a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a13      	ldr	r2, [pc, #76]	; (80080c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d004      	beq.n	800808a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a14      	ldr	r2, [pc, #80]	; (80080d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d10c      	bne.n	80080a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	4313      	orrs	r3, r2
 800809a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	40010000 	.word	0x40010000
 80080c8:	40010400 	.word	0x40010400
 80080cc:	40000400 	.word	0x40000400
 80080d0:	40000800 	.word	0x40000800
 80080d4:	40000c00 	.word	0x40000c00
 80080d8:	40001800 	.word	0x40001800

080080dc <__errno>:
 80080dc:	4b01      	ldr	r3, [pc, #4]	; (80080e4 <__errno+0x8>)
 80080de:	6818      	ldr	r0, [r3, #0]
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	24000010 	.word	0x24000010

080080e8 <__libc_init_array>:
 80080e8:	b570      	push	{r4, r5, r6, lr}
 80080ea:	4d0d      	ldr	r5, [pc, #52]	; (8008120 <__libc_init_array+0x38>)
 80080ec:	4c0d      	ldr	r4, [pc, #52]	; (8008124 <__libc_init_array+0x3c>)
 80080ee:	1b64      	subs	r4, r4, r5
 80080f0:	10a4      	asrs	r4, r4, #2
 80080f2:	2600      	movs	r6, #0
 80080f4:	42a6      	cmp	r6, r4
 80080f6:	d109      	bne.n	800810c <__libc_init_array+0x24>
 80080f8:	4d0b      	ldr	r5, [pc, #44]	; (8008128 <__libc_init_array+0x40>)
 80080fa:	4c0c      	ldr	r4, [pc, #48]	; (800812c <__libc_init_array+0x44>)
 80080fc:	f002 fe24 	bl	800ad48 <_init>
 8008100:	1b64      	subs	r4, r4, r5
 8008102:	10a4      	asrs	r4, r4, #2
 8008104:	2600      	movs	r6, #0
 8008106:	42a6      	cmp	r6, r4
 8008108:	d105      	bne.n	8008116 <__libc_init_array+0x2e>
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008110:	4798      	blx	r3
 8008112:	3601      	adds	r6, #1
 8008114:	e7ee      	b.n	80080f4 <__libc_init_array+0xc>
 8008116:	f855 3b04 	ldr.w	r3, [r5], #4
 800811a:	4798      	blx	r3
 800811c:	3601      	adds	r6, #1
 800811e:	e7f2      	b.n	8008106 <__libc_init_array+0x1e>
 8008120:	0800b1b4 	.word	0x0800b1b4
 8008124:	0800b1b4 	.word	0x0800b1b4
 8008128:	0800b1b4 	.word	0x0800b1b4
 800812c:	0800b1b8 	.word	0x0800b1b8

08008130 <memset>:
 8008130:	4402      	add	r2, r0
 8008132:	4603      	mov	r3, r0
 8008134:	4293      	cmp	r3, r2
 8008136:	d100      	bne.n	800813a <memset+0xa>
 8008138:	4770      	bx	lr
 800813a:	f803 1b01 	strb.w	r1, [r3], #1
 800813e:	e7f9      	b.n	8008134 <memset+0x4>

08008140 <__cvt>:
 8008140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008142:	ed2d 8b02 	vpush	{d8}
 8008146:	eeb0 8b40 	vmov.f64	d8, d0
 800814a:	b085      	sub	sp, #20
 800814c:	4617      	mov	r7, r2
 800814e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008150:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008152:	ee18 2a90 	vmov	r2, s17
 8008156:	f025 0520 	bic.w	r5, r5, #32
 800815a:	2a00      	cmp	r2, #0
 800815c:	bfb6      	itet	lt
 800815e:	222d      	movlt	r2, #45	; 0x2d
 8008160:	2200      	movge	r2, #0
 8008162:	eeb1 8b40 	vneglt.f64	d8, d0
 8008166:	2d46      	cmp	r5, #70	; 0x46
 8008168:	460c      	mov	r4, r1
 800816a:	701a      	strb	r2, [r3, #0]
 800816c:	d004      	beq.n	8008178 <__cvt+0x38>
 800816e:	2d45      	cmp	r5, #69	; 0x45
 8008170:	d100      	bne.n	8008174 <__cvt+0x34>
 8008172:	3401      	adds	r4, #1
 8008174:	2102      	movs	r1, #2
 8008176:	e000      	b.n	800817a <__cvt+0x3a>
 8008178:	2103      	movs	r1, #3
 800817a:	ab03      	add	r3, sp, #12
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	ab02      	add	r3, sp, #8
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	4622      	mov	r2, r4
 8008184:	4633      	mov	r3, r6
 8008186:	eeb0 0b48 	vmov.f64	d0, d8
 800818a:	f000 fcc9 	bl	8008b20 <_dtoa_r>
 800818e:	2d47      	cmp	r5, #71	; 0x47
 8008190:	d109      	bne.n	80081a6 <__cvt+0x66>
 8008192:	07fb      	lsls	r3, r7, #31
 8008194:	d407      	bmi.n	80081a6 <__cvt+0x66>
 8008196:	9b03      	ldr	r3, [sp, #12]
 8008198:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800819a:	1a1b      	subs	r3, r3, r0
 800819c:	6013      	str	r3, [r2, #0]
 800819e:	b005      	add	sp, #20
 80081a0:	ecbd 8b02 	vpop	{d8}
 80081a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081a6:	2d46      	cmp	r5, #70	; 0x46
 80081a8:	eb00 0204 	add.w	r2, r0, r4
 80081ac:	d10c      	bne.n	80081c8 <__cvt+0x88>
 80081ae:	7803      	ldrb	r3, [r0, #0]
 80081b0:	2b30      	cmp	r3, #48	; 0x30
 80081b2:	d107      	bne.n	80081c4 <__cvt+0x84>
 80081b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80081b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081bc:	bf1c      	itt	ne
 80081be:	f1c4 0401 	rsbne	r4, r4, #1
 80081c2:	6034      	strne	r4, [r6, #0]
 80081c4:	6833      	ldr	r3, [r6, #0]
 80081c6:	441a      	add	r2, r3
 80081c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80081cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081d0:	bf08      	it	eq
 80081d2:	9203      	streq	r2, [sp, #12]
 80081d4:	2130      	movs	r1, #48	; 0x30
 80081d6:	9b03      	ldr	r3, [sp, #12]
 80081d8:	4293      	cmp	r3, r2
 80081da:	d2dc      	bcs.n	8008196 <__cvt+0x56>
 80081dc:	1c5c      	adds	r4, r3, #1
 80081de:	9403      	str	r4, [sp, #12]
 80081e0:	7019      	strb	r1, [r3, #0]
 80081e2:	e7f8      	b.n	80081d6 <__cvt+0x96>

080081e4 <__exponent>:
 80081e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081e6:	4603      	mov	r3, r0
 80081e8:	2900      	cmp	r1, #0
 80081ea:	bfb8      	it	lt
 80081ec:	4249      	neglt	r1, r1
 80081ee:	f803 2b02 	strb.w	r2, [r3], #2
 80081f2:	bfb4      	ite	lt
 80081f4:	222d      	movlt	r2, #45	; 0x2d
 80081f6:	222b      	movge	r2, #43	; 0x2b
 80081f8:	2909      	cmp	r1, #9
 80081fa:	7042      	strb	r2, [r0, #1]
 80081fc:	dd2a      	ble.n	8008254 <__exponent+0x70>
 80081fe:	f10d 0407 	add.w	r4, sp, #7
 8008202:	46a4      	mov	ip, r4
 8008204:	270a      	movs	r7, #10
 8008206:	46a6      	mov	lr, r4
 8008208:	460a      	mov	r2, r1
 800820a:	fb91 f6f7 	sdiv	r6, r1, r7
 800820e:	fb07 1516 	mls	r5, r7, r6, r1
 8008212:	3530      	adds	r5, #48	; 0x30
 8008214:	2a63      	cmp	r2, #99	; 0x63
 8008216:	f104 34ff 	add.w	r4, r4, #4294967295
 800821a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800821e:	4631      	mov	r1, r6
 8008220:	dcf1      	bgt.n	8008206 <__exponent+0x22>
 8008222:	3130      	adds	r1, #48	; 0x30
 8008224:	f1ae 0502 	sub.w	r5, lr, #2
 8008228:	f804 1c01 	strb.w	r1, [r4, #-1]
 800822c:	1c44      	adds	r4, r0, #1
 800822e:	4629      	mov	r1, r5
 8008230:	4561      	cmp	r1, ip
 8008232:	d30a      	bcc.n	800824a <__exponent+0x66>
 8008234:	f10d 0209 	add.w	r2, sp, #9
 8008238:	eba2 020e 	sub.w	r2, r2, lr
 800823c:	4565      	cmp	r5, ip
 800823e:	bf88      	it	hi
 8008240:	2200      	movhi	r2, #0
 8008242:	4413      	add	r3, r2
 8008244:	1a18      	subs	r0, r3, r0
 8008246:	b003      	add	sp, #12
 8008248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800824a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800824e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008252:	e7ed      	b.n	8008230 <__exponent+0x4c>
 8008254:	2330      	movs	r3, #48	; 0x30
 8008256:	3130      	adds	r1, #48	; 0x30
 8008258:	7083      	strb	r3, [r0, #2]
 800825a:	70c1      	strb	r1, [r0, #3]
 800825c:	1d03      	adds	r3, r0, #4
 800825e:	e7f1      	b.n	8008244 <__exponent+0x60>

08008260 <_printf_float>:
 8008260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008264:	b08b      	sub	sp, #44	; 0x2c
 8008266:	460c      	mov	r4, r1
 8008268:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800826c:	4616      	mov	r6, r2
 800826e:	461f      	mov	r7, r3
 8008270:	4605      	mov	r5, r0
 8008272:	f001 f9d7 	bl	8009624 <_localeconv_r>
 8008276:	f8d0 b000 	ldr.w	fp, [r0]
 800827a:	4658      	mov	r0, fp
 800827c:	f7f8 f830 	bl	80002e0 <strlen>
 8008280:	2300      	movs	r3, #0
 8008282:	9308      	str	r3, [sp, #32]
 8008284:	f8d8 3000 	ldr.w	r3, [r8]
 8008288:	f894 9018 	ldrb.w	r9, [r4, #24]
 800828c:	6822      	ldr	r2, [r4, #0]
 800828e:	3307      	adds	r3, #7
 8008290:	f023 0307 	bic.w	r3, r3, #7
 8008294:	f103 0108 	add.w	r1, r3, #8
 8008298:	f8c8 1000 	str.w	r1, [r8]
 800829c:	4682      	mov	sl, r0
 800829e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082a2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80082a6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008508 <_printf_float+0x2a8>
 80082aa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80082ae:	eeb0 6bc0 	vabs.f64	d6, d0
 80082b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80082b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ba:	dd24      	ble.n	8008306 <_printf_float+0xa6>
 80082bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80082c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c4:	d502      	bpl.n	80082cc <_printf_float+0x6c>
 80082c6:	232d      	movs	r3, #45	; 0x2d
 80082c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082cc:	4b90      	ldr	r3, [pc, #576]	; (8008510 <_printf_float+0x2b0>)
 80082ce:	4891      	ldr	r0, [pc, #580]	; (8008514 <_printf_float+0x2b4>)
 80082d0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80082d4:	bf94      	ite	ls
 80082d6:	4698      	movls	r8, r3
 80082d8:	4680      	movhi	r8, r0
 80082da:	2303      	movs	r3, #3
 80082dc:	6123      	str	r3, [r4, #16]
 80082de:	f022 0204 	bic.w	r2, r2, #4
 80082e2:	2300      	movs	r3, #0
 80082e4:	6022      	str	r2, [r4, #0]
 80082e6:	9304      	str	r3, [sp, #16]
 80082e8:	9700      	str	r7, [sp, #0]
 80082ea:	4633      	mov	r3, r6
 80082ec:	aa09      	add	r2, sp, #36	; 0x24
 80082ee:	4621      	mov	r1, r4
 80082f0:	4628      	mov	r0, r5
 80082f2:	f000 f9d3 	bl	800869c <_printf_common>
 80082f6:	3001      	adds	r0, #1
 80082f8:	f040 808a 	bne.w	8008410 <_printf_float+0x1b0>
 80082fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008300:	b00b      	add	sp, #44	; 0x2c
 8008302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008306:	eeb4 0b40 	vcmp.f64	d0, d0
 800830a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830e:	d709      	bvc.n	8008324 <_printf_float+0xc4>
 8008310:	ee10 3a90 	vmov	r3, s1
 8008314:	2b00      	cmp	r3, #0
 8008316:	bfbc      	itt	lt
 8008318:	232d      	movlt	r3, #45	; 0x2d
 800831a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800831e:	487e      	ldr	r0, [pc, #504]	; (8008518 <_printf_float+0x2b8>)
 8008320:	4b7e      	ldr	r3, [pc, #504]	; (800851c <_printf_float+0x2bc>)
 8008322:	e7d5      	b.n	80082d0 <_printf_float+0x70>
 8008324:	6863      	ldr	r3, [r4, #4]
 8008326:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800832a:	9104      	str	r1, [sp, #16]
 800832c:	1c59      	adds	r1, r3, #1
 800832e:	d13c      	bne.n	80083aa <_printf_float+0x14a>
 8008330:	2306      	movs	r3, #6
 8008332:	6063      	str	r3, [r4, #4]
 8008334:	2300      	movs	r3, #0
 8008336:	9303      	str	r3, [sp, #12]
 8008338:	ab08      	add	r3, sp, #32
 800833a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800833e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008342:	ab07      	add	r3, sp, #28
 8008344:	6861      	ldr	r1, [r4, #4]
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	6022      	str	r2, [r4, #0]
 800834a:	f10d 031b 	add.w	r3, sp, #27
 800834e:	4628      	mov	r0, r5
 8008350:	f7ff fef6 	bl	8008140 <__cvt>
 8008354:	9b04      	ldr	r3, [sp, #16]
 8008356:	9907      	ldr	r1, [sp, #28]
 8008358:	2b47      	cmp	r3, #71	; 0x47
 800835a:	4680      	mov	r8, r0
 800835c:	d108      	bne.n	8008370 <_printf_float+0x110>
 800835e:	1cc8      	adds	r0, r1, #3
 8008360:	db02      	blt.n	8008368 <_printf_float+0x108>
 8008362:	6863      	ldr	r3, [r4, #4]
 8008364:	4299      	cmp	r1, r3
 8008366:	dd41      	ble.n	80083ec <_printf_float+0x18c>
 8008368:	f1a9 0902 	sub.w	r9, r9, #2
 800836c:	fa5f f989 	uxtb.w	r9, r9
 8008370:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008374:	d820      	bhi.n	80083b8 <_printf_float+0x158>
 8008376:	3901      	subs	r1, #1
 8008378:	464a      	mov	r2, r9
 800837a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800837e:	9107      	str	r1, [sp, #28]
 8008380:	f7ff ff30 	bl	80081e4 <__exponent>
 8008384:	9a08      	ldr	r2, [sp, #32]
 8008386:	9004      	str	r0, [sp, #16]
 8008388:	1813      	adds	r3, r2, r0
 800838a:	2a01      	cmp	r2, #1
 800838c:	6123      	str	r3, [r4, #16]
 800838e:	dc02      	bgt.n	8008396 <_printf_float+0x136>
 8008390:	6822      	ldr	r2, [r4, #0]
 8008392:	07d2      	lsls	r2, r2, #31
 8008394:	d501      	bpl.n	800839a <_printf_float+0x13a>
 8008396:	3301      	adds	r3, #1
 8008398:	6123      	str	r3, [r4, #16]
 800839a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0a2      	beq.n	80082e8 <_printf_float+0x88>
 80083a2:	232d      	movs	r3, #45	; 0x2d
 80083a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083a8:	e79e      	b.n	80082e8 <_printf_float+0x88>
 80083aa:	9904      	ldr	r1, [sp, #16]
 80083ac:	2947      	cmp	r1, #71	; 0x47
 80083ae:	d1c1      	bne.n	8008334 <_printf_float+0xd4>
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1bf      	bne.n	8008334 <_printf_float+0xd4>
 80083b4:	2301      	movs	r3, #1
 80083b6:	e7bc      	b.n	8008332 <_printf_float+0xd2>
 80083b8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80083bc:	d118      	bne.n	80083f0 <_printf_float+0x190>
 80083be:	2900      	cmp	r1, #0
 80083c0:	6863      	ldr	r3, [r4, #4]
 80083c2:	dd0b      	ble.n	80083dc <_printf_float+0x17c>
 80083c4:	6121      	str	r1, [r4, #16]
 80083c6:	b913      	cbnz	r3, 80083ce <_printf_float+0x16e>
 80083c8:	6822      	ldr	r2, [r4, #0]
 80083ca:	07d0      	lsls	r0, r2, #31
 80083cc:	d502      	bpl.n	80083d4 <_printf_float+0x174>
 80083ce:	3301      	adds	r3, #1
 80083d0:	440b      	add	r3, r1
 80083d2:	6123      	str	r3, [r4, #16]
 80083d4:	2300      	movs	r3, #0
 80083d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80083d8:	9304      	str	r3, [sp, #16]
 80083da:	e7de      	b.n	800839a <_printf_float+0x13a>
 80083dc:	b913      	cbnz	r3, 80083e4 <_printf_float+0x184>
 80083de:	6822      	ldr	r2, [r4, #0]
 80083e0:	07d2      	lsls	r2, r2, #31
 80083e2:	d501      	bpl.n	80083e8 <_printf_float+0x188>
 80083e4:	3302      	adds	r3, #2
 80083e6:	e7f4      	b.n	80083d2 <_printf_float+0x172>
 80083e8:	2301      	movs	r3, #1
 80083ea:	e7f2      	b.n	80083d2 <_printf_float+0x172>
 80083ec:	f04f 0967 	mov.w	r9, #103	; 0x67
 80083f0:	9b08      	ldr	r3, [sp, #32]
 80083f2:	4299      	cmp	r1, r3
 80083f4:	db05      	blt.n	8008402 <_printf_float+0x1a2>
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	6121      	str	r1, [r4, #16]
 80083fa:	07d8      	lsls	r0, r3, #31
 80083fc:	d5ea      	bpl.n	80083d4 <_printf_float+0x174>
 80083fe:	1c4b      	adds	r3, r1, #1
 8008400:	e7e7      	b.n	80083d2 <_printf_float+0x172>
 8008402:	2900      	cmp	r1, #0
 8008404:	bfd4      	ite	le
 8008406:	f1c1 0202 	rsble	r2, r1, #2
 800840a:	2201      	movgt	r2, #1
 800840c:	4413      	add	r3, r2
 800840e:	e7e0      	b.n	80083d2 <_printf_float+0x172>
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	055a      	lsls	r2, r3, #21
 8008414:	d407      	bmi.n	8008426 <_printf_float+0x1c6>
 8008416:	6923      	ldr	r3, [r4, #16]
 8008418:	4642      	mov	r2, r8
 800841a:	4631      	mov	r1, r6
 800841c:	4628      	mov	r0, r5
 800841e:	47b8      	blx	r7
 8008420:	3001      	adds	r0, #1
 8008422:	d12a      	bne.n	800847a <_printf_float+0x21a>
 8008424:	e76a      	b.n	80082fc <_printf_float+0x9c>
 8008426:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800842a:	f240 80e2 	bls.w	80085f2 <_printf_float+0x392>
 800842e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008432:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800843a:	d133      	bne.n	80084a4 <_printf_float+0x244>
 800843c:	4a38      	ldr	r2, [pc, #224]	; (8008520 <_printf_float+0x2c0>)
 800843e:	2301      	movs	r3, #1
 8008440:	4631      	mov	r1, r6
 8008442:	4628      	mov	r0, r5
 8008444:	47b8      	blx	r7
 8008446:	3001      	adds	r0, #1
 8008448:	f43f af58 	beq.w	80082fc <_printf_float+0x9c>
 800844c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008450:	429a      	cmp	r2, r3
 8008452:	db02      	blt.n	800845a <_printf_float+0x1fa>
 8008454:	6823      	ldr	r3, [r4, #0]
 8008456:	07d8      	lsls	r0, r3, #31
 8008458:	d50f      	bpl.n	800847a <_printf_float+0x21a>
 800845a:	4653      	mov	r3, sl
 800845c:	465a      	mov	r2, fp
 800845e:	4631      	mov	r1, r6
 8008460:	4628      	mov	r0, r5
 8008462:	47b8      	blx	r7
 8008464:	3001      	adds	r0, #1
 8008466:	f43f af49 	beq.w	80082fc <_printf_float+0x9c>
 800846a:	f04f 0800 	mov.w	r8, #0
 800846e:	f104 091a 	add.w	r9, r4, #26
 8008472:	9b08      	ldr	r3, [sp, #32]
 8008474:	3b01      	subs	r3, #1
 8008476:	4543      	cmp	r3, r8
 8008478:	dc09      	bgt.n	800848e <_printf_float+0x22e>
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	079b      	lsls	r3, r3, #30
 800847e:	f100 8108 	bmi.w	8008692 <_printf_float+0x432>
 8008482:	68e0      	ldr	r0, [r4, #12]
 8008484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008486:	4298      	cmp	r0, r3
 8008488:	bfb8      	it	lt
 800848a:	4618      	movlt	r0, r3
 800848c:	e738      	b.n	8008300 <_printf_float+0xa0>
 800848e:	2301      	movs	r3, #1
 8008490:	464a      	mov	r2, r9
 8008492:	4631      	mov	r1, r6
 8008494:	4628      	mov	r0, r5
 8008496:	47b8      	blx	r7
 8008498:	3001      	adds	r0, #1
 800849a:	f43f af2f 	beq.w	80082fc <_printf_float+0x9c>
 800849e:	f108 0801 	add.w	r8, r8, #1
 80084a2:	e7e6      	b.n	8008472 <_printf_float+0x212>
 80084a4:	9b07      	ldr	r3, [sp, #28]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	dc3c      	bgt.n	8008524 <_printf_float+0x2c4>
 80084aa:	4a1d      	ldr	r2, [pc, #116]	; (8008520 <_printf_float+0x2c0>)
 80084ac:	2301      	movs	r3, #1
 80084ae:	4631      	mov	r1, r6
 80084b0:	4628      	mov	r0, r5
 80084b2:	47b8      	blx	r7
 80084b4:	3001      	adds	r0, #1
 80084b6:	f43f af21 	beq.w	80082fc <_printf_float+0x9c>
 80084ba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80084be:	4313      	orrs	r3, r2
 80084c0:	d102      	bne.n	80084c8 <_printf_float+0x268>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	07d9      	lsls	r1, r3, #31
 80084c6:	d5d8      	bpl.n	800847a <_printf_float+0x21a>
 80084c8:	4653      	mov	r3, sl
 80084ca:	465a      	mov	r2, fp
 80084cc:	4631      	mov	r1, r6
 80084ce:	4628      	mov	r0, r5
 80084d0:	47b8      	blx	r7
 80084d2:	3001      	adds	r0, #1
 80084d4:	f43f af12 	beq.w	80082fc <_printf_float+0x9c>
 80084d8:	f04f 0900 	mov.w	r9, #0
 80084dc:	f104 0a1a 	add.w	sl, r4, #26
 80084e0:	9b07      	ldr	r3, [sp, #28]
 80084e2:	425b      	negs	r3, r3
 80084e4:	454b      	cmp	r3, r9
 80084e6:	dc01      	bgt.n	80084ec <_printf_float+0x28c>
 80084e8:	9b08      	ldr	r3, [sp, #32]
 80084ea:	e795      	b.n	8008418 <_printf_float+0x1b8>
 80084ec:	2301      	movs	r3, #1
 80084ee:	4652      	mov	r2, sl
 80084f0:	4631      	mov	r1, r6
 80084f2:	4628      	mov	r0, r5
 80084f4:	47b8      	blx	r7
 80084f6:	3001      	adds	r0, #1
 80084f8:	f43f af00 	beq.w	80082fc <_printf_float+0x9c>
 80084fc:	f109 0901 	add.w	r9, r9, #1
 8008500:	e7ee      	b.n	80084e0 <_printf_float+0x280>
 8008502:	bf00      	nop
 8008504:	f3af 8000 	nop.w
 8008508:	ffffffff 	.word	0xffffffff
 800850c:	7fefffff 	.word	0x7fefffff
 8008510:	0800add8 	.word	0x0800add8
 8008514:	0800addc 	.word	0x0800addc
 8008518:	0800ade4 	.word	0x0800ade4
 800851c:	0800ade0 	.word	0x0800ade0
 8008520:	0800ade8 	.word	0x0800ade8
 8008524:	9a08      	ldr	r2, [sp, #32]
 8008526:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008528:	429a      	cmp	r2, r3
 800852a:	bfa8      	it	ge
 800852c:	461a      	movge	r2, r3
 800852e:	2a00      	cmp	r2, #0
 8008530:	4691      	mov	r9, r2
 8008532:	dc38      	bgt.n	80085a6 <_printf_float+0x346>
 8008534:	2300      	movs	r3, #0
 8008536:	9305      	str	r3, [sp, #20]
 8008538:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800853c:	f104 021a 	add.w	r2, r4, #26
 8008540:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008542:	9905      	ldr	r1, [sp, #20]
 8008544:	9304      	str	r3, [sp, #16]
 8008546:	eba3 0309 	sub.w	r3, r3, r9
 800854a:	428b      	cmp	r3, r1
 800854c:	dc33      	bgt.n	80085b6 <_printf_float+0x356>
 800854e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008552:	429a      	cmp	r2, r3
 8008554:	db3c      	blt.n	80085d0 <_printf_float+0x370>
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	07da      	lsls	r2, r3, #31
 800855a:	d439      	bmi.n	80085d0 <_printf_float+0x370>
 800855c:	9a08      	ldr	r2, [sp, #32]
 800855e:	9b04      	ldr	r3, [sp, #16]
 8008560:	9907      	ldr	r1, [sp, #28]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	eba2 0901 	sub.w	r9, r2, r1
 8008568:	4599      	cmp	r9, r3
 800856a:	bfa8      	it	ge
 800856c:	4699      	movge	r9, r3
 800856e:	f1b9 0f00 	cmp.w	r9, #0
 8008572:	dc35      	bgt.n	80085e0 <_printf_float+0x380>
 8008574:	f04f 0800 	mov.w	r8, #0
 8008578:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800857c:	f104 0a1a 	add.w	sl, r4, #26
 8008580:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008584:	1a9b      	subs	r3, r3, r2
 8008586:	eba3 0309 	sub.w	r3, r3, r9
 800858a:	4543      	cmp	r3, r8
 800858c:	f77f af75 	ble.w	800847a <_printf_float+0x21a>
 8008590:	2301      	movs	r3, #1
 8008592:	4652      	mov	r2, sl
 8008594:	4631      	mov	r1, r6
 8008596:	4628      	mov	r0, r5
 8008598:	47b8      	blx	r7
 800859a:	3001      	adds	r0, #1
 800859c:	f43f aeae 	beq.w	80082fc <_printf_float+0x9c>
 80085a0:	f108 0801 	add.w	r8, r8, #1
 80085a4:	e7ec      	b.n	8008580 <_printf_float+0x320>
 80085a6:	4613      	mov	r3, r2
 80085a8:	4631      	mov	r1, r6
 80085aa:	4642      	mov	r2, r8
 80085ac:	4628      	mov	r0, r5
 80085ae:	47b8      	blx	r7
 80085b0:	3001      	adds	r0, #1
 80085b2:	d1bf      	bne.n	8008534 <_printf_float+0x2d4>
 80085b4:	e6a2      	b.n	80082fc <_printf_float+0x9c>
 80085b6:	2301      	movs	r3, #1
 80085b8:	4631      	mov	r1, r6
 80085ba:	4628      	mov	r0, r5
 80085bc:	9204      	str	r2, [sp, #16]
 80085be:	47b8      	blx	r7
 80085c0:	3001      	adds	r0, #1
 80085c2:	f43f ae9b 	beq.w	80082fc <_printf_float+0x9c>
 80085c6:	9b05      	ldr	r3, [sp, #20]
 80085c8:	9a04      	ldr	r2, [sp, #16]
 80085ca:	3301      	adds	r3, #1
 80085cc:	9305      	str	r3, [sp, #20]
 80085ce:	e7b7      	b.n	8008540 <_printf_float+0x2e0>
 80085d0:	4653      	mov	r3, sl
 80085d2:	465a      	mov	r2, fp
 80085d4:	4631      	mov	r1, r6
 80085d6:	4628      	mov	r0, r5
 80085d8:	47b8      	blx	r7
 80085da:	3001      	adds	r0, #1
 80085dc:	d1be      	bne.n	800855c <_printf_float+0x2fc>
 80085de:	e68d      	b.n	80082fc <_printf_float+0x9c>
 80085e0:	9a04      	ldr	r2, [sp, #16]
 80085e2:	464b      	mov	r3, r9
 80085e4:	4442      	add	r2, r8
 80085e6:	4631      	mov	r1, r6
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b8      	blx	r7
 80085ec:	3001      	adds	r0, #1
 80085ee:	d1c1      	bne.n	8008574 <_printf_float+0x314>
 80085f0:	e684      	b.n	80082fc <_printf_float+0x9c>
 80085f2:	9a08      	ldr	r2, [sp, #32]
 80085f4:	2a01      	cmp	r2, #1
 80085f6:	dc01      	bgt.n	80085fc <_printf_float+0x39c>
 80085f8:	07db      	lsls	r3, r3, #31
 80085fa:	d537      	bpl.n	800866c <_printf_float+0x40c>
 80085fc:	2301      	movs	r3, #1
 80085fe:	4642      	mov	r2, r8
 8008600:	4631      	mov	r1, r6
 8008602:	4628      	mov	r0, r5
 8008604:	47b8      	blx	r7
 8008606:	3001      	adds	r0, #1
 8008608:	f43f ae78 	beq.w	80082fc <_printf_float+0x9c>
 800860c:	4653      	mov	r3, sl
 800860e:	465a      	mov	r2, fp
 8008610:	4631      	mov	r1, r6
 8008612:	4628      	mov	r0, r5
 8008614:	47b8      	blx	r7
 8008616:	3001      	adds	r0, #1
 8008618:	f43f ae70 	beq.w	80082fc <_printf_float+0x9c>
 800861c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008620:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008628:	d01b      	beq.n	8008662 <_printf_float+0x402>
 800862a:	9b08      	ldr	r3, [sp, #32]
 800862c:	f108 0201 	add.w	r2, r8, #1
 8008630:	3b01      	subs	r3, #1
 8008632:	4631      	mov	r1, r6
 8008634:	4628      	mov	r0, r5
 8008636:	47b8      	blx	r7
 8008638:	3001      	adds	r0, #1
 800863a:	d10e      	bne.n	800865a <_printf_float+0x3fa>
 800863c:	e65e      	b.n	80082fc <_printf_float+0x9c>
 800863e:	2301      	movs	r3, #1
 8008640:	464a      	mov	r2, r9
 8008642:	4631      	mov	r1, r6
 8008644:	4628      	mov	r0, r5
 8008646:	47b8      	blx	r7
 8008648:	3001      	adds	r0, #1
 800864a:	f43f ae57 	beq.w	80082fc <_printf_float+0x9c>
 800864e:	f108 0801 	add.w	r8, r8, #1
 8008652:	9b08      	ldr	r3, [sp, #32]
 8008654:	3b01      	subs	r3, #1
 8008656:	4543      	cmp	r3, r8
 8008658:	dcf1      	bgt.n	800863e <_printf_float+0x3de>
 800865a:	9b04      	ldr	r3, [sp, #16]
 800865c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008660:	e6db      	b.n	800841a <_printf_float+0x1ba>
 8008662:	f04f 0800 	mov.w	r8, #0
 8008666:	f104 091a 	add.w	r9, r4, #26
 800866a:	e7f2      	b.n	8008652 <_printf_float+0x3f2>
 800866c:	2301      	movs	r3, #1
 800866e:	4642      	mov	r2, r8
 8008670:	e7df      	b.n	8008632 <_printf_float+0x3d2>
 8008672:	2301      	movs	r3, #1
 8008674:	464a      	mov	r2, r9
 8008676:	4631      	mov	r1, r6
 8008678:	4628      	mov	r0, r5
 800867a:	47b8      	blx	r7
 800867c:	3001      	adds	r0, #1
 800867e:	f43f ae3d 	beq.w	80082fc <_printf_float+0x9c>
 8008682:	f108 0801 	add.w	r8, r8, #1
 8008686:	68e3      	ldr	r3, [r4, #12]
 8008688:	9909      	ldr	r1, [sp, #36]	; 0x24
 800868a:	1a5b      	subs	r3, r3, r1
 800868c:	4543      	cmp	r3, r8
 800868e:	dcf0      	bgt.n	8008672 <_printf_float+0x412>
 8008690:	e6f7      	b.n	8008482 <_printf_float+0x222>
 8008692:	f04f 0800 	mov.w	r8, #0
 8008696:	f104 0919 	add.w	r9, r4, #25
 800869a:	e7f4      	b.n	8008686 <_printf_float+0x426>

0800869c <_printf_common>:
 800869c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a0:	4616      	mov	r6, r2
 80086a2:	4699      	mov	r9, r3
 80086a4:	688a      	ldr	r2, [r1, #8]
 80086a6:	690b      	ldr	r3, [r1, #16]
 80086a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086ac:	4293      	cmp	r3, r2
 80086ae:	bfb8      	it	lt
 80086b0:	4613      	movlt	r3, r2
 80086b2:	6033      	str	r3, [r6, #0]
 80086b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086b8:	4607      	mov	r7, r0
 80086ba:	460c      	mov	r4, r1
 80086bc:	b10a      	cbz	r2, 80086c2 <_printf_common+0x26>
 80086be:	3301      	adds	r3, #1
 80086c0:	6033      	str	r3, [r6, #0]
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	0699      	lsls	r1, r3, #26
 80086c6:	bf42      	ittt	mi
 80086c8:	6833      	ldrmi	r3, [r6, #0]
 80086ca:	3302      	addmi	r3, #2
 80086cc:	6033      	strmi	r3, [r6, #0]
 80086ce:	6825      	ldr	r5, [r4, #0]
 80086d0:	f015 0506 	ands.w	r5, r5, #6
 80086d4:	d106      	bne.n	80086e4 <_printf_common+0x48>
 80086d6:	f104 0a19 	add.w	sl, r4, #25
 80086da:	68e3      	ldr	r3, [r4, #12]
 80086dc:	6832      	ldr	r2, [r6, #0]
 80086de:	1a9b      	subs	r3, r3, r2
 80086e0:	42ab      	cmp	r3, r5
 80086e2:	dc26      	bgt.n	8008732 <_printf_common+0x96>
 80086e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086e8:	1e13      	subs	r3, r2, #0
 80086ea:	6822      	ldr	r2, [r4, #0]
 80086ec:	bf18      	it	ne
 80086ee:	2301      	movne	r3, #1
 80086f0:	0692      	lsls	r2, r2, #26
 80086f2:	d42b      	bmi.n	800874c <_printf_common+0xb0>
 80086f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086f8:	4649      	mov	r1, r9
 80086fa:	4638      	mov	r0, r7
 80086fc:	47c0      	blx	r8
 80086fe:	3001      	adds	r0, #1
 8008700:	d01e      	beq.n	8008740 <_printf_common+0xa4>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	68e5      	ldr	r5, [r4, #12]
 8008706:	6832      	ldr	r2, [r6, #0]
 8008708:	f003 0306 	and.w	r3, r3, #6
 800870c:	2b04      	cmp	r3, #4
 800870e:	bf08      	it	eq
 8008710:	1aad      	subeq	r5, r5, r2
 8008712:	68a3      	ldr	r3, [r4, #8]
 8008714:	6922      	ldr	r2, [r4, #16]
 8008716:	bf0c      	ite	eq
 8008718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800871c:	2500      	movne	r5, #0
 800871e:	4293      	cmp	r3, r2
 8008720:	bfc4      	itt	gt
 8008722:	1a9b      	subgt	r3, r3, r2
 8008724:	18ed      	addgt	r5, r5, r3
 8008726:	2600      	movs	r6, #0
 8008728:	341a      	adds	r4, #26
 800872a:	42b5      	cmp	r5, r6
 800872c:	d11a      	bne.n	8008764 <_printf_common+0xc8>
 800872e:	2000      	movs	r0, #0
 8008730:	e008      	b.n	8008744 <_printf_common+0xa8>
 8008732:	2301      	movs	r3, #1
 8008734:	4652      	mov	r2, sl
 8008736:	4649      	mov	r1, r9
 8008738:	4638      	mov	r0, r7
 800873a:	47c0      	blx	r8
 800873c:	3001      	adds	r0, #1
 800873e:	d103      	bne.n	8008748 <_printf_common+0xac>
 8008740:	f04f 30ff 	mov.w	r0, #4294967295
 8008744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008748:	3501      	adds	r5, #1
 800874a:	e7c6      	b.n	80086da <_printf_common+0x3e>
 800874c:	18e1      	adds	r1, r4, r3
 800874e:	1c5a      	adds	r2, r3, #1
 8008750:	2030      	movs	r0, #48	; 0x30
 8008752:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008756:	4422      	add	r2, r4
 8008758:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800875c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008760:	3302      	adds	r3, #2
 8008762:	e7c7      	b.n	80086f4 <_printf_common+0x58>
 8008764:	2301      	movs	r3, #1
 8008766:	4622      	mov	r2, r4
 8008768:	4649      	mov	r1, r9
 800876a:	4638      	mov	r0, r7
 800876c:	47c0      	blx	r8
 800876e:	3001      	adds	r0, #1
 8008770:	d0e6      	beq.n	8008740 <_printf_common+0xa4>
 8008772:	3601      	adds	r6, #1
 8008774:	e7d9      	b.n	800872a <_printf_common+0x8e>
	...

08008778 <_printf_i>:
 8008778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800877c:	460c      	mov	r4, r1
 800877e:	4691      	mov	r9, r2
 8008780:	7e27      	ldrb	r7, [r4, #24]
 8008782:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008784:	2f78      	cmp	r7, #120	; 0x78
 8008786:	4680      	mov	r8, r0
 8008788:	469a      	mov	sl, r3
 800878a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800878e:	d807      	bhi.n	80087a0 <_printf_i+0x28>
 8008790:	2f62      	cmp	r7, #98	; 0x62
 8008792:	d80a      	bhi.n	80087aa <_printf_i+0x32>
 8008794:	2f00      	cmp	r7, #0
 8008796:	f000 80d8 	beq.w	800894a <_printf_i+0x1d2>
 800879a:	2f58      	cmp	r7, #88	; 0x58
 800879c:	f000 80a3 	beq.w	80088e6 <_printf_i+0x16e>
 80087a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087a8:	e03a      	b.n	8008820 <_printf_i+0xa8>
 80087aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087ae:	2b15      	cmp	r3, #21
 80087b0:	d8f6      	bhi.n	80087a0 <_printf_i+0x28>
 80087b2:	a001      	add	r0, pc, #4	; (adr r0, 80087b8 <_printf_i+0x40>)
 80087b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80087b8:	08008811 	.word	0x08008811
 80087bc:	08008825 	.word	0x08008825
 80087c0:	080087a1 	.word	0x080087a1
 80087c4:	080087a1 	.word	0x080087a1
 80087c8:	080087a1 	.word	0x080087a1
 80087cc:	080087a1 	.word	0x080087a1
 80087d0:	08008825 	.word	0x08008825
 80087d4:	080087a1 	.word	0x080087a1
 80087d8:	080087a1 	.word	0x080087a1
 80087dc:	080087a1 	.word	0x080087a1
 80087e0:	080087a1 	.word	0x080087a1
 80087e4:	08008931 	.word	0x08008931
 80087e8:	08008855 	.word	0x08008855
 80087ec:	08008913 	.word	0x08008913
 80087f0:	080087a1 	.word	0x080087a1
 80087f4:	080087a1 	.word	0x080087a1
 80087f8:	08008953 	.word	0x08008953
 80087fc:	080087a1 	.word	0x080087a1
 8008800:	08008855 	.word	0x08008855
 8008804:	080087a1 	.word	0x080087a1
 8008808:	080087a1 	.word	0x080087a1
 800880c:	0800891b 	.word	0x0800891b
 8008810:	680b      	ldr	r3, [r1, #0]
 8008812:	1d1a      	adds	r2, r3, #4
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	600a      	str	r2, [r1, #0]
 8008818:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800881c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008820:	2301      	movs	r3, #1
 8008822:	e0a3      	b.n	800896c <_printf_i+0x1f4>
 8008824:	6825      	ldr	r5, [r4, #0]
 8008826:	6808      	ldr	r0, [r1, #0]
 8008828:	062e      	lsls	r6, r5, #24
 800882a:	f100 0304 	add.w	r3, r0, #4
 800882e:	d50a      	bpl.n	8008846 <_printf_i+0xce>
 8008830:	6805      	ldr	r5, [r0, #0]
 8008832:	600b      	str	r3, [r1, #0]
 8008834:	2d00      	cmp	r5, #0
 8008836:	da03      	bge.n	8008840 <_printf_i+0xc8>
 8008838:	232d      	movs	r3, #45	; 0x2d
 800883a:	426d      	negs	r5, r5
 800883c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008840:	485e      	ldr	r0, [pc, #376]	; (80089bc <_printf_i+0x244>)
 8008842:	230a      	movs	r3, #10
 8008844:	e019      	b.n	800887a <_printf_i+0x102>
 8008846:	f015 0f40 	tst.w	r5, #64	; 0x40
 800884a:	6805      	ldr	r5, [r0, #0]
 800884c:	600b      	str	r3, [r1, #0]
 800884e:	bf18      	it	ne
 8008850:	b22d      	sxthne	r5, r5
 8008852:	e7ef      	b.n	8008834 <_printf_i+0xbc>
 8008854:	680b      	ldr	r3, [r1, #0]
 8008856:	6825      	ldr	r5, [r4, #0]
 8008858:	1d18      	adds	r0, r3, #4
 800885a:	6008      	str	r0, [r1, #0]
 800885c:	0628      	lsls	r0, r5, #24
 800885e:	d501      	bpl.n	8008864 <_printf_i+0xec>
 8008860:	681d      	ldr	r5, [r3, #0]
 8008862:	e002      	b.n	800886a <_printf_i+0xf2>
 8008864:	0669      	lsls	r1, r5, #25
 8008866:	d5fb      	bpl.n	8008860 <_printf_i+0xe8>
 8008868:	881d      	ldrh	r5, [r3, #0]
 800886a:	4854      	ldr	r0, [pc, #336]	; (80089bc <_printf_i+0x244>)
 800886c:	2f6f      	cmp	r7, #111	; 0x6f
 800886e:	bf0c      	ite	eq
 8008870:	2308      	moveq	r3, #8
 8008872:	230a      	movne	r3, #10
 8008874:	2100      	movs	r1, #0
 8008876:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800887a:	6866      	ldr	r6, [r4, #4]
 800887c:	60a6      	str	r6, [r4, #8]
 800887e:	2e00      	cmp	r6, #0
 8008880:	bfa2      	ittt	ge
 8008882:	6821      	ldrge	r1, [r4, #0]
 8008884:	f021 0104 	bicge.w	r1, r1, #4
 8008888:	6021      	strge	r1, [r4, #0]
 800888a:	b90d      	cbnz	r5, 8008890 <_printf_i+0x118>
 800888c:	2e00      	cmp	r6, #0
 800888e:	d04d      	beq.n	800892c <_printf_i+0x1b4>
 8008890:	4616      	mov	r6, r2
 8008892:	fbb5 f1f3 	udiv	r1, r5, r3
 8008896:	fb03 5711 	mls	r7, r3, r1, r5
 800889a:	5dc7      	ldrb	r7, [r0, r7]
 800889c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088a0:	462f      	mov	r7, r5
 80088a2:	42bb      	cmp	r3, r7
 80088a4:	460d      	mov	r5, r1
 80088a6:	d9f4      	bls.n	8008892 <_printf_i+0x11a>
 80088a8:	2b08      	cmp	r3, #8
 80088aa:	d10b      	bne.n	80088c4 <_printf_i+0x14c>
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	07df      	lsls	r7, r3, #31
 80088b0:	d508      	bpl.n	80088c4 <_printf_i+0x14c>
 80088b2:	6923      	ldr	r3, [r4, #16]
 80088b4:	6861      	ldr	r1, [r4, #4]
 80088b6:	4299      	cmp	r1, r3
 80088b8:	bfde      	ittt	le
 80088ba:	2330      	movle	r3, #48	; 0x30
 80088bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088c4:	1b92      	subs	r2, r2, r6
 80088c6:	6122      	str	r2, [r4, #16]
 80088c8:	f8cd a000 	str.w	sl, [sp]
 80088cc:	464b      	mov	r3, r9
 80088ce:	aa03      	add	r2, sp, #12
 80088d0:	4621      	mov	r1, r4
 80088d2:	4640      	mov	r0, r8
 80088d4:	f7ff fee2 	bl	800869c <_printf_common>
 80088d8:	3001      	adds	r0, #1
 80088da:	d14c      	bne.n	8008976 <_printf_i+0x1fe>
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295
 80088e0:	b004      	add	sp, #16
 80088e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e6:	4835      	ldr	r0, [pc, #212]	; (80089bc <_printf_i+0x244>)
 80088e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088ec:	6823      	ldr	r3, [r4, #0]
 80088ee:	680e      	ldr	r6, [r1, #0]
 80088f0:	061f      	lsls	r7, r3, #24
 80088f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80088f6:	600e      	str	r6, [r1, #0]
 80088f8:	d514      	bpl.n	8008924 <_printf_i+0x1ac>
 80088fa:	07d9      	lsls	r1, r3, #31
 80088fc:	bf44      	itt	mi
 80088fe:	f043 0320 	orrmi.w	r3, r3, #32
 8008902:	6023      	strmi	r3, [r4, #0]
 8008904:	b91d      	cbnz	r5, 800890e <_printf_i+0x196>
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	f023 0320 	bic.w	r3, r3, #32
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	2310      	movs	r3, #16
 8008910:	e7b0      	b.n	8008874 <_printf_i+0xfc>
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	f043 0320 	orr.w	r3, r3, #32
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	2378      	movs	r3, #120	; 0x78
 800891c:	4828      	ldr	r0, [pc, #160]	; (80089c0 <_printf_i+0x248>)
 800891e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008922:	e7e3      	b.n	80088ec <_printf_i+0x174>
 8008924:	065e      	lsls	r6, r3, #25
 8008926:	bf48      	it	mi
 8008928:	b2ad      	uxthmi	r5, r5
 800892a:	e7e6      	b.n	80088fa <_printf_i+0x182>
 800892c:	4616      	mov	r6, r2
 800892e:	e7bb      	b.n	80088a8 <_printf_i+0x130>
 8008930:	680b      	ldr	r3, [r1, #0]
 8008932:	6826      	ldr	r6, [r4, #0]
 8008934:	6960      	ldr	r0, [r4, #20]
 8008936:	1d1d      	adds	r5, r3, #4
 8008938:	600d      	str	r5, [r1, #0]
 800893a:	0635      	lsls	r5, r6, #24
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	d501      	bpl.n	8008944 <_printf_i+0x1cc>
 8008940:	6018      	str	r0, [r3, #0]
 8008942:	e002      	b.n	800894a <_printf_i+0x1d2>
 8008944:	0671      	lsls	r1, r6, #25
 8008946:	d5fb      	bpl.n	8008940 <_printf_i+0x1c8>
 8008948:	8018      	strh	r0, [r3, #0]
 800894a:	2300      	movs	r3, #0
 800894c:	6123      	str	r3, [r4, #16]
 800894e:	4616      	mov	r6, r2
 8008950:	e7ba      	b.n	80088c8 <_printf_i+0x150>
 8008952:	680b      	ldr	r3, [r1, #0]
 8008954:	1d1a      	adds	r2, r3, #4
 8008956:	600a      	str	r2, [r1, #0]
 8008958:	681e      	ldr	r6, [r3, #0]
 800895a:	6862      	ldr	r2, [r4, #4]
 800895c:	2100      	movs	r1, #0
 800895e:	4630      	mov	r0, r6
 8008960:	f7f7 fcc6 	bl	80002f0 <memchr>
 8008964:	b108      	cbz	r0, 800896a <_printf_i+0x1f2>
 8008966:	1b80      	subs	r0, r0, r6
 8008968:	6060      	str	r0, [r4, #4]
 800896a:	6863      	ldr	r3, [r4, #4]
 800896c:	6123      	str	r3, [r4, #16]
 800896e:	2300      	movs	r3, #0
 8008970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008974:	e7a8      	b.n	80088c8 <_printf_i+0x150>
 8008976:	6923      	ldr	r3, [r4, #16]
 8008978:	4632      	mov	r2, r6
 800897a:	4649      	mov	r1, r9
 800897c:	4640      	mov	r0, r8
 800897e:	47d0      	blx	sl
 8008980:	3001      	adds	r0, #1
 8008982:	d0ab      	beq.n	80088dc <_printf_i+0x164>
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	079b      	lsls	r3, r3, #30
 8008988:	d413      	bmi.n	80089b2 <_printf_i+0x23a>
 800898a:	68e0      	ldr	r0, [r4, #12]
 800898c:	9b03      	ldr	r3, [sp, #12]
 800898e:	4298      	cmp	r0, r3
 8008990:	bfb8      	it	lt
 8008992:	4618      	movlt	r0, r3
 8008994:	e7a4      	b.n	80088e0 <_printf_i+0x168>
 8008996:	2301      	movs	r3, #1
 8008998:	4632      	mov	r2, r6
 800899a:	4649      	mov	r1, r9
 800899c:	4640      	mov	r0, r8
 800899e:	47d0      	blx	sl
 80089a0:	3001      	adds	r0, #1
 80089a2:	d09b      	beq.n	80088dc <_printf_i+0x164>
 80089a4:	3501      	adds	r5, #1
 80089a6:	68e3      	ldr	r3, [r4, #12]
 80089a8:	9903      	ldr	r1, [sp, #12]
 80089aa:	1a5b      	subs	r3, r3, r1
 80089ac:	42ab      	cmp	r3, r5
 80089ae:	dcf2      	bgt.n	8008996 <_printf_i+0x21e>
 80089b0:	e7eb      	b.n	800898a <_printf_i+0x212>
 80089b2:	2500      	movs	r5, #0
 80089b4:	f104 0619 	add.w	r6, r4, #25
 80089b8:	e7f5      	b.n	80089a6 <_printf_i+0x22e>
 80089ba:	bf00      	nop
 80089bc:	0800adea 	.word	0x0800adea
 80089c0:	0800adfb 	.word	0x0800adfb

080089c4 <siprintf>:
 80089c4:	b40e      	push	{r1, r2, r3}
 80089c6:	b500      	push	{lr}
 80089c8:	b09c      	sub	sp, #112	; 0x70
 80089ca:	ab1d      	add	r3, sp, #116	; 0x74
 80089cc:	9002      	str	r0, [sp, #8]
 80089ce:	9006      	str	r0, [sp, #24]
 80089d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089d4:	4809      	ldr	r0, [pc, #36]	; (80089fc <siprintf+0x38>)
 80089d6:	9107      	str	r1, [sp, #28]
 80089d8:	9104      	str	r1, [sp, #16]
 80089da:	4909      	ldr	r1, [pc, #36]	; (8008a00 <siprintf+0x3c>)
 80089dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80089e0:	9105      	str	r1, [sp, #20]
 80089e2:	6800      	ldr	r0, [r0, #0]
 80089e4:	9301      	str	r3, [sp, #4]
 80089e6:	a902      	add	r1, sp, #8
 80089e8:	f001 faca 	bl	8009f80 <_svfiprintf_r>
 80089ec:	9b02      	ldr	r3, [sp, #8]
 80089ee:	2200      	movs	r2, #0
 80089f0:	701a      	strb	r2, [r3, #0]
 80089f2:	b01c      	add	sp, #112	; 0x70
 80089f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80089f8:	b003      	add	sp, #12
 80089fa:	4770      	bx	lr
 80089fc:	24000010 	.word	0x24000010
 8008a00:	ffff0208 	.word	0xffff0208

08008a04 <quorem>:
 8008a04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a08:	6903      	ldr	r3, [r0, #16]
 8008a0a:	690c      	ldr	r4, [r1, #16]
 8008a0c:	42a3      	cmp	r3, r4
 8008a0e:	4607      	mov	r7, r0
 8008a10:	f2c0 8081 	blt.w	8008b16 <quorem+0x112>
 8008a14:	3c01      	subs	r4, #1
 8008a16:	f101 0814 	add.w	r8, r1, #20
 8008a1a:	f100 0514 	add.w	r5, r0, #20
 8008a1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a22:	9301      	str	r3, [sp, #4]
 8008a24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a38:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a3c:	d331      	bcc.n	8008aa2 <quorem+0x9e>
 8008a3e:	f04f 0e00 	mov.w	lr, #0
 8008a42:	4640      	mov	r0, r8
 8008a44:	46ac      	mov	ip, r5
 8008a46:	46f2      	mov	sl, lr
 8008a48:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a4c:	b293      	uxth	r3, r2
 8008a4e:	fb06 e303 	mla	r3, r6, r3, lr
 8008a52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	ebaa 0303 	sub.w	r3, sl, r3
 8008a5c:	0c12      	lsrs	r2, r2, #16
 8008a5e:	f8dc a000 	ldr.w	sl, [ip]
 8008a62:	fb06 e202 	mla	r2, r6, r2, lr
 8008a66:	fa13 f38a 	uxtah	r3, r3, sl
 8008a6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a6e:	fa1f fa82 	uxth.w	sl, r2
 8008a72:	f8dc 2000 	ldr.w	r2, [ip]
 8008a76:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008a7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a84:	4581      	cmp	r9, r0
 8008a86:	f84c 3b04 	str.w	r3, [ip], #4
 8008a8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a8e:	d2db      	bcs.n	8008a48 <quorem+0x44>
 8008a90:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a94:	b92b      	cbnz	r3, 8008aa2 <quorem+0x9e>
 8008a96:	9b01      	ldr	r3, [sp, #4]
 8008a98:	3b04      	subs	r3, #4
 8008a9a:	429d      	cmp	r5, r3
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	d32e      	bcc.n	8008afe <quorem+0xfa>
 8008aa0:	613c      	str	r4, [r7, #16]
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f001 f856 	bl	8009b54 <__mcmp>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	db24      	blt.n	8008af6 <quorem+0xf2>
 8008aac:	3601      	adds	r6, #1
 8008aae:	4628      	mov	r0, r5
 8008ab0:	f04f 0c00 	mov.w	ip, #0
 8008ab4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ab8:	f8d0 e000 	ldr.w	lr, [r0]
 8008abc:	b293      	uxth	r3, r2
 8008abe:	ebac 0303 	sub.w	r3, ip, r3
 8008ac2:	0c12      	lsrs	r2, r2, #16
 8008ac4:	fa13 f38e 	uxtah	r3, r3, lr
 8008ac8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008acc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ad6:	45c1      	cmp	r9, r8
 8008ad8:	f840 3b04 	str.w	r3, [r0], #4
 8008adc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ae0:	d2e8      	bcs.n	8008ab4 <quorem+0xb0>
 8008ae2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008aea:	b922      	cbnz	r2, 8008af6 <quorem+0xf2>
 8008aec:	3b04      	subs	r3, #4
 8008aee:	429d      	cmp	r5, r3
 8008af0:	461a      	mov	r2, r3
 8008af2:	d30a      	bcc.n	8008b0a <quorem+0x106>
 8008af4:	613c      	str	r4, [r7, #16]
 8008af6:	4630      	mov	r0, r6
 8008af8:	b003      	add	sp, #12
 8008afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008afe:	6812      	ldr	r2, [r2, #0]
 8008b00:	3b04      	subs	r3, #4
 8008b02:	2a00      	cmp	r2, #0
 8008b04:	d1cc      	bne.n	8008aa0 <quorem+0x9c>
 8008b06:	3c01      	subs	r4, #1
 8008b08:	e7c7      	b.n	8008a9a <quorem+0x96>
 8008b0a:	6812      	ldr	r2, [r2, #0]
 8008b0c:	3b04      	subs	r3, #4
 8008b0e:	2a00      	cmp	r2, #0
 8008b10:	d1f0      	bne.n	8008af4 <quorem+0xf0>
 8008b12:	3c01      	subs	r4, #1
 8008b14:	e7eb      	b.n	8008aee <quorem+0xea>
 8008b16:	2000      	movs	r0, #0
 8008b18:	e7ee      	b.n	8008af8 <quorem+0xf4>
 8008b1a:	0000      	movs	r0, r0
 8008b1c:	0000      	movs	r0, r0
	...

08008b20 <_dtoa_r>:
 8008b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b24:	ec59 8b10 	vmov	r8, r9, d0
 8008b28:	b095      	sub	sp, #84	; 0x54
 8008b2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b2c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8008b2e:	9107      	str	r1, [sp, #28]
 8008b30:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8008b34:	4606      	mov	r6, r0
 8008b36:	9209      	str	r2, [sp, #36]	; 0x24
 8008b38:	9310      	str	r3, [sp, #64]	; 0x40
 8008b3a:	b975      	cbnz	r5, 8008b5a <_dtoa_r+0x3a>
 8008b3c:	2010      	movs	r0, #16
 8008b3e:	f000 fd75 	bl	800962c <malloc>
 8008b42:	4602      	mov	r2, r0
 8008b44:	6270      	str	r0, [r6, #36]	; 0x24
 8008b46:	b920      	cbnz	r0, 8008b52 <_dtoa_r+0x32>
 8008b48:	4bab      	ldr	r3, [pc, #684]	; (8008df8 <_dtoa_r+0x2d8>)
 8008b4a:	21ea      	movs	r1, #234	; 0xea
 8008b4c:	48ab      	ldr	r0, [pc, #684]	; (8008dfc <_dtoa_r+0x2dc>)
 8008b4e:	f001 fb27 	bl	800a1a0 <__assert_func>
 8008b52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b56:	6005      	str	r5, [r0, #0]
 8008b58:	60c5      	str	r5, [r0, #12]
 8008b5a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008b5c:	6819      	ldr	r1, [r3, #0]
 8008b5e:	b151      	cbz	r1, 8008b76 <_dtoa_r+0x56>
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	604a      	str	r2, [r1, #4]
 8008b64:	2301      	movs	r3, #1
 8008b66:	4093      	lsls	r3, r2
 8008b68:	608b      	str	r3, [r1, #8]
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	f000 fdb4 	bl	80096d8 <_Bfree>
 8008b70:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
 8008b76:	f1b9 0300 	subs.w	r3, r9, #0
 8008b7a:	bfbb      	ittet	lt
 8008b7c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b80:	9303      	strlt	r3, [sp, #12]
 8008b82:	2300      	movge	r3, #0
 8008b84:	2201      	movlt	r2, #1
 8008b86:	bfac      	ite	ge
 8008b88:	6023      	strge	r3, [r4, #0]
 8008b8a:	6022      	strlt	r2, [r4, #0]
 8008b8c:	4b9c      	ldr	r3, [pc, #624]	; (8008e00 <_dtoa_r+0x2e0>)
 8008b8e:	9c03      	ldr	r4, [sp, #12]
 8008b90:	43a3      	bics	r3, r4
 8008b92:	d11a      	bne.n	8008bca <_dtoa_r+0xaa>
 8008b94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b96:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b9a:	6013      	str	r3, [r2, #0]
 8008b9c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008ba0:	ea53 0308 	orrs.w	r3, r3, r8
 8008ba4:	f000 8512 	beq.w	80095cc <_dtoa_r+0xaac>
 8008ba8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008baa:	b953      	cbnz	r3, 8008bc2 <_dtoa_r+0xa2>
 8008bac:	4b95      	ldr	r3, [pc, #596]	; (8008e04 <_dtoa_r+0x2e4>)
 8008bae:	e01f      	b.n	8008bf0 <_dtoa_r+0xd0>
 8008bb0:	4b95      	ldr	r3, [pc, #596]	; (8008e08 <_dtoa_r+0x2e8>)
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	3308      	adds	r3, #8
 8008bb6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008bb8:	6013      	str	r3, [r2, #0]
 8008bba:	9800      	ldr	r0, [sp, #0]
 8008bbc:	b015      	add	sp, #84	; 0x54
 8008bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc2:	4b90      	ldr	r3, [pc, #576]	; (8008e04 <_dtoa_r+0x2e4>)
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	3303      	adds	r3, #3
 8008bc8:	e7f5      	b.n	8008bb6 <_dtoa_r+0x96>
 8008bca:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008bda:	d10b      	bne.n	8008bf4 <_dtoa_r+0xd4>
 8008bdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bde:	2301      	movs	r3, #1
 8008be0:	6013      	str	r3, [r2, #0]
 8008be2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 84ee 	beq.w	80095c6 <_dtoa_r+0xaa6>
 8008bea:	4888      	ldr	r0, [pc, #544]	; (8008e0c <_dtoa_r+0x2ec>)
 8008bec:	6018      	str	r0, [r3, #0]
 8008bee:	1e43      	subs	r3, r0, #1
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	e7e2      	b.n	8008bba <_dtoa_r+0x9a>
 8008bf4:	a913      	add	r1, sp, #76	; 0x4c
 8008bf6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008bfa:	aa12      	add	r2, sp, #72	; 0x48
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f001 f84d 	bl	8009c9c <__d2b>
 8008c02:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008c06:	4605      	mov	r5, r0
 8008c08:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008c0a:	2900      	cmp	r1, #0
 8008c0c:	d047      	beq.n	8008c9e <_dtoa_r+0x17e>
 8008c0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008c10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008c14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c18:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008c1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c20:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008c24:	2400      	movs	r4, #0
 8008c26:	ec43 2b16 	vmov	d6, r2, r3
 8008c2a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008c2e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008de0 <_dtoa_r+0x2c0>
 8008c32:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008c36:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8008de8 <_dtoa_r+0x2c8>
 8008c3a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008c3e:	eeb0 7b46 	vmov.f64	d7, d6
 8008c42:	ee06 1a90 	vmov	s13, r1
 8008c46:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8008c4a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008df0 <_dtoa_r+0x2d0>
 8008c4e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008c52:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008c56:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c5e:	ee16 ba90 	vmov	fp, s13
 8008c62:	9411      	str	r4, [sp, #68]	; 0x44
 8008c64:	d508      	bpl.n	8008c78 <_dtoa_r+0x158>
 8008c66:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008c6a:	eeb4 6b47 	vcmp.f64	d6, d7
 8008c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c72:	bf18      	it	ne
 8008c74:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008c78:	f1bb 0f16 	cmp.w	fp, #22
 8008c7c:	d832      	bhi.n	8008ce4 <_dtoa_r+0x1c4>
 8008c7e:	4b64      	ldr	r3, [pc, #400]	; (8008e10 <_dtoa_r+0x2f0>)
 8008c80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c84:	ed93 7b00 	vldr	d7, [r3]
 8008c88:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008c8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c94:	d501      	bpl.n	8008c9a <_dtoa_r+0x17a>
 8008c96:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	e023      	b.n	8008ce6 <_dtoa_r+0x1c6>
 8008c9e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008ca0:	4401      	add	r1, r0
 8008ca2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008ca6:	2b20      	cmp	r3, #32
 8008ca8:	bfc3      	ittte	gt
 8008caa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008cae:	fa04 f303 	lslgt.w	r3, r4, r3
 8008cb2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008cb6:	f1c3 0320 	rsble	r3, r3, #32
 8008cba:	bfc6      	itte	gt
 8008cbc:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008cc0:	ea43 0308 	orrgt.w	r3, r3, r8
 8008cc4:	fa08 f303 	lslle.w	r3, r8, r3
 8008cc8:	ee07 3a90 	vmov	s15, r3
 8008ccc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008cd0:	3901      	subs	r1, #1
 8008cd2:	ed8d 7b00 	vstr	d7, [sp]
 8008cd6:	9c01      	ldr	r4, [sp, #4]
 8008cd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cdc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008ce0:	2401      	movs	r4, #1
 8008ce2:	e7a0      	b.n	8008c26 <_dtoa_r+0x106>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ce8:	1a43      	subs	r3, r0, r1
 8008cea:	1e5a      	subs	r2, r3, #1
 8008cec:	bf45      	ittet	mi
 8008cee:	f1c3 0301 	rsbmi	r3, r3, #1
 8008cf2:	9305      	strmi	r3, [sp, #20]
 8008cf4:	2300      	movpl	r3, #0
 8008cf6:	2300      	movmi	r3, #0
 8008cf8:	9206      	str	r2, [sp, #24]
 8008cfa:	bf54      	ite	pl
 8008cfc:	9305      	strpl	r3, [sp, #20]
 8008cfe:	9306      	strmi	r3, [sp, #24]
 8008d00:	f1bb 0f00 	cmp.w	fp, #0
 8008d04:	db18      	blt.n	8008d38 <_dtoa_r+0x218>
 8008d06:	9b06      	ldr	r3, [sp, #24]
 8008d08:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008d0c:	445b      	add	r3, fp
 8008d0e:	9306      	str	r3, [sp, #24]
 8008d10:	2300      	movs	r3, #0
 8008d12:	9a07      	ldr	r2, [sp, #28]
 8008d14:	2a09      	cmp	r2, #9
 8008d16:	d849      	bhi.n	8008dac <_dtoa_r+0x28c>
 8008d18:	2a05      	cmp	r2, #5
 8008d1a:	bfc4      	itt	gt
 8008d1c:	3a04      	subgt	r2, #4
 8008d1e:	9207      	strgt	r2, [sp, #28]
 8008d20:	9a07      	ldr	r2, [sp, #28]
 8008d22:	f1a2 0202 	sub.w	r2, r2, #2
 8008d26:	bfcc      	ite	gt
 8008d28:	2400      	movgt	r4, #0
 8008d2a:	2401      	movle	r4, #1
 8008d2c:	2a03      	cmp	r2, #3
 8008d2e:	d848      	bhi.n	8008dc2 <_dtoa_r+0x2a2>
 8008d30:	e8df f002 	tbb	[pc, r2]
 8008d34:	3a2c2e0b 	.word	0x3a2c2e0b
 8008d38:	9b05      	ldr	r3, [sp, #20]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	eba3 030b 	sub.w	r3, r3, fp
 8008d40:	9305      	str	r3, [sp, #20]
 8008d42:	920e      	str	r2, [sp, #56]	; 0x38
 8008d44:	f1cb 0300 	rsb	r3, fp, #0
 8008d48:	e7e3      	b.n	8008d12 <_dtoa_r+0x1f2>
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	9208      	str	r2, [sp, #32]
 8008d4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d50:	2a00      	cmp	r2, #0
 8008d52:	dc39      	bgt.n	8008dc8 <_dtoa_r+0x2a8>
 8008d54:	f04f 0a01 	mov.w	sl, #1
 8008d58:	46d1      	mov	r9, sl
 8008d5a:	4652      	mov	r2, sl
 8008d5c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008d60:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008d62:	2100      	movs	r1, #0
 8008d64:	6079      	str	r1, [r7, #4]
 8008d66:	2004      	movs	r0, #4
 8008d68:	f100 0c14 	add.w	ip, r0, #20
 8008d6c:	4594      	cmp	ip, r2
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	d92f      	bls.n	8008dd2 <_dtoa_r+0x2b2>
 8008d72:	4630      	mov	r0, r6
 8008d74:	930c      	str	r3, [sp, #48]	; 0x30
 8008d76:	f000 fc6f 	bl	8009658 <_Balloc>
 8008d7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d7c:	9000      	str	r0, [sp, #0]
 8008d7e:	4602      	mov	r2, r0
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d149      	bne.n	8008e18 <_dtoa_r+0x2f8>
 8008d84:	4b23      	ldr	r3, [pc, #140]	; (8008e14 <_dtoa_r+0x2f4>)
 8008d86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d8a:	e6df      	b.n	8008b4c <_dtoa_r+0x2c>
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	e7dd      	b.n	8008d4c <_dtoa_r+0x22c>
 8008d90:	2200      	movs	r2, #0
 8008d92:	9208      	str	r2, [sp, #32]
 8008d94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d96:	eb0b 0a02 	add.w	sl, fp, r2
 8008d9a:	f10a 0901 	add.w	r9, sl, #1
 8008d9e:	464a      	mov	r2, r9
 8008da0:	2a01      	cmp	r2, #1
 8008da2:	bfb8      	it	lt
 8008da4:	2201      	movlt	r2, #1
 8008da6:	e7db      	b.n	8008d60 <_dtoa_r+0x240>
 8008da8:	2201      	movs	r2, #1
 8008daa:	e7f2      	b.n	8008d92 <_dtoa_r+0x272>
 8008dac:	2401      	movs	r4, #1
 8008dae:	2200      	movs	r2, #0
 8008db0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008db4:	f04f 3aff 	mov.w	sl, #4294967295
 8008db8:	2100      	movs	r1, #0
 8008dba:	46d1      	mov	r9, sl
 8008dbc:	2212      	movs	r2, #18
 8008dbe:	9109      	str	r1, [sp, #36]	; 0x24
 8008dc0:	e7ce      	b.n	8008d60 <_dtoa_r+0x240>
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	9208      	str	r2, [sp, #32]
 8008dc6:	e7f5      	b.n	8008db4 <_dtoa_r+0x294>
 8008dc8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008dcc:	46d1      	mov	r9, sl
 8008dce:	4652      	mov	r2, sl
 8008dd0:	e7c6      	b.n	8008d60 <_dtoa_r+0x240>
 8008dd2:	3101      	adds	r1, #1
 8008dd4:	6079      	str	r1, [r7, #4]
 8008dd6:	0040      	lsls	r0, r0, #1
 8008dd8:	e7c6      	b.n	8008d68 <_dtoa_r+0x248>
 8008dda:	bf00      	nop
 8008ddc:	f3af 8000 	nop.w
 8008de0:	636f4361 	.word	0x636f4361
 8008de4:	3fd287a7 	.word	0x3fd287a7
 8008de8:	8b60c8b3 	.word	0x8b60c8b3
 8008dec:	3fc68a28 	.word	0x3fc68a28
 8008df0:	509f79fb 	.word	0x509f79fb
 8008df4:	3fd34413 	.word	0x3fd34413
 8008df8:	0800ae19 	.word	0x0800ae19
 8008dfc:	0800ae30 	.word	0x0800ae30
 8008e00:	7ff00000 	.word	0x7ff00000
 8008e04:	0800ae15 	.word	0x0800ae15
 8008e08:	0800ae0c 	.word	0x0800ae0c
 8008e0c:	0800ade9 	.word	0x0800ade9
 8008e10:	0800af28 	.word	0x0800af28
 8008e14:	0800ae8f 	.word	0x0800ae8f
 8008e18:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008e1a:	9900      	ldr	r1, [sp, #0]
 8008e1c:	6011      	str	r1, [r2, #0]
 8008e1e:	f1b9 0f0e 	cmp.w	r9, #14
 8008e22:	d872      	bhi.n	8008f0a <_dtoa_r+0x3ea>
 8008e24:	2c00      	cmp	r4, #0
 8008e26:	d070      	beq.n	8008f0a <_dtoa_r+0x3ea>
 8008e28:	f1bb 0f00 	cmp.w	fp, #0
 8008e2c:	f340 80a6 	ble.w	8008f7c <_dtoa_r+0x45c>
 8008e30:	49ca      	ldr	r1, [pc, #808]	; (800915c <_dtoa_r+0x63c>)
 8008e32:	f00b 020f 	and.w	r2, fp, #15
 8008e36:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008e3a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008e3e:	ed92 7b00 	vldr	d7, [r2]
 8008e42:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008e46:	f000 808d 	beq.w	8008f64 <_dtoa_r+0x444>
 8008e4a:	4ac5      	ldr	r2, [pc, #788]	; (8009160 <_dtoa_r+0x640>)
 8008e4c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008e50:	ed92 6b08 	vldr	d6, [r2, #32]
 8008e54:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008e58:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008e5c:	f001 010f 	and.w	r1, r1, #15
 8008e60:	2203      	movs	r2, #3
 8008e62:	48bf      	ldr	r0, [pc, #764]	; (8009160 <_dtoa_r+0x640>)
 8008e64:	2900      	cmp	r1, #0
 8008e66:	d17f      	bne.n	8008f68 <_dtoa_r+0x448>
 8008e68:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008e6c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008e70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008e76:	2900      	cmp	r1, #0
 8008e78:	f000 80b2 	beq.w	8008fe0 <_dtoa_r+0x4c0>
 8008e7c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008e80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e84:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e8c:	f140 80a8 	bpl.w	8008fe0 <_dtoa_r+0x4c0>
 8008e90:	f1b9 0f00 	cmp.w	r9, #0
 8008e94:	f000 80a4 	beq.w	8008fe0 <_dtoa_r+0x4c0>
 8008e98:	f1ba 0f00 	cmp.w	sl, #0
 8008e9c:	dd31      	ble.n	8008f02 <_dtoa_r+0x3e2>
 8008e9e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008ea2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ea6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008eaa:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008eae:	3201      	adds	r2, #1
 8008eb0:	4650      	mov	r0, sl
 8008eb2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008eb6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008eba:	ee07 2a90 	vmov	s15, r2
 8008ebe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008ec2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008ec6:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008eca:	9c03      	ldr	r4, [sp, #12]
 8008ecc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008ed0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	f040 8086 	bne.w	8008fe6 <_dtoa_r+0x4c6>
 8008eda:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008ede:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008ee2:	ec42 1b17 	vmov	d7, r1, r2
 8008ee6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eee:	f300 8272 	bgt.w	80093d6 <_dtoa_r+0x8b6>
 8008ef2:	eeb1 7b47 	vneg.f64	d7, d7
 8008ef6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008efe:	f100 8267 	bmi.w	80093d0 <_dtoa_r+0x8b0>
 8008f02:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8008f06:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008f0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f0c:	2a00      	cmp	r2, #0
 8008f0e:	f2c0 8129 	blt.w	8009164 <_dtoa_r+0x644>
 8008f12:	f1bb 0f0e 	cmp.w	fp, #14
 8008f16:	f300 8125 	bgt.w	8009164 <_dtoa_r+0x644>
 8008f1a:	4b90      	ldr	r3, [pc, #576]	; (800915c <_dtoa_r+0x63c>)
 8008f1c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f20:	ed93 6b00 	vldr	d6, [r3]
 8008f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f280 80c3 	bge.w	80090b2 <_dtoa_r+0x592>
 8008f2c:	f1b9 0f00 	cmp.w	r9, #0
 8008f30:	f300 80bf 	bgt.w	80090b2 <_dtoa_r+0x592>
 8008f34:	f040 824c 	bne.w	80093d0 <_dtoa_r+0x8b0>
 8008f38:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008f3c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008f40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f4c:	464c      	mov	r4, r9
 8008f4e:	464f      	mov	r7, r9
 8008f50:	f280 8222 	bge.w	8009398 <_dtoa_r+0x878>
 8008f54:	f8dd 8000 	ldr.w	r8, [sp]
 8008f58:	2331      	movs	r3, #49	; 0x31
 8008f5a:	f808 3b01 	strb.w	r3, [r8], #1
 8008f5e:	f10b 0b01 	add.w	fp, fp, #1
 8008f62:	e21e      	b.n	80093a2 <_dtoa_r+0x882>
 8008f64:	2202      	movs	r2, #2
 8008f66:	e77c      	b.n	8008e62 <_dtoa_r+0x342>
 8008f68:	07cc      	lsls	r4, r1, #31
 8008f6a:	d504      	bpl.n	8008f76 <_dtoa_r+0x456>
 8008f6c:	ed90 6b00 	vldr	d6, [r0]
 8008f70:	3201      	adds	r2, #1
 8008f72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f76:	1049      	asrs	r1, r1, #1
 8008f78:	3008      	adds	r0, #8
 8008f7a:	e773      	b.n	8008e64 <_dtoa_r+0x344>
 8008f7c:	d02e      	beq.n	8008fdc <_dtoa_r+0x4bc>
 8008f7e:	f1cb 0100 	rsb	r1, fp, #0
 8008f82:	4a76      	ldr	r2, [pc, #472]	; (800915c <_dtoa_r+0x63c>)
 8008f84:	f001 000f 	and.w	r0, r1, #15
 8008f88:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008f8c:	ed92 7b00 	vldr	d7, [r2]
 8008f90:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008f94:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008f98:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008f9c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8008fa0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8008fa4:	486e      	ldr	r0, [pc, #440]	; (8009160 <_dtoa_r+0x640>)
 8008fa6:	1109      	asrs	r1, r1, #4
 8008fa8:	2400      	movs	r4, #0
 8008faa:	2202      	movs	r2, #2
 8008fac:	b939      	cbnz	r1, 8008fbe <_dtoa_r+0x49e>
 8008fae:	2c00      	cmp	r4, #0
 8008fb0:	f43f af60 	beq.w	8008e74 <_dtoa_r+0x354>
 8008fb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008fb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fbc:	e75a      	b.n	8008e74 <_dtoa_r+0x354>
 8008fbe:	07cf      	lsls	r7, r1, #31
 8008fc0:	d509      	bpl.n	8008fd6 <_dtoa_r+0x4b6>
 8008fc2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008fc6:	ed90 7b00 	vldr	d7, [r0]
 8008fca:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008fce:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008fd2:	3201      	adds	r2, #1
 8008fd4:	2401      	movs	r4, #1
 8008fd6:	1049      	asrs	r1, r1, #1
 8008fd8:	3008      	adds	r0, #8
 8008fda:	e7e7      	b.n	8008fac <_dtoa_r+0x48c>
 8008fdc:	2202      	movs	r2, #2
 8008fde:	e749      	b.n	8008e74 <_dtoa_r+0x354>
 8008fe0:	465f      	mov	r7, fp
 8008fe2:	4648      	mov	r0, r9
 8008fe4:	e765      	b.n	8008eb2 <_dtoa_r+0x392>
 8008fe6:	ec42 1b17 	vmov	d7, r1, r2
 8008fea:	4a5c      	ldr	r2, [pc, #368]	; (800915c <_dtoa_r+0x63c>)
 8008fec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008ff0:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008ff4:	9a00      	ldr	r2, [sp, #0]
 8008ff6:	1814      	adds	r4, r2, r0
 8008ff8:	9a08      	ldr	r2, [sp, #32]
 8008ffa:	b352      	cbz	r2, 8009052 <_dtoa_r+0x532>
 8008ffc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009000:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009004:	f8dd 8000 	ldr.w	r8, [sp]
 8009008:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800900c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009010:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009014:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009018:	ee14 2a90 	vmov	r2, s9
 800901c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009020:	3230      	adds	r2, #48	; 0x30
 8009022:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009026:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800902a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800902e:	f808 2b01 	strb.w	r2, [r8], #1
 8009032:	d439      	bmi.n	80090a8 <_dtoa_r+0x588>
 8009034:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009038:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800903c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009040:	d472      	bmi.n	8009128 <_dtoa_r+0x608>
 8009042:	45a0      	cmp	r8, r4
 8009044:	f43f af5d 	beq.w	8008f02 <_dtoa_r+0x3e2>
 8009048:	ee27 7b03 	vmul.f64	d7, d7, d3
 800904c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009050:	e7e0      	b.n	8009014 <_dtoa_r+0x4f4>
 8009052:	f8dd 8000 	ldr.w	r8, [sp]
 8009056:	ee27 7b04 	vmul.f64	d7, d7, d4
 800905a:	4621      	mov	r1, r4
 800905c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009060:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009064:	ee14 2a90 	vmov	r2, s9
 8009068:	3230      	adds	r2, #48	; 0x30
 800906a:	f808 2b01 	strb.w	r2, [r8], #1
 800906e:	45a0      	cmp	r8, r4
 8009070:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009074:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009078:	d118      	bne.n	80090ac <_dtoa_r+0x58c>
 800907a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800907e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009082:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800908a:	dc4d      	bgt.n	8009128 <_dtoa_r+0x608>
 800908c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009090:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009098:	f57f af33 	bpl.w	8008f02 <_dtoa_r+0x3e2>
 800909c:	4688      	mov	r8, r1
 800909e:	3901      	subs	r1, #1
 80090a0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80090a4:	2b30      	cmp	r3, #48	; 0x30
 80090a6:	d0f9      	beq.n	800909c <_dtoa_r+0x57c>
 80090a8:	46bb      	mov	fp, r7
 80090aa:	e02a      	b.n	8009102 <_dtoa_r+0x5e2>
 80090ac:	ee26 6b03 	vmul.f64	d6, d6, d3
 80090b0:	e7d6      	b.n	8009060 <_dtoa_r+0x540>
 80090b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090b6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80090ba:	f8dd 8000 	ldr.w	r8, [sp]
 80090be:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80090c2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80090c6:	ee15 3a10 	vmov	r3, s10
 80090ca:	3330      	adds	r3, #48	; 0x30
 80090cc:	f808 3b01 	strb.w	r3, [r8], #1
 80090d0:	9b00      	ldr	r3, [sp, #0]
 80090d2:	eba8 0303 	sub.w	r3, r8, r3
 80090d6:	4599      	cmp	r9, r3
 80090d8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80090dc:	eea3 7b46 	vfms.f64	d7, d3, d6
 80090e0:	d133      	bne.n	800914a <_dtoa_r+0x62a>
 80090e2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80090e6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80090ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ee:	dc1a      	bgt.n	8009126 <_dtoa_r+0x606>
 80090f0:	eeb4 7b46 	vcmp.f64	d7, d6
 80090f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f8:	d103      	bne.n	8009102 <_dtoa_r+0x5e2>
 80090fa:	ee15 3a10 	vmov	r3, s10
 80090fe:	07d9      	lsls	r1, r3, #31
 8009100:	d411      	bmi.n	8009126 <_dtoa_r+0x606>
 8009102:	4629      	mov	r1, r5
 8009104:	4630      	mov	r0, r6
 8009106:	f000 fae7 	bl	80096d8 <_Bfree>
 800910a:	2300      	movs	r3, #0
 800910c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800910e:	f888 3000 	strb.w	r3, [r8]
 8009112:	f10b 0301 	add.w	r3, fp, #1
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800911a:	2b00      	cmp	r3, #0
 800911c:	f43f ad4d 	beq.w	8008bba <_dtoa_r+0x9a>
 8009120:	f8c3 8000 	str.w	r8, [r3]
 8009124:	e549      	b.n	8008bba <_dtoa_r+0x9a>
 8009126:	465f      	mov	r7, fp
 8009128:	4643      	mov	r3, r8
 800912a:	4698      	mov	r8, r3
 800912c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009130:	2a39      	cmp	r2, #57	; 0x39
 8009132:	d106      	bne.n	8009142 <_dtoa_r+0x622>
 8009134:	9a00      	ldr	r2, [sp, #0]
 8009136:	429a      	cmp	r2, r3
 8009138:	d1f7      	bne.n	800912a <_dtoa_r+0x60a>
 800913a:	9900      	ldr	r1, [sp, #0]
 800913c:	2230      	movs	r2, #48	; 0x30
 800913e:	3701      	adds	r7, #1
 8009140:	700a      	strb	r2, [r1, #0]
 8009142:	781a      	ldrb	r2, [r3, #0]
 8009144:	3201      	adds	r2, #1
 8009146:	701a      	strb	r2, [r3, #0]
 8009148:	e7ae      	b.n	80090a8 <_dtoa_r+0x588>
 800914a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800914e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009156:	d1b2      	bne.n	80090be <_dtoa_r+0x59e>
 8009158:	e7d3      	b.n	8009102 <_dtoa_r+0x5e2>
 800915a:	bf00      	nop
 800915c:	0800af28 	.word	0x0800af28
 8009160:	0800af00 	.word	0x0800af00
 8009164:	9908      	ldr	r1, [sp, #32]
 8009166:	2900      	cmp	r1, #0
 8009168:	f000 80d1 	beq.w	800930e <_dtoa_r+0x7ee>
 800916c:	9907      	ldr	r1, [sp, #28]
 800916e:	2901      	cmp	r1, #1
 8009170:	f300 80b4 	bgt.w	80092dc <_dtoa_r+0x7bc>
 8009174:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009176:	2900      	cmp	r1, #0
 8009178:	f000 80ac 	beq.w	80092d4 <_dtoa_r+0x7b4>
 800917c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009180:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009184:	461c      	mov	r4, r3
 8009186:	930a      	str	r3, [sp, #40]	; 0x28
 8009188:	9b05      	ldr	r3, [sp, #20]
 800918a:	4413      	add	r3, r2
 800918c:	9305      	str	r3, [sp, #20]
 800918e:	9b06      	ldr	r3, [sp, #24]
 8009190:	2101      	movs	r1, #1
 8009192:	4413      	add	r3, r2
 8009194:	4630      	mov	r0, r6
 8009196:	9306      	str	r3, [sp, #24]
 8009198:	f000 fb5a 	bl	8009850 <__i2b>
 800919c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800919e:	4607      	mov	r7, r0
 80091a0:	f1b8 0f00 	cmp.w	r8, #0
 80091a4:	dd0d      	ble.n	80091c2 <_dtoa_r+0x6a2>
 80091a6:	9a06      	ldr	r2, [sp, #24]
 80091a8:	2a00      	cmp	r2, #0
 80091aa:	dd0a      	ble.n	80091c2 <_dtoa_r+0x6a2>
 80091ac:	4542      	cmp	r2, r8
 80091ae:	9905      	ldr	r1, [sp, #20]
 80091b0:	bfa8      	it	ge
 80091b2:	4642      	movge	r2, r8
 80091b4:	1a89      	subs	r1, r1, r2
 80091b6:	9105      	str	r1, [sp, #20]
 80091b8:	9906      	ldr	r1, [sp, #24]
 80091ba:	eba8 0802 	sub.w	r8, r8, r2
 80091be:	1a8a      	subs	r2, r1, r2
 80091c0:	9206      	str	r2, [sp, #24]
 80091c2:	b303      	cbz	r3, 8009206 <_dtoa_r+0x6e6>
 80091c4:	9a08      	ldr	r2, [sp, #32]
 80091c6:	2a00      	cmp	r2, #0
 80091c8:	f000 80a6 	beq.w	8009318 <_dtoa_r+0x7f8>
 80091cc:	2c00      	cmp	r4, #0
 80091ce:	dd13      	ble.n	80091f8 <_dtoa_r+0x6d8>
 80091d0:	4639      	mov	r1, r7
 80091d2:	4622      	mov	r2, r4
 80091d4:	4630      	mov	r0, r6
 80091d6:	930c      	str	r3, [sp, #48]	; 0x30
 80091d8:	f000 fbf6 	bl	80099c8 <__pow5mult>
 80091dc:	462a      	mov	r2, r5
 80091de:	4601      	mov	r1, r0
 80091e0:	4607      	mov	r7, r0
 80091e2:	4630      	mov	r0, r6
 80091e4:	f000 fb4a 	bl	800987c <__multiply>
 80091e8:	4629      	mov	r1, r5
 80091ea:	900a      	str	r0, [sp, #40]	; 0x28
 80091ec:	4630      	mov	r0, r6
 80091ee:	f000 fa73 	bl	80096d8 <_Bfree>
 80091f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091f6:	4615      	mov	r5, r2
 80091f8:	1b1a      	subs	r2, r3, r4
 80091fa:	d004      	beq.n	8009206 <_dtoa_r+0x6e6>
 80091fc:	4629      	mov	r1, r5
 80091fe:	4630      	mov	r0, r6
 8009200:	f000 fbe2 	bl	80099c8 <__pow5mult>
 8009204:	4605      	mov	r5, r0
 8009206:	2101      	movs	r1, #1
 8009208:	4630      	mov	r0, r6
 800920a:	f000 fb21 	bl	8009850 <__i2b>
 800920e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009210:	2b00      	cmp	r3, #0
 8009212:	4604      	mov	r4, r0
 8009214:	f340 8082 	ble.w	800931c <_dtoa_r+0x7fc>
 8009218:	461a      	mov	r2, r3
 800921a:	4601      	mov	r1, r0
 800921c:	4630      	mov	r0, r6
 800921e:	f000 fbd3 	bl	80099c8 <__pow5mult>
 8009222:	9b07      	ldr	r3, [sp, #28]
 8009224:	2b01      	cmp	r3, #1
 8009226:	4604      	mov	r4, r0
 8009228:	dd7b      	ble.n	8009322 <_dtoa_r+0x802>
 800922a:	2300      	movs	r3, #0
 800922c:	930a      	str	r3, [sp, #40]	; 0x28
 800922e:	6922      	ldr	r2, [r4, #16]
 8009230:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009234:	6910      	ldr	r0, [r2, #16]
 8009236:	f000 fabb 	bl	80097b0 <__hi0bits>
 800923a:	f1c0 0020 	rsb	r0, r0, #32
 800923e:	9b06      	ldr	r3, [sp, #24]
 8009240:	4418      	add	r0, r3
 8009242:	f010 001f 	ands.w	r0, r0, #31
 8009246:	f000 808d 	beq.w	8009364 <_dtoa_r+0x844>
 800924a:	f1c0 0220 	rsb	r2, r0, #32
 800924e:	2a04      	cmp	r2, #4
 8009250:	f340 8086 	ble.w	8009360 <_dtoa_r+0x840>
 8009254:	f1c0 001c 	rsb	r0, r0, #28
 8009258:	9b05      	ldr	r3, [sp, #20]
 800925a:	4403      	add	r3, r0
 800925c:	9305      	str	r3, [sp, #20]
 800925e:	9b06      	ldr	r3, [sp, #24]
 8009260:	4403      	add	r3, r0
 8009262:	4480      	add	r8, r0
 8009264:	9306      	str	r3, [sp, #24]
 8009266:	9b05      	ldr	r3, [sp, #20]
 8009268:	2b00      	cmp	r3, #0
 800926a:	dd05      	ble.n	8009278 <_dtoa_r+0x758>
 800926c:	4629      	mov	r1, r5
 800926e:	461a      	mov	r2, r3
 8009270:	4630      	mov	r0, r6
 8009272:	f000 fc03 	bl	8009a7c <__lshift>
 8009276:	4605      	mov	r5, r0
 8009278:	9b06      	ldr	r3, [sp, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	dd05      	ble.n	800928a <_dtoa_r+0x76a>
 800927e:	4621      	mov	r1, r4
 8009280:	461a      	mov	r2, r3
 8009282:	4630      	mov	r0, r6
 8009284:	f000 fbfa 	bl	8009a7c <__lshift>
 8009288:	4604      	mov	r4, r0
 800928a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800928c:	2b00      	cmp	r3, #0
 800928e:	d06b      	beq.n	8009368 <_dtoa_r+0x848>
 8009290:	4621      	mov	r1, r4
 8009292:	4628      	mov	r0, r5
 8009294:	f000 fc5e 	bl	8009b54 <__mcmp>
 8009298:	2800      	cmp	r0, #0
 800929a:	da65      	bge.n	8009368 <_dtoa_r+0x848>
 800929c:	2300      	movs	r3, #0
 800929e:	4629      	mov	r1, r5
 80092a0:	220a      	movs	r2, #10
 80092a2:	4630      	mov	r0, r6
 80092a4:	f000 fa3a 	bl	800971c <__multadd>
 80092a8:	9b08      	ldr	r3, [sp, #32]
 80092aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092ae:	4605      	mov	r5, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f000 8192 	beq.w	80095da <_dtoa_r+0xaba>
 80092b6:	4639      	mov	r1, r7
 80092b8:	2300      	movs	r3, #0
 80092ba:	220a      	movs	r2, #10
 80092bc:	4630      	mov	r0, r6
 80092be:	f000 fa2d 	bl	800971c <__multadd>
 80092c2:	f1ba 0f00 	cmp.w	sl, #0
 80092c6:	4607      	mov	r7, r0
 80092c8:	f300 808e 	bgt.w	80093e8 <_dtoa_r+0x8c8>
 80092cc:	9b07      	ldr	r3, [sp, #28]
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	dc51      	bgt.n	8009376 <_dtoa_r+0x856>
 80092d2:	e089      	b.n	80093e8 <_dtoa_r+0x8c8>
 80092d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80092d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80092da:	e751      	b.n	8009180 <_dtoa_r+0x660>
 80092dc:	f109 34ff 	add.w	r4, r9, #4294967295
 80092e0:	42a3      	cmp	r3, r4
 80092e2:	bfbf      	itttt	lt
 80092e4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80092e6:	1ae3      	sublt	r3, r4, r3
 80092e8:	18d2      	addlt	r2, r2, r3
 80092ea:	4613      	movlt	r3, r2
 80092ec:	bfb7      	itett	lt
 80092ee:	930e      	strlt	r3, [sp, #56]	; 0x38
 80092f0:	1b1c      	subge	r4, r3, r4
 80092f2:	4623      	movlt	r3, r4
 80092f4:	2400      	movlt	r4, #0
 80092f6:	f1b9 0f00 	cmp.w	r9, #0
 80092fa:	bfb5      	itete	lt
 80092fc:	9a05      	ldrlt	r2, [sp, #20]
 80092fe:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8009302:	eba2 0809 	sublt.w	r8, r2, r9
 8009306:	464a      	movge	r2, r9
 8009308:	bfb8      	it	lt
 800930a:	2200      	movlt	r2, #0
 800930c:	e73b      	b.n	8009186 <_dtoa_r+0x666>
 800930e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009312:	9f08      	ldr	r7, [sp, #32]
 8009314:	461c      	mov	r4, r3
 8009316:	e743      	b.n	80091a0 <_dtoa_r+0x680>
 8009318:	461a      	mov	r2, r3
 800931a:	e76f      	b.n	80091fc <_dtoa_r+0x6dc>
 800931c:	9b07      	ldr	r3, [sp, #28]
 800931e:	2b01      	cmp	r3, #1
 8009320:	dc18      	bgt.n	8009354 <_dtoa_r+0x834>
 8009322:	9b02      	ldr	r3, [sp, #8]
 8009324:	b9b3      	cbnz	r3, 8009354 <_dtoa_r+0x834>
 8009326:	9b03      	ldr	r3, [sp, #12]
 8009328:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800932c:	b9a2      	cbnz	r2, 8009358 <_dtoa_r+0x838>
 800932e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009332:	0d12      	lsrs	r2, r2, #20
 8009334:	0512      	lsls	r2, r2, #20
 8009336:	b18a      	cbz	r2, 800935c <_dtoa_r+0x83c>
 8009338:	9b05      	ldr	r3, [sp, #20]
 800933a:	3301      	adds	r3, #1
 800933c:	9305      	str	r3, [sp, #20]
 800933e:	9b06      	ldr	r3, [sp, #24]
 8009340:	3301      	adds	r3, #1
 8009342:	9306      	str	r3, [sp, #24]
 8009344:	2301      	movs	r3, #1
 8009346:	930a      	str	r3, [sp, #40]	; 0x28
 8009348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800934a:	2b00      	cmp	r3, #0
 800934c:	f47f af6f 	bne.w	800922e <_dtoa_r+0x70e>
 8009350:	2001      	movs	r0, #1
 8009352:	e774      	b.n	800923e <_dtoa_r+0x71e>
 8009354:	2300      	movs	r3, #0
 8009356:	e7f6      	b.n	8009346 <_dtoa_r+0x826>
 8009358:	9b02      	ldr	r3, [sp, #8]
 800935a:	e7f4      	b.n	8009346 <_dtoa_r+0x826>
 800935c:	920a      	str	r2, [sp, #40]	; 0x28
 800935e:	e7f3      	b.n	8009348 <_dtoa_r+0x828>
 8009360:	d081      	beq.n	8009266 <_dtoa_r+0x746>
 8009362:	4610      	mov	r0, r2
 8009364:	301c      	adds	r0, #28
 8009366:	e777      	b.n	8009258 <_dtoa_r+0x738>
 8009368:	f1b9 0f00 	cmp.w	r9, #0
 800936c:	dc37      	bgt.n	80093de <_dtoa_r+0x8be>
 800936e:	9b07      	ldr	r3, [sp, #28]
 8009370:	2b02      	cmp	r3, #2
 8009372:	dd34      	ble.n	80093de <_dtoa_r+0x8be>
 8009374:	46ca      	mov	sl, r9
 8009376:	f1ba 0f00 	cmp.w	sl, #0
 800937a:	d10d      	bne.n	8009398 <_dtoa_r+0x878>
 800937c:	4621      	mov	r1, r4
 800937e:	4653      	mov	r3, sl
 8009380:	2205      	movs	r2, #5
 8009382:	4630      	mov	r0, r6
 8009384:	f000 f9ca 	bl	800971c <__multadd>
 8009388:	4601      	mov	r1, r0
 800938a:	4604      	mov	r4, r0
 800938c:	4628      	mov	r0, r5
 800938e:	f000 fbe1 	bl	8009b54 <__mcmp>
 8009392:	2800      	cmp	r0, #0
 8009394:	f73f adde 	bgt.w	8008f54 <_dtoa_r+0x434>
 8009398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800939a:	f8dd 8000 	ldr.w	r8, [sp]
 800939e:	ea6f 0b03 	mvn.w	fp, r3
 80093a2:	f04f 0900 	mov.w	r9, #0
 80093a6:	4621      	mov	r1, r4
 80093a8:	4630      	mov	r0, r6
 80093aa:	f000 f995 	bl	80096d8 <_Bfree>
 80093ae:	2f00      	cmp	r7, #0
 80093b0:	f43f aea7 	beq.w	8009102 <_dtoa_r+0x5e2>
 80093b4:	f1b9 0f00 	cmp.w	r9, #0
 80093b8:	d005      	beq.n	80093c6 <_dtoa_r+0x8a6>
 80093ba:	45b9      	cmp	r9, r7
 80093bc:	d003      	beq.n	80093c6 <_dtoa_r+0x8a6>
 80093be:	4649      	mov	r1, r9
 80093c0:	4630      	mov	r0, r6
 80093c2:	f000 f989 	bl	80096d8 <_Bfree>
 80093c6:	4639      	mov	r1, r7
 80093c8:	4630      	mov	r0, r6
 80093ca:	f000 f985 	bl	80096d8 <_Bfree>
 80093ce:	e698      	b.n	8009102 <_dtoa_r+0x5e2>
 80093d0:	2400      	movs	r4, #0
 80093d2:	4627      	mov	r7, r4
 80093d4:	e7e0      	b.n	8009398 <_dtoa_r+0x878>
 80093d6:	46bb      	mov	fp, r7
 80093d8:	4604      	mov	r4, r0
 80093da:	4607      	mov	r7, r0
 80093dc:	e5ba      	b.n	8008f54 <_dtoa_r+0x434>
 80093de:	9b08      	ldr	r3, [sp, #32]
 80093e0:	46ca      	mov	sl, r9
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 8100 	beq.w	80095e8 <_dtoa_r+0xac8>
 80093e8:	f1b8 0f00 	cmp.w	r8, #0
 80093ec:	dd05      	ble.n	80093fa <_dtoa_r+0x8da>
 80093ee:	4639      	mov	r1, r7
 80093f0:	4642      	mov	r2, r8
 80093f2:	4630      	mov	r0, r6
 80093f4:	f000 fb42 	bl	8009a7c <__lshift>
 80093f8:	4607      	mov	r7, r0
 80093fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d05d      	beq.n	80094bc <_dtoa_r+0x99c>
 8009400:	6879      	ldr	r1, [r7, #4]
 8009402:	4630      	mov	r0, r6
 8009404:	f000 f928 	bl	8009658 <_Balloc>
 8009408:	4680      	mov	r8, r0
 800940a:	b928      	cbnz	r0, 8009418 <_dtoa_r+0x8f8>
 800940c:	4b82      	ldr	r3, [pc, #520]	; (8009618 <_dtoa_r+0xaf8>)
 800940e:	4602      	mov	r2, r0
 8009410:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009414:	f7ff bb9a 	b.w	8008b4c <_dtoa_r+0x2c>
 8009418:	693a      	ldr	r2, [r7, #16]
 800941a:	3202      	adds	r2, #2
 800941c:	0092      	lsls	r2, r2, #2
 800941e:	f107 010c 	add.w	r1, r7, #12
 8009422:	300c      	adds	r0, #12
 8009424:	f000 f90a 	bl	800963c <memcpy>
 8009428:	2201      	movs	r2, #1
 800942a:	4641      	mov	r1, r8
 800942c:	4630      	mov	r0, r6
 800942e:	f000 fb25 	bl	8009a7c <__lshift>
 8009432:	9b00      	ldr	r3, [sp, #0]
 8009434:	3301      	adds	r3, #1
 8009436:	9305      	str	r3, [sp, #20]
 8009438:	9b00      	ldr	r3, [sp, #0]
 800943a:	4453      	add	r3, sl
 800943c:	9309      	str	r3, [sp, #36]	; 0x24
 800943e:	9b02      	ldr	r3, [sp, #8]
 8009440:	f003 0301 	and.w	r3, r3, #1
 8009444:	46b9      	mov	r9, r7
 8009446:	9308      	str	r3, [sp, #32]
 8009448:	4607      	mov	r7, r0
 800944a:	9b05      	ldr	r3, [sp, #20]
 800944c:	4621      	mov	r1, r4
 800944e:	3b01      	subs	r3, #1
 8009450:	4628      	mov	r0, r5
 8009452:	9302      	str	r3, [sp, #8]
 8009454:	f7ff fad6 	bl	8008a04 <quorem>
 8009458:	4603      	mov	r3, r0
 800945a:	3330      	adds	r3, #48	; 0x30
 800945c:	9006      	str	r0, [sp, #24]
 800945e:	4649      	mov	r1, r9
 8009460:	4628      	mov	r0, r5
 8009462:	930a      	str	r3, [sp, #40]	; 0x28
 8009464:	f000 fb76 	bl	8009b54 <__mcmp>
 8009468:	463a      	mov	r2, r7
 800946a:	4682      	mov	sl, r0
 800946c:	4621      	mov	r1, r4
 800946e:	4630      	mov	r0, r6
 8009470:	f000 fb8c 	bl	8009b8c <__mdiff>
 8009474:	68c2      	ldr	r2, [r0, #12]
 8009476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009478:	4680      	mov	r8, r0
 800947a:	bb0a      	cbnz	r2, 80094c0 <_dtoa_r+0x9a0>
 800947c:	4601      	mov	r1, r0
 800947e:	4628      	mov	r0, r5
 8009480:	f000 fb68 	bl	8009b54 <__mcmp>
 8009484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009486:	4602      	mov	r2, r0
 8009488:	4641      	mov	r1, r8
 800948a:	4630      	mov	r0, r6
 800948c:	920e      	str	r2, [sp, #56]	; 0x38
 800948e:	930a      	str	r3, [sp, #40]	; 0x28
 8009490:	f000 f922 	bl	80096d8 <_Bfree>
 8009494:	9b07      	ldr	r3, [sp, #28]
 8009496:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009498:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800949c:	ea43 0102 	orr.w	r1, r3, r2
 80094a0:	9b08      	ldr	r3, [sp, #32]
 80094a2:	430b      	orrs	r3, r1
 80094a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a6:	d10d      	bne.n	80094c4 <_dtoa_r+0x9a4>
 80094a8:	2b39      	cmp	r3, #57	; 0x39
 80094aa:	d029      	beq.n	8009500 <_dtoa_r+0x9e0>
 80094ac:	f1ba 0f00 	cmp.w	sl, #0
 80094b0:	dd01      	ble.n	80094b6 <_dtoa_r+0x996>
 80094b2:	9b06      	ldr	r3, [sp, #24]
 80094b4:	3331      	adds	r3, #49	; 0x31
 80094b6:	9a02      	ldr	r2, [sp, #8]
 80094b8:	7013      	strb	r3, [r2, #0]
 80094ba:	e774      	b.n	80093a6 <_dtoa_r+0x886>
 80094bc:	4638      	mov	r0, r7
 80094be:	e7b8      	b.n	8009432 <_dtoa_r+0x912>
 80094c0:	2201      	movs	r2, #1
 80094c2:	e7e1      	b.n	8009488 <_dtoa_r+0x968>
 80094c4:	f1ba 0f00 	cmp.w	sl, #0
 80094c8:	db06      	blt.n	80094d8 <_dtoa_r+0x9b8>
 80094ca:	9907      	ldr	r1, [sp, #28]
 80094cc:	ea41 0a0a 	orr.w	sl, r1, sl
 80094d0:	9908      	ldr	r1, [sp, #32]
 80094d2:	ea5a 0101 	orrs.w	r1, sl, r1
 80094d6:	d120      	bne.n	800951a <_dtoa_r+0x9fa>
 80094d8:	2a00      	cmp	r2, #0
 80094da:	ddec      	ble.n	80094b6 <_dtoa_r+0x996>
 80094dc:	4629      	mov	r1, r5
 80094de:	2201      	movs	r2, #1
 80094e0:	4630      	mov	r0, r6
 80094e2:	9305      	str	r3, [sp, #20]
 80094e4:	f000 faca 	bl	8009a7c <__lshift>
 80094e8:	4621      	mov	r1, r4
 80094ea:	4605      	mov	r5, r0
 80094ec:	f000 fb32 	bl	8009b54 <__mcmp>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	9b05      	ldr	r3, [sp, #20]
 80094f4:	dc02      	bgt.n	80094fc <_dtoa_r+0x9dc>
 80094f6:	d1de      	bne.n	80094b6 <_dtoa_r+0x996>
 80094f8:	07da      	lsls	r2, r3, #31
 80094fa:	d5dc      	bpl.n	80094b6 <_dtoa_r+0x996>
 80094fc:	2b39      	cmp	r3, #57	; 0x39
 80094fe:	d1d8      	bne.n	80094b2 <_dtoa_r+0x992>
 8009500:	9a02      	ldr	r2, [sp, #8]
 8009502:	2339      	movs	r3, #57	; 0x39
 8009504:	7013      	strb	r3, [r2, #0]
 8009506:	4643      	mov	r3, r8
 8009508:	4698      	mov	r8, r3
 800950a:	3b01      	subs	r3, #1
 800950c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009510:	2a39      	cmp	r2, #57	; 0x39
 8009512:	d051      	beq.n	80095b8 <_dtoa_r+0xa98>
 8009514:	3201      	adds	r2, #1
 8009516:	701a      	strb	r2, [r3, #0]
 8009518:	e745      	b.n	80093a6 <_dtoa_r+0x886>
 800951a:	2a00      	cmp	r2, #0
 800951c:	dd03      	ble.n	8009526 <_dtoa_r+0xa06>
 800951e:	2b39      	cmp	r3, #57	; 0x39
 8009520:	d0ee      	beq.n	8009500 <_dtoa_r+0x9e0>
 8009522:	3301      	adds	r3, #1
 8009524:	e7c7      	b.n	80094b6 <_dtoa_r+0x996>
 8009526:	9a05      	ldr	r2, [sp, #20]
 8009528:	9909      	ldr	r1, [sp, #36]	; 0x24
 800952a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800952e:	428a      	cmp	r2, r1
 8009530:	d02b      	beq.n	800958a <_dtoa_r+0xa6a>
 8009532:	4629      	mov	r1, r5
 8009534:	2300      	movs	r3, #0
 8009536:	220a      	movs	r2, #10
 8009538:	4630      	mov	r0, r6
 800953a:	f000 f8ef 	bl	800971c <__multadd>
 800953e:	45b9      	cmp	r9, r7
 8009540:	4605      	mov	r5, r0
 8009542:	f04f 0300 	mov.w	r3, #0
 8009546:	f04f 020a 	mov.w	r2, #10
 800954a:	4649      	mov	r1, r9
 800954c:	4630      	mov	r0, r6
 800954e:	d107      	bne.n	8009560 <_dtoa_r+0xa40>
 8009550:	f000 f8e4 	bl	800971c <__multadd>
 8009554:	4681      	mov	r9, r0
 8009556:	4607      	mov	r7, r0
 8009558:	9b05      	ldr	r3, [sp, #20]
 800955a:	3301      	adds	r3, #1
 800955c:	9305      	str	r3, [sp, #20]
 800955e:	e774      	b.n	800944a <_dtoa_r+0x92a>
 8009560:	f000 f8dc 	bl	800971c <__multadd>
 8009564:	4639      	mov	r1, r7
 8009566:	4681      	mov	r9, r0
 8009568:	2300      	movs	r3, #0
 800956a:	220a      	movs	r2, #10
 800956c:	4630      	mov	r0, r6
 800956e:	f000 f8d5 	bl	800971c <__multadd>
 8009572:	4607      	mov	r7, r0
 8009574:	e7f0      	b.n	8009558 <_dtoa_r+0xa38>
 8009576:	f1ba 0f00 	cmp.w	sl, #0
 800957a:	9a00      	ldr	r2, [sp, #0]
 800957c:	bfcc      	ite	gt
 800957e:	46d0      	movgt	r8, sl
 8009580:	f04f 0801 	movle.w	r8, #1
 8009584:	4490      	add	r8, r2
 8009586:	f04f 0900 	mov.w	r9, #0
 800958a:	4629      	mov	r1, r5
 800958c:	2201      	movs	r2, #1
 800958e:	4630      	mov	r0, r6
 8009590:	9302      	str	r3, [sp, #8]
 8009592:	f000 fa73 	bl	8009a7c <__lshift>
 8009596:	4621      	mov	r1, r4
 8009598:	4605      	mov	r5, r0
 800959a:	f000 fadb 	bl	8009b54 <__mcmp>
 800959e:	2800      	cmp	r0, #0
 80095a0:	dcb1      	bgt.n	8009506 <_dtoa_r+0x9e6>
 80095a2:	d102      	bne.n	80095aa <_dtoa_r+0xa8a>
 80095a4:	9b02      	ldr	r3, [sp, #8]
 80095a6:	07db      	lsls	r3, r3, #31
 80095a8:	d4ad      	bmi.n	8009506 <_dtoa_r+0x9e6>
 80095aa:	4643      	mov	r3, r8
 80095ac:	4698      	mov	r8, r3
 80095ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095b2:	2a30      	cmp	r2, #48	; 0x30
 80095b4:	d0fa      	beq.n	80095ac <_dtoa_r+0xa8c>
 80095b6:	e6f6      	b.n	80093a6 <_dtoa_r+0x886>
 80095b8:	9a00      	ldr	r2, [sp, #0]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d1a4      	bne.n	8009508 <_dtoa_r+0x9e8>
 80095be:	f10b 0b01 	add.w	fp, fp, #1
 80095c2:	2331      	movs	r3, #49	; 0x31
 80095c4:	e778      	b.n	80094b8 <_dtoa_r+0x998>
 80095c6:	4b15      	ldr	r3, [pc, #84]	; (800961c <_dtoa_r+0xafc>)
 80095c8:	f7ff bb12 	b.w	8008bf0 <_dtoa_r+0xd0>
 80095cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f47f aaee 	bne.w	8008bb0 <_dtoa_r+0x90>
 80095d4:	4b12      	ldr	r3, [pc, #72]	; (8009620 <_dtoa_r+0xb00>)
 80095d6:	f7ff bb0b 	b.w	8008bf0 <_dtoa_r+0xd0>
 80095da:	f1ba 0f00 	cmp.w	sl, #0
 80095de:	dc03      	bgt.n	80095e8 <_dtoa_r+0xac8>
 80095e0:	9b07      	ldr	r3, [sp, #28]
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	f73f aec7 	bgt.w	8009376 <_dtoa_r+0x856>
 80095e8:	f8dd 8000 	ldr.w	r8, [sp]
 80095ec:	4621      	mov	r1, r4
 80095ee:	4628      	mov	r0, r5
 80095f0:	f7ff fa08 	bl	8008a04 <quorem>
 80095f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80095f8:	f808 3b01 	strb.w	r3, [r8], #1
 80095fc:	9a00      	ldr	r2, [sp, #0]
 80095fe:	eba8 0202 	sub.w	r2, r8, r2
 8009602:	4592      	cmp	sl, r2
 8009604:	ddb7      	ble.n	8009576 <_dtoa_r+0xa56>
 8009606:	4629      	mov	r1, r5
 8009608:	2300      	movs	r3, #0
 800960a:	220a      	movs	r2, #10
 800960c:	4630      	mov	r0, r6
 800960e:	f000 f885 	bl	800971c <__multadd>
 8009612:	4605      	mov	r5, r0
 8009614:	e7ea      	b.n	80095ec <_dtoa_r+0xacc>
 8009616:	bf00      	nop
 8009618:	0800ae8f 	.word	0x0800ae8f
 800961c:	0800ade8 	.word	0x0800ade8
 8009620:	0800ae0c 	.word	0x0800ae0c

08009624 <_localeconv_r>:
 8009624:	4800      	ldr	r0, [pc, #0]	; (8009628 <_localeconv_r+0x4>)
 8009626:	4770      	bx	lr
 8009628:	24000164 	.word	0x24000164

0800962c <malloc>:
 800962c:	4b02      	ldr	r3, [pc, #8]	; (8009638 <malloc+0xc>)
 800962e:	4601      	mov	r1, r0
 8009630:	6818      	ldr	r0, [r3, #0]
 8009632:	f000 bbef 	b.w	8009e14 <_malloc_r>
 8009636:	bf00      	nop
 8009638:	24000010 	.word	0x24000010

0800963c <memcpy>:
 800963c:	440a      	add	r2, r1
 800963e:	4291      	cmp	r1, r2
 8009640:	f100 33ff 	add.w	r3, r0, #4294967295
 8009644:	d100      	bne.n	8009648 <memcpy+0xc>
 8009646:	4770      	bx	lr
 8009648:	b510      	push	{r4, lr}
 800964a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800964e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009652:	4291      	cmp	r1, r2
 8009654:	d1f9      	bne.n	800964a <memcpy+0xe>
 8009656:	bd10      	pop	{r4, pc}

08009658 <_Balloc>:
 8009658:	b570      	push	{r4, r5, r6, lr}
 800965a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800965c:	4604      	mov	r4, r0
 800965e:	460d      	mov	r5, r1
 8009660:	b976      	cbnz	r6, 8009680 <_Balloc+0x28>
 8009662:	2010      	movs	r0, #16
 8009664:	f7ff ffe2 	bl	800962c <malloc>
 8009668:	4602      	mov	r2, r0
 800966a:	6260      	str	r0, [r4, #36]	; 0x24
 800966c:	b920      	cbnz	r0, 8009678 <_Balloc+0x20>
 800966e:	4b18      	ldr	r3, [pc, #96]	; (80096d0 <_Balloc+0x78>)
 8009670:	4818      	ldr	r0, [pc, #96]	; (80096d4 <_Balloc+0x7c>)
 8009672:	2166      	movs	r1, #102	; 0x66
 8009674:	f000 fd94 	bl	800a1a0 <__assert_func>
 8009678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800967c:	6006      	str	r6, [r0, #0]
 800967e:	60c6      	str	r6, [r0, #12]
 8009680:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009682:	68f3      	ldr	r3, [r6, #12]
 8009684:	b183      	cbz	r3, 80096a8 <_Balloc+0x50>
 8009686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800968e:	b9b8      	cbnz	r0, 80096c0 <_Balloc+0x68>
 8009690:	2101      	movs	r1, #1
 8009692:	fa01 f605 	lsl.w	r6, r1, r5
 8009696:	1d72      	adds	r2, r6, #5
 8009698:	0092      	lsls	r2, r2, #2
 800969a:	4620      	mov	r0, r4
 800969c:	f000 fb5a 	bl	8009d54 <_calloc_r>
 80096a0:	b160      	cbz	r0, 80096bc <_Balloc+0x64>
 80096a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096a6:	e00e      	b.n	80096c6 <_Balloc+0x6e>
 80096a8:	2221      	movs	r2, #33	; 0x21
 80096aa:	2104      	movs	r1, #4
 80096ac:	4620      	mov	r0, r4
 80096ae:	f000 fb51 	bl	8009d54 <_calloc_r>
 80096b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096b4:	60f0      	str	r0, [r6, #12]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1e4      	bne.n	8009686 <_Balloc+0x2e>
 80096bc:	2000      	movs	r0, #0
 80096be:	bd70      	pop	{r4, r5, r6, pc}
 80096c0:	6802      	ldr	r2, [r0, #0]
 80096c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096c6:	2300      	movs	r3, #0
 80096c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096cc:	e7f7      	b.n	80096be <_Balloc+0x66>
 80096ce:	bf00      	nop
 80096d0:	0800ae19 	.word	0x0800ae19
 80096d4:	0800aea0 	.word	0x0800aea0

080096d8 <_Bfree>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096dc:	4605      	mov	r5, r0
 80096de:	460c      	mov	r4, r1
 80096e0:	b976      	cbnz	r6, 8009700 <_Bfree+0x28>
 80096e2:	2010      	movs	r0, #16
 80096e4:	f7ff ffa2 	bl	800962c <malloc>
 80096e8:	4602      	mov	r2, r0
 80096ea:	6268      	str	r0, [r5, #36]	; 0x24
 80096ec:	b920      	cbnz	r0, 80096f8 <_Bfree+0x20>
 80096ee:	4b09      	ldr	r3, [pc, #36]	; (8009714 <_Bfree+0x3c>)
 80096f0:	4809      	ldr	r0, [pc, #36]	; (8009718 <_Bfree+0x40>)
 80096f2:	218a      	movs	r1, #138	; 0x8a
 80096f4:	f000 fd54 	bl	800a1a0 <__assert_func>
 80096f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096fc:	6006      	str	r6, [r0, #0]
 80096fe:	60c6      	str	r6, [r0, #12]
 8009700:	b13c      	cbz	r4, 8009712 <_Bfree+0x3a>
 8009702:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009704:	6862      	ldr	r2, [r4, #4]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800970c:	6021      	str	r1, [r4, #0]
 800970e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009712:	bd70      	pop	{r4, r5, r6, pc}
 8009714:	0800ae19 	.word	0x0800ae19
 8009718:	0800aea0 	.word	0x0800aea0

0800971c <__multadd>:
 800971c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009720:	690e      	ldr	r6, [r1, #16]
 8009722:	4607      	mov	r7, r0
 8009724:	4698      	mov	r8, r3
 8009726:	460c      	mov	r4, r1
 8009728:	f101 0014 	add.w	r0, r1, #20
 800972c:	2300      	movs	r3, #0
 800972e:	6805      	ldr	r5, [r0, #0]
 8009730:	b2a9      	uxth	r1, r5
 8009732:	fb02 8101 	mla	r1, r2, r1, r8
 8009736:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800973a:	0c2d      	lsrs	r5, r5, #16
 800973c:	fb02 c505 	mla	r5, r2, r5, ip
 8009740:	b289      	uxth	r1, r1
 8009742:	3301      	adds	r3, #1
 8009744:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009748:	429e      	cmp	r6, r3
 800974a:	f840 1b04 	str.w	r1, [r0], #4
 800974e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009752:	dcec      	bgt.n	800972e <__multadd+0x12>
 8009754:	f1b8 0f00 	cmp.w	r8, #0
 8009758:	d022      	beq.n	80097a0 <__multadd+0x84>
 800975a:	68a3      	ldr	r3, [r4, #8]
 800975c:	42b3      	cmp	r3, r6
 800975e:	dc19      	bgt.n	8009794 <__multadd+0x78>
 8009760:	6861      	ldr	r1, [r4, #4]
 8009762:	4638      	mov	r0, r7
 8009764:	3101      	adds	r1, #1
 8009766:	f7ff ff77 	bl	8009658 <_Balloc>
 800976a:	4605      	mov	r5, r0
 800976c:	b928      	cbnz	r0, 800977a <__multadd+0x5e>
 800976e:	4602      	mov	r2, r0
 8009770:	4b0d      	ldr	r3, [pc, #52]	; (80097a8 <__multadd+0x8c>)
 8009772:	480e      	ldr	r0, [pc, #56]	; (80097ac <__multadd+0x90>)
 8009774:	21b5      	movs	r1, #181	; 0xb5
 8009776:	f000 fd13 	bl	800a1a0 <__assert_func>
 800977a:	6922      	ldr	r2, [r4, #16]
 800977c:	3202      	adds	r2, #2
 800977e:	f104 010c 	add.w	r1, r4, #12
 8009782:	0092      	lsls	r2, r2, #2
 8009784:	300c      	adds	r0, #12
 8009786:	f7ff ff59 	bl	800963c <memcpy>
 800978a:	4621      	mov	r1, r4
 800978c:	4638      	mov	r0, r7
 800978e:	f7ff ffa3 	bl	80096d8 <_Bfree>
 8009792:	462c      	mov	r4, r5
 8009794:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009798:	3601      	adds	r6, #1
 800979a:	f8c3 8014 	str.w	r8, [r3, #20]
 800979e:	6126      	str	r6, [r4, #16]
 80097a0:	4620      	mov	r0, r4
 80097a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097a6:	bf00      	nop
 80097a8:	0800ae8f 	.word	0x0800ae8f
 80097ac:	0800aea0 	.word	0x0800aea0

080097b0 <__hi0bits>:
 80097b0:	0c03      	lsrs	r3, r0, #16
 80097b2:	041b      	lsls	r3, r3, #16
 80097b4:	b9d3      	cbnz	r3, 80097ec <__hi0bits+0x3c>
 80097b6:	0400      	lsls	r0, r0, #16
 80097b8:	2310      	movs	r3, #16
 80097ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097be:	bf04      	itt	eq
 80097c0:	0200      	lsleq	r0, r0, #8
 80097c2:	3308      	addeq	r3, #8
 80097c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097c8:	bf04      	itt	eq
 80097ca:	0100      	lsleq	r0, r0, #4
 80097cc:	3304      	addeq	r3, #4
 80097ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097d2:	bf04      	itt	eq
 80097d4:	0080      	lsleq	r0, r0, #2
 80097d6:	3302      	addeq	r3, #2
 80097d8:	2800      	cmp	r0, #0
 80097da:	db05      	blt.n	80097e8 <__hi0bits+0x38>
 80097dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097e0:	f103 0301 	add.w	r3, r3, #1
 80097e4:	bf08      	it	eq
 80097e6:	2320      	moveq	r3, #32
 80097e8:	4618      	mov	r0, r3
 80097ea:	4770      	bx	lr
 80097ec:	2300      	movs	r3, #0
 80097ee:	e7e4      	b.n	80097ba <__hi0bits+0xa>

080097f0 <__lo0bits>:
 80097f0:	6803      	ldr	r3, [r0, #0]
 80097f2:	f013 0207 	ands.w	r2, r3, #7
 80097f6:	4601      	mov	r1, r0
 80097f8:	d00b      	beq.n	8009812 <__lo0bits+0x22>
 80097fa:	07da      	lsls	r2, r3, #31
 80097fc:	d424      	bmi.n	8009848 <__lo0bits+0x58>
 80097fe:	0798      	lsls	r0, r3, #30
 8009800:	bf49      	itett	mi
 8009802:	085b      	lsrmi	r3, r3, #1
 8009804:	089b      	lsrpl	r3, r3, #2
 8009806:	2001      	movmi	r0, #1
 8009808:	600b      	strmi	r3, [r1, #0]
 800980a:	bf5c      	itt	pl
 800980c:	600b      	strpl	r3, [r1, #0]
 800980e:	2002      	movpl	r0, #2
 8009810:	4770      	bx	lr
 8009812:	b298      	uxth	r0, r3
 8009814:	b9b0      	cbnz	r0, 8009844 <__lo0bits+0x54>
 8009816:	0c1b      	lsrs	r3, r3, #16
 8009818:	2010      	movs	r0, #16
 800981a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800981e:	bf04      	itt	eq
 8009820:	0a1b      	lsreq	r3, r3, #8
 8009822:	3008      	addeq	r0, #8
 8009824:	071a      	lsls	r2, r3, #28
 8009826:	bf04      	itt	eq
 8009828:	091b      	lsreq	r3, r3, #4
 800982a:	3004      	addeq	r0, #4
 800982c:	079a      	lsls	r2, r3, #30
 800982e:	bf04      	itt	eq
 8009830:	089b      	lsreq	r3, r3, #2
 8009832:	3002      	addeq	r0, #2
 8009834:	07da      	lsls	r2, r3, #31
 8009836:	d403      	bmi.n	8009840 <__lo0bits+0x50>
 8009838:	085b      	lsrs	r3, r3, #1
 800983a:	f100 0001 	add.w	r0, r0, #1
 800983e:	d005      	beq.n	800984c <__lo0bits+0x5c>
 8009840:	600b      	str	r3, [r1, #0]
 8009842:	4770      	bx	lr
 8009844:	4610      	mov	r0, r2
 8009846:	e7e8      	b.n	800981a <__lo0bits+0x2a>
 8009848:	2000      	movs	r0, #0
 800984a:	4770      	bx	lr
 800984c:	2020      	movs	r0, #32
 800984e:	4770      	bx	lr

08009850 <__i2b>:
 8009850:	b510      	push	{r4, lr}
 8009852:	460c      	mov	r4, r1
 8009854:	2101      	movs	r1, #1
 8009856:	f7ff feff 	bl	8009658 <_Balloc>
 800985a:	4602      	mov	r2, r0
 800985c:	b928      	cbnz	r0, 800986a <__i2b+0x1a>
 800985e:	4b05      	ldr	r3, [pc, #20]	; (8009874 <__i2b+0x24>)
 8009860:	4805      	ldr	r0, [pc, #20]	; (8009878 <__i2b+0x28>)
 8009862:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009866:	f000 fc9b 	bl	800a1a0 <__assert_func>
 800986a:	2301      	movs	r3, #1
 800986c:	6144      	str	r4, [r0, #20]
 800986e:	6103      	str	r3, [r0, #16]
 8009870:	bd10      	pop	{r4, pc}
 8009872:	bf00      	nop
 8009874:	0800ae8f 	.word	0x0800ae8f
 8009878:	0800aea0 	.word	0x0800aea0

0800987c <__multiply>:
 800987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009880:	4614      	mov	r4, r2
 8009882:	690a      	ldr	r2, [r1, #16]
 8009884:	6923      	ldr	r3, [r4, #16]
 8009886:	429a      	cmp	r2, r3
 8009888:	bfb8      	it	lt
 800988a:	460b      	movlt	r3, r1
 800988c:	460d      	mov	r5, r1
 800988e:	bfbc      	itt	lt
 8009890:	4625      	movlt	r5, r4
 8009892:	461c      	movlt	r4, r3
 8009894:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009898:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800989c:	68ab      	ldr	r3, [r5, #8]
 800989e:	6869      	ldr	r1, [r5, #4]
 80098a0:	eb0a 0709 	add.w	r7, sl, r9
 80098a4:	42bb      	cmp	r3, r7
 80098a6:	b085      	sub	sp, #20
 80098a8:	bfb8      	it	lt
 80098aa:	3101      	addlt	r1, #1
 80098ac:	f7ff fed4 	bl	8009658 <_Balloc>
 80098b0:	b930      	cbnz	r0, 80098c0 <__multiply+0x44>
 80098b2:	4602      	mov	r2, r0
 80098b4:	4b42      	ldr	r3, [pc, #264]	; (80099c0 <__multiply+0x144>)
 80098b6:	4843      	ldr	r0, [pc, #268]	; (80099c4 <__multiply+0x148>)
 80098b8:	f240 115d 	movw	r1, #349	; 0x15d
 80098bc:	f000 fc70 	bl	800a1a0 <__assert_func>
 80098c0:	f100 0614 	add.w	r6, r0, #20
 80098c4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80098c8:	4633      	mov	r3, r6
 80098ca:	2200      	movs	r2, #0
 80098cc:	4543      	cmp	r3, r8
 80098ce:	d31e      	bcc.n	800990e <__multiply+0x92>
 80098d0:	f105 0c14 	add.w	ip, r5, #20
 80098d4:	f104 0314 	add.w	r3, r4, #20
 80098d8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80098dc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80098e0:	9202      	str	r2, [sp, #8]
 80098e2:	ebac 0205 	sub.w	r2, ip, r5
 80098e6:	3a15      	subs	r2, #21
 80098e8:	f022 0203 	bic.w	r2, r2, #3
 80098ec:	3204      	adds	r2, #4
 80098ee:	f105 0115 	add.w	r1, r5, #21
 80098f2:	458c      	cmp	ip, r1
 80098f4:	bf38      	it	cc
 80098f6:	2204      	movcc	r2, #4
 80098f8:	9201      	str	r2, [sp, #4]
 80098fa:	9a02      	ldr	r2, [sp, #8]
 80098fc:	9303      	str	r3, [sp, #12]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d808      	bhi.n	8009914 <__multiply+0x98>
 8009902:	2f00      	cmp	r7, #0
 8009904:	dc55      	bgt.n	80099b2 <__multiply+0x136>
 8009906:	6107      	str	r7, [r0, #16]
 8009908:	b005      	add	sp, #20
 800990a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990e:	f843 2b04 	str.w	r2, [r3], #4
 8009912:	e7db      	b.n	80098cc <__multiply+0x50>
 8009914:	f8b3 a000 	ldrh.w	sl, [r3]
 8009918:	f1ba 0f00 	cmp.w	sl, #0
 800991c:	d020      	beq.n	8009960 <__multiply+0xe4>
 800991e:	f105 0e14 	add.w	lr, r5, #20
 8009922:	46b1      	mov	r9, r6
 8009924:	2200      	movs	r2, #0
 8009926:	f85e 4b04 	ldr.w	r4, [lr], #4
 800992a:	f8d9 b000 	ldr.w	fp, [r9]
 800992e:	b2a1      	uxth	r1, r4
 8009930:	fa1f fb8b 	uxth.w	fp, fp
 8009934:	fb0a b101 	mla	r1, sl, r1, fp
 8009938:	4411      	add	r1, r2
 800993a:	f8d9 2000 	ldr.w	r2, [r9]
 800993e:	0c24      	lsrs	r4, r4, #16
 8009940:	0c12      	lsrs	r2, r2, #16
 8009942:	fb0a 2404 	mla	r4, sl, r4, r2
 8009946:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800994a:	b289      	uxth	r1, r1
 800994c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009950:	45f4      	cmp	ip, lr
 8009952:	f849 1b04 	str.w	r1, [r9], #4
 8009956:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800995a:	d8e4      	bhi.n	8009926 <__multiply+0xaa>
 800995c:	9901      	ldr	r1, [sp, #4]
 800995e:	5072      	str	r2, [r6, r1]
 8009960:	9a03      	ldr	r2, [sp, #12]
 8009962:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009966:	3304      	adds	r3, #4
 8009968:	f1b9 0f00 	cmp.w	r9, #0
 800996c:	d01f      	beq.n	80099ae <__multiply+0x132>
 800996e:	6834      	ldr	r4, [r6, #0]
 8009970:	f105 0114 	add.w	r1, r5, #20
 8009974:	46b6      	mov	lr, r6
 8009976:	f04f 0a00 	mov.w	sl, #0
 800997a:	880a      	ldrh	r2, [r1, #0]
 800997c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009980:	fb09 b202 	mla	r2, r9, r2, fp
 8009984:	4492      	add	sl, r2
 8009986:	b2a4      	uxth	r4, r4
 8009988:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800998c:	f84e 4b04 	str.w	r4, [lr], #4
 8009990:	f851 4b04 	ldr.w	r4, [r1], #4
 8009994:	f8be 2000 	ldrh.w	r2, [lr]
 8009998:	0c24      	lsrs	r4, r4, #16
 800999a:	fb09 2404 	mla	r4, r9, r4, r2
 800999e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80099a2:	458c      	cmp	ip, r1
 80099a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80099a8:	d8e7      	bhi.n	800997a <__multiply+0xfe>
 80099aa:	9a01      	ldr	r2, [sp, #4]
 80099ac:	50b4      	str	r4, [r6, r2]
 80099ae:	3604      	adds	r6, #4
 80099b0:	e7a3      	b.n	80098fa <__multiply+0x7e>
 80099b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1a5      	bne.n	8009906 <__multiply+0x8a>
 80099ba:	3f01      	subs	r7, #1
 80099bc:	e7a1      	b.n	8009902 <__multiply+0x86>
 80099be:	bf00      	nop
 80099c0:	0800ae8f 	.word	0x0800ae8f
 80099c4:	0800aea0 	.word	0x0800aea0

080099c8 <__pow5mult>:
 80099c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099cc:	4615      	mov	r5, r2
 80099ce:	f012 0203 	ands.w	r2, r2, #3
 80099d2:	4606      	mov	r6, r0
 80099d4:	460f      	mov	r7, r1
 80099d6:	d007      	beq.n	80099e8 <__pow5mult+0x20>
 80099d8:	4c25      	ldr	r4, [pc, #148]	; (8009a70 <__pow5mult+0xa8>)
 80099da:	3a01      	subs	r2, #1
 80099dc:	2300      	movs	r3, #0
 80099de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099e2:	f7ff fe9b 	bl	800971c <__multadd>
 80099e6:	4607      	mov	r7, r0
 80099e8:	10ad      	asrs	r5, r5, #2
 80099ea:	d03d      	beq.n	8009a68 <__pow5mult+0xa0>
 80099ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099ee:	b97c      	cbnz	r4, 8009a10 <__pow5mult+0x48>
 80099f0:	2010      	movs	r0, #16
 80099f2:	f7ff fe1b 	bl	800962c <malloc>
 80099f6:	4602      	mov	r2, r0
 80099f8:	6270      	str	r0, [r6, #36]	; 0x24
 80099fa:	b928      	cbnz	r0, 8009a08 <__pow5mult+0x40>
 80099fc:	4b1d      	ldr	r3, [pc, #116]	; (8009a74 <__pow5mult+0xac>)
 80099fe:	481e      	ldr	r0, [pc, #120]	; (8009a78 <__pow5mult+0xb0>)
 8009a00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a04:	f000 fbcc 	bl	800a1a0 <__assert_func>
 8009a08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a0c:	6004      	str	r4, [r0, #0]
 8009a0e:	60c4      	str	r4, [r0, #12]
 8009a10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a18:	b94c      	cbnz	r4, 8009a2e <__pow5mult+0x66>
 8009a1a:	f240 2171 	movw	r1, #625	; 0x271
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f7ff ff16 	bl	8009850 <__i2b>
 8009a24:	2300      	movs	r3, #0
 8009a26:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	6003      	str	r3, [r0, #0]
 8009a2e:	f04f 0900 	mov.w	r9, #0
 8009a32:	07eb      	lsls	r3, r5, #31
 8009a34:	d50a      	bpl.n	8009a4c <__pow5mult+0x84>
 8009a36:	4639      	mov	r1, r7
 8009a38:	4622      	mov	r2, r4
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f7ff ff1e 	bl	800987c <__multiply>
 8009a40:	4639      	mov	r1, r7
 8009a42:	4680      	mov	r8, r0
 8009a44:	4630      	mov	r0, r6
 8009a46:	f7ff fe47 	bl	80096d8 <_Bfree>
 8009a4a:	4647      	mov	r7, r8
 8009a4c:	106d      	asrs	r5, r5, #1
 8009a4e:	d00b      	beq.n	8009a68 <__pow5mult+0xa0>
 8009a50:	6820      	ldr	r0, [r4, #0]
 8009a52:	b938      	cbnz	r0, 8009a64 <__pow5mult+0x9c>
 8009a54:	4622      	mov	r2, r4
 8009a56:	4621      	mov	r1, r4
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f7ff ff0f 	bl	800987c <__multiply>
 8009a5e:	6020      	str	r0, [r4, #0]
 8009a60:	f8c0 9000 	str.w	r9, [r0]
 8009a64:	4604      	mov	r4, r0
 8009a66:	e7e4      	b.n	8009a32 <__pow5mult+0x6a>
 8009a68:	4638      	mov	r0, r7
 8009a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a6e:	bf00      	nop
 8009a70:	0800aff0 	.word	0x0800aff0
 8009a74:	0800ae19 	.word	0x0800ae19
 8009a78:	0800aea0 	.word	0x0800aea0

08009a7c <__lshift>:
 8009a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a80:	460c      	mov	r4, r1
 8009a82:	6849      	ldr	r1, [r1, #4]
 8009a84:	6923      	ldr	r3, [r4, #16]
 8009a86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a8a:	68a3      	ldr	r3, [r4, #8]
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	4691      	mov	r9, r2
 8009a90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a94:	f108 0601 	add.w	r6, r8, #1
 8009a98:	42b3      	cmp	r3, r6
 8009a9a:	db0b      	blt.n	8009ab4 <__lshift+0x38>
 8009a9c:	4638      	mov	r0, r7
 8009a9e:	f7ff fddb 	bl	8009658 <_Balloc>
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	b948      	cbnz	r0, 8009aba <__lshift+0x3e>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	4b28      	ldr	r3, [pc, #160]	; (8009b4c <__lshift+0xd0>)
 8009aaa:	4829      	ldr	r0, [pc, #164]	; (8009b50 <__lshift+0xd4>)
 8009aac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ab0:	f000 fb76 	bl	800a1a0 <__assert_func>
 8009ab4:	3101      	adds	r1, #1
 8009ab6:	005b      	lsls	r3, r3, #1
 8009ab8:	e7ee      	b.n	8009a98 <__lshift+0x1c>
 8009aba:	2300      	movs	r3, #0
 8009abc:	f100 0114 	add.w	r1, r0, #20
 8009ac0:	f100 0210 	add.w	r2, r0, #16
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	4553      	cmp	r3, sl
 8009ac8:	db33      	blt.n	8009b32 <__lshift+0xb6>
 8009aca:	6920      	ldr	r0, [r4, #16]
 8009acc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ad0:	f104 0314 	add.w	r3, r4, #20
 8009ad4:	f019 091f 	ands.w	r9, r9, #31
 8009ad8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009adc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ae0:	d02b      	beq.n	8009b3a <__lshift+0xbe>
 8009ae2:	f1c9 0e20 	rsb	lr, r9, #32
 8009ae6:	468a      	mov	sl, r1
 8009ae8:	2200      	movs	r2, #0
 8009aea:	6818      	ldr	r0, [r3, #0]
 8009aec:	fa00 f009 	lsl.w	r0, r0, r9
 8009af0:	4302      	orrs	r2, r0
 8009af2:	f84a 2b04 	str.w	r2, [sl], #4
 8009af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009afa:	459c      	cmp	ip, r3
 8009afc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b00:	d8f3      	bhi.n	8009aea <__lshift+0x6e>
 8009b02:	ebac 0304 	sub.w	r3, ip, r4
 8009b06:	3b15      	subs	r3, #21
 8009b08:	f023 0303 	bic.w	r3, r3, #3
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	f104 0015 	add.w	r0, r4, #21
 8009b12:	4584      	cmp	ip, r0
 8009b14:	bf38      	it	cc
 8009b16:	2304      	movcc	r3, #4
 8009b18:	50ca      	str	r2, [r1, r3]
 8009b1a:	b10a      	cbz	r2, 8009b20 <__lshift+0xa4>
 8009b1c:	f108 0602 	add.w	r6, r8, #2
 8009b20:	3e01      	subs	r6, #1
 8009b22:	4638      	mov	r0, r7
 8009b24:	612e      	str	r6, [r5, #16]
 8009b26:	4621      	mov	r1, r4
 8009b28:	f7ff fdd6 	bl	80096d8 <_Bfree>
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b32:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b36:	3301      	adds	r3, #1
 8009b38:	e7c5      	b.n	8009ac6 <__lshift+0x4a>
 8009b3a:	3904      	subs	r1, #4
 8009b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b40:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b44:	459c      	cmp	ip, r3
 8009b46:	d8f9      	bhi.n	8009b3c <__lshift+0xc0>
 8009b48:	e7ea      	b.n	8009b20 <__lshift+0xa4>
 8009b4a:	bf00      	nop
 8009b4c:	0800ae8f 	.word	0x0800ae8f
 8009b50:	0800aea0 	.word	0x0800aea0

08009b54 <__mcmp>:
 8009b54:	b530      	push	{r4, r5, lr}
 8009b56:	6902      	ldr	r2, [r0, #16]
 8009b58:	690c      	ldr	r4, [r1, #16]
 8009b5a:	1b12      	subs	r2, r2, r4
 8009b5c:	d10e      	bne.n	8009b7c <__mcmp+0x28>
 8009b5e:	f100 0314 	add.w	r3, r0, #20
 8009b62:	3114      	adds	r1, #20
 8009b64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b74:	42a5      	cmp	r5, r4
 8009b76:	d003      	beq.n	8009b80 <__mcmp+0x2c>
 8009b78:	d305      	bcc.n	8009b86 <__mcmp+0x32>
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	4610      	mov	r0, r2
 8009b7e:	bd30      	pop	{r4, r5, pc}
 8009b80:	4283      	cmp	r3, r0
 8009b82:	d3f3      	bcc.n	8009b6c <__mcmp+0x18>
 8009b84:	e7fa      	b.n	8009b7c <__mcmp+0x28>
 8009b86:	f04f 32ff 	mov.w	r2, #4294967295
 8009b8a:	e7f7      	b.n	8009b7c <__mcmp+0x28>

08009b8c <__mdiff>:
 8009b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b90:	460c      	mov	r4, r1
 8009b92:	4606      	mov	r6, r0
 8009b94:	4611      	mov	r1, r2
 8009b96:	4620      	mov	r0, r4
 8009b98:	4617      	mov	r7, r2
 8009b9a:	f7ff ffdb 	bl	8009b54 <__mcmp>
 8009b9e:	1e05      	subs	r5, r0, #0
 8009ba0:	d110      	bne.n	8009bc4 <__mdiff+0x38>
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f7ff fd57 	bl	8009658 <_Balloc>
 8009baa:	b930      	cbnz	r0, 8009bba <__mdiff+0x2e>
 8009bac:	4b39      	ldr	r3, [pc, #228]	; (8009c94 <__mdiff+0x108>)
 8009bae:	4602      	mov	r2, r0
 8009bb0:	f240 2132 	movw	r1, #562	; 0x232
 8009bb4:	4838      	ldr	r0, [pc, #224]	; (8009c98 <__mdiff+0x10c>)
 8009bb6:	f000 faf3 	bl	800a1a0 <__assert_func>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc4:	bfa4      	itt	ge
 8009bc6:	463b      	movge	r3, r7
 8009bc8:	4627      	movge	r7, r4
 8009bca:	4630      	mov	r0, r6
 8009bcc:	6879      	ldr	r1, [r7, #4]
 8009bce:	bfa6      	itte	ge
 8009bd0:	461c      	movge	r4, r3
 8009bd2:	2500      	movge	r5, #0
 8009bd4:	2501      	movlt	r5, #1
 8009bd6:	f7ff fd3f 	bl	8009658 <_Balloc>
 8009bda:	b920      	cbnz	r0, 8009be6 <__mdiff+0x5a>
 8009bdc:	4b2d      	ldr	r3, [pc, #180]	; (8009c94 <__mdiff+0x108>)
 8009bde:	4602      	mov	r2, r0
 8009be0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009be4:	e7e6      	b.n	8009bb4 <__mdiff+0x28>
 8009be6:	693e      	ldr	r6, [r7, #16]
 8009be8:	60c5      	str	r5, [r0, #12]
 8009bea:	6925      	ldr	r5, [r4, #16]
 8009bec:	f107 0114 	add.w	r1, r7, #20
 8009bf0:	f104 0914 	add.w	r9, r4, #20
 8009bf4:	f100 0e14 	add.w	lr, r0, #20
 8009bf8:	f107 0210 	add.w	r2, r7, #16
 8009bfc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009c00:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009c04:	46f2      	mov	sl, lr
 8009c06:	2700      	movs	r7, #0
 8009c08:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c10:	fa1f f883 	uxth.w	r8, r3
 8009c14:	fa17 f78b 	uxtah	r7, r7, fp
 8009c18:	0c1b      	lsrs	r3, r3, #16
 8009c1a:	eba7 0808 	sub.w	r8, r7, r8
 8009c1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c26:	fa1f f888 	uxth.w	r8, r8
 8009c2a:	141f      	asrs	r7, r3, #16
 8009c2c:	454d      	cmp	r5, r9
 8009c2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c32:	f84a 3b04 	str.w	r3, [sl], #4
 8009c36:	d8e7      	bhi.n	8009c08 <__mdiff+0x7c>
 8009c38:	1b2b      	subs	r3, r5, r4
 8009c3a:	3b15      	subs	r3, #21
 8009c3c:	f023 0303 	bic.w	r3, r3, #3
 8009c40:	3304      	adds	r3, #4
 8009c42:	3415      	adds	r4, #21
 8009c44:	42a5      	cmp	r5, r4
 8009c46:	bf38      	it	cc
 8009c48:	2304      	movcc	r3, #4
 8009c4a:	4419      	add	r1, r3
 8009c4c:	4473      	add	r3, lr
 8009c4e:	469e      	mov	lr, r3
 8009c50:	460d      	mov	r5, r1
 8009c52:	4565      	cmp	r5, ip
 8009c54:	d30e      	bcc.n	8009c74 <__mdiff+0xe8>
 8009c56:	f10c 0203 	add.w	r2, ip, #3
 8009c5a:	1a52      	subs	r2, r2, r1
 8009c5c:	f022 0203 	bic.w	r2, r2, #3
 8009c60:	3903      	subs	r1, #3
 8009c62:	458c      	cmp	ip, r1
 8009c64:	bf38      	it	cc
 8009c66:	2200      	movcc	r2, #0
 8009c68:	441a      	add	r2, r3
 8009c6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c6e:	b17b      	cbz	r3, 8009c90 <__mdiff+0x104>
 8009c70:	6106      	str	r6, [r0, #16]
 8009c72:	e7a5      	b.n	8009bc0 <__mdiff+0x34>
 8009c74:	f855 8b04 	ldr.w	r8, [r5], #4
 8009c78:	fa17 f488 	uxtah	r4, r7, r8
 8009c7c:	1422      	asrs	r2, r4, #16
 8009c7e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009c82:	b2a4      	uxth	r4, r4
 8009c84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009c88:	f84e 4b04 	str.w	r4, [lr], #4
 8009c8c:	1417      	asrs	r7, r2, #16
 8009c8e:	e7e0      	b.n	8009c52 <__mdiff+0xc6>
 8009c90:	3e01      	subs	r6, #1
 8009c92:	e7ea      	b.n	8009c6a <__mdiff+0xde>
 8009c94:	0800ae8f 	.word	0x0800ae8f
 8009c98:	0800aea0 	.word	0x0800aea0

08009c9c <__d2b>:
 8009c9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ca0:	4689      	mov	r9, r1
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	ec57 6b10 	vmov	r6, r7, d0
 8009ca8:	4690      	mov	r8, r2
 8009caa:	f7ff fcd5 	bl	8009658 <_Balloc>
 8009cae:	4604      	mov	r4, r0
 8009cb0:	b930      	cbnz	r0, 8009cc0 <__d2b+0x24>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	4b25      	ldr	r3, [pc, #148]	; (8009d4c <__d2b+0xb0>)
 8009cb6:	4826      	ldr	r0, [pc, #152]	; (8009d50 <__d2b+0xb4>)
 8009cb8:	f240 310a 	movw	r1, #778	; 0x30a
 8009cbc:	f000 fa70 	bl	800a1a0 <__assert_func>
 8009cc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009cc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009cc8:	bb35      	cbnz	r5, 8009d18 <__d2b+0x7c>
 8009cca:	2e00      	cmp	r6, #0
 8009ccc:	9301      	str	r3, [sp, #4]
 8009cce:	d028      	beq.n	8009d22 <__d2b+0x86>
 8009cd0:	4668      	mov	r0, sp
 8009cd2:	9600      	str	r6, [sp, #0]
 8009cd4:	f7ff fd8c 	bl	80097f0 <__lo0bits>
 8009cd8:	9900      	ldr	r1, [sp, #0]
 8009cda:	b300      	cbz	r0, 8009d1e <__d2b+0x82>
 8009cdc:	9a01      	ldr	r2, [sp, #4]
 8009cde:	f1c0 0320 	rsb	r3, r0, #32
 8009ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce6:	430b      	orrs	r3, r1
 8009ce8:	40c2      	lsrs	r2, r0
 8009cea:	6163      	str	r3, [r4, #20]
 8009cec:	9201      	str	r2, [sp, #4]
 8009cee:	9b01      	ldr	r3, [sp, #4]
 8009cf0:	61a3      	str	r3, [r4, #24]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	bf14      	ite	ne
 8009cf6:	2202      	movne	r2, #2
 8009cf8:	2201      	moveq	r2, #1
 8009cfa:	6122      	str	r2, [r4, #16]
 8009cfc:	b1d5      	cbz	r5, 8009d34 <__d2b+0x98>
 8009cfe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d02:	4405      	add	r5, r0
 8009d04:	f8c9 5000 	str.w	r5, [r9]
 8009d08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d0c:	f8c8 0000 	str.w	r0, [r8]
 8009d10:	4620      	mov	r0, r4
 8009d12:	b003      	add	sp, #12
 8009d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d1c:	e7d5      	b.n	8009cca <__d2b+0x2e>
 8009d1e:	6161      	str	r1, [r4, #20]
 8009d20:	e7e5      	b.n	8009cee <__d2b+0x52>
 8009d22:	a801      	add	r0, sp, #4
 8009d24:	f7ff fd64 	bl	80097f0 <__lo0bits>
 8009d28:	9b01      	ldr	r3, [sp, #4]
 8009d2a:	6163      	str	r3, [r4, #20]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	6122      	str	r2, [r4, #16]
 8009d30:	3020      	adds	r0, #32
 8009d32:	e7e3      	b.n	8009cfc <__d2b+0x60>
 8009d34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d3c:	f8c9 0000 	str.w	r0, [r9]
 8009d40:	6918      	ldr	r0, [r3, #16]
 8009d42:	f7ff fd35 	bl	80097b0 <__hi0bits>
 8009d46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d4a:	e7df      	b.n	8009d0c <__d2b+0x70>
 8009d4c:	0800ae8f 	.word	0x0800ae8f
 8009d50:	0800aea0 	.word	0x0800aea0

08009d54 <_calloc_r>:
 8009d54:	b513      	push	{r0, r1, r4, lr}
 8009d56:	434a      	muls	r2, r1
 8009d58:	4611      	mov	r1, r2
 8009d5a:	9201      	str	r2, [sp, #4]
 8009d5c:	f000 f85a 	bl	8009e14 <_malloc_r>
 8009d60:	4604      	mov	r4, r0
 8009d62:	b118      	cbz	r0, 8009d6c <_calloc_r+0x18>
 8009d64:	9a01      	ldr	r2, [sp, #4]
 8009d66:	2100      	movs	r1, #0
 8009d68:	f7fe f9e2 	bl	8008130 <memset>
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	b002      	add	sp, #8
 8009d70:	bd10      	pop	{r4, pc}
	...

08009d74 <_free_r>:
 8009d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d76:	2900      	cmp	r1, #0
 8009d78:	d048      	beq.n	8009e0c <_free_r+0x98>
 8009d7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d7e:	9001      	str	r0, [sp, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f1a1 0404 	sub.w	r4, r1, #4
 8009d86:	bfb8      	it	lt
 8009d88:	18e4      	addlt	r4, r4, r3
 8009d8a:	f000 fa65 	bl	800a258 <__malloc_lock>
 8009d8e:	4a20      	ldr	r2, [pc, #128]	; (8009e10 <_free_r+0x9c>)
 8009d90:	9801      	ldr	r0, [sp, #4]
 8009d92:	6813      	ldr	r3, [r2, #0]
 8009d94:	4615      	mov	r5, r2
 8009d96:	b933      	cbnz	r3, 8009da6 <_free_r+0x32>
 8009d98:	6063      	str	r3, [r4, #4]
 8009d9a:	6014      	str	r4, [r2, #0]
 8009d9c:	b003      	add	sp, #12
 8009d9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009da2:	f000 ba5f 	b.w	800a264 <__malloc_unlock>
 8009da6:	42a3      	cmp	r3, r4
 8009da8:	d90b      	bls.n	8009dc2 <_free_r+0x4e>
 8009daa:	6821      	ldr	r1, [r4, #0]
 8009dac:	1862      	adds	r2, r4, r1
 8009dae:	4293      	cmp	r3, r2
 8009db0:	bf04      	itt	eq
 8009db2:	681a      	ldreq	r2, [r3, #0]
 8009db4:	685b      	ldreq	r3, [r3, #4]
 8009db6:	6063      	str	r3, [r4, #4]
 8009db8:	bf04      	itt	eq
 8009dba:	1852      	addeq	r2, r2, r1
 8009dbc:	6022      	streq	r2, [r4, #0]
 8009dbe:	602c      	str	r4, [r5, #0]
 8009dc0:	e7ec      	b.n	8009d9c <_free_r+0x28>
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	b10b      	cbz	r3, 8009dcc <_free_r+0x58>
 8009dc8:	42a3      	cmp	r3, r4
 8009dca:	d9fa      	bls.n	8009dc2 <_free_r+0x4e>
 8009dcc:	6811      	ldr	r1, [r2, #0]
 8009dce:	1855      	adds	r5, r2, r1
 8009dd0:	42a5      	cmp	r5, r4
 8009dd2:	d10b      	bne.n	8009dec <_free_r+0x78>
 8009dd4:	6824      	ldr	r4, [r4, #0]
 8009dd6:	4421      	add	r1, r4
 8009dd8:	1854      	adds	r4, r2, r1
 8009dda:	42a3      	cmp	r3, r4
 8009ddc:	6011      	str	r1, [r2, #0]
 8009dde:	d1dd      	bne.n	8009d9c <_free_r+0x28>
 8009de0:	681c      	ldr	r4, [r3, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	6053      	str	r3, [r2, #4]
 8009de6:	4421      	add	r1, r4
 8009de8:	6011      	str	r1, [r2, #0]
 8009dea:	e7d7      	b.n	8009d9c <_free_r+0x28>
 8009dec:	d902      	bls.n	8009df4 <_free_r+0x80>
 8009dee:	230c      	movs	r3, #12
 8009df0:	6003      	str	r3, [r0, #0]
 8009df2:	e7d3      	b.n	8009d9c <_free_r+0x28>
 8009df4:	6825      	ldr	r5, [r4, #0]
 8009df6:	1961      	adds	r1, r4, r5
 8009df8:	428b      	cmp	r3, r1
 8009dfa:	bf04      	itt	eq
 8009dfc:	6819      	ldreq	r1, [r3, #0]
 8009dfe:	685b      	ldreq	r3, [r3, #4]
 8009e00:	6063      	str	r3, [r4, #4]
 8009e02:	bf04      	itt	eq
 8009e04:	1949      	addeq	r1, r1, r5
 8009e06:	6021      	streq	r1, [r4, #0]
 8009e08:	6054      	str	r4, [r2, #4]
 8009e0a:	e7c7      	b.n	8009d9c <_free_r+0x28>
 8009e0c:	b003      	add	sp, #12
 8009e0e:	bd30      	pop	{r4, r5, pc}
 8009e10:	24000204 	.word	0x24000204

08009e14 <_malloc_r>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	1ccd      	adds	r5, r1, #3
 8009e18:	f025 0503 	bic.w	r5, r5, #3
 8009e1c:	3508      	adds	r5, #8
 8009e1e:	2d0c      	cmp	r5, #12
 8009e20:	bf38      	it	cc
 8009e22:	250c      	movcc	r5, #12
 8009e24:	2d00      	cmp	r5, #0
 8009e26:	4606      	mov	r6, r0
 8009e28:	db01      	blt.n	8009e2e <_malloc_r+0x1a>
 8009e2a:	42a9      	cmp	r1, r5
 8009e2c:	d903      	bls.n	8009e36 <_malloc_r+0x22>
 8009e2e:	230c      	movs	r3, #12
 8009e30:	6033      	str	r3, [r6, #0]
 8009e32:	2000      	movs	r0, #0
 8009e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e36:	f000 fa0f 	bl	800a258 <__malloc_lock>
 8009e3a:	4921      	ldr	r1, [pc, #132]	; (8009ec0 <_malloc_r+0xac>)
 8009e3c:	680a      	ldr	r2, [r1, #0]
 8009e3e:	4614      	mov	r4, r2
 8009e40:	b99c      	cbnz	r4, 8009e6a <_malloc_r+0x56>
 8009e42:	4f20      	ldr	r7, [pc, #128]	; (8009ec4 <_malloc_r+0xb0>)
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	b923      	cbnz	r3, 8009e52 <_malloc_r+0x3e>
 8009e48:	4621      	mov	r1, r4
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	f000 f998 	bl	800a180 <_sbrk_r>
 8009e50:	6038      	str	r0, [r7, #0]
 8009e52:	4629      	mov	r1, r5
 8009e54:	4630      	mov	r0, r6
 8009e56:	f000 f993 	bl	800a180 <_sbrk_r>
 8009e5a:	1c43      	adds	r3, r0, #1
 8009e5c:	d123      	bne.n	8009ea6 <_malloc_r+0x92>
 8009e5e:	230c      	movs	r3, #12
 8009e60:	6033      	str	r3, [r6, #0]
 8009e62:	4630      	mov	r0, r6
 8009e64:	f000 f9fe 	bl	800a264 <__malloc_unlock>
 8009e68:	e7e3      	b.n	8009e32 <_malloc_r+0x1e>
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	1b5b      	subs	r3, r3, r5
 8009e6e:	d417      	bmi.n	8009ea0 <_malloc_r+0x8c>
 8009e70:	2b0b      	cmp	r3, #11
 8009e72:	d903      	bls.n	8009e7c <_malloc_r+0x68>
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	441c      	add	r4, r3
 8009e78:	6025      	str	r5, [r4, #0]
 8009e7a:	e004      	b.n	8009e86 <_malloc_r+0x72>
 8009e7c:	6863      	ldr	r3, [r4, #4]
 8009e7e:	42a2      	cmp	r2, r4
 8009e80:	bf0c      	ite	eq
 8009e82:	600b      	streq	r3, [r1, #0]
 8009e84:	6053      	strne	r3, [r2, #4]
 8009e86:	4630      	mov	r0, r6
 8009e88:	f000 f9ec 	bl	800a264 <__malloc_unlock>
 8009e8c:	f104 000b 	add.w	r0, r4, #11
 8009e90:	1d23      	adds	r3, r4, #4
 8009e92:	f020 0007 	bic.w	r0, r0, #7
 8009e96:	1ac2      	subs	r2, r0, r3
 8009e98:	d0cc      	beq.n	8009e34 <_malloc_r+0x20>
 8009e9a:	1a1b      	subs	r3, r3, r0
 8009e9c:	50a3      	str	r3, [r4, r2]
 8009e9e:	e7c9      	b.n	8009e34 <_malloc_r+0x20>
 8009ea0:	4622      	mov	r2, r4
 8009ea2:	6864      	ldr	r4, [r4, #4]
 8009ea4:	e7cc      	b.n	8009e40 <_malloc_r+0x2c>
 8009ea6:	1cc4      	adds	r4, r0, #3
 8009ea8:	f024 0403 	bic.w	r4, r4, #3
 8009eac:	42a0      	cmp	r0, r4
 8009eae:	d0e3      	beq.n	8009e78 <_malloc_r+0x64>
 8009eb0:	1a21      	subs	r1, r4, r0
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f000 f964 	bl	800a180 <_sbrk_r>
 8009eb8:	3001      	adds	r0, #1
 8009eba:	d1dd      	bne.n	8009e78 <_malloc_r+0x64>
 8009ebc:	e7cf      	b.n	8009e5e <_malloc_r+0x4a>
 8009ebe:	bf00      	nop
 8009ec0:	24000204 	.word	0x24000204
 8009ec4:	24000208 	.word	0x24000208

08009ec8 <__ssputs_r>:
 8009ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ecc:	688e      	ldr	r6, [r1, #8]
 8009ece:	429e      	cmp	r6, r3
 8009ed0:	4682      	mov	sl, r0
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	4690      	mov	r8, r2
 8009ed6:	461f      	mov	r7, r3
 8009ed8:	d838      	bhi.n	8009f4c <__ssputs_r+0x84>
 8009eda:	898a      	ldrh	r2, [r1, #12]
 8009edc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ee0:	d032      	beq.n	8009f48 <__ssputs_r+0x80>
 8009ee2:	6825      	ldr	r5, [r4, #0]
 8009ee4:	6909      	ldr	r1, [r1, #16]
 8009ee6:	eba5 0901 	sub.w	r9, r5, r1
 8009eea:	6965      	ldr	r5, [r4, #20]
 8009eec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ef0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	444b      	add	r3, r9
 8009ef8:	106d      	asrs	r5, r5, #1
 8009efa:	429d      	cmp	r5, r3
 8009efc:	bf38      	it	cc
 8009efe:	461d      	movcc	r5, r3
 8009f00:	0553      	lsls	r3, r2, #21
 8009f02:	d531      	bpl.n	8009f68 <__ssputs_r+0xa0>
 8009f04:	4629      	mov	r1, r5
 8009f06:	f7ff ff85 	bl	8009e14 <_malloc_r>
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	b950      	cbnz	r0, 8009f24 <__ssputs_r+0x5c>
 8009f0e:	230c      	movs	r3, #12
 8009f10:	f8ca 3000 	str.w	r3, [sl]
 8009f14:	89a3      	ldrh	r3, [r4, #12]
 8009f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f1a:	81a3      	strh	r3, [r4, #12]
 8009f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f24:	6921      	ldr	r1, [r4, #16]
 8009f26:	464a      	mov	r2, r9
 8009f28:	f7ff fb88 	bl	800963c <memcpy>
 8009f2c:	89a3      	ldrh	r3, [r4, #12]
 8009f2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f36:	81a3      	strh	r3, [r4, #12]
 8009f38:	6126      	str	r6, [r4, #16]
 8009f3a:	6165      	str	r5, [r4, #20]
 8009f3c:	444e      	add	r6, r9
 8009f3e:	eba5 0509 	sub.w	r5, r5, r9
 8009f42:	6026      	str	r6, [r4, #0]
 8009f44:	60a5      	str	r5, [r4, #8]
 8009f46:	463e      	mov	r6, r7
 8009f48:	42be      	cmp	r6, r7
 8009f4a:	d900      	bls.n	8009f4e <__ssputs_r+0x86>
 8009f4c:	463e      	mov	r6, r7
 8009f4e:	4632      	mov	r2, r6
 8009f50:	6820      	ldr	r0, [r4, #0]
 8009f52:	4641      	mov	r1, r8
 8009f54:	f000 f966 	bl	800a224 <memmove>
 8009f58:	68a3      	ldr	r3, [r4, #8]
 8009f5a:	6822      	ldr	r2, [r4, #0]
 8009f5c:	1b9b      	subs	r3, r3, r6
 8009f5e:	4432      	add	r2, r6
 8009f60:	60a3      	str	r3, [r4, #8]
 8009f62:	6022      	str	r2, [r4, #0]
 8009f64:	2000      	movs	r0, #0
 8009f66:	e7db      	b.n	8009f20 <__ssputs_r+0x58>
 8009f68:	462a      	mov	r2, r5
 8009f6a:	f000 f981 	bl	800a270 <_realloc_r>
 8009f6e:	4606      	mov	r6, r0
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d1e1      	bne.n	8009f38 <__ssputs_r+0x70>
 8009f74:	6921      	ldr	r1, [r4, #16]
 8009f76:	4650      	mov	r0, sl
 8009f78:	f7ff fefc 	bl	8009d74 <_free_r>
 8009f7c:	e7c7      	b.n	8009f0e <__ssputs_r+0x46>
	...

08009f80 <_svfiprintf_r>:
 8009f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f84:	4698      	mov	r8, r3
 8009f86:	898b      	ldrh	r3, [r1, #12]
 8009f88:	061b      	lsls	r3, r3, #24
 8009f8a:	b09d      	sub	sp, #116	; 0x74
 8009f8c:	4607      	mov	r7, r0
 8009f8e:	460d      	mov	r5, r1
 8009f90:	4614      	mov	r4, r2
 8009f92:	d50e      	bpl.n	8009fb2 <_svfiprintf_r+0x32>
 8009f94:	690b      	ldr	r3, [r1, #16]
 8009f96:	b963      	cbnz	r3, 8009fb2 <_svfiprintf_r+0x32>
 8009f98:	2140      	movs	r1, #64	; 0x40
 8009f9a:	f7ff ff3b 	bl	8009e14 <_malloc_r>
 8009f9e:	6028      	str	r0, [r5, #0]
 8009fa0:	6128      	str	r0, [r5, #16]
 8009fa2:	b920      	cbnz	r0, 8009fae <_svfiprintf_r+0x2e>
 8009fa4:	230c      	movs	r3, #12
 8009fa6:	603b      	str	r3, [r7, #0]
 8009fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fac:	e0d1      	b.n	800a152 <_svfiprintf_r+0x1d2>
 8009fae:	2340      	movs	r3, #64	; 0x40
 8009fb0:	616b      	str	r3, [r5, #20]
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb6:	2320      	movs	r3, #32
 8009fb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fc0:	2330      	movs	r3, #48	; 0x30
 8009fc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a16c <_svfiprintf_r+0x1ec>
 8009fc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fca:	f04f 0901 	mov.w	r9, #1
 8009fce:	4623      	mov	r3, r4
 8009fd0:	469a      	mov	sl, r3
 8009fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fd6:	b10a      	cbz	r2, 8009fdc <_svfiprintf_r+0x5c>
 8009fd8:	2a25      	cmp	r2, #37	; 0x25
 8009fda:	d1f9      	bne.n	8009fd0 <_svfiprintf_r+0x50>
 8009fdc:	ebba 0b04 	subs.w	fp, sl, r4
 8009fe0:	d00b      	beq.n	8009ffa <_svfiprintf_r+0x7a>
 8009fe2:	465b      	mov	r3, fp
 8009fe4:	4622      	mov	r2, r4
 8009fe6:	4629      	mov	r1, r5
 8009fe8:	4638      	mov	r0, r7
 8009fea:	f7ff ff6d 	bl	8009ec8 <__ssputs_r>
 8009fee:	3001      	adds	r0, #1
 8009ff0:	f000 80aa 	beq.w	800a148 <_svfiprintf_r+0x1c8>
 8009ff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ff6:	445a      	add	r2, fp
 8009ff8:	9209      	str	r2, [sp, #36]	; 0x24
 8009ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f000 80a2 	beq.w	800a148 <_svfiprintf_r+0x1c8>
 800a004:	2300      	movs	r3, #0
 800a006:	f04f 32ff 	mov.w	r2, #4294967295
 800a00a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a00e:	f10a 0a01 	add.w	sl, sl, #1
 800a012:	9304      	str	r3, [sp, #16]
 800a014:	9307      	str	r3, [sp, #28]
 800a016:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a01a:	931a      	str	r3, [sp, #104]	; 0x68
 800a01c:	4654      	mov	r4, sl
 800a01e:	2205      	movs	r2, #5
 800a020:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a024:	4851      	ldr	r0, [pc, #324]	; (800a16c <_svfiprintf_r+0x1ec>)
 800a026:	f7f6 f963 	bl	80002f0 <memchr>
 800a02a:	9a04      	ldr	r2, [sp, #16]
 800a02c:	b9d8      	cbnz	r0, 800a066 <_svfiprintf_r+0xe6>
 800a02e:	06d0      	lsls	r0, r2, #27
 800a030:	bf44      	itt	mi
 800a032:	2320      	movmi	r3, #32
 800a034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a038:	0711      	lsls	r1, r2, #28
 800a03a:	bf44      	itt	mi
 800a03c:	232b      	movmi	r3, #43	; 0x2b
 800a03e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a042:	f89a 3000 	ldrb.w	r3, [sl]
 800a046:	2b2a      	cmp	r3, #42	; 0x2a
 800a048:	d015      	beq.n	800a076 <_svfiprintf_r+0xf6>
 800a04a:	9a07      	ldr	r2, [sp, #28]
 800a04c:	4654      	mov	r4, sl
 800a04e:	2000      	movs	r0, #0
 800a050:	f04f 0c0a 	mov.w	ip, #10
 800a054:	4621      	mov	r1, r4
 800a056:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a05a:	3b30      	subs	r3, #48	; 0x30
 800a05c:	2b09      	cmp	r3, #9
 800a05e:	d94e      	bls.n	800a0fe <_svfiprintf_r+0x17e>
 800a060:	b1b0      	cbz	r0, 800a090 <_svfiprintf_r+0x110>
 800a062:	9207      	str	r2, [sp, #28]
 800a064:	e014      	b.n	800a090 <_svfiprintf_r+0x110>
 800a066:	eba0 0308 	sub.w	r3, r0, r8
 800a06a:	fa09 f303 	lsl.w	r3, r9, r3
 800a06e:	4313      	orrs	r3, r2
 800a070:	9304      	str	r3, [sp, #16]
 800a072:	46a2      	mov	sl, r4
 800a074:	e7d2      	b.n	800a01c <_svfiprintf_r+0x9c>
 800a076:	9b03      	ldr	r3, [sp, #12]
 800a078:	1d19      	adds	r1, r3, #4
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	9103      	str	r1, [sp, #12]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	bfbb      	ittet	lt
 800a082:	425b      	neglt	r3, r3
 800a084:	f042 0202 	orrlt.w	r2, r2, #2
 800a088:	9307      	strge	r3, [sp, #28]
 800a08a:	9307      	strlt	r3, [sp, #28]
 800a08c:	bfb8      	it	lt
 800a08e:	9204      	strlt	r2, [sp, #16]
 800a090:	7823      	ldrb	r3, [r4, #0]
 800a092:	2b2e      	cmp	r3, #46	; 0x2e
 800a094:	d10c      	bne.n	800a0b0 <_svfiprintf_r+0x130>
 800a096:	7863      	ldrb	r3, [r4, #1]
 800a098:	2b2a      	cmp	r3, #42	; 0x2a
 800a09a:	d135      	bne.n	800a108 <_svfiprintf_r+0x188>
 800a09c:	9b03      	ldr	r3, [sp, #12]
 800a09e:	1d1a      	adds	r2, r3, #4
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	9203      	str	r2, [sp, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	bfb8      	it	lt
 800a0a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0ac:	3402      	adds	r4, #2
 800a0ae:	9305      	str	r3, [sp, #20]
 800a0b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a17c <_svfiprintf_r+0x1fc>
 800a0b4:	7821      	ldrb	r1, [r4, #0]
 800a0b6:	2203      	movs	r2, #3
 800a0b8:	4650      	mov	r0, sl
 800a0ba:	f7f6 f919 	bl	80002f0 <memchr>
 800a0be:	b140      	cbz	r0, 800a0d2 <_svfiprintf_r+0x152>
 800a0c0:	2340      	movs	r3, #64	; 0x40
 800a0c2:	eba0 000a 	sub.w	r0, r0, sl
 800a0c6:	fa03 f000 	lsl.w	r0, r3, r0
 800a0ca:	9b04      	ldr	r3, [sp, #16]
 800a0cc:	4303      	orrs	r3, r0
 800a0ce:	3401      	adds	r4, #1
 800a0d0:	9304      	str	r3, [sp, #16]
 800a0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d6:	4826      	ldr	r0, [pc, #152]	; (800a170 <_svfiprintf_r+0x1f0>)
 800a0d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0dc:	2206      	movs	r2, #6
 800a0de:	f7f6 f907 	bl	80002f0 <memchr>
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d038      	beq.n	800a158 <_svfiprintf_r+0x1d8>
 800a0e6:	4b23      	ldr	r3, [pc, #140]	; (800a174 <_svfiprintf_r+0x1f4>)
 800a0e8:	bb1b      	cbnz	r3, 800a132 <_svfiprintf_r+0x1b2>
 800a0ea:	9b03      	ldr	r3, [sp, #12]
 800a0ec:	3307      	adds	r3, #7
 800a0ee:	f023 0307 	bic.w	r3, r3, #7
 800a0f2:	3308      	adds	r3, #8
 800a0f4:	9303      	str	r3, [sp, #12]
 800a0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f8:	4433      	add	r3, r6
 800a0fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a0fc:	e767      	b.n	8009fce <_svfiprintf_r+0x4e>
 800a0fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800a102:	460c      	mov	r4, r1
 800a104:	2001      	movs	r0, #1
 800a106:	e7a5      	b.n	800a054 <_svfiprintf_r+0xd4>
 800a108:	2300      	movs	r3, #0
 800a10a:	3401      	adds	r4, #1
 800a10c:	9305      	str	r3, [sp, #20]
 800a10e:	4619      	mov	r1, r3
 800a110:	f04f 0c0a 	mov.w	ip, #10
 800a114:	4620      	mov	r0, r4
 800a116:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a11a:	3a30      	subs	r2, #48	; 0x30
 800a11c:	2a09      	cmp	r2, #9
 800a11e:	d903      	bls.n	800a128 <_svfiprintf_r+0x1a8>
 800a120:	2b00      	cmp	r3, #0
 800a122:	d0c5      	beq.n	800a0b0 <_svfiprintf_r+0x130>
 800a124:	9105      	str	r1, [sp, #20]
 800a126:	e7c3      	b.n	800a0b0 <_svfiprintf_r+0x130>
 800a128:	fb0c 2101 	mla	r1, ip, r1, r2
 800a12c:	4604      	mov	r4, r0
 800a12e:	2301      	movs	r3, #1
 800a130:	e7f0      	b.n	800a114 <_svfiprintf_r+0x194>
 800a132:	ab03      	add	r3, sp, #12
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	462a      	mov	r2, r5
 800a138:	4b0f      	ldr	r3, [pc, #60]	; (800a178 <_svfiprintf_r+0x1f8>)
 800a13a:	a904      	add	r1, sp, #16
 800a13c:	4638      	mov	r0, r7
 800a13e:	f7fe f88f 	bl	8008260 <_printf_float>
 800a142:	1c42      	adds	r2, r0, #1
 800a144:	4606      	mov	r6, r0
 800a146:	d1d6      	bne.n	800a0f6 <_svfiprintf_r+0x176>
 800a148:	89ab      	ldrh	r3, [r5, #12]
 800a14a:	065b      	lsls	r3, r3, #25
 800a14c:	f53f af2c 	bmi.w	8009fa8 <_svfiprintf_r+0x28>
 800a150:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a152:	b01d      	add	sp, #116	; 0x74
 800a154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a158:	ab03      	add	r3, sp, #12
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	462a      	mov	r2, r5
 800a15e:	4b06      	ldr	r3, [pc, #24]	; (800a178 <_svfiprintf_r+0x1f8>)
 800a160:	a904      	add	r1, sp, #16
 800a162:	4638      	mov	r0, r7
 800a164:	f7fe fb08 	bl	8008778 <_printf_i>
 800a168:	e7eb      	b.n	800a142 <_svfiprintf_r+0x1c2>
 800a16a:	bf00      	nop
 800a16c:	0800affc 	.word	0x0800affc
 800a170:	0800b006 	.word	0x0800b006
 800a174:	08008261 	.word	0x08008261
 800a178:	08009ec9 	.word	0x08009ec9
 800a17c:	0800b002 	.word	0x0800b002

0800a180 <_sbrk_r>:
 800a180:	b538      	push	{r3, r4, r5, lr}
 800a182:	4d06      	ldr	r5, [pc, #24]	; (800a19c <_sbrk_r+0x1c>)
 800a184:	2300      	movs	r3, #0
 800a186:	4604      	mov	r4, r0
 800a188:	4608      	mov	r0, r1
 800a18a:	602b      	str	r3, [r5, #0]
 800a18c:	f7f7 f97a 	bl	8001484 <_sbrk>
 800a190:	1c43      	adds	r3, r0, #1
 800a192:	d102      	bne.n	800a19a <_sbrk_r+0x1a>
 800a194:	682b      	ldr	r3, [r5, #0]
 800a196:	b103      	cbz	r3, 800a19a <_sbrk_r+0x1a>
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	bd38      	pop	{r3, r4, r5, pc}
 800a19c:	240003a8 	.word	0x240003a8

0800a1a0 <__assert_func>:
 800a1a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1a2:	4614      	mov	r4, r2
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	4b09      	ldr	r3, [pc, #36]	; (800a1cc <__assert_func+0x2c>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	68d8      	ldr	r0, [r3, #12]
 800a1ae:	b14c      	cbz	r4, 800a1c4 <__assert_func+0x24>
 800a1b0:	4b07      	ldr	r3, [pc, #28]	; (800a1d0 <__assert_func+0x30>)
 800a1b2:	9100      	str	r1, [sp, #0]
 800a1b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1b8:	4906      	ldr	r1, [pc, #24]	; (800a1d4 <__assert_func+0x34>)
 800a1ba:	462b      	mov	r3, r5
 800a1bc:	f000 f80e 	bl	800a1dc <fiprintf>
 800a1c0:	f000 faa4 	bl	800a70c <abort>
 800a1c4:	4b04      	ldr	r3, [pc, #16]	; (800a1d8 <__assert_func+0x38>)
 800a1c6:	461c      	mov	r4, r3
 800a1c8:	e7f3      	b.n	800a1b2 <__assert_func+0x12>
 800a1ca:	bf00      	nop
 800a1cc:	24000010 	.word	0x24000010
 800a1d0:	0800b00d 	.word	0x0800b00d
 800a1d4:	0800b01a 	.word	0x0800b01a
 800a1d8:	0800b048 	.word	0x0800b048

0800a1dc <fiprintf>:
 800a1dc:	b40e      	push	{r1, r2, r3}
 800a1de:	b503      	push	{r0, r1, lr}
 800a1e0:	4601      	mov	r1, r0
 800a1e2:	ab03      	add	r3, sp, #12
 800a1e4:	4805      	ldr	r0, [pc, #20]	; (800a1fc <fiprintf+0x20>)
 800a1e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ea:	6800      	ldr	r0, [r0, #0]
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	f000 f88f 	bl	800a310 <_vfiprintf_r>
 800a1f2:	b002      	add	sp, #8
 800a1f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1f8:	b003      	add	sp, #12
 800a1fa:	4770      	bx	lr
 800a1fc:	24000010 	.word	0x24000010

0800a200 <__ascii_mbtowc>:
 800a200:	b082      	sub	sp, #8
 800a202:	b901      	cbnz	r1, 800a206 <__ascii_mbtowc+0x6>
 800a204:	a901      	add	r1, sp, #4
 800a206:	b142      	cbz	r2, 800a21a <__ascii_mbtowc+0x1a>
 800a208:	b14b      	cbz	r3, 800a21e <__ascii_mbtowc+0x1e>
 800a20a:	7813      	ldrb	r3, [r2, #0]
 800a20c:	600b      	str	r3, [r1, #0]
 800a20e:	7812      	ldrb	r2, [r2, #0]
 800a210:	1e10      	subs	r0, r2, #0
 800a212:	bf18      	it	ne
 800a214:	2001      	movne	r0, #1
 800a216:	b002      	add	sp, #8
 800a218:	4770      	bx	lr
 800a21a:	4610      	mov	r0, r2
 800a21c:	e7fb      	b.n	800a216 <__ascii_mbtowc+0x16>
 800a21e:	f06f 0001 	mvn.w	r0, #1
 800a222:	e7f8      	b.n	800a216 <__ascii_mbtowc+0x16>

0800a224 <memmove>:
 800a224:	4288      	cmp	r0, r1
 800a226:	b510      	push	{r4, lr}
 800a228:	eb01 0402 	add.w	r4, r1, r2
 800a22c:	d902      	bls.n	800a234 <memmove+0x10>
 800a22e:	4284      	cmp	r4, r0
 800a230:	4623      	mov	r3, r4
 800a232:	d807      	bhi.n	800a244 <memmove+0x20>
 800a234:	1e43      	subs	r3, r0, #1
 800a236:	42a1      	cmp	r1, r4
 800a238:	d008      	beq.n	800a24c <memmove+0x28>
 800a23a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a23e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a242:	e7f8      	b.n	800a236 <memmove+0x12>
 800a244:	4402      	add	r2, r0
 800a246:	4601      	mov	r1, r0
 800a248:	428a      	cmp	r2, r1
 800a24a:	d100      	bne.n	800a24e <memmove+0x2a>
 800a24c:	bd10      	pop	{r4, pc}
 800a24e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a256:	e7f7      	b.n	800a248 <memmove+0x24>

0800a258 <__malloc_lock>:
 800a258:	4801      	ldr	r0, [pc, #4]	; (800a260 <__malloc_lock+0x8>)
 800a25a:	f000 bc17 	b.w	800aa8c <__retarget_lock_acquire_recursive>
 800a25e:	bf00      	nop
 800a260:	240003b0 	.word	0x240003b0

0800a264 <__malloc_unlock>:
 800a264:	4801      	ldr	r0, [pc, #4]	; (800a26c <__malloc_unlock+0x8>)
 800a266:	f000 bc12 	b.w	800aa8e <__retarget_lock_release_recursive>
 800a26a:	bf00      	nop
 800a26c:	240003b0 	.word	0x240003b0

0800a270 <_realloc_r>:
 800a270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a272:	4607      	mov	r7, r0
 800a274:	4614      	mov	r4, r2
 800a276:	460e      	mov	r6, r1
 800a278:	b921      	cbnz	r1, 800a284 <_realloc_r+0x14>
 800a27a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a27e:	4611      	mov	r1, r2
 800a280:	f7ff bdc8 	b.w	8009e14 <_malloc_r>
 800a284:	b922      	cbnz	r2, 800a290 <_realloc_r+0x20>
 800a286:	f7ff fd75 	bl	8009d74 <_free_r>
 800a28a:	4625      	mov	r5, r4
 800a28c:	4628      	mov	r0, r5
 800a28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a290:	f000 fc62 	bl	800ab58 <_malloc_usable_size_r>
 800a294:	42a0      	cmp	r0, r4
 800a296:	d20f      	bcs.n	800a2b8 <_realloc_r+0x48>
 800a298:	4621      	mov	r1, r4
 800a29a:	4638      	mov	r0, r7
 800a29c:	f7ff fdba 	bl	8009e14 <_malloc_r>
 800a2a0:	4605      	mov	r5, r0
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d0f2      	beq.n	800a28c <_realloc_r+0x1c>
 800a2a6:	4631      	mov	r1, r6
 800a2a8:	4622      	mov	r2, r4
 800a2aa:	f7ff f9c7 	bl	800963c <memcpy>
 800a2ae:	4631      	mov	r1, r6
 800a2b0:	4638      	mov	r0, r7
 800a2b2:	f7ff fd5f 	bl	8009d74 <_free_r>
 800a2b6:	e7e9      	b.n	800a28c <_realloc_r+0x1c>
 800a2b8:	4635      	mov	r5, r6
 800a2ba:	e7e7      	b.n	800a28c <_realloc_r+0x1c>

0800a2bc <__sfputc_r>:
 800a2bc:	6893      	ldr	r3, [r2, #8]
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	b410      	push	{r4}
 800a2c4:	6093      	str	r3, [r2, #8]
 800a2c6:	da08      	bge.n	800a2da <__sfputc_r+0x1e>
 800a2c8:	6994      	ldr	r4, [r2, #24]
 800a2ca:	42a3      	cmp	r3, r4
 800a2cc:	db01      	blt.n	800a2d2 <__sfputc_r+0x16>
 800a2ce:	290a      	cmp	r1, #10
 800a2d0:	d103      	bne.n	800a2da <__sfputc_r+0x1e>
 800a2d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2d6:	f000 b94b 	b.w	800a570 <__swbuf_r>
 800a2da:	6813      	ldr	r3, [r2, #0]
 800a2dc:	1c58      	adds	r0, r3, #1
 800a2de:	6010      	str	r0, [r2, #0]
 800a2e0:	7019      	strb	r1, [r3, #0]
 800a2e2:	4608      	mov	r0, r1
 800a2e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <__sfputs_r>:
 800a2ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	460f      	mov	r7, r1
 800a2f0:	4614      	mov	r4, r2
 800a2f2:	18d5      	adds	r5, r2, r3
 800a2f4:	42ac      	cmp	r4, r5
 800a2f6:	d101      	bne.n	800a2fc <__sfputs_r+0x12>
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	e007      	b.n	800a30c <__sfputs_r+0x22>
 800a2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a300:	463a      	mov	r2, r7
 800a302:	4630      	mov	r0, r6
 800a304:	f7ff ffda 	bl	800a2bc <__sfputc_r>
 800a308:	1c43      	adds	r3, r0, #1
 800a30a:	d1f3      	bne.n	800a2f4 <__sfputs_r+0xa>
 800a30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a310 <_vfiprintf_r>:
 800a310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a314:	460d      	mov	r5, r1
 800a316:	b09d      	sub	sp, #116	; 0x74
 800a318:	4614      	mov	r4, r2
 800a31a:	4698      	mov	r8, r3
 800a31c:	4606      	mov	r6, r0
 800a31e:	b118      	cbz	r0, 800a328 <_vfiprintf_r+0x18>
 800a320:	6983      	ldr	r3, [r0, #24]
 800a322:	b90b      	cbnz	r3, 800a328 <_vfiprintf_r+0x18>
 800a324:	f000 fb14 	bl	800a950 <__sinit>
 800a328:	4b89      	ldr	r3, [pc, #548]	; (800a550 <_vfiprintf_r+0x240>)
 800a32a:	429d      	cmp	r5, r3
 800a32c:	d11b      	bne.n	800a366 <_vfiprintf_r+0x56>
 800a32e:	6875      	ldr	r5, [r6, #4]
 800a330:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a332:	07d9      	lsls	r1, r3, #31
 800a334:	d405      	bmi.n	800a342 <_vfiprintf_r+0x32>
 800a336:	89ab      	ldrh	r3, [r5, #12]
 800a338:	059a      	lsls	r2, r3, #22
 800a33a:	d402      	bmi.n	800a342 <_vfiprintf_r+0x32>
 800a33c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a33e:	f000 fba5 	bl	800aa8c <__retarget_lock_acquire_recursive>
 800a342:	89ab      	ldrh	r3, [r5, #12]
 800a344:	071b      	lsls	r3, r3, #28
 800a346:	d501      	bpl.n	800a34c <_vfiprintf_r+0x3c>
 800a348:	692b      	ldr	r3, [r5, #16]
 800a34a:	b9eb      	cbnz	r3, 800a388 <_vfiprintf_r+0x78>
 800a34c:	4629      	mov	r1, r5
 800a34e:	4630      	mov	r0, r6
 800a350:	f000 f96e 	bl	800a630 <__swsetup_r>
 800a354:	b1c0      	cbz	r0, 800a388 <_vfiprintf_r+0x78>
 800a356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a358:	07dc      	lsls	r4, r3, #31
 800a35a:	d50e      	bpl.n	800a37a <_vfiprintf_r+0x6a>
 800a35c:	f04f 30ff 	mov.w	r0, #4294967295
 800a360:	b01d      	add	sp, #116	; 0x74
 800a362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a366:	4b7b      	ldr	r3, [pc, #492]	; (800a554 <_vfiprintf_r+0x244>)
 800a368:	429d      	cmp	r5, r3
 800a36a:	d101      	bne.n	800a370 <_vfiprintf_r+0x60>
 800a36c:	68b5      	ldr	r5, [r6, #8]
 800a36e:	e7df      	b.n	800a330 <_vfiprintf_r+0x20>
 800a370:	4b79      	ldr	r3, [pc, #484]	; (800a558 <_vfiprintf_r+0x248>)
 800a372:	429d      	cmp	r5, r3
 800a374:	bf08      	it	eq
 800a376:	68f5      	ldreq	r5, [r6, #12]
 800a378:	e7da      	b.n	800a330 <_vfiprintf_r+0x20>
 800a37a:	89ab      	ldrh	r3, [r5, #12]
 800a37c:	0598      	lsls	r0, r3, #22
 800a37e:	d4ed      	bmi.n	800a35c <_vfiprintf_r+0x4c>
 800a380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a382:	f000 fb84 	bl	800aa8e <__retarget_lock_release_recursive>
 800a386:	e7e9      	b.n	800a35c <_vfiprintf_r+0x4c>
 800a388:	2300      	movs	r3, #0
 800a38a:	9309      	str	r3, [sp, #36]	; 0x24
 800a38c:	2320      	movs	r3, #32
 800a38e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a392:	f8cd 800c 	str.w	r8, [sp, #12]
 800a396:	2330      	movs	r3, #48	; 0x30
 800a398:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a55c <_vfiprintf_r+0x24c>
 800a39c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3a0:	f04f 0901 	mov.w	r9, #1
 800a3a4:	4623      	mov	r3, r4
 800a3a6:	469a      	mov	sl, r3
 800a3a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3ac:	b10a      	cbz	r2, 800a3b2 <_vfiprintf_r+0xa2>
 800a3ae:	2a25      	cmp	r2, #37	; 0x25
 800a3b0:	d1f9      	bne.n	800a3a6 <_vfiprintf_r+0x96>
 800a3b2:	ebba 0b04 	subs.w	fp, sl, r4
 800a3b6:	d00b      	beq.n	800a3d0 <_vfiprintf_r+0xc0>
 800a3b8:	465b      	mov	r3, fp
 800a3ba:	4622      	mov	r2, r4
 800a3bc:	4629      	mov	r1, r5
 800a3be:	4630      	mov	r0, r6
 800a3c0:	f7ff ff93 	bl	800a2ea <__sfputs_r>
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	f000 80aa 	beq.w	800a51e <_vfiprintf_r+0x20e>
 800a3ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3cc:	445a      	add	r2, fp
 800a3ce:	9209      	str	r2, [sp, #36]	; 0x24
 800a3d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f000 80a2 	beq.w	800a51e <_vfiprintf_r+0x20e>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3e4:	f10a 0a01 	add.w	sl, sl, #1
 800a3e8:	9304      	str	r3, [sp, #16]
 800a3ea:	9307      	str	r3, [sp, #28]
 800a3ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3f0:	931a      	str	r3, [sp, #104]	; 0x68
 800a3f2:	4654      	mov	r4, sl
 800a3f4:	2205      	movs	r2, #5
 800a3f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3fa:	4858      	ldr	r0, [pc, #352]	; (800a55c <_vfiprintf_r+0x24c>)
 800a3fc:	f7f5 ff78 	bl	80002f0 <memchr>
 800a400:	9a04      	ldr	r2, [sp, #16]
 800a402:	b9d8      	cbnz	r0, 800a43c <_vfiprintf_r+0x12c>
 800a404:	06d1      	lsls	r1, r2, #27
 800a406:	bf44      	itt	mi
 800a408:	2320      	movmi	r3, #32
 800a40a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a40e:	0713      	lsls	r3, r2, #28
 800a410:	bf44      	itt	mi
 800a412:	232b      	movmi	r3, #43	; 0x2b
 800a414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a418:	f89a 3000 	ldrb.w	r3, [sl]
 800a41c:	2b2a      	cmp	r3, #42	; 0x2a
 800a41e:	d015      	beq.n	800a44c <_vfiprintf_r+0x13c>
 800a420:	9a07      	ldr	r2, [sp, #28]
 800a422:	4654      	mov	r4, sl
 800a424:	2000      	movs	r0, #0
 800a426:	f04f 0c0a 	mov.w	ip, #10
 800a42a:	4621      	mov	r1, r4
 800a42c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a430:	3b30      	subs	r3, #48	; 0x30
 800a432:	2b09      	cmp	r3, #9
 800a434:	d94e      	bls.n	800a4d4 <_vfiprintf_r+0x1c4>
 800a436:	b1b0      	cbz	r0, 800a466 <_vfiprintf_r+0x156>
 800a438:	9207      	str	r2, [sp, #28]
 800a43a:	e014      	b.n	800a466 <_vfiprintf_r+0x156>
 800a43c:	eba0 0308 	sub.w	r3, r0, r8
 800a440:	fa09 f303 	lsl.w	r3, r9, r3
 800a444:	4313      	orrs	r3, r2
 800a446:	9304      	str	r3, [sp, #16]
 800a448:	46a2      	mov	sl, r4
 800a44a:	e7d2      	b.n	800a3f2 <_vfiprintf_r+0xe2>
 800a44c:	9b03      	ldr	r3, [sp, #12]
 800a44e:	1d19      	adds	r1, r3, #4
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	9103      	str	r1, [sp, #12]
 800a454:	2b00      	cmp	r3, #0
 800a456:	bfbb      	ittet	lt
 800a458:	425b      	neglt	r3, r3
 800a45a:	f042 0202 	orrlt.w	r2, r2, #2
 800a45e:	9307      	strge	r3, [sp, #28]
 800a460:	9307      	strlt	r3, [sp, #28]
 800a462:	bfb8      	it	lt
 800a464:	9204      	strlt	r2, [sp, #16]
 800a466:	7823      	ldrb	r3, [r4, #0]
 800a468:	2b2e      	cmp	r3, #46	; 0x2e
 800a46a:	d10c      	bne.n	800a486 <_vfiprintf_r+0x176>
 800a46c:	7863      	ldrb	r3, [r4, #1]
 800a46e:	2b2a      	cmp	r3, #42	; 0x2a
 800a470:	d135      	bne.n	800a4de <_vfiprintf_r+0x1ce>
 800a472:	9b03      	ldr	r3, [sp, #12]
 800a474:	1d1a      	adds	r2, r3, #4
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	9203      	str	r2, [sp, #12]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	bfb8      	it	lt
 800a47e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a482:	3402      	adds	r4, #2
 800a484:	9305      	str	r3, [sp, #20]
 800a486:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a56c <_vfiprintf_r+0x25c>
 800a48a:	7821      	ldrb	r1, [r4, #0]
 800a48c:	2203      	movs	r2, #3
 800a48e:	4650      	mov	r0, sl
 800a490:	f7f5 ff2e 	bl	80002f0 <memchr>
 800a494:	b140      	cbz	r0, 800a4a8 <_vfiprintf_r+0x198>
 800a496:	2340      	movs	r3, #64	; 0x40
 800a498:	eba0 000a 	sub.w	r0, r0, sl
 800a49c:	fa03 f000 	lsl.w	r0, r3, r0
 800a4a0:	9b04      	ldr	r3, [sp, #16]
 800a4a2:	4303      	orrs	r3, r0
 800a4a4:	3401      	adds	r4, #1
 800a4a6:	9304      	str	r3, [sp, #16]
 800a4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ac:	482c      	ldr	r0, [pc, #176]	; (800a560 <_vfiprintf_r+0x250>)
 800a4ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4b2:	2206      	movs	r2, #6
 800a4b4:	f7f5 ff1c 	bl	80002f0 <memchr>
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	d03f      	beq.n	800a53c <_vfiprintf_r+0x22c>
 800a4bc:	4b29      	ldr	r3, [pc, #164]	; (800a564 <_vfiprintf_r+0x254>)
 800a4be:	bb1b      	cbnz	r3, 800a508 <_vfiprintf_r+0x1f8>
 800a4c0:	9b03      	ldr	r3, [sp, #12]
 800a4c2:	3307      	adds	r3, #7
 800a4c4:	f023 0307 	bic.w	r3, r3, #7
 800a4c8:	3308      	adds	r3, #8
 800a4ca:	9303      	str	r3, [sp, #12]
 800a4cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ce:	443b      	add	r3, r7
 800a4d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d2:	e767      	b.n	800a3a4 <_vfiprintf_r+0x94>
 800a4d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4d8:	460c      	mov	r4, r1
 800a4da:	2001      	movs	r0, #1
 800a4dc:	e7a5      	b.n	800a42a <_vfiprintf_r+0x11a>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	3401      	adds	r4, #1
 800a4e2:	9305      	str	r3, [sp, #20]
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	f04f 0c0a 	mov.w	ip, #10
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4f0:	3a30      	subs	r2, #48	; 0x30
 800a4f2:	2a09      	cmp	r2, #9
 800a4f4:	d903      	bls.n	800a4fe <_vfiprintf_r+0x1ee>
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d0c5      	beq.n	800a486 <_vfiprintf_r+0x176>
 800a4fa:	9105      	str	r1, [sp, #20]
 800a4fc:	e7c3      	b.n	800a486 <_vfiprintf_r+0x176>
 800a4fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800a502:	4604      	mov	r4, r0
 800a504:	2301      	movs	r3, #1
 800a506:	e7f0      	b.n	800a4ea <_vfiprintf_r+0x1da>
 800a508:	ab03      	add	r3, sp, #12
 800a50a:	9300      	str	r3, [sp, #0]
 800a50c:	462a      	mov	r2, r5
 800a50e:	4b16      	ldr	r3, [pc, #88]	; (800a568 <_vfiprintf_r+0x258>)
 800a510:	a904      	add	r1, sp, #16
 800a512:	4630      	mov	r0, r6
 800a514:	f7fd fea4 	bl	8008260 <_printf_float>
 800a518:	4607      	mov	r7, r0
 800a51a:	1c78      	adds	r0, r7, #1
 800a51c:	d1d6      	bne.n	800a4cc <_vfiprintf_r+0x1bc>
 800a51e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a520:	07d9      	lsls	r1, r3, #31
 800a522:	d405      	bmi.n	800a530 <_vfiprintf_r+0x220>
 800a524:	89ab      	ldrh	r3, [r5, #12]
 800a526:	059a      	lsls	r2, r3, #22
 800a528:	d402      	bmi.n	800a530 <_vfiprintf_r+0x220>
 800a52a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a52c:	f000 faaf 	bl	800aa8e <__retarget_lock_release_recursive>
 800a530:	89ab      	ldrh	r3, [r5, #12]
 800a532:	065b      	lsls	r3, r3, #25
 800a534:	f53f af12 	bmi.w	800a35c <_vfiprintf_r+0x4c>
 800a538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a53a:	e711      	b.n	800a360 <_vfiprintf_r+0x50>
 800a53c:	ab03      	add	r3, sp, #12
 800a53e:	9300      	str	r3, [sp, #0]
 800a540:	462a      	mov	r2, r5
 800a542:	4b09      	ldr	r3, [pc, #36]	; (800a568 <_vfiprintf_r+0x258>)
 800a544:	a904      	add	r1, sp, #16
 800a546:	4630      	mov	r0, r6
 800a548:	f7fe f916 	bl	8008778 <_printf_i>
 800a54c:	e7e4      	b.n	800a518 <_vfiprintf_r+0x208>
 800a54e:	bf00      	nop
 800a550:	0800b174 	.word	0x0800b174
 800a554:	0800b194 	.word	0x0800b194
 800a558:	0800b154 	.word	0x0800b154
 800a55c:	0800affc 	.word	0x0800affc
 800a560:	0800b006 	.word	0x0800b006
 800a564:	08008261 	.word	0x08008261
 800a568:	0800a2eb 	.word	0x0800a2eb
 800a56c:	0800b002 	.word	0x0800b002

0800a570 <__swbuf_r>:
 800a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a572:	460e      	mov	r6, r1
 800a574:	4614      	mov	r4, r2
 800a576:	4605      	mov	r5, r0
 800a578:	b118      	cbz	r0, 800a582 <__swbuf_r+0x12>
 800a57a:	6983      	ldr	r3, [r0, #24]
 800a57c:	b90b      	cbnz	r3, 800a582 <__swbuf_r+0x12>
 800a57e:	f000 f9e7 	bl	800a950 <__sinit>
 800a582:	4b21      	ldr	r3, [pc, #132]	; (800a608 <__swbuf_r+0x98>)
 800a584:	429c      	cmp	r4, r3
 800a586:	d12b      	bne.n	800a5e0 <__swbuf_r+0x70>
 800a588:	686c      	ldr	r4, [r5, #4]
 800a58a:	69a3      	ldr	r3, [r4, #24]
 800a58c:	60a3      	str	r3, [r4, #8]
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	071a      	lsls	r2, r3, #28
 800a592:	d52f      	bpl.n	800a5f4 <__swbuf_r+0x84>
 800a594:	6923      	ldr	r3, [r4, #16]
 800a596:	b36b      	cbz	r3, 800a5f4 <__swbuf_r+0x84>
 800a598:	6923      	ldr	r3, [r4, #16]
 800a59a:	6820      	ldr	r0, [r4, #0]
 800a59c:	1ac0      	subs	r0, r0, r3
 800a59e:	6963      	ldr	r3, [r4, #20]
 800a5a0:	b2f6      	uxtb	r6, r6
 800a5a2:	4283      	cmp	r3, r0
 800a5a4:	4637      	mov	r7, r6
 800a5a6:	dc04      	bgt.n	800a5b2 <__swbuf_r+0x42>
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	f000 f93c 	bl	800a828 <_fflush_r>
 800a5b0:	bb30      	cbnz	r0, 800a600 <__swbuf_r+0x90>
 800a5b2:	68a3      	ldr	r3, [r4, #8]
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	60a3      	str	r3, [r4, #8]
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	1c5a      	adds	r2, r3, #1
 800a5bc:	6022      	str	r2, [r4, #0]
 800a5be:	701e      	strb	r6, [r3, #0]
 800a5c0:	6963      	ldr	r3, [r4, #20]
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	4283      	cmp	r3, r0
 800a5c6:	d004      	beq.n	800a5d2 <__swbuf_r+0x62>
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	07db      	lsls	r3, r3, #31
 800a5cc:	d506      	bpl.n	800a5dc <__swbuf_r+0x6c>
 800a5ce:	2e0a      	cmp	r6, #10
 800a5d0:	d104      	bne.n	800a5dc <__swbuf_r+0x6c>
 800a5d2:	4621      	mov	r1, r4
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	f000 f927 	bl	800a828 <_fflush_r>
 800a5da:	b988      	cbnz	r0, 800a600 <__swbuf_r+0x90>
 800a5dc:	4638      	mov	r0, r7
 800a5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e0:	4b0a      	ldr	r3, [pc, #40]	; (800a60c <__swbuf_r+0x9c>)
 800a5e2:	429c      	cmp	r4, r3
 800a5e4:	d101      	bne.n	800a5ea <__swbuf_r+0x7a>
 800a5e6:	68ac      	ldr	r4, [r5, #8]
 800a5e8:	e7cf      	b.n	800a58a <__swbuf_r+0x1a>
 800a5ea:	4b09      	ldr	r3, [pc, #36]	; (800a610 <__swbuf_r+0xa0>)
 800a5ec:	429c      	cmp	r4, r3
 800a5ee:	bf08      	it	eq
 800a5f0:	68ec      	ldreq	r4, [r5, #12]
 800a5f2:	e7ca      	b.n	800a58a <__swbuf_r+0x1a>
 800a5f4:	4621      	mov	r1, r4
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f000 f81a 	bl	800a630 <__swsetup_r>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d0cb      	beq.n	800a598 <__swbuf_r+0x28>
 800a600:	f04f 37ff 	mov.w	r7, #4294967295
 800a604:	e7ea      	b.n	800a5dc <__swbuf_r+0x6c>
 800a606:	bf00      	nop
 800a608:	0800b174 	.word	0x0800b174
 800a60c:	0800b194 	.word	0x0800b194
 800a610:	0800b154 	.word	0x0800b154

0800a614 <__ascii_wctomb>:
 800a614:	b149      	cbz	r1, 800a62a <__ascii_wctomb+0x16>
 800a616:	2aff      	cmp	r2, #255	; 0xff
 800a618:	bf85      	ittet	hi
 800a61a:	238a      	movhi	r3, #138	; 0x8a
 800a61c:	6003      	strhi	r3, [r0, #0]
 800a61e:	700a      	strbls	r2, [r1, #0]
 800a620:	f04f 30ff 	movhi.w	r0, #4294967295
 800a624:	bf98      	it	ls
 800a626:	2001      	movls	r0, #1
 800a628:	4770      	bx	lr
 800a62a:	4608      	mov	r0, r1
 800a62c:	4770      	bx	lr
	...

0800a630 <__swsetup_r>:
 800a630:	4b32      	ldr	r3, [pc, #200]	; (800a6fc <__swsetup_r+0xcc>)
 800a632:	b570      	push	{r4, r5, r6, lr}
 800a634:	681d      	ldr	r5, [r3, #0]
 800a636:	4606      	mov	r6, r0
 800a638:	460c      	mov	r4, r1
 800a63a:	b125      	cbz	r5, 800a646 <__swsetup_r+0x16>
 800a63c:	69ab      	ldr	r3, [r5, #24]
 800a63e:	b913      	cbnz	r3, 800a646 <__swsetup_r+0x16>
 800a640:	4628      	mov	r0, r5
 800a642:	f000 f985 	bl	800a950 <__sinit>
 800a646:	4b2e      	ldr	r3, [pc, #184]	; (800a700 <__swsetup_r+0xd0>)
 800a648:	429c      	cmp	r4, r3
 800a64a:	d10f      	bne.n	800a66c <__swsetup_r+0x3c>
 800a64c:	686c      	ldr	r4, [r5, #4]
 800a64e:	89a3      	ldrh	r3, [r4, #12]
 800a650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a654:	0719      	lsls	r1, r3, #28
 800a656:	d42c      	bmi.n	800a6b2 <__swsetup_r+0x82>
 800a658:	06dd      	lsls	r5, r3, #27
 800a65a:	d411      	bmi.n	800a680 <__swsetup_r+0x50>
 800a65c:	2309      	movs	r3, #9
 800a65e:	6033      	str	r3, [r6, #0]
 800a660:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a664:	81a3      	strh	r3, [r4, #12]
 800a666:	f04f 30ff 	mov.w	r0, #4294967295
 800a66a:	e03e      	b.n	800a6ea <__swsetup_r+0xba>
 800a66c:	4b25      	ldr	r3, [pc, #148]	; (800a704 <__swsetup_r+0xd4>)
 800a66e:	429c      	cmp	r4, r3
 800a670:	d101      	bne.n	800a676 <__swsetup_r+0x46>
 800a672:	68ac      	ldr	r4, [r5, #8]
 800a674:	e7eb      	b.n	800a64e <__swsetup_r+0x1e>
 800a676:	4b24      	ldr	r3, [pc, #144]	; (800a708 <__swsetup_r+0xd8>)
 800a678:	429c      	cmp	r4, r3
 800a67a:	bf08      	it	eq
 800a67c:	68ec      	ldreq	r4, [r5, #12]
 800a67e:	e7e6      	b.n	800a64e <__swsetup_r+0x1e>
 800a680:	0758      	lsls	r0, r3, #29
 800a682:	d512      	bpl.n	800a6aa <__swsetup_r+0x7a>
 800a684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a686:	b141      	cbz	r1, 800a69a <__swsetup_r+0x6a>
 800a688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a68c:	4299      	cmp	r1, r3
 800a68e:	d002      	beq.n	800a696 <__swsetup_r+0x66>
 800a690:	4630      	mov	r0, r6
 800a692:	f7ff fb6f 	bl	8009d74 <_free_r>
 800a696:	2300      	movs	r3, #0
 800a698:	6363      	str	r3, [r4, #52]	; 0x34
 800a69a:	89a3      	ldrh	r3, [r4, #12]
 800a69c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6a0:	81a3      	strh	r3, [r4, #12]
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	6063      	str	r3, [r4, #4]
 800a6a6:	6923      	ldr	r3, [r4, #16]
 800a6a8:	6023      	str	r3, [r4, #0]
 800a6aa:	89a3      	ldrh	r3, [r4, #12]
 800a6ac:	f043 0308 	orr.w	r3, r3, #8
 800a6b0:	81a3      	strh	r3, [r4, #12]
 800a6b2:	6923      	ldr	r3, [r4, #16]
 800a6b4:	b94b      	cbnz	r3, 800a6ca <__swsetup_r+0x9a>
 800a6b6:	89a3      	ldrh	r3, [r4, #12]
 800a6b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6c0:	d003      	beq.n	800a6ca <__swsetup_r+0x9a>
 800a6c2:	4621      	mov	r1, r4
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	f000 fa07 	bl	800aad8 <__smakebuf_r>
 800a6ca:	89a0      	ldrh	r0, [r4, #12]
 800a6cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6d0:	f010 0301 	ands.w	r3, r0, #1
 800a6d4:	d00a      	beq.n	800a6ec <__swsetup_r+0xbc>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	60a3      	str	r3, [r4, #8]
 800a6da:	6963      	ldr	r3, [r4, #20]
 800a6dc:	425b      	negs	r3, r3
 800a6de:	61a3      	str	r3, [r4, #24]
 800a6e0:	6923      	ldr	r3, [r4, #16]
 800a6e2:	b943      	cbnz	r3, 800a6f6 <__swsetup_r+0xc6>
 800a6e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6e8:	d1ba      	bne.n	800a660 <__swsetup_r+0x30>
 800a6ea:	bd70      	pop	{r4, r5, r6, pc}
 800a6ec:	0781      	lsls	r1, r0, #30
 800a6ee:	bf58      	it	pl
 800a6f0:	6963      	ldrpl	r3, [r4, #20]
 800a6f2:	60a3      	str	r3, [r4, #8]
 800a6f4:	e7f4      	b.n	800a6e0 <__swsetup_r+0xb0>
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	e7f7      	b.n	800a6ea <__swsetup_r+0xba>
 800a6fa:	bf00      	nop
 800a6fc:	24000010 	.word	0x24000010
 800a700:	0800b174 	.word	0x0800b174
 800a704:	0800b194 	.word	0x0800b194
 800a708:	0800b154 	.word	0x0800b154

0800a70c <abort>:
 800a70c:	b508      	push	{r3, lr}
 800a70e:	2006      	movs	r0, #6
 800a710:	f000 fa52 	bl	800abb8 <raise>
 800a714:	2001      	movs	r0, #1
 800a716:	f7f6 fe3d 	bl	8001394 <_exit>
	...

0800a71c <__sflush_r>:
 800a71c:	898a      	ldrh	r2, [r1, #12]
 800a71e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a722:	4605      	mov	r5, r0
 800a724:	0710      	lsls	r0, r2, #28
 800a726:	460c      	mov	r4, r1
 800a728:	d458      	bmi.n	800a7dc <__sflush_r+0xc0>
 800a72a:	684b      	ldr	r3, [r1, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	dc05      	bgt.n	800a73c <__sflush_r+0x20>
 800a730:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a732:	2b00      	cmp	r3, #0
 800a734:	dc02      	bgt.n	800a73c <__sflush_r+0x20>
 800a736:	2000      	movs	r0, #0
 800a738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a73c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a73e:	2e00      	cmp	r6, #0
 800a740:	d0f9      	beq.n	800a736 <__sflush_r+0x1a>
 800a742:	2300      	movs	r3, #0
 800a744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a748:	682f      	ldr	r7, [r5, #0]
 800a74a:	602b      	str	r3, [r5, #0]
 800a74c:	d032      	beq.n	800a7b4 <__sflush_r+0x98>
 800a74e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a750:	89a3      	ldrh	r3, [r4, #12]
 800a752:	075a      	lsls	r2, r3, #29
 800a754:	d505      	bpl.n	800a762 <__sflush_r+0x46>
 800a756:	6863      	ldr	r3, [r4, #4]
 800a758:	1ac0      	subs	r0, r0, r3
 800a75a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a75c:	b10b      	cbz	r3, 800a762 <__sflush_r+0x46>
 800a75e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a760:	1ac0      	subs	r0, r0, r3
 800a762:	2300      	movs	r3, #0
 800a764:	4602      	mov	r2, r0
 800a766:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a768:	6a21      	ldr	r1, [r4, #32]
 800a76a:	4628      	mov	r0, r5
 800a76c:	47b0      	blx	r6
 800a76e:	1c43      	adds	r3, r0, #1
 800a770:	89a3      	ldrh	r3, [r4, #12]
 800a772:	d106      	bne.n	800a782 <__sflush_r+0x66>
 800a774:	6829      	ldr	r1, [r5, #0]
 800a776:	291d      	cmp	r1, #29
 800a778:	d82c      	bhi.n	800a7d4 <__sflush_r+0xb8>
 800a77a:	4a2a      	ldr	r2, [pc, #168]	; (800a824 <__sflush_r+0x108>)
 800a77c:	40ca      	lsrs	r2, r1
 800a77e:	07d6      	lsls	r6, r2, #31
 800a780:	d528      	bpl.n	800a7d4 <__sflush_r+0xb8>
 800a782:	2200      	movs	r2, #0
 800a784:	6062      	str	r2, [r4, #4]
 800a786:	04d9      	lsls	r1, r3, #19
 800a788:	6922      	ldr	r2, [r4, #16]
 800a78a:	6022      	str	r2, [r4, #0]
 800a78c:	d504      	bpl.n	800a798 <__sflush_r+0x7c>
 800a78e:	1c42      	adds	r2, r0, #1
 800a790:	d101      	bne.n	800a796 <__sflush_r+0x7a>
 800a792:	682b      	ldr	r3, [r5, #0]
 800a794:	b903      	cbnz	r3, 800a798 <__sflush_r+0x7c>
 800a796:	6560      	str	r0, [r4, #84]	; 0x54
 800a798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a79a:	602f      	str	r7, [r5, #0]
 800a79c:	2900      	cmp	r1, #0
 800a79e:	d0ca      	beq.n	800a736 <__sflush_r+0x1a>
 800a7a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7a4:	4299      	cmp	r1, r3
 800a7a6:	d002      	beq.n	800a7ae <__sflush_r+0x92>
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	f7ff fae3 	bl	8009d74 <_free_r>
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	6360      	str	r0, [r4, #52]	; 0x34
 800a7b2:	e7c1      	b.n	800a738 <__sflush_r+0x1c>
 800a7b4:	6a21      	ldr	r1, [r4, #32]
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	47b0      	blx	r6
 800a7bc:	1c41      	adds	r1, r0, #1
 800a7be:	d1c7      	bne.n	800a750 <__sflush_r+0x34>
 800a7c0:	682b      	ldr	r3, [r5, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d0c4      	beq.n	800a750 <__sflush_r+0x34>
 800a7c6:	2b1d      	cmp	r3, #29
 800a7c8:	d001      	beq.n	800a7ce <__sflush_r+0xb2>
 800a7ca:	2b16      	cmp	r3, #22
 800a7cc:	d101      	bne.n	800a7d2 <__sflush_r+0xb6>
 800a7ce:	602f      	str	r7, [r5, #0]
 800a7d0:	e7b1      	b.n	800a736 <__sflush_r+0x1a>
 800a7d2:	89a3      	ldrh	r3, [r4, #12]
 800a7d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7d8:	81a3      	strh	r3, [r4, #12]
 800a7da:	e7ad      	b.n	800a738 <__sflush_r+0x1c>
 800a7dc:	690f      	ldr	r7, [r1, #16]
 800a7de:	2f00      	cmp	r7, #0
 800a7e0:	d0a9      	beq.n	800a736 <__sflush_r+0x1a>
 800a7e2:	0793      	lsls	r3, r2, #30
 800a7e4:	680e      	ldr	r6, [r1, #0]
 800a7e6:	bf08      	it	eq
 800a7e8:	694b      	ldreq	r3, [r1, #20]
 800a7ea:	600f      	str	r7, [r1, #0]
 800a7ec:	bf18      	it	ne
 800a7ee:	2300      	movne	r3, #0
 800a7f0:	eba6 0807 	sub.w	r8, r6, r7
 800a7f4:	608b      	str	r3, [r1, #8]
 800a7f6:	f1b8 0f00 	cmp.w	r8, #0
 800a7fa:	dd9c      	ble.n	800a736 <__sflush_r+0x1a>
 800a7fc:	6a21      	ldr	r1, [r4, #32]
 800a7fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a800:	4643      	mov	r3, r8
 800a802:	463a      	mov	r2, r7
 800a804:	4628      	mov	r0, r5
 800a806:	47b0      	blx	r6
 800a808:	2800      	cmp	r0, #0
 800a80a:	dc06      	bgt.n	800a81a <__sflush_r+0xfe>
 800a80c:	89a3      	ldrh	r3, [r4, #12]
 800a80e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a812:	81a3      	strh	r3, [r4, #12]
 800a814:	f04f 30ff 	mov.w	r0, #4294967295
 800a818:	e78e      	b.n	800a738 <__sflush_r+0x1c>
 800a81a:	4407      	add	r7, r0
 800a81c:	eba8 0800 	sub.w	r8, r8, r0
 800a820:	e7e9      	b.n	800a7f6 <__sflush_r+0xda>
 800a822:	bf00      	nop
 800a824:	20400001 	.word	0x20400001

0800a828 <_fflush_r>:
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	690b      	ldr	r3, [r1, #16]
 800a82c:	4605      	mov	r5, r0
 800a82e:	460c      	mov	r4, r1
 800a830:	b913      	cbnz	r3, 800a838 <_fflush_r+0x10>
 800a832:	2500      	movs	r5, #0
 800a834:	4628      	mov	r0, r5
 800a836:	bd38      	pop	{r3, r4, r5, pc}
 800a838:	b118      	cbz	r0, 800a842 <_fflush_r+0x1a>
 800a83a:	6983      	ldr	r3, [r0, #24]
 800a83c:	b90b      	cbnz	r3, 800a842 <_fflush_r+0x1a>
 800a83e:	f000 f887 	bl	800a950 <__sinit>
 800a842:	4b14      	ldr	r3, [pc, #80]	; (800a894 <_fflush_r+0x6c>)
 800a844:	429c      	cmp	r4, r3
 800a846:	d11b      	bne.n	800a880 <_fflush_r+0x58>
 800a848:	686c      	ldr	r4, [r5, #4]
 800a84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d0ef      	beq.n	800a832 <_fflush_r+0xa>
 800a852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a854:	07d0      	lsls	r0, r2, #31
 800a856:	d404      	bmi.n	800a862 <_fflush_r+0x3a>
 800a858:	0599      	lsls	r1, r3, #22
 800a85a:	d402      	bmi.n	800a862 <_fflush_r+0x3a>
 800a85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a85e:	f000 f915 	bl	800aa8c <__retarget_lock_acquire_recursive>
 800a862:	4628      	mov	r0, r5
 800a864:	4621      	mov	r1, r4
 800a866:	f7ff ff59 	bl	800a71c <__sflush_r>
 800a86a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a86c:	07da      	lsls	r2, r3, #31
 800a86e:	4605      	mov	r5, r0
 800a870:	d4e0      	bmi.n	800a834 <_fflush_r+0xc>
 800a872:	89a3      	ldrh	r3, [r4, #12]
 800a874:	059b      	lsls	r3, r3, #22
 800a876:	d4dd      	bmi.n	800a834 <_fflush_r+0xc>
 800a878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a87a:	f000 f908 	bl	800aa8e <__retarget_lock_release_recursive>
 800a87e:	e7d9      	b.n	800a834 <_fflush_r+0xc>
 800a880:	4b05      	ldr	r3, [pc, #20]	; (800a898 <_fflush_r+0x70>)
 800a882:	429c      	cmp	r4, r3
 800a884:	d101      	bne.n	800a88a <_fflush_r+0x62>
 800a886:	68ac      	ldr	r4, [r5, #8]
 800a888:	e7df      	b.n	800a84a <_fflush_r+0x22>
 800a88a:	4b04      	ldr	r3, [pc, #16]	; (800a89c <_fflush_r+0x74>)
 800a88c:	429c      	cmp	r4, r3
 800a88e:	bf08      	it	eq
 800a890:	68ec      	ldreq	r4, [r5, #12]
 800a892:	e7da      	b.n	800a84a <_fflush_r+0x22>
 800a894:	0800b174 	.word	0x0800b174
 800a898:	0800b194 	.word	0x0800b194
 800a89c:	0800b154 	.word	0x0800b154

0800a8a0 <std>:
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	b510      	push	{r4, lr}
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	e9c0 3300 	strd	r3, r3, [r0]
 800a8aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8ae:	6083      	str	r3, [r0, #8]
 800a8b0:	8181      	strh	r1, [r0, #12]
 800a8b2:	6643      	str	r3, [r0, #100]	; 0x64
 800a8b4:	81c2      	strh	r2, [r0, #14]
 800a8b6:	6183      	str	r3, [r0, #24]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	2208      	movs	r2, #8
 800a8bc:	305c      	adds	r0, #92	; 0x5c
 800a8be:	f7fd fc37 	bl	8008130 <memset>
 800a8c2:	4b05      	ldr	r3, [pc, #20]	; (800a8d8 <std+0x38>)
 800a8c4:	6263      	str	r3, [r4, #36]	; 0x24
 800a8c6:	4b05      	ldr	r3, [pc, #20]	; (800a8dc <std+0x3c>)
 800a8c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8ca:	4b05      	ldr	r3, [pc, #20]	; (800a8e0 <std+0x40>)
 800a8cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8ce:	4b05      	ldr	r3, [pc, #20]	; (800a8e4 <std+0x44>)
 800a8d0:	6224      	str	r4, [r4, #32]
 800a8d2:	6323      	str	r3, [r4, #48]	; 0x30
 800a8d4:	bd10      	pop	{r4, pc}
 800a8d6:	bf00      	nop
 800a8d8:	0800abf1 	.word	0x0800abf1
 800a8dc:	0800ac13 	.word	0x0800ac13
 800a8e0:	0800ac4b 	.word	0x0800ac4b
 800a8e4:	0800ac6f 	.word	0x0800ac6f

0800a8e8 <_cleanup_r>:
 800a8e8:	4901      	ldr	r1, [pc, #4]	; (800a8f0 <_cleanup_r+0x8>)
 800a8ea:	f000 b8af 	b.w	800aa4c <_fwalk_reent>
 800a8ee:	bf00      	nop
 800a8f0:	0800a829 	.word	0x0800a829

0800a8f4 <__sfmoreglue>:
 800a8f4:	b570      	push	{r4, r5, r6, lr}
 800a8f6:	1e4a      	subs	r2, r1, #1
 800a8f8:	2568      	movs	r5, #104	; 0x68
 800a8fa:	4355      	muls	r5, r2
 800a8fc:	460e      	mov	r6, r1
 800a8fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a902:	f7ff fa87 	bl	8009e14 <_malloc_r>
 800a906:	4604      	mov	r4, r0
 800a908:	b140      	cbz	r0, 800a91c <__sfmoreglue+0x28>
 800a90a:	2100      	movs	r1, #0
 800a90c:	e9c0 1600 	strd	r1, r6, [r0]
 800a910:	300c      	adds	r0, #12
 800a912:	60a0      	str	r0, [r4, #8]
 800a914:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a918:	f7fd fc0a 	bl	8008130 <memset>
 800a91c:	4620      	mov	r0, r4
 800a91e:	bd70      	pop	{r4, r5, r6, pc}

0800a920 <__sfp_lock_acquire>:
 800a920:	4801      	ldr	r0, [pc, #4]	; (800a928 <__sfp_lock_acquire+0x8>)
 800a922:	f000 b8b3 	b.w	800aa8c <__retarget_lock_acquire_recursive>
 800a926:	bf00      	nop
 800a928:	240003b4 	.word	0x240003b4

0800a92c <__sfp_lock_release>:
 800a92c:	4801      	ldr	r0, [pc, #4]	; (800a934 <__sfp_lock_release+0x8>)
 800a92e:	f000 b8ae 	b.w	800aa8e <__retarget_lock_release_recursive>
 800a932:	bf00      	nop
 800a934:	240003b4 	.word	0x240003b4

0800a938 <__sinit_lock_acquire>:
 800a938:	4801      	ldr	r0, [pc, #4]	; (800a940 <__sinit_lock_acquire+0x8>)
 800a93a:	f000 b8a7 	b.w	800aa8c <__retarget_lock_acquire_recursive>
 800a93e:	bf00      	nop
 800a940:	240003af 	.word	0x240003af

0800a944 <__sinit_lock_release>:
 800a944:	4801      	ldr	r0, [pc, #4]	; (800a94c <__sinit_lock_release+0x8>)
 800a946:	f000 b8a2 	b.w	800aa8e <__retarget_lock_release_recursive>
 800a94a:	bf00      	nop
 800a94c:	240003af 	.word	0x240003af

0800a950 <__sinit>:
 800a950:	b510      	push	{r4, lr}
 800a952:	4604      	mov	r4, r0
 800a954:	f7ff fff0 	bl	800a938 <__sinit_lock_acquire>
 800a958:	69a3      	ldr	r3, [r4, #24]
 800a95a:	b11b      	cbz	r3, 800a964 <__sinit+0x14>
 800a95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a960:	f7ff bff0 	b.w	800a944 <__sinit_lock_release>
 800a964:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a968:	6523      	str	r3, [r4, #80]	; 0x50
 800a96a:	4b13      	ldr	r3, [pc, #76]	; (800a9b8 <__sinit+0x68>)
 800a96c:	4a13      	ldr	r2, [pc, #76]	; (800a9bc <__sinit+0x6c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	62a2      	str	r2, [r4, #40]	; 0x28
 800a972:	42a3      	cmp	r3, r4
 800a974:	bf04      	itt	eq
 800a976:	2301      	moveq	r3, #1
 800a978:	61a3      	streq	r3, [r4, #24]
 800a97a:	4620      	mov	r0, r4
 800a97c:	f000 f820 	bl	800a9c0 <__sfp>
 800a980:	6060      	str	r0, [r4, #4]
 800a982:	4620      	mov	r0, r4
 800a984:	f000 f81c 	bl	800a9c0 <__sfp>
 800a988:	60a0      	str	r0, [r4, #8]
 800a98a:	4620      	mov	r0, r4
 800a98c:	f000 f818 	bl	800a9c0 <__sfp>
 800a990:	2200      	movs	r2, #0
 800a992:	60e0      	str	r0, [r4, #12]
 800a994:	2104      	movs	r1, #4
 800a996:	6860      	ldr	r0, [r4, #4]
 800a998:	f7ff ff82 	bl	800a8a0 <std>
 800a99c:	68a0      	ldr	r0, [r4, #8]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	2109      	movs	r1, #9
 800a9a2:	f7ff ff7d 	bl	800a8a0 <std>
 800a9a6:	68e0      	ldr	r0, [r4, #12]
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	2112      	movs	r1, #18
 800a9ac:	f7ff ff78 	bl	800a8a0 <std>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	61a3      	str	r3, [r4, #24]
 800a9b4:	e7d2      	b.n	800a95c <__sinit+0xc>
 800a9b6:	bf00      	nop
 800a9b8:	0800add4 	.word	0x0800add4
 800a9bc:	0800a8e9 	.word	0x0800a8e9

0800a9c0 <__sfp>:
 800a9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c2:	4607      	mov	r7, r0
 800a9c4:	f7ff ffac 	bl	800a920 <__sfp_lock_acquire>
 800a9c8:	4b1e      	ldr	r3, [pc, #120]	; (800aa44 <__sfp+0x84>)
 800a9ca:	681e      	ldr	r6, [r3, #0]
 800a9cc:	69b3      	ldr	r3, [r6, #24]
 800a9ce:	b913      	cbnz	r3, 800a9d6 <__sfp+0x16>
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	f7ff ffbd 	bl	800a950 <__sinit>
 800a9d6:	3648      	adds	r6, #72	; 0x48
 800a9d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	d503      	bpl.n	800a9e8 <__sfp+0x28>
 800a9e0:	6833      	ldr	r3, [r6, #0]
 800a9e2:	b30b      	cbz	r3, 800aa28 <__sfp+0x68>
 800a9e4:	6836      	ldr	r6, [r6, #0]
 800a9e6:	e7f7      	b.n	800a9d8 <__sfp+0x18>
 800a9e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a9ec:	b9d5      	cbnz	r5, 800aa24 <__sfp+0x64>
 800a9ee:	4b16      	ldr	r3, [pc, #88]	; (800aa48 <__sfp+0x88>)
 800a9f0:	60e3      	str	r3, [r4, #12]
 800a9f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a9f6:	6665      	str	r5, [r4, #100]	; 0x64
 800a9f8:	f000 f847 	bl	800aa8a <__retarget_lock_init_recursive>
 800a9fc:	f7ff ff96 	bl	800a92c <__sfp_lock_release>
 800aa00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa08:	6025      	str	r5, [r4, #0]
 800aa0a:	61a5      	str	r5, [r4, #24]
 800aa0c:	2208      	movs	r2, #8
 800aa0e:	4629      	mov	r1, r5
 800aa10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa14:	f7fd fb8c 	bl	8008130 <memset>
 800aa18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa20:	4620      	mov	r0, r4
 800aa22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa24:	3468      	adds	r4, #104	; 0x68
 800aa26:	e7d9      	b.n	800a9dc <__sfp+0x1c>
 800aa28:	2104      	movs	r1, #4
 800aa2a:	4638      	mov	r0, r7
 800aa2c:	f7ff ff62 	bl	800a8f4 <__sfmoreglue>
 800aa30:	4604      	mov	r4, r0
 800aa32:	6030      	str	r0, [r6, #0]
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d1d5      	bne.n	800a9e4 <__sfp+0x24>
 800aa38:	f7ff ff78 	bl	800a92c <__sfp_lock_release>
 800aa3c:	230c      	movs	r3, #12
 800aa3e:	603b      	str	r3, [r7, #0]
 800aa40:	e7ee      	b.n	800aa20 <__sfp+0x60>
 800aa42:	bf00      	nop
 800aa44:	0800add4 	.word	0x0800add4
 800aa48:	ffff0001 	.word	0xffff0001

0800aa4c <_fwalk_reent>:
 800aa4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa50:	4606      	mov	r6, r0
 800aa52:	4688      	mov	r8, r1
 800aa54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa58:	2700      	movs	r7, #0
 800aa5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa5e:	f1b9 0901 	subs.w	r9, r9, #1
 800aa62:	d505      	bpl.n	800aa70 <_fwalk_reent+0x24>
 800aa64:	6824      	ldr	r4, [r4, #0]
 800aa66:	2c00      	cmp	r4, #0
 800aa68:	d1f7      	bne.n	800aa5a <_fwalk_reent+0xe>
 800aa6a:	4638      	mov	r0, r7
 800aa6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa70:	89ab      	ldrh	r3, [r5, #12]
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d907      	bls.n	800aa86 <_fwalk_reent+0x3a>
 800aa76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	d003      	beq.n	800aa86 <_fwalk_reent+0x3a>
 800aa7e:	4629      	mov	r1, r5
 800aa80:	4630      	mov	r0, r6
 800aa82:	47c0      	blx	r8
 800aa84:	4307      	orrs	r7, r0
 800aa86:	3568      	adds	r5, #104	; 0x68
 800aa88:	e7e9      	b.n	800aa5e <_fwalk_reent+0x12>

0800aa8a <__retarget_lock_init_recursive>:
 800aa8a:	4770      	bx	lr

0800aa8c <__retarget_lock_acquire_recursive>:
 800aa8c:	4770      	bx	lr

0800aa8e <__retarget_lock_release_recursive>:
 800aa8e:	4770      	bx	lr

0800aa90 <__swhatbuf_r>:
 800aa90:	b570      	push	{r4, r5, r6, lr}
 800aa92:	460e      	mov	r6, r1
 800aa94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa98:	2900      	cmp	r1, #0
 800aa9a:	b096      	sub	sp, #88	; 0x58
 800aa9c:	4614      	mov	r4, r2
 800aa9e:	461d      	mov	r5, r3
 800aaa0:	da07      	bge.n	800aab2 <__swhatbuf_r+0x22>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	602b      	str	r3, [r5, #0]
 800aaa6:	89b3      	ldrh	r3, [r6, #12]
 800aaa8:	061a      	lsls	r2, r3, #24
 800aaaa:	d410      	bmi.n	800aace <__swhatbuf_r+0x3e>
 800aaac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aab0:	e00e      	b.n	800aad0 <__swhatbuf_r+0x40>
 800aab2:	466a      	mov	r2, sp
 800aab4:	f000 f902 	bl	800acbc <_fstat_r>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	dbf2      	blt.n	800aaa2 <__swhatbuf_r+0x12>
 800aabc:	9a01      	ldr	r2, [sp, #4]
 800aabe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aac2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aac6:	425a      	negs	r2, r3
 800aac8:	415a      	adcs	r2, r3
 800aaca:	602a      	str	r2, [r5, #0]
 800aacc:	e7ee      	b.n	800aaac <__swhatbuf_r+0x1c>
 800aace:	2340      	movs	r3, #64	; 0x40
 800aad0:	2000      	movs	r0, #0
 800aad2:	6023      	str	r3, [r4, #0]
 800aad4:	b016      	add	sp, #88	; 0x58
 800aad6:	bd70      	pop	{r4, r5, r6, pc}

0800aad8 <__smakebuf_r>:
 800aad8:	898b      	ldrh	r3, [r1, #12]
 800aada:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aadc:	079d      	lsls	r5, r3, #30
 800aade:	4606      	mov	r6, r0
 800aae0:	460c      	mov	r4, r1
 800aae2:	d507      	bpl.n	800aaf4 <__smakebuf_r+0x1c>
 800aae4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	6123      	str	r3, [r4, #16]
 800aaec:	2301      	movs	r3, #1
 800aaee:	6163      	str	r3, [r4, #20]
 800aaf0:	b002      	add	sp, #8
 800aaf2:	bd70      	pop	{r4, r5, r6, pc}
 800aaf4:	ab01      	add	r3, sp, #4
 800aaf6:	466a      	mov	r2, sp
 800aaf8:	f7ff ffca 	bl	800aa90 <__swhatbuf_r>
 800aafc:	9900      	ldr	r1, [sp, #0]
 800aafe:	4605      	mov	r5, r0
 800ab00:	4630      	mov	r0, r6
 800ab02:	f7ff f987 	bl	8009e14 <_malloc_r>
 800ab06:	b948      	cbnz	r0, 800ab1c <__smakebuf_r+0x44>
 800ab08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab0c:	059a      	lsls	r2, r3, #22
 800ab0e:	d4ef      	bmi.n	800aaf0 <__smakebuf_r+0x18>
 800ab10:	f023 0303 	bic.w	r3, r3, #3
 800ab14:	f043 0302 	orr.w	r3, r3, #2
 800ab18:	81a3      	strh	r3, [r4, #12]
 800ab1a:	e7e3      	b.n	800aae4 <__smakebuf_r+0xc>
 800ab1c:	4b0d      	ldr	r3, [pc, #52]	; (800ab54 <__smakebuf_r+0x7c>)
 800ab1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab20:	89a3      	ldrh	r3, [r4, #12]
 800ab22:	6020      	str	r0, [r4, #0]
 800ab24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab28:	81a3      	strh	r3, [r4, #12]
 800ab2a:	9b00      	ldr	r3, [sp, #0]
 800ab2c:	6163      	str	r3, [r4, #20]
 800ab2e:	9b01      	ldr	r3, [sp, #4]
 800ab30:	6120      	str	r0, [r4, #16]
 800ab32:	b15b      	cbz	r3, 800ab4c <__smakebuf_r+0x74>
 800ab34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab38:	4630      	mov	r0, r6
 800ab3a:	f000 f8d1 	bl	800ace0 <_isatty_r>
 800ab3e:	b128      	cbz	r0, 800ab4c <__smakebuf_r+0x74>
 800ab40:	89a3      	ldrh	r3, [r4, #12]
 800ab42:	f023 0303 	bic.w	r3, r3, #3
 800ab46:	f043 0301 	orr.w	r3, r3, #1
 800ab4a:	81a3      	strh	r3, [r4, #12]
 800ab4c:	89a0      	ldrh	r0, [r4, #12]
 800ab4e:	4305      	orrs	r5, r0
 800ab50:	81a5      	strh	r5, [r4, #12]
 800ab52:	e7cd      	b.n	800aaf0 <__smakebuf_r+0x18>
 800ab54:	0800a8e9 	.word	0x0800a8e9

0800ab58 <_malloc_usable_size_r>:
 800ab58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab5c:	1f18      	subs	r0, r3, #4
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	bfbc      	itt	lt
 800ab62:	580b      	ldrlt	r3, [r1, r0]
 800ab64:	18c0      	addlt	r0, r0, r3
 800ab66:	4770      	bx	lr

0800ab68 <_raise_r>:
 800ab68:	291f      	cmp	r1, #31
 800ab6a:	b538      	push	{r3, r4, r5, lr}
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	460d      	mov	r5, r1
 800ab70:	d904      	bls.n	800ab7c <_raise_r+0x14>
 800ab72:	2316      	movs	r3, #22
 800ab74:	6003      	str	r3, [r0, #0]
 800ab76:	f04f 30ff 	mov.w	r0, #4294967295
 800ab7a:	bd38      	pop	{r3, r4, r5, pc}
 800ab7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab7e:	b112      	cbz	r2, 800ab86 <_raise_r+0x1e>
 800ab80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab84:	b94b      	cbnz	r3, 800ab9a <_raise_r+0x32>
 800ab86:	4620      	mov	r0, r4
 800ab88:	f000 f830 	bl	800abec <_getpid_r>
 800ab8c:	462a      	mov	r2, r5
 800ab8e:	4601      	mov	r1, r0
 800ab90:	4620      	mov	r0, r4
 800ab92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab96:	f000 b817 	b.w	800abc8 <_kill_r>
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d00a      	beq.n	800abb4 <_raise_r+0x4c>
 800ab9e:	1c59      	adds	r1, r3, #1
 800aba0:	d103      	bne.n	800abaa <_raise_r+0x42>
 800aba2:	2316      	movs	r3, #22
 800aba4:	6003      	str	r3, [r0, #0]
 800aba6:	2001      	movs	r0, #1
 800aba8:	e7e7      	b.n	800ab7a <_raise_r+0x12>
 800abaa:	2400      	movs	r4, #0
 800abac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abb0:	4628      	mov	r0, r5
 800abb2:	4798      	blx	r3
 800abb4:	2000      	movs	r0, #0
 800abb6:	e7e0      	b.n	800ab7a <_raise_r+0x12>

0800abb8 <raise>:
 800abb8:	4b02      	ldr	r3, [pc, #8]	; (800abc4 <raise+0xc>)
 800abba:	4601      	mov	r1, r0
 800abbc:	6818      	ldr	r0, [r3, #0]
 800abbe:	f7ff bfd3 	b.w	800ab68 <_raise_r>
 800abc2:	bf00      	nop
 800abc4:	24000010 	.word	0x24000010

0800abc8 <_kill_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4d07      	ldr	r5, [pc, #28]	; (800abe8 <_kill_r+0x20>)
 800abcc:	2300      	movs	r3, #0
 800abce:	4604      	mov	r4, r0
 800abd0:	4608      	mov	r0, r1
 800abd2:	4611      	mov	r1, r2
 800abd4:	602b      	str	r3, [r5, #0]
 800abd6:	f7f6 fbcd 	bl	8001374 <_kill>
 800abda:	1c43      	adds	r3, r0, #1
 800abdc:	d102      	bne.n	800abe4 <_kill_r+0x1c>
 800abde:	682b      	ldr	r3, [r5, #0]
 800abe0:	b103      	cbz	r3, 800abe4 <_kill_r+0x1c>
 800abe2:	6023      	str	r3, [r4, #0]
 800abe4:	bd38      	pop	{r3, r4, r5, pc}
 800abe6:	bf00      	nop
 800abe8:	240003a8 	.word	0x240003a8

0800abec <_getpid_r>:
 800abec:	f7f6 bbba 	b.w	8001364 <_getpid>

0800abf0 <__sread>:
 800abf0:	b510      	push	{r4, lr}
 800abf2:	460c      	mov	r4, r1
 800abf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf8:	f000 f894 	bl	800ad24 <_read_r>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	bfab      	itete	ge
 800ac00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac02:	89a3      	ldrhlt	r3, [r4, #12]
 800ac04:	181b      	addge	r3, r3, r0
 800ac06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac0a:	bfac      	ite	ge
 800ac0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac0e:	81a3      	strhlt	r3, [r4, #12]
 800ac10:	bd10      	pop	{r4, pc}

0800ac12 <__swrite>:
 800ac12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac16:	461f      	mov	r7, r3
 800ac18:	898b      	ldrh	r3, [r1, #12]
 800ac1a:	05db      	lsls	r3, r3, #23
 800ac1c:	4605      	mov	r5, r0
 800ac1e:	460c      	mov	r4, r1
 800ac20:	4616      	mov	r6, r2
 800ac22:	d505      	bpl.n	800ac30 <__swrite+0x1e>
 800ac24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac28:	2302      	movs	r3, #2
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f000 f868 	bl	800ad00 <_lseek_r>
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac3a:	81a3      	strh	r3, [r4, #12]
 800ac3c:	4632      	mov	r2, r6
 800ac3e:	463b      	mov	r3, r7
 800ac40:	4628      	mov	r0, r5
 800ac42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac46:	f000 b817 	b.w	800ac78 <_write_r>

0800ac4a <__sseek>:
 800ac4a:	b510      	push	{r4, lr}
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac52:	f000 f855 	bl	800ad00 <_lseek_r>
 800ac56:	1c43      	adds	r3, r0, #1
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	bf15      	itete	ne
 800ac5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac66:	81a3      	strheq	r3, [r4, #12]
 800ac68:	bf18      	it	ne
 800ac6a:	81a3      	strhne	r3, [r4, #12]
 800ac6c:	bd10      	pop	{r4, pc}

0800ac6e <__sclose>:
 800ac6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac72:	f000 b813 	b.w	800ac9c <_close_r>
	...

0800ac78 <_write_r>:
 800ac78:	b538      	push	{r3, r4, r5, lr}
 800ac7a:	4d07      	ldr	r5, [pc, #28]	; (800ac98 <_write_r+0x20>)
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	4608      	mov	r0, r1
 800ac80:	4611      	mov	r1, r2
 800ac82:	2200      	movs	r2, #0
 800ac84:	602a      	str	r2, [r5, #0]
 800ac86:	461a      	mov	r2, r3
 800ac88:	f7f6 fbab 	bl	80013e2 <_write>
 800ac8c:	1c43      	adds	r3, r0, #1
 800ac8e:	d102      	bne.n	800ac96 <_write_r+0x1e>
 800ac90:	682b      	ldr	r3, [r5, #0]
 800ac92:	b103      	cbz	r3, 800ac96 <_write_r+0x1e>
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	bd38      	pop	{r3, r4, r5, pc}
 800ac98:	240003a8 	.word	0x240003a8

0800ac9c <_close_r>:
 800ac9c:	b538      	push	{r3, r4, r5, lr}
 800ac9e:	4d06      	ldr	r5, [pc, #24]	; (800acb8 <_close_r+0x1c>)
 800aca0:	2300      	movs	r3, #0
 800aca2:	4604      	mov	r4, r0
 800aca4:	4608      	mov	r0, r1
 800aca6:	602b      	str	r3, [r5, #0]
 800aca8:	f7f6 fbb7 	bl	800141a <_close>
 800acac:	1c43      	adds	r3, r0, #1
 800acae:	d102      	bne.n	800acb6 <_close_r+0x1a>
 800acb0:	682b      	ldr	r3, [r5, #0]
 800acb2:	b103      	cbz	r3, 800acb6 <_close_r+0x1a>
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	bd38      	pop	{r3, r4, r5, pc}
 800acb8:	240003a8 	.word	0x240003a8

0800acbc <_fstat_r>:
 800acbc:	b538      	push	{r3, r4, r5, lr}
 800acbe:	4d07      	ldr	r5, [pc, #28]	; (800acdc <_fstat_r+0x20>)
 800acc0:	2300      	movs	r3, #0
 800acc2:	4604      	mov	r4, r0
 800acc4:	4608      	mov	r0, r1
 800acc6:	4611      	mov	r1, r2
 800acc8:	602b      	str	r3, [r5, #0]
 800acca:	f7f6 fbb2 	bl	8001432 <_fstat>
 800acce:	1c43      	adds	r3, r0, #1
 800acd0:	d102      	bne.n	800acd8 <_fstat_r+0x1c>
 800acd2:	682b      	ldr	r3, [r5, #0]
 800acd4:	b103      	cbz	r3, 800acd8 <_fstat_r+0x1c>
 800acd6:	6023      	str	r3, [r4, #0]
 800acd8:	bd38      	pop	{r3, r4, r5, pc}
 800acda:	bf00      	nop
 800acdc:	240003a8 	.word	0x240003a8

0800ace0 <_isatty_r>:
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	4d06      	ldr	r5, [pc, #24]	; (800acfc <_isatty_r+0x1c>)
 800ace4:	2300      	movs	r3, #0
 800ace6:	4604      	mov	r4, r0
 800ace8:	4608      	mov	r0, r1
 800acea:	602b      	str	r3, [r5, #0]
 800acec:	f7f6 fbb1 	bl	8001452 <_isatty>
 800acf0:	1c43      	adds	r3, r0, #1
 800acf2:	d102      	bne.n	800acfa <_isatty_r+0x1a>
 800acf4:	682b      	ldr	r3, [r5, #0]
 800acf6:	b103      	cbz	r3, 800acfa <_isatty_r+0x1a>
 800acf8:	6023      	str	r3, [r4, #0]
 800acfa:	bd38      	pop	{r3, r4, r5, pc}
 800acfc:	240003a8 	.word	0x240003a8

0800ad00 <_lseek_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	4d07      	ldr	r5, [pc, #28]	; (800ad20 <_lseek_r+0x20>)
 800ad04:	4604      	mov	r4, r0
 800ad06:	4608      	mov	r0, r1
 800ad08:	4611      	mov	r1, r2
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	602a      	str	r2, [r5, #0]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	f7f6 fbaa 	bl	8001468 <_lseek>
 800ad14:	1c43      	adds	r3, r0, #1
 800ad16:	d102      	bne.n	800ad1e <_lseek_r+0x1e>
 800ad18:	682b      	ldr	r3, [r5, #0]
 800ad1a:	b103      	cbz	r3, 800ad1e <_lseek_r+0x1e>
 800ad1c:	6023      	str	r3, [r4, #0]
 800ad1e:	bd38      	pop	{r3, r4, r5, pc}
 800ad20:	240003a8 	.word	0x240003a8

0800ad24 <_read_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	4d07      	ldr	r5, [pc, #28]	; (800ad44 <_read_r+0x20>)
 800ad28:	4604      	mov	r4, r0
 800ad2a:	4608      	mov	r0, r1
 800ad2c:	4611      	mov	r1, r2
 800ad2e:	2200      	movs	r2, #0
 800ad30:	602a      	str	r2, [r5, #0]
 800ad32:	461a      	mov	r2, r3
 800ad34:	f7f6 fb38 	bl	80013a8 <_read>
 800ad38:	1c43      	adds	r3, r0, #1
 800ad3a:	d102      	bne.n	800ad42 <_read_r+0x1e>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	b103      	cbz	r3, 800ad42 <_read_r+0x1e>
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	bd38      	pop	{r3, r4, r5, pc}
 800ad44:	240003a8 	.word	0x240003a8

0800ad48 <_init>:
 800ad48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4a:	bf00      	nop
 800ad4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad4e:	bc08      	pop	{r3}
 800ad50:	469e      	mov	lr, r3
 800ad52:	4770      	bx	lr

0800ad54 <_fini>:
 800ad54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad56:	bf00      	nop
 800ad58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad5a:	bc08      	pop	{r3}
 800ad5c:	469e      	mov	lr, r3
 800ad5e:	4770      	bx	lr
