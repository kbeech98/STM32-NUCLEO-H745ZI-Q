
NUCLEO_H745_CAPACTIVE_SOIL_MOISTURE_SENSOR_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009820  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08009ac0  08009ac0  00019ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f0c  08009f0c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009f0c  08009f0c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f0c  08009f0c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f0c  08009f0c  00019f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f10  08009f10  00019f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  08009f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  240001e0  0800a0f4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000344  0800a0f4  00020344  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef64  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003300  00000000  00000000  0003f172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00042478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00043588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c0ed  00000000  00000000  00044570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140e3  00000000  00000000  0008065d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00190ad4  00000000  00000000  00094740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00225214  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000569c  00000000  00000000  00225268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009aa8 	.word	0x08009aa8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	08009aa8 	.word	0x08009aa8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b3f      	ldr	r3, [pc, #252]	; (8000494 <SystemInit+0x104>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800039a:	4a3e      	ldr	r2, [pc, #248]	; (8000494 <SystemInit+0x104>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b3b      	ldr	r3, [pc, #236]	; (8000494 <SystemInit+0x104>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a3a      	ldr	r2, [pc, #232]	; (8000494 <SystemInit+0x104>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b39      	ldr	r3, [pc, #228]	; (8000498 <SystemInit+0x108>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b36      	ldr	r3, [pc, #216]	; (8000498 <SystemInit+0x108>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a34      	ldr	r2, [pc, #208]	; (8000498 <SystemInit+0x108>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b33      	ldr	r3, [pc, #204]	; (800049c <SystemInit+0x10c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a32      	ldr	r2, [pc, #200]	; (800049c <SystemInit+0x10c>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b30      	ldr	r3, [pc, #192]	; (800049c <SystemInit+0x10c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b2f      	ldr	r3, [pc, #188]	; (800049c <SystemInit+0x10c>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	492e      	ldr	r1, [pc, #184]	; (800049c <SystemInit+0x10c>)
 80003e4:	4b2e      	ldr	r3, [pc, #184]	; (80004a0 <SystemInit+0x110>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b2b      	ldr	r3, [pc, #172]	; (8000498 <SystemInit+0x108>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b28      	ldr	r3, [pc, #160]	; (8000498 <SystemInit+0x108>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a26      	ldr	r2, [pc, #152]	; (8000498 <SystemInit+0x108>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b25      	ldr	r3, [pc, #148]	; (800049c <SystemInit+0x10c>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b23      	ldr	r3, [pc, #140]	; (800049c <SystemInit+0x10c>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b22      	ldr	r3, [pc, #136]	; (800049c <SystemInit+0x10c>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b20      	ldr	r3, [pc, #128]	; (800049c <SystemInit+0x10c>)
 800041a:	4a22      	ldr	r2, [pc, #136]	; (80004a4 <SystemInit+0x114>)
 800041c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b1f      	ldr	r3, [pc, #124]	; (800049c <SystemInit+0x10c>)
 8000420:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <SystemInit+0x118>)
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b1d      	ldr	r3, [pc, #116]	; (800049c <SystemInit+0x10c>)
 8000426:	4a21      	ldr	r2, [pc, #132]	; (80004ac <SystemInit+0x11c>)
 8000428:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b1c      	ldr	r3, [pc, #112]	; (800049c <SystemInit+0x10c>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b1a      	ldr	r3, [pc, #104]	; (800049c <SystemInit+0x10c>)
 8000432:	4a1e      	ldr	r2, [pc, #120]	; (80004ac <SystemInit+0x11c>)
 8000434:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <SystemInit+0x10c>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b17      	ldr	r3, [pc, #92]	; (800049c <SystemInit+0x10c>)
 800043e:	4a1b      	ldr	r2, [pc, #108]	; (80004ac <SystemInit+0x11c>)
 8000440:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b16      	ldr	r3, [pc, #88]	; (800049c <SystemInit+0x10c>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <SystemInit+0x10c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a13      	ldr	r2, [pc, #76]	; (800049c <SystemInit+0x10c>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b11      	ldr	r3, [pc, #68]	; (800049c <SystemInit+0x10c>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <SystemInit+0x120>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800045e:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <SystemInit+0x120>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000464:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <SystemInit+0x124>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <SystemInit+0x128>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <SystemInit+0x12c>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <SystemInit+0x130>)
 800047c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000480:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <SystemInit+0x104>)
 8000484:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000488:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	e000ed00 	.word	0xe000ed00
 8000498:	52002000 	.word	0x52002000
 800049c:	58024400 	.word	0x58024400
 80004a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80004a4:	02020200 	.word	0x02020200
 80004a8:	01ff0000 	.word	0x01ff0000
 80004ac:	01010280 	.word	0x01010280
 80004b0:	580000c0 	.word	0x580000c0
 80004b4:	5c001000 	.word	0x5c001000
 80004b8:	ffff0000 	.word	0xffff0000
 80004bc:	51008108 	.word	0x51008108
 80004c0:	52004000 	.word	0x52004000

080004c4 <poll_SOIL_SENSOR_1_2>:
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //Debugging LED
	//SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)SoilSensor) & ~(uint32_t)0x1F), RX_LENGTH+32);
}*/

void poll_SOIL_SENSOR_1_2(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	  ADC_Select_CH3();	//poll sensor 1 on pin PB1
 80004c8:	f000 f82e 	bl	8000528 <ADC_Select_CH3>
	  HAL_ADC_Start(&hadc1);
 80004cc:	4813      	ldr	r0, [pc, #76]	; (800051c <poll_SOIL_SENSOR_1_2+0x58>)
 80004ce:	f001 fd07 	bl	8001ee0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80004d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004d6:	4811      	ldr	r0, [pc, #68]	; (800051c <poll_SOIL_SENSOR_1_2+0x58>)
 80004d8:	f001 fe00 	bl	80020dc <HAL_ADC_PollForConversion>
	  SoilSensor1 = HAL_ADC_GetValue(&hadc1);
 80004dc:	480f      	ldr	r0, [pc, #60]	; (800051c <poll_SOIL_SENSOR_1_2+0x58>)
 80004de:	f001 fef1 	bl	80022c4 <HAL_ADC_GetValue>
 80004e2:	4603      	mov	r3, r0
 80004e4:	461a      	mov	r2, r3
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <poll_SOIL_SENSOR_1_2+0x5c>)
 80004e8:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80004ea:	480c      	ldr	r0, [pc, #48]	; (800051c <poll_SOIL_SENSOR_1_2+0x58>)
 80004ec:	f001 fdc2 	bl	8002074 <HAL_ADC_Stop>

	  ADC_Select_CH5(); //poll sensor 2 on pin PA6
 80004f0:	f000 f848 	bl	8000584 <ADC_Select_CH5>
	  HAL_ADC_Start(&hadc1);
 80004f4:	4809      	ldr	r0, [pc, #36]	; (800051c <poll_SOIL_SENSOR_1_2+0x58>)
 80004f6:	f001 fcf3 	bl	8001ee0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80004fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004fe:	4807      	ldr	r0, [pc, #28]	; (800051c <poll_SOIL_SENSOR_1_2+0x58>)
 8000500:	f001 fdec 	bl	80020dc <HAL_ADC_PollForConversion>
	  SoilSensor2 = HAL_ADC_GetValue(&hadc1);
 8000504:	4805      	ldr	r0, [pc, #20]	; (800051c <poll_SOIL_SENSOR_1_2+0x58>)
 8000506:	f001 fedd 	bl	80022c4 <HAL_ADC_GetValue>
 800050a:	4603      	mov	r3, r0
 800050c:	461a      	mov	r2, r3
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <poll_SOIL_SENSOR_1_2+0x60>)
 8000510:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000512:	4802      	ldr	r0, [pc, #8]	; (800051c <poll_SOIL_SENSOR_1_2+0x58>)
 8000514:	f001 fdae 	bl	8002074 <HAL_ADC_Stop>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	24000210 	.word	0x24000210
 8000520:	2400020c 	.word	0x2400020c
 8000524:	24000274 	.word	0x24000274

08000528 <ADC_Select_CH3>:

void ADC_Select_CH3 (void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
 800053c:	615a      	str	r2, [r3, #20]
 800053e:	619a      	str	r2, [r3, #24]

	  sConfig.Channel = ADC_CHANNEL_3;
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <ADC_Select_CH3+0x54>)
 8000542:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000544:	2306      	movs	r3, #6
 8000546:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000548:	2301      	movs	r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800054c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000550:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000552:	2304      	movs	r3, #4
 8000554:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	61bb      	str	r3, [r7, #24]
	  sConfig.OffsetSignedSaturation = DISABLE;
 800055a:	2300      	movs	r3, #0
 800055c:	777b      	strb	r3, [r7, #29]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	4619      	mov	r1, r3
 8000562:	4807      	ldr	r0, [pc, #28]	; (8000580 <ADC_Select_CH3+0x58>)
 8000564:	f001 febc 	bl	80022e0 <HAL_ADC_ConfigChannel>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d002      	beq.n	8000574 <ADC_Select_CH3+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800056e:	b672      	cpsid	i
}
 8000570:	bf00      	nop
	  {
		  __disable_irq(); //Error handler function in main
		  while (1)
 8000572:	e7fe      	b.n	8000572 <ADC_Select_CH3+0x4a>
		  {
		  }
	  }
}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	0c900008 	.word	0x0c900008
 8000580:	24000210 	.word	0x24000210

08000584 <ADC_Select_CH5>:

void ADC_Select_CH5 (void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
 8000598:	615a      	str	r2, [r3, #20]
 800059a:	619a      	str	r2, [r3, #24]

	  sConfig.Channel = ADC_CHANNEL_5;
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <ADC_Select_CH5+0x54>)
 800059e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a0:	2306      	movs	r3, #6
 80005a2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005a4:	2301      	movs	r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005a8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80005ac:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ae:	2304      	movs	r3, #4
 80005b0:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61bb      	str	r3, [r7, #24]
	  sConfig.OffsetSignedSaturation = DISABLE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	777b      	strb	r3, [r7, #29]

	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	4619      	mov	r1, r3
 80005be:	4807      	ldr	r0, [pc, #28]	; (80005dc <ADC_Select_CH5+0x58>)
 80005c0:	f001 fe8e 	bl	80022e0 <HAL_ADC_ConfigChannel>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d002      	beq.n	80005d0 <ADC_Select_CH5+0x4c>
  __ASM volatile ("cpsid i" : : : "memory");
 80005ca:	b672      	cpsid	i
}
 80005cc:	bf00      	nop
	  {
		  __disable_irq(); //Error handler function in main
		  while (1)
 80005ce:	e7fe      	b.n	80005ce <ADC_Select_CH5+0x4a>
		  {
		  }
	  }
}
 80005d0:	bf00      	nop
 80005d2:	3720      	adds	r7, #32
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	14f00020 	.word	0x14f00020
 80005dc:	24000210 	.word	0x24000210

080005e0 <us_delay>:
//define the timer handler below
#define timer2 htim2

extern TIM_HandleTypeDef timer2;
void us_delay (uint16_t us)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer2, 0);		//clear timer
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <us_delay+0x30>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2200      	movs	r2, #0
 80005f0:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&timer2);			//start timer
 80005f2:	4807      	ldr	r0, [pc, #28]	; (8000610 <us_delay+0x30>)
 80005f4:	f006 f8fc 	bl	80067f0 <HAL_TIM_Base_Start_IT>
	while (__HAL_TIM_GET_COUNTER(&timer2) < us);
 80005f8:	bf00      	nop
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <us_delay+0x30>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000600:	88fb      	ldrh	r3, [r7, #6]
 8000602:	429a      	cmp	r2, r3
 8000604:	d3f9      	bcc.n	80005fa <us_delay+0x1a>
}
 8000606:	bf00      	nop
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	240002e4 	.word	0x240002e4

08000614 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000630:	887b      	ldrh	r3, [r7, #2]
 8000632:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4619      	mov	r1, r3
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f002 fd30 	bl	80030a8 <HAL_GPIO_Init>
}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	460b      	mov	r3, r1
 800065a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800066c:	887b      	ldrh	r3, [r7, #2]
 800066e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4619      	mov	r1, r3
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f002 fd12 	bl	80030a8 <HAL_GPIO_Init>
}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <DHT11_Start>:

void DHT11_Start (void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  		// set the pin as output
 8000690:	2101      	movs	r1, #1
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <DHT11_Start+0x30>)
 8000694:	f7ff ffdc 	bl	8000650 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000698:	2200      	movs	r2, #0
 800069a:	2101      	movs	r1, #1
 800069c:	4807      	ldr	r0, [pc, #28]	; (80006bc <DHT11_Start+0x30>)
 800069e:	f002 fecb 	bl	8003438 <HAL_GPIO_WritePin>
	us_delay(18000);   								// wait for 18ms
 80006a2:	f244 6050 	movw	r0, #18000	; 0x4650
 80006a6:	f7ff ff9b 	bl	80005e0 <us_delay>
	//HAL_Delay(2000);
    //HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
	//two_half_us_delay(13);   								// wait for 30us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    		// set as input
 80006aa:	2101      	movs	r1, #1
 80006ac:	4803      	ldr	r0, [pc, #12]	; (80006bc <DHT11_Start+0x30>)
 80006ae:	f7ff ffb1 	bl	8000614 <Set_Pin_Input>
	us_delay(30);   								// wait for 30us
 80006b2:	201e      	movs	r0, #30
 80006b4:	f7ff ff94 	bl	80005e0 <us_delay>
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	58020c00 	.word	0x58020c00

080006c0 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	71bb      	strb	r3, [r7, #6]
 80006ca:	e037      	b.n	800073c <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   	// wait for the pin to go high
 80006cc:	bf00      	nop
 80006ce:	2101      	movs	r1, #1
 80006d0:	481e      	ldr	r0, [pc, #120]	; (800074c <DHT11_Read+0x8c>)
 80006d2:	f002 fe99 	bl	8003408 <HAL_GPIO_ReadPin>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d0f8      	beq.n	80006ce <DHT11_Read+0xe>
		us_delay(40);   										// wait for 40 us
 80006dc:	2028      	movs	r0, #40	; 0x28
 80006de:	f7ff ff7f 	bl	80005e0 <us_delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   		// if the pin is low
 80006e2:	2101      	movs	r1, #1
 80006e4:	4819      	ldr	r0, [pc, #100]	; (800074c <DHT11_Read+0x8c>)
 80006e6:	f002 fe8f 	bl	8003408 <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d10e      	bne.n	800070e <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   									// write 0
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	f1c3 0307 	rsb	r3, r3, #7
 80006f6:	2201      	movs	r2, #1
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	43db      	mvns	r3, r3
 8000700:	b25a      	sxtb	r2, r3
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	4013      	ands	r3, r2
 8000708:	b25b      	sxtb	r3, r3
 800070a:	71fb      	strb	r3, [r7, #7]
 800070c:	e00b      	b.n	8000726 <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  									// if the pin is high, write 1
 800070e:	79bb      	ldrb	r3, [r7, #6]
 8000710:	f1c3 0307 	rsb	r3, r3, #7
 8000714:	2201      	movs	r2, #1
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	b25a      	sxtb	r2, r3
 800071c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000720:	4313      	orrs	r3, r2
 8000722:	b25b      	sxtb	r3, r3
 8000724:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  	// wait for the pin to go low
 8000726:	bf00      	nop
 8000728:	2101      	movs	r1, #1
 800072a:	4808      	ldr	r0, [pc, #32]	; (800074c <DHT11_Read+0x8c>)
 800072c:	f002 fe6c 	bl	8003408 <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1f8      	bne.n	8000728 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 8000736:	79bb      	ldrb	r3, [r7, #6]
 8000738:	3301      	adds	r3, #1
 800073a:	71bb      	strb	r3, [r7, #6]
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	2b07      	cmp	r3, #7
 8000740:	d9c4      	bls.n	80006cc <DHT11_Read+0xc>
	}
	return i;
 8000742:	79fb      	ldrb	r3, [r7, #7]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	58020c00 	.word	0x58020c00

08000750 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	71fb      	strb	r3, [r7, #7]
	us_delay(40);				//wait 40 us
 800075a:	2028      	movs	r0, #40	; 0x28
 800075c:	f7ff ff40 	bl	80005e0 <us_delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000760:	2101      	movs	r1, #1
 8000762:	4811      	ldr	r0, [pc, #68]	; (80007a8 <DHT11_Check_Response+0x58>)
 8000764:	f002 fe50 	bl	8003408 <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d10e      	bne.n	800078c <DHT11_Check_Response+0x3c>
	{
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //Debugging LED
		us_delay(80);				//wait 80 us
 800076e:	2050      	movs	r0, #80	; 0x50
 8000770:	f7ff ff36 	bl	80005e0 <us_delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000774:	2101      	movs	r1, #1
 8000776:	480c      	ldr	r0, [pc, #48]	; (80007a8 <DHT11_Check_Response+0x58>)
 8000778:	f002 fe46 	bl	8003408 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d002      	beq.n	8000788 <DHT11_Check_Response+0x38>
 8000782:	2301      	movs	r3, #1
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	e001      	b.n	800078c <DHT11_Check_Response+0x3c>
		else Response = -1; // 255
 8000788:	23ff      	movs	r3, #255	; 0xff
 800078a:	71fb      	strb	r3, [r7, #7]
	}
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 800078c:	bf00      	nop
 800078e:	2101      	movs	r1, #1
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <DHT11_Check_Response+0x58>)
 8000792:	f002 fe39 	bl	8003408 <HAL_GPIO_ReadPin>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1f8      	bne.n	800078e <DHT11_Check_Response+0x3e>

	return Response;
 800079c:	79fb      	ldrb	r3, [r7, #7]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	58020c00 	.word	0x58020c00

080007ac <poll_DHT11>:

void poll_DHT11(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	DHT11_Start();
 80007b0:	f7ff ff6c 	bl	800068c <DHT11_Start>
	Presence = DHT11_Check_Response();
 80007b4:	f7ff ffcc 	bl	8000750 <DHT11_Check_Response>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b37      	ldr	r3, [pc, #220]	; (800089c <poll_DHT11+0xf0>)
 80007be:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
	Rh_byte1 = DHT11_Read ();
 80007c0:	f7ff ff7e 	bl	80006c0 <DHT11_Read>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <poll_DHT11+0xf4>)
 80007ca:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read ();
 80007cc:	f7ff ff78 	bl	80006c0 <DHT11_Read>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b33      	ldr	r3, [pc, #204]	; (80008a4 <poll_DHT11+0xf8>)
 80007d6:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read ();
 80007d8:	f7ff ff72 	bl	80006c0 <DHT11_Read>
 80007dc:	4603      	mov	r3, r0
 80007de:	461a      	mov	r2, r3
 80007e0:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <poll_DHT11+0xfc>)
 80007e2:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read ();
 80007e4:	f7ff ff6c 	bl	80006c0 <DHT11_Read>
 80007e8:	4603      	mov	r3, r0
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <poll_DHT11+0x100>)
 80007ee:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 80007f0:	f7ff ff66 	bl	80006c0 <DHT11_Read>
 80007f4:	4603      	mov	r3, r0
 80007f6:	ee07 3a90 	vmov	s15, r3
 80007fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007fe:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <poll_DHT11+0x104>)
 8000800:	edc3 7a00 	vstr	s15, [r3]

	TEMP = (float) (Temp_byte2);
 8000804:	4b29      	ldr	r3, [pc, #164]	; (80008ac <poll_DHT11+0x100>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	ee07 3a90 	vmov	s15, r3
 800080c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000810:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <poll_DHT11+0x108>)
 8000812:	edc3 7a00 	vstr	s15, [r3]
	TEMP /= 10.0;
 8000816:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <poll_DHT11+0x108>)
 8000818:	ed93 7a00 	vldr	s14, [r3]
 800081c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000820:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000824:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <poll_DHT11+0x108>)
 8000826:	edc3 7a00 	vstr	s15, [r3]
	TEMP += Temp_byte1;
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <poll_DHT11+0xfc>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	ee07 3a90 	vmov	s15, r3
 8000832:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000836:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <poll_DHT11+0x108>)
 8000838:	edd3 7a00 	vldr	s15, [r3]
 800083c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000840:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <poll_DHT11+0x108>)
 8000842:	edc3 7a00 	vstr	s15, [r3]

	RH = (float) (Rh_byte2);
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <poll_DHT11+0xf8>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <poll_DHT11+0x10c>)
 8000854:	edc3 7a00 	vstr	s15, [r3]
	RH /= 10.0;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <poll_DHT11+0x10c>)
 800085a:	ed93 7a00 	vldr	s14, [r3]
 800085e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000862:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <poll_DHT11+0x10c>)
 8000868:	edc3 7a00 	vstr	s15, [r3]
	RH += Rh_byte1;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <poll_DHT11+0xf4>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	ee07 3a90 	vmov	s15, r3
 8000874:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <poll_DHT11+0x10c>)
 800087a:	edd3 7a00 	vldr	s15, [r3]
 800087e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <poll_DHT11+0x10c>)
 8000884:	edc3 7a00 	vstr	s15, [r3]

	Temperature = (float) (TEMP);
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <poll_DHT11+0x108>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <poll_DHT11+0x110>)
 800088e:	6013      	str	r3, [r2, #0]
	Humidity = (float) (RH);
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <poll_DHT11+0x10c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <poll_DHT11+0x114>)
 8000896:	6013      	str	r3, [r2, #0]
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	240001fc 	.word	0x240001fc
 80008a0:	2400027c 	.word	0x2400027c
 80008a4:	24000289 	.word	0x24000289
 80008a8:	24000288 	.word	0x24000288
 80008ac:	24000294 	.word	0x24000294
 80008b0:	2400028c 	.word	0x2400028c
 80008b4:	24000284 	.word	0x24000284
 80008b8:	24000280 	.word	0x24000280
 80008bc:	24000278 	.word	0x24000278
 80008c0:	24000290 	.word	0x24000290

080008c4 <Display_Temp_Rh>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Display_Temp_Rh(float Temp, float Rh)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80008ce:	edc7 0a00 	vstr	s1, [r7]
	char str_temp[15] = {0},
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	f8c3 2007 	str.w	r2, [r3, #7]
			str_Rh[15] = {0};
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	f8c3 2007 	str.w	r2, [r3, #7]
	//lcd_clear();
	lcd_put_cur(0, 0);
 80008f6:	2100      	movs	r1, #0
 80008f8:	2000      	movs	r0, #0
 80008fa:	f000 fbc9 	bl	8001090 <lcd_put_cur>

	sprintf (str_temp, "TEMP: %.1f", Temp);
 80008fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000902:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000906:	f107 0018 	add.w	r0, r7, #24
 800090a:	ec53 2b17 	vmov	r2, r3, d7
 800090e:	4913      	ldr	r1, [pc, #76]	; (800095c <Display_Temp_Rh+0x98>)
 8000910:	f006 ff08 	bl	8007724 <siprintf>
	sprintf (str_Rh, "RH: %.0f", Rh);
 8000914:	edd7 7a00 	vldr	s15, [r7]
 8000918:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800091c:	f107 0008 	add.w	r0, r7, #8
 8000920:	ec53 2b17 	vmov	r2, r3, d7
 8000924:	490e      	ldr	r1, [pc, #56]	; (8000960 <Display_Temp_Rh+0x9c>)
 8000926:	f006 fefd 	bl	8007724 <siprintf>
	lcd_send_string(str_temp);
 800092a:	f107 0318 	add.w	r3, r7, #24
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fc1d 	bl	800116e <lcd_send_string>
	lcd_send_data('C');
 8000934:	2043      	movs	r0, #67	; 0x43
 8000936:	f000 fb84 	bl	8001042 <lcd_send_data>
	lcd_put_cur(1, 0);
 800093a:	2100      	movs	r1, #0
 800093c:	2001      	movs	r0, #1
 800093e:	f000 fba7 	bl	8001090 <lcd_put_cur>
	lcd_send_string(str_Rh);
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	4618      	mov	r0, r3
 8000948:	f000 fc11 	bl	800116e <lcd_send_string>
	lcd_send_data('%');
 800094c:	2025      	movs	r0, #37	; 0x25
 800094e:	f000 fb78 	bl	8001042 <lcd_send_data>
}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	; 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	08009ac0 	.word	0x08009ac0
 8000960:	08009acc 	.word	0x08009acc

08000964 <Display_Soil_Moisture>:

void Display_Soil_Moisture(int Sensor1,int Sensor2)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	; 0x30
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
	char str_1[20], str_2[20];

	lcd_put_cur(0, 0);
 800096e:	2100      	movs	r1, #0
 8000970:	2000      	movs	r0, #0
 8000972:	f000 fb8d 	bl	8001090 <lcd_put_cur>

	sprintf (str_1, "SoilSensor1: %i ", Sensor1);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	4910      	ldr	r1, [pc, #64]	; (80009c0 <Display_Soil_Moisture+0x5c>)
 800097e:	4618      	mov	r0, r3
 8000980:	f006 fed0 	bl	8007724 <siprintf>
	sprintf (str_2, "SoilSensor2: %i ", Sensor2);
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	490e      	ldr	r1, [pc, #56]	; (80009c4 <Display_Soil_Moisture+0x60>)
 800098c:	4618      	mov	r0, r3
 800098e:	f006 fec9 	bl	8007724 <siprintf>
	lcd_send_string(str_1);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fbe9 	bl	800116e <lcd_send_string>
	lcd_put_cur(1, 0);
 800099c:	2100      	movs	r1, #0
 800099e:	2001      	movs	r0, #1
 80009a0:	f000 fb76 	bl	8001090 <lcd_put_cur>
	lcd_send_string(str_2);
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 fbe0 	bl	800116e <lcd_send_string>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //Debugging LED
 80009ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <Display_Soil_Moisture+0x64>)
 80009b4:	f002 fd59 	bl	800346a <HAL_GPIO_TogglePin>
	//lcd_send_data('%');
}
 80009b8:	bf00      	nop
 80009ba:	3730      	adds	r7, #48	; 0x30
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	08009ad8 	.word	0x08009ad8
 80009c4:	08009aec 	.word	0x08009aec
 80009c8:	58020400 	.word	0x58020400

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009d2:	4b5a      	ldr	r3, [pc, #360]	; (8000b3c <main+0x170>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d11b      	bne.n	8000a16 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009de:	f3bf 8f4f 	dsb	sy
}
 80009e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009e4:	f3bf 8f6f 	isb	sy
}
 80009e8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009ea:	4b54      	ldr	r3, [pc, #336]	; (8000b3c <main+0x170>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009f2:	f3bf 8f4f 	dsb	sy
}
 80009f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009f8:	f3bf 8f6f 	isb	sy
}
 80009fc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009fe:	4b4f      	ldr	r3, [pc, #316]	; (8000b3c <main+0x170>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a4e      	ldr	r2, [pc, #312]	; (8000b3c <main+0x170>)
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a08:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a0a:	f3bf 8f4f 	dsb	sy
}
 8000a0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a10:	f3bf 8f6f 	isb	sy
}
 8000a14:	e000      	b.n	8000a18 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a16:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a18:	4b48      	ldr	r3, [pc, #288]	; (8000b3c <main+0x170>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d138      	bne.n	8000a96 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a24:	4b45      	ldr	r3, [pc, #276]	; (8000b3c <main+0x170>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a2c:	f3bf 8f4f 	dsb	sy
}
 8000a30:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a32:	4b42      	ldr	r3, [pc, #264]	; (8000b3c <main+0x170>)
 8000a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a38:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	0b5b      	lsrs	r3, r3, #13
 8000a3e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a42:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	08db      	lsrs	r3, r3, #3
 8000a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a4c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	015a      	lsls	r2, r3, #5
 8000a52:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a56:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a5c:	4937      	ldr	r1, [pc, #220]	; (8000b3c <main+0x170>)
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	1e5a      	subs	r2, r3, #1
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1ef      	bne.n	8000a4e <main+0x82>
    } while(sets-- != 0U);
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1e5a      	subs	r2, r3, #1
 8000a72:	60ba      	str	r2, [r7, #8]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1e5      	bne.n	8000a44 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a78:	f3bf 8f4f 	dsb	sy
}
 8000a7c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a7e:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <main+0x170>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	4a2e      	ldr	r2, [pc, #184]	; (8000b3c <main+0x170>)
 8000a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a88:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a8a:	f3bf 8f4f 	dsb	sy
}
 8000a8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a90:	f3bf 8f6f 	isb	sy
}
 8000a94:	e000      	b.n	8000a98 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a96:	bf00      	nop
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a98:	f000 fd8e 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9c:	f000 f85e 	bl	8000b5c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000aa0:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <main+0x174>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa6:	4a26      	ldr	r2, [pc, #152]	; (8000b40 <main+0x174>)
 8000aa8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab0:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <main+0x174>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000abe:	f000 f9b5 	bl	8000e2c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ac2:	f000 f911 	bl	8000ce8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ac6:	f000 f963 	bl	8000d90 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000aca:	f000 f8bd 	bl	8000c48 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */



  nhd_LCD_Init();
 8000ace:	f000 fb11 	bl	80010f4 <nhd_LCD_Init>
  lcd_put_cur(0,1);
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f000 fadb 	bl	8001090 <lcd_put_cur>
  lcd_send_string("hiiiii there");				//LCD splashscreen
 8000ada:	481a      	ldr	r0, [pc, #104]	; (8000b44 <main+0x178>)
 8000adc:	f000 fb47 	bl	800116e <lcd_send_string>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1); // pull the pin high for initial config routine
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	4818      	ldr	r0, [pc, #96]	; (8000b48 <main+0x17c>)
 8000ae6:	f002 fca7 	bl	8003438 <HAL_GPIO_WritePin>
  HAL_Delay(3000);								//wait 3 seconds
 8000aea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000aee:	f000 fdf5 	bl	80016dc <HAL_Delay>
  while(1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lcd_clear();
 8000af2:	f000 fac3 	bl	800107c <lcd_clear>
	  poll_DHT11();
 8000af6:	f7ff fe59 	bl	80007ac <poll_DHT11>
	  Display_Temp_Rh(Temperature,Humidity);
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <main+0x180>)
 8000afc:	edd3 7a00 	vldr	s15, [r3]
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <main+0x184>)
 8000b02:	ed93 7a00 	vldr	s14, [r3]
 8000b06:	eef0 0a47 	vmov.f32	s1, s14
 8000b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b0e:	f7ff fed9 	bl	80008c4 <Display_Temp_Rh>
	  //Display_Rh(Humidity);
	  HAL_Delay(2000);			//display temp data for 4 seconds
 8000b12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b16:	f000 fde1 	bl	80016dc <HAL_Delay>
	  lcd_clear();
 8000b1a:	f000 faaf 	bl	800107c <lcd_clear>
	  poll_SOIL_SENSOR_1_2();
 8000b1e:	f7ff fcd1 	bl	80004c4 <poll_SOIL_SENSOR_1_2>
	  Display_Soil_Moisture(SoilSensor1,SoilSensor2);
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <main+0x188>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <main+0x18c>)
 8000b28:	6812      	ldr	r2, [r2, #0]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff19 	bl	8000964 <Display_Soil_Moisture>
	  HAL_Delay(2000);			//display  soil data for 4 seconds
 8000b32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b36:	f000 fdd1 	bl	80016dc <HAL_Delay>
	  lcd_clear();
 8000b3a:	e7da      	b.n	8000af2 <main+0x126>
 8000b3c:	e000ed00 	.word	0xe000ed00
 8000b40:	58024400 	.word	0x58024400
 8000b44:	08009b0c 	.word	0x08009b0c
 8000b48:	58020c00 	.word	0x58020c00
 8000b4c:	24000278 	.word	0x24000278
 8000b50:	24000290 	.word	0x24000290
 8000b54:	2400020c 	.word	0x2400020c
 8000b58:	24000274 	.word	0x24000274

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b09c      	sub	sp, #112	; 0x70
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	224c      	movs	r2, #76	; 0x4c
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f006 f98e 	bl	8006e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2220      	movs	r2, #32
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f006 f988 	bl	8006e8c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b7c:	2004      	movs	r0, #4
 8000b7e:	f002 fc8f 	bl	80034a0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <SystemClock_Config+0xe0>)
 8000b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8a:	4a2c      	ldr	r2, [pc, #176]	; (8000c3c <SystemClock_Config+0xe0>)
 8000b8c:	f023 0301 	bic.w	r3, r3, #1
 8000b90:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <SystemClock_Config+0xe0>)
 8000b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <SystemClock_Config+0xe4>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ba4:	4a26      	ldr	r2, [pc, #152]	; (8000c40 <SystemClock_Config+0xe4>)
 8000ba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <SystemClock_Config+0xe4>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bb8:	bf00      	nop
 8000bba:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <SystemClock_Config+0xe4>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bc6:	d1f8      	bne.n	8000bba <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <SystemClock_Config+0xe8>)
 8000bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bcc:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <SystemClock_Config+0xe8>)
 8000bce:	f023 0303 	bic.w	r3, r3, #3
 8000bd2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bdc:	2340      	movs	r3, #64	; 0x40
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000be4:	2300      	movs	r3, #0
 8000be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4618      	mov	r0, r3
 8000bee:	f002 fcb1 	bl	8003554 <HAL_RCC_OscConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000bf8:	f000 f9a6 	bl	8000f48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfc:	233f      	movs	r3, #63	; 0x3f
 8000bfe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c0c:	2340      	movs	r3, #64	; 0x40
 8000c0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c10:	2340      	movs	r3, #64	; 0x40
 8000c12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c18:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c1a:	2340      	movs	r3, #64	; 0x40
 8000c1c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 f8a6 	bl	8003d74 <HAL_RCC_ClockConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000c2e:	f000 f98b 	bl	8000f48 <Error_Handler>
  }
}
 8000c32:	bf00      	nop
 8000c34:	3770      	adds	r7, #112	; 0x70
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	58000400 	.word	0x58000400
 8000c40:	58024800 	.word	0x58024800
 8000c44:	58024400 	.word	0x58024400

08000c48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
 8000c68:	615a      	str	r2, [r3, #20]
 8000c6a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ce4 <MX_ADC1_Init+0x9c>)
 8000c70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c78:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c86:	2204      	movs	r2, #4
 8000c88:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c9c:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_ADC1_Init+0x98>)
 8000cca:	f000 ff69 	bl	8001ba0 <HAL_ADC_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cd4:	f000 f938 	bl	8000f48 <Error_Handler>
  }*/
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	; 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	24000210 	.word	0x24000210
 8000ce4:	40022000 	.word	0x40022000

08000ce8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <MX_TIM1_Init+0xa0>)
 8000d08:	4a20      	ldr	r2, [pc, #128]	; (8000d8c <MX_TIM1_Init+0xa4>)
 8000d0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <MX_TIM1_Init+0xa0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_TIM1_Init+0xa0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_TIM1_Init+0xa0>)
 8000d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <MX_TIM1_Init+0xa0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <MX_TIM1_Init+0xa0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <MX_TIM1_Init+0xa0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d32:	4815      	ldr	r0, [pc, #84]	; (8000d88 <MX_TIM1_Init+0xa0>)
 8000d34:	f005 fd04 	bl	8006740 <HAL_TIM_Base_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d3e:	f000 f903 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480e      	ldr	r0, [pc, #56]	; (8000d88 <MX_TIM1_Init+0xa0>)
 8000d50:	f005 fdbe 	bl	80068d0 <HAL_TIM_ConfigClockSource>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d5a:	f000 f8f5 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <MX_TIM1_Init+0xa0>)
 8000d70:	f005 ffda 	bl	8006d28 <HAL_TIMEx_MasterConfigSynchronization>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d7a:	f000 f8e5 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	3720      	adds	r7, #32
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	24000298 	.word	0x24000298
 8000d8c:	40010000 	.word	0x40010000

08000d90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dae:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000db0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000db8:	221f      	movs	r2, #31
 8000dba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967296-1;
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dd6:	4814      	ldr	r0, [pc, #80]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000dd8:	f005 fcb2 	bl	8006740 <HAL_TIM_Base_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000de2:	f000 f8b1 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4619      	mov	r1, r3
 8000df2:	480d      	ldr	r0, [pc, #52]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000df4:	f005 fd6c 	bl	80068d0 <HAL_TIM_ConfigClockSource>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dfe:	f000 f8a3 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000e10:	f005 ff8a 	bl	8006d28 <HAL_TIMEx_MasterConfigSynchronization>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e1a:	f000 f895 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	3720      	adds	r7, #32
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	240002e4 	.word	0x240002e4

08000e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	4b3d      	ldr	r3, [pc, #244]	; (8000f38 <MX_GPIO_Init+0x10c>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	4a3b      	ldr	r2, [pc, #236]	; (8000f38 <MX_GPIO_Init+0x10c>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e52:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <MX_GPIO_Init+0x10c>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e60:	4b35      	ldr	r3, [pc, #212]	; (8000f38 <MX_GPIO_Init+0x10c>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	4a34      	ldr	r2, [pc, #208]	; (8000f38 <MX_GPIO_Init+0x10c>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e70:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <MX_GPIO_Init+0x10c>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <MX_GPIO_Init+0x10c>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	4a2c      	ldr	r2, [pc, #176]	; (8000f38 <MX_GPIO_Init+0x10c>)
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <MX_GPIO_Init+0x10c>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e9c:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <MX_GPIO_Init+0x10c>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	4a25      	ldr	r2, [pc, #148]	; (8000f38 <MX_GPIO_Init+0x10c>)
 8000ea4:	f043 0310 	orr.w	r3, r3, #16
 8000ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <MX_GPIO_Init+0x10c>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec0:	481e      	ldr	r0, [pc, #120]	; (8000f3c <MX_GPIO_Init+0x110>)
 8000ec2:	f002 fab9 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	21ff      	movs	r1, #255	; 0xff
 8000eca:	481d      	ldr	r0, [pc, #116]	; (8000f40 <MX_GPIO_Init+0x114>)
 8000ecc:	f002 fab4 	bl	8003438 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	481b      	ldr	r0, [pc, #108]	; (8000f44 <MX_GPIO_Init+0x118>)
 8000ed6:	f002 faaf 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000eda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4812      	ldr	r0, [pc, #72]	; (8000f3c <MX_GPIO_Init+0x110>)
 8000ef4:	f002 f8d8 	bl	80030a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ef8:	23ff      	movs	r3, #255	; 0xff
 8000efa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480c      	ldr	r0, [pc, #48]	; (8000f40 <MX_GPIO_Init+0x114>)
 8000f10:	f002 f8ca 	bl	80030a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f14:	2301      	movs	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	; (8000f44 <MX_GPIO_Init+0x118>)
 8000f2c:	f002 f8bc 	bl	80030a8 <HAL_GPIO_Init>

}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	; 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	58024400 	.word	0x58024400
 8000f3c:	58020400 	.word	0x58020400
 8000f40:	58020c00 	.word	0x58020c00
 8000f44:	58021000 	.word	0x58021000

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <Error_Handler+0x8>
	...

08000f54 <thirty_ns_delay>:
//define the timer handler below
#define timer htim1

extern TIM_HandleTypeDef timer;
void thirty_ns_delay (int ns)				//31.25 ns delay
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&timer, 0);	//clear timer
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <thirty_ns_delay+0x30>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2200      	movs	r2, #0
 8000f62:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&timer);	//start timer
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <thirty_ns_delay+0x30>)
 8000f66:	f005 fc43 	bl	80067f0 <HAL_TIM_Base_Start_IT>
	while (__HAL_TIM_GET_COUNTER(&timer) < ns);
 8000f6a:	bf00      	nop
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <thirty_ns_delay+0x30>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d3f9      	bcc.n	8000f6c <thirty_ns_delay+0x18>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	24000298 	.word	0x24000298

08000f88 <send_to_lcd>:

void send_to_lcd (char data, int rs)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  //rs = 1 for data, rs = 0 for command
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	4819      	ldr	r0, [pc, #100]	; (8001004 <send_to_lcd+0x7c>)
 8000f9e:	f002 fa4b 	bl	8003438 <HAL_GPIO_WritePin>

	// write the data to the respective pin
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2180      	movs	r1, #128	; 0x80
 8000fb2:	4814      	ldr	r0, [pc, #80]	; (8001004 <send_to_lcd+0x7c>)
 8000fb4:	f002 fa40 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	2140      	movs	r1, #64	; 0x40
 8000fc8:	480e      	ldr	r0, [pc, #56]	; (8001004 <send_to_lcd+0x7c>)
 8000fca:	f002 fa35 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	085b      	lsrs	r3, r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	2120      	movs	r1, #32
 8000fde:	4809      	ldr	r0, [pc, #36]	; (8001004 <send_to_lcd+0x7c>)
 8000fe0:	f002 fa2a 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	461a      	mov	r2, r3
 8000fee:	2110      	movs	r1, #16
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <send_to_lcd+0x7c>)
 8000ff2:	f002 fa21 	bl	8003438 <HAL_GPIO_WritePin>

	lcd_nibble();	//pulse LCD enable pin to initiate data transfer
 8000ff6:	f000 f8cf 	bl	8001198 <lcd_nibble>
	//HAL_Delay(1);  	//wait for 1 ms while the enable pin settles

    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	58020c00 	.word	0x58020c00

08001008 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    //send upper nibble first
    datatosend = ((cmd>>4)&0x0f);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ffb3 	bl	8000f88 <send_to_lcd>

    //send lower nibble
    datatosend = ((cmd)&0x0f);
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 030f 	and.w	r3, r3, #15
 8001028:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  //RS must be 0 while sending command
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ffaa 	bl	8000f88 <send_to_lcd>

    HAL_Delay(2);
 8001034:	2002      	movs	r0, #2
 8001036:	f000 fb51 	bl	80016dc <HAL_Delay>
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	71fb      	strb	r3, [r7, #7]
	char datatosend;

    //send upper nibble first
    datatosend = ((data>>4)&0x0f);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	2101      	movs	r1, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff96 	bl	8000f88 <send_to_lcd>

    //send lower nibble
    datatosend = ((data)&0x0f);
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,1);  //RS must be 1 while sending data
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	2101      	movs	r1, #1
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff8d 	bl	8000f88 <send_to_lcd>

    HAL_Delay(2);
 800106e:	2002      	movs	r0, #2
 8001070:	f000 fb34 	bl	80016dc <HAL_Delay>
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <lcd_clear>:

void lcd_clear (void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8001080:	2001      	movs	r0, #1
 8001082:	f7ff ffc1 	bl	8001008 <lcd_send_cmd>
	HAL_Delay(2);
 8001086:	2002      	movs	r0, #2
 8001088:	f000 fb28 	bl	80016dc <HAL_Delay>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <lcd_put_cur>:

void lcd_put_cur(int row, int col) //fix for 4x20 LCD !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d81f      	bhi.n	80010e0 <lcd_put_cur+0x50>
 80010a0:	a201      	add	r2, pc, #4	; (adr r2, 80010a8 <lcd_put_cur+0x18>)
 80010a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a6:	bf00      	nop
 80010a8:	080010b9 	.word	0x080010b9
 80010ac:	080010c3 	.word	0x080010c3
 80010b0:	080010cd 	.word	0x080010cd
 80010b4:	080010d7 	.word	0x080010d7
    switch (row)
    {
        case 0:
            col |= 0x80;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010be:	603b      	str	r3, [r7, #0]
            break;
 80010c0:	e00e      	b.n	80010e0 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010c8:	603b      	str	r3, [r7, #0]
            break;
 80010ca:	e009      	b.n	80010e0 <lcd_put_cur+0x50>
        case 2:
            col |= 0x40;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d2:	603b      	str	r3, [r7, #0]
            break;
 80010d4:	e004      	b.n	80010e0 <lcd_put_cur+0x50>
        case 3:
            col |= 0xF0;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80010dc:	603b      	str	r3, [r7, #0]
            break;
 80010de:	bf00      	nop
    }

    lcd_send_cmd (col);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff8f 	bl	8001008 <lcd_send_cmd>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop

080010f4 <nhd_LCD_Init>:


void nhd_LCD_Init (void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	//4 bit initialization
	HAL_Delay(50);  //wait for >40ms
 80010f8:	2032      	movs	r0, #50	; 0x32
 80010fa:	f000 faef 	bl	80016dc <HAL_Delay>
	lcd_send_cmd (0x30);
 80010fe:	2030      	movs	r0, #48	; 0x30
 8001100:	f7ff ff82 	bl	8001008 <lcd_send_cmd>
	HAL_Delay(5);  //wait for >4.1ms
 8001104:	2005      	movs	r0, #5
 8001106:	f000 fae9 	bl	80016dc <HAL_Delay>
	lcd_send_cmd (0x30);
 800110a:	2030      	movs	r0, #48	; 0x30
 800110c:	f7ff ff7c 	bl	8001008 <lcd_send_cmd>
	HAL_Delay(1);  //wait for >100us
 8001110:	2001      	movs	r0, #1
 8001112:	f000 fae3 	bl	80016dc <HAL_Delay>
	lcd_send_cmd (0x30);
 8001116:	2030      	movs	r0, #48	; 0x30
 8001118:	f7ff ff76 	bl	8001008 <lcd_send_cmd>
	HAL_Delay(10);
 800111c:	200a      	movs	r0, #10
 800111e:	f000 fadd 	bl	80016dc <HAL_Delay>
	lcd_send_cmd (0x20);  //4bit mode
 8001122:	2020      	movs	r0, #32
 8001124:	f7ff ff70 	bl	8001008 <lcd_send_cmd>
	HAL_Delay(10);
 8001128:	200a      	movs	r0, #10
 800112a:	f000 fad7 	bl	80016dc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	HAL_Delay(1);
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
	*/

	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800112e:	2028      	movs	r0, #40	; 0x28
 8001130:	f7ff ff6a 	bl	8001008 <lcd_send_cmd>
	HAL_Delay(1);
 8001134:	2001      	movs	r0, #1
 8001136:	f000 fad1 	bl	80016dc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800113a:	2008      	movs	r0, #8
 800113c:	f7ff ff64 	bl	8001008 <lcd_send_cmd>
	HAL_Delay(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f000 facb 	bl	80016dc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001146:	2001      	movs	r0, #1
 8001148:	f7ff ff5e 	bl	8001008 <lcd_send_cmd>
	HAL_Delay(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f000 fac5 	bl	80016dc <HAL_Delay>
	HAL_Delay(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f000 fac2 	bl	80016dc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001158:	2006      	movs	r0, #6
 800115a:	f7ff ff55 	bl	8001008 <lcd_send_cmd>
	HAL_Delay(1);
 800115e:	2001      	movs	r0, #1
 8001160:	f000 fabc 	bl	80016dc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001164:	200c      	movs	r0, #12
 8001166:	f7ff ff4f 	bl	8001008 <lcd_send_cmd>


}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}

0800116e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001176:	e006      	b.n	8001186 <lcd_send_string+0x18>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5e 	bl	8001042 <lcd_send_data>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f4      	bne.n	8001178 <lcd_send_string+0xa>
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <lcd_nibble>:

void lcd_nibble() {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 800119c:	2201      	movs	r2, #1
 800119e:	2108      	movs	r1, #8
 80011a0:	4806      	ldr	r0, [pc, #24]	; (80011bc <lcd_nibble+0x24>)
 80011a2:	f002 f949 	bl	8003438 <HAL_GPIO_WritePin>
	thirty_ns_delay(11);			//343.75 ns delay > required 325ns enable pulse width delay
 80011a6:	200b      	movs	r0, #11
 80011a8:	f7ff fed4 	bl	8000f54 <thirty_ns_delay>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); 	//debugging LED
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2108      	movs	r1, #8
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <lcd_nibble+0x24>)
 80011b2:	f002 f941 	bl	8003438 <HAL_GPIO_WritePin>
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	58020c00 	.word	0x58020c00

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_MspInit+0x30>)
 80011c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011cc:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <HAL_MspInit+0x30>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_MspInit+0x30>)
 80011d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	58024400 	.word	0x58024400

080011f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0ba      	sub	sp, #232	; 0xe8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800120c:	f107 0318 	add.w	r3, r7, #24
 8001210:	22bc      	movs	r2, #188	; 0xbc
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f005 fe39 	bl	8006e8c <memset>
  if(hadc->Instance==ADC1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a39      	ldr	r2, [pc, #228]	; (8001304 <HAL_ADC_MspInit+0x110>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d16a      	bne.n	80012fa <HAL_ADC_MspInit+0x106>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001224:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001228:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800122a:	2304      	movs	r3, #4
 800122c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 800122e:	230a      	movs	r3, #10
 8001230:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8001232:	2305      	movs	r3, #5
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001236:	2302      	movs	r3, #2
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800123a:	2302      	movs	r3, #2
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800123e:	23c0      	movs	r3, #192	; 0xc0
 8001240:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001242:	2320      	movs	r3, #32
 8001244:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001250:	f107 0318 	add.w	r3, r7, #24
 8001254:	4618      	mov	r0, r3
 8001256:	f003 f8ed 	bl	8004434 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001260:	f7ff fe72 	bl	8000f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <HAL_ADC_MspInit+0x114>)
 8001266:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800126a:	4a27      	ldr	r2, [pc, #156]	; (8001308 <HAL_ADC_MspInit+0x114>)
 800126c:	f043 0320 	orr.w	r3, r3, #32
 8001270:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_ADC_MspInit+0x114>)
 8001276:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800127a:	f003 0320 	and.w	r3, r3, #32
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <HAL_ADC_MspInit+0x114>)
 8001284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001288:	4a1f      	ldr	r2, [pc, #124]	; (8001308 <HAL_ADC_MspInit+0x114>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HAL_ADC_MspInit+0x114>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_ADC_MspInit+0x114>)
 80012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a6:	4a18      	ldr	r2, [pc, #96]	; (8001308 <HAL_ADC_MspInit+0x114>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_ADC_MspInit+0x114>)
 80012b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012be:	2340      	movs	r3, #64	; 0x40
 80012c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c4:	2303      	movs	r3, #3
 80012c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012d4:	4619      	mov	r1, r3
 80012d6:	480d      	ldr	r0, [pc, #52]	; (800130c <HAL_ADC_MspInit+0x118>)
 80012d8:	f001 fee6 	bl	80030a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012dc:	2302      	movs	r3, #2
 80012de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4806      	ldr	r0, [pc, #24]	; (8001310 <HAL_ADC_MspInit+0x11c>)
 80012f6:	f001 fed7 	bl	80030a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012fa:	bf00      	nop
 80012fc:	37e8      	adds	r7, #232	; 0xe8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40022000 	.word	0x40022000
 8001308:	58024400 	.word	0x58024400
 800130c:	58020000 	.word	0x58020000
 8001310:	58020400 	.word	0x58020400

08001314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a16      	ldr	r2, [pc, #88]	; (800137c <HAL_TIM_Base_MspInit+0x68>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d10f      	bne.n	8001346 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_TIM_Base_MspInit+0x6c>)
 8001328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800132c:	4a14      	ldr	r2, [pc, #80]	; (8001380 <HAL_TIM_Base_MspInit+0x6c>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_TIM_Base_MspInit+0x6c>)
 8001338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001344:	e013      	b.n	800136e <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800134e:	d10e      	bne.n	800136e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_TIM_Base_MspInit+0x6c>)
 8001352:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <HAL_TIM_Base_MspInit+0x6c>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <HAL_TIM_Base_MspInit+0x6c>)
 8001362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40010000 	.word	0x40010000
 8001380:	58024400 	.word	0x58024400

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d0:	f000 f964 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	return 1;
 80013dc:	2301      	movs	r3, #1
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_kill>:

int _kill(int pid, int sig)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013f2:	f005 fd21 	bl	8006e38 <__errno>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2216      	movs	r2, #22
 80013fa:	601a      	str	r2, [r3, #0]
	return -1;
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <_exit>:

void _exit (int status)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ffe7 	bl	80013e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800141a:	e7fe      	b.n	800141a <_exit+0x12>

0800141c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e00a      	b.n	8001444 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800142e:	f3af 8000 	nop.w
 8001432:	4601      	mov	r1, r0
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	60ba      	str	r2, [r7, #8]
 800143a:	b2ca      	uxtb	r2, r1
 800143c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	dbf0      	blt.n	800142e <_read+0x12>
	}

return len;
 800144c:	687b      	ldr	r3, [r7, #4]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	e009      	b.n	800147c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	60ba      	str	r2, [r7, #8]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	429a      	cmp	r2, r3
 8001482:	dbf1      	blt.n	8001468 <_write+0x12>
	}
	return len;
 8001484:	687b      	ldr	r3, [r7, #4]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <_close>:

int _close(int file)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
	return -1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014b6:	605a      	str	r2, [r3, #4]
	return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <_isatty>:

int _isatty(int file)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
	return 1;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
	return 0;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001500:	4a14      	ldr	r2, [pc, #80]	; (8001554 <_sbrk+0x5c>)
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <_sbrk+0x60>)
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <_sbrk+0x64>)
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <_sbrk+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	429a      	cmp	r2, r3
 8001526:	d207      	bcs.n	8001538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001528:	f005 fc86 	bl	8006e38 <__errno>
 800152c:	4603      	mov	r3, r0
 800152e:	220c      	movs	r2, #12
 8001530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	e009      	b.n	800154c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <_sbrk+0x64>)
 8001548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	24080000 	.word	0x24080000
 8001558:	00000400 	.word	0x00000400
 800155c:	24000200 	.word	0x24000200
 8001560:	24000348 	.word	0x24000348

08001564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800159c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001568:	f7fe ff12 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800156c:	480c      	ldr	r0, [pc, #48]	; (80015a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800156e:	490d      	ldr	r1, [pc, #52]	; (80015a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001570:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001574:	e002      	b.n	800157c <LoopCopyDataInit>

08001576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157a:	3304      	adds	r3, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001580:	d3f9      	bcc.n	8001576 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001584:	4c0a      	ldr	r4, [pc, #40]	; (80015b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001588:	e001      	b.n	800158e <LoopFillZerobss>

0800158a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158c:	3204      	adds	r2, #4

0800158e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001590:	d3fb      	bcc.n	800158a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001592:	f005 fc57 	bl	8006e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001596:	f7ff fa19 	bl	80009cc <main>
  bx  lr
 800159a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800159c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015a4:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80015a8:	08009f14 	.word	0x08009f14
  ldr r2, =_sbss
 80015ac:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80015b0:	24000344 	.word	0x24000344

080015b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC3_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015be:	2003      	movs	r0, #3
 80015c0:	f001 fd40 	bl	8003044 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015c4:	f002 fd8c 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 80015c8:	4602      	mov	r2, r0
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_Init+0x68>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	0a1b      	lsrs	r3, r3, #8
 80015d0:	f003 030f 	and.w	r3, r3, #15
 80015d4:	4913      	ldr	r1, [pc, #76]	; (8001624 <HAL_Init+0x6c>)
 80015d6:	5ccb      	ldrb	r3, [r1, r3]
 80015d8:	f003 031f 	and.w	r3, r3, #31
 80015dc:	fa22 f303 	lsr.w	r3, r2, r3
 80015e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_Init+0x68>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <HAL_Init+0x6c>)
 80015ec:	5cd3      	ldrb	r3, [r2, r3]
 80015ee:	f003 031f 	and.w	r3, r3, #31
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	fa22 f303 	lsr.w	r3, r2, r3
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <HAL_Init+0x70>)
 80015fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015fc:	4a0b      	ldr	r2, [pc, #44]	; (800162c <HAL_Init+0x74>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001602:	2000      	movs	r0, #0
 8001604:	f000 f814 	bl	8001630 <HAL_InitTick>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e002      	b.n	8001618 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001612:	f7ff fdd5 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	58024400 	.word	0x58024400
 8001624:	08009b1c 	.word	0x08009b1c
 8001628:	24000004 	.word	0x24000004
 800162c:	24000000 	.word	0x24000000

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_InitTick+0x60>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e021      	b.n	8001688 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <HAL_InitTick+0x64>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_InitTick+0x60>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f001 fd17 	bl	800308e <HAL_SYSTICK_Config>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e00e      	b.n	8001688 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d80a      	bhi.n	8001686 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f001 fcef 	bl	800305a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800167c:	4a06      	ldr	r2, [pc, #24]	; (8001698 <HAL_InitTick+0x68>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2400000c 	.word	0x2400000c
 8001694:	24000000 	.word	0x24000000
 8001698:	24000008 	.word	0x24000008

0800169c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_IncTick+0x20>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x24>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <HAL_IncTick+0x24>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	2400000c 	.word	0x2400000c
 80016c0:	24000330 	.word	0x24000330

080016c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <HAL_GetTick+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	24000330 	.word	0x24000330

080016dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e4:	f7ff ffee 	bl	80016c4 <HAL_GetTick>
 80016e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d005      	beq.n	8001702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_Delay+0x44>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001702:	bf00      	nop
 8001704:	f7ff ffde 	bl	80016c4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	429a      	cmp	r2, r3
 8001712:	d8f7      	bhi.n	8001704 <HAL_Delay+0x28>
  {
  }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2400000c 	.word	0x2400000c

08001724 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <HAL_GetREVID+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	0c1b      	lsrs	r3, r3, #16
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	5c001000 	.word	0x5c001000

0800173c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	609a      	str	r2, [r3, #8]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	609a      	str	r2, [r3, #8]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	3360      	adds	r3, #96	; 0x60
 80017b6:	461a      	mov	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	430b      	orrs	r3, r1
 80017d2:	431a      	orrs	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80017d8:	bf00      	nop
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	431a      	orrs	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	611a      	str	r2, [r3, #16]
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001816:	b480      	push	{r7}
 8001818:	b087      	sub	sp, #28
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	3360      	adds	r3, #96	; 0x60
 8001826:	461a      	mov	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	431a      	orrs	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	601a      	str	r2, [r3, #0]
  }
}
 8001840:	bf00      	nop
 8001842:	371c      	adds	r7, #28
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001872:	b480      	push	{r7}
 8001874:	b087      	sub	sp, #28
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3330      	adds	r3, #48	; 0x30
 8001882:	461a      	mov	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	0a1b      	lsrs	r3, r3, #8
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	4413      	add	r3, r2
 8001890:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	211f      	movs	r1, #31
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	401a      	ands	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	0e9b      	lsrs	r3, r3, #26
 80018aa:	f003 011f 	and.w	r1, r3, #31
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	431a      	orrs	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018be:	bf00      	nop
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b087      	sub	sp, #28
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3314      	adds	r3, #20
 80018da:	461a      	mov	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	0e5b      	lsrs	r3, r3, #25
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	4413      	add	r3, r2
 80018e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	0d1b      	lsrs	r3, r3, #20
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	2107      	movs	r1, #7
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	401a      	ands	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	0d1b      	lsrs	r3, r3, #20
 8001904:	f003 031f 	and.w	r3, r3, #31
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	431a      	orrs	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001914:	bf00      	nop
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001938:	43db      	mvns	r3, r3
 800193a:	401a      	ands	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0318 	and.w	r3, r3, #24
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001944:	40d9      	lsrs	r1, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	400b      	ands	r3, r1
 800194a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800194e:	431a      	orrs	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	000fffff 	.word	0x000fffff

08001968 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 031f 	and.w	r3, r3, #31
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6093      	str	r3, [r2, #8]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	5fffffc0 	.word	0x5fffffc0

080019c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019d8:	d101      	bne.n	80019de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <LL_ADC_EnableInternalRegulator+0x24>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	6fffffc0 	.word	0x6fffffc0

08001a14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a28:	d101      	bne.n	8001a2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <LL_ADC_Enable+0x24>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	f043 0201 	orr.w	r2, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	7fffffc0 	.word	0x7fffffc0

08001a64 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <LL_ADC_Disable+0x24>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	f043 0202 	orr.w	r2, r3, #2
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	7fffffc0 	.word	0x7fffffc0

08001a8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <LL_ADC_IsEnabled+0x18>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <LL_ADC_IsEnabled+0x1a>
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d101      	bne.n	8001aca <LL_ADC_IsDisableOngoing+0x18>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <LL_ADC_IsDisableOngoing+0x1a>
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <LL_ADC_REG_StartConversion+0x24>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	f043 0204 	orr.w	r2, r3, #4
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	7fffffc0 	.word	0x7fffffc0

08001b00 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <LL_ADC_REG_StopConversion+0x24>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	f043 0210 	orr.w	r2, r3, #16
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	7fffffc0 	.word	0x7fffffc0

08001b28 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d101      	bne.n	8001b40 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <LL_ADC_INJ_StopConversion+0x24>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	f043 0220 	orr.w	r2, r3, #32
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	7fffffc0 	.word	0x7fffffc0

08001b78 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d101      	bne.n	8001b90 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e18e      	b.n	8001ed8 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d109      	bne.n	8001bdc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fb13 	bl	80011f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff feef 	bl	80019c4 <LL_ADC_IsDeepPowerDownEnabled>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d004      	beq.n	8001bf6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fed5 	bl	80019a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff0a 	bl	8001a14 <LL_ADC_IsInternalRegulatorEnabled>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d114      	bne.n	8001c30 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff feee 	bl	80019ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c10:	4b9a      	ldr	r3, [pc, #616]	; (8001e7c <HAL_ADC_Init+0x2dc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	099b      	lsrs	r3, r3, #6
 8001c16:	4a9a      	ldr	r2, [pc, #616]	; (8001e80 <HAL_ADC_Init+0x2e0>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	3301      	adds	r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c22:	e002      	b.n	8001c2a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f9      	bne.n	8001c24 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff feed 	bl	8001a14 <LL_ADC_IsInternalRegulatorEnabled>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10d      	bne.n	8001c5c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c44:	f043 0210 	orr.w	r2, r3, #16
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c50:	f043 0201 	orr.w	r2, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff61 	bl	8001b28 <LL_ADC_REG_IsConversionOngoing>
 8001c66:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f040 8128 	bne.w	8001ec6 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f040 8124 	bne.w	8001ec6 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c82:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c86:	f043 0202 	orr.w	r2, r3, #2
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fefa 	bl	8001a8c <LL_ADC_IsEnabled>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d136      	bne.n	8001d0c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a78      	ldr	r2, [pc, #480]	; (8001e84 <HAL_ADC_Init+0x2e4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d004      	beq.n	8001cb2 <HAL_ADC_Init+0x112>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a76      	ldr	r2, [pc, #472]	; (8001e88 <HAL_ADC_Init+0x2e8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d10e      	bne.n	8001cd0 <HAL_ADC_Init+0x130>
 8001cb2:	4874      	ldr	r0, [pc, #464]	; (8001e84 <HAL_ADC_Init+0x2e4>)
 8001cb4:	f7ff feea 	bl	8001a8c <LL_ADC_IsEnabled>
 8001cb8:	4604      	mov	r4, r0
 8001cba:	4873      	ldr	r0, [pc, #460]	; (8001e88 <HAL_ADC_Init+0x2e8>)
 8001cbc:	f7ff fee6 	bl	8001a8c <LL_ADC_IsEnabled>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4323      	orrs	r3, r4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	2300      	movne	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e008      	b.n	8001ce2 <HAL_ADC_Init+0x142>
 8001cd0:	486e      	ldr	r0, [pc, #440]	; (8001e8c <HAL_ADC_Init+0x2ec>)
 8001cd2:	f7ff fedb 	bl	8001a8c <LL_ADC_IsEnabled>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bf0c      	ite	eq
 8001cdc:	2301      	moveq	r3, #1
 8001cde:	2300      	movne	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d012      	beq.n	8001d0c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a66      	ldr	r2, [pc, #408]	; (8001e84 <HAL_ADC_Init+0x2e4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d004      	beq.n	8001cfa <HAL_ADC_Init+0x15a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a64      	ldr	r2, [pc, #400]	; (8001e88 <HAL_ADC_Init+0x2e8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_Init+0x15e>
 8001cfa:	4a65      	ldr	r2, [pc, #404]	; (8001e90 <HAL_ADC_Init+0x2f0>)
 8001cfc:	e000      	b.n	8001d00 <HAL_ADC_Init+0x160>
 8001cfe:	4a65      	ldr	r2, [pc, #404]	; (8001e94 <HAL_ADC_Init+0x2f4>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	4619      	mov	r1, r3
 8001d06:	4610      	mov	r0, r2
 8001d08:	f7ff fd18 	bl	800173c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001d0c:	f7ff fd0a 	bl	8001724 <HAL_GetREVID>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d914      	bls.n	8001d44 <HAL_ADC_Init+0x1a4>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d110      	bne.n	8001d44 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	7d5b      	ldrb	r3, [r3, #21]
 8001d26:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d2c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d32:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7f1b      	ldrb	r3, [r3, #28]
 8001d38:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d3a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d3c:	f043 030c 	orr.w	r3, r3, #12
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	e00d      	b.n	8001d60 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7d5b      	ldrb	r3, [r3, #21]
 8001d48:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d4e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d54:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7f1b      	ldrb	r3, [r3, #28]
 8001d5a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7f1b      	ldrb	r3, [r3, #28]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	045b      	lsls	r3, r3, #17
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	4b3f      	ldr	r3, [pc, #252]	; (8001e98 <HAL_ADC_Init+0x2f8>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	69b9      	ldr	r1, [r7, #24]
 8001da2:	430b      	orrs	r3, r1
 8001da4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff febc 	bl	8001b28 <LL_ADC_REG_IsConversionOngoing>
 8001db0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fede 	bl	8001b78 <LL_ADC_INJ_IsConversionOngoing>
 8001dbc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d14a      	bne.n	8001e5a <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d147      	bne.n	8001e5a <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7d1b      	ldrb	r3, [r3, #20]
 8001dce:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	4b2f      	ldr	r3, [pc, #188]	; (8001e9c <HAL_ADC_Init+0x2fc>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	69b9      	ldr	r1, [r7, #24]
 8001de8:	430b      	orrs	r3, r1
 8001dea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d11b      	bne.n	8001e2e <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <HAL_ADC_Init+0x300>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e0a:	3a01      	subs	r2, #1
 8001e0c:	0411      	lsls	r1, r2, #16
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e12:	4311      	orrs	r1, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e18:	4311      	orrs	r1, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	611a      	str	r2, [r3, #16]
 8001e2c:	e007      	b.n	8001e3e <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 ff39 	bl	8002ccc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d120      	bne.n	8001ea4 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	f023 010f 	bic.w	r1, r3, #15
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	1e5a      	subs	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	631a      	str	r2, [r3, #48]	; 0x30
 8001e7a:	e01b      	b.n	8001eb4 <HAL_ADC_Init+0x314>
 8001e7c:	24000000 	.word	0x24000000
 8001e80:	053e2d63 	.word	0x053e2d63
 8001e84:	40022000 	.word	0x40022000
 8001e88:	40022100 	.word	0x40022100
 8001e8c:	58026000 	.word	0x58026000
 8001e90:	40022300 	.word	0x40022300
 8001e94:	58026300 	.word	0x58026300
 8001e98:	fff0c003 	.word	0xfff0c003
 8001e9c:	ffffbffc 	.word	0xffffbffc
 8001ea0:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 020f 	bic.w	r2, r2, #15
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb8:	f023 0303 	bic.w	r3, r3, #3
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54
 8001ec4:	e007      	b.n	8001ed6 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f043 0210 	orr.w	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ed6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3724      	adds	r7, #36	; 0x24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd90      	pop	{r4, r7, pc}

08001ee0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a5c      	ldr	r2, [pc, #368]	; (8002060 <HAL_ADC_Start+0x180>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d004      	beq.n	8001efc <HAL_ADC_Start+0x1c>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a5b      	ldr	r2, [pc, #364]	; (8002064 <HAL_ADC_Start+0x184>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_Start+0x20>
 8001efc:	4b5a      	ldr	r3, [pc, #360]	; (8002068 <HAL_ADC_Start+0x188>)
 8001efe:	e000      	b.n	8001f02 <HAL_ADC_Start+0x22>
 8001f00:	4b5a      	ldr	r3, [pc, #360]	; (800206c <HAL_ADC_Start+0x18c>)
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fd30 	bl	8001968 <LL_ADC_GetMultimode>
 8001f08:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fe0a 	bl	8001b28 <LL_ADC_REG_IsConversionOngoing>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 809a 	bne.w	8002050 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_Start+0x4a>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e095      	b.n	8002056 <HAL_ADC_Start+0x176>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fde0 	bl	8002af8 <ADC_Enable>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f040 8081 	bne.w	8002046 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f48:	4b49      	ldr	r3, [pc, #292]	; (8002070 <HAL_ADC_Start+0x190>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a42      	ldr	r2, [pc, #264]	; (8002064 <HAL_ADC_Start+0x184>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d002      	beq.n	8001f64 <HAL_ADC_Start+0x84>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	e000      	b.n	8001f66 <HAL_ADC_Start+0x86>
 8001f64:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <HAL_ADC_Start+0x180>)
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d002      	beq.n	8001f74 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d105      	bne.n	8001f80 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f8c:	d106      	bne.n	8001f9c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	f023 0206 	bic.w	r2, r3, #6
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	659a      	str	r2, [r3, #88]	; 0x58
 8001f9a:	e002      	b.n	8001fa2 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	221c      	movs	r2, #28
 8001fa8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a2b      	ldr	r2, [pc, #172]	; (8002064 <HAL_ADC_Start+0x184>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d002      	beq.n	8001fc2 <HAL_ADC_Start+0xe2>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	e000      	b.n	8001fc4 <HAL_ADC_Start+0xe4>
 8001fc2:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_ADC_Start+0x180>)
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d008      	beq.n	8001fde <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d002      	beq.n	8001fde <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b09      	cmp	r3, #9
 8001fdc:	d114      	bne.n	8002008 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ff4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fd69 	bl	8001ad8 <LL_ADC_REG_StartConversion>
 8002006:	e025      	b.n	8002054 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a12      	ldr	r2, [pc, #72]	; (8002064 <HAL_ADC_Start+0x184>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d002      	beq.n	8002024 <HAL_ADC_Start+0x144>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	e000      	b.n	8002026 <HAL_ADC_Start+0x146>
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_ADC_Start+0x180>)
 8002026:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00f      	beq.n	8002054 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002038:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800203c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	655a      	str	r2, [r3, #84]	; 0x54
 8002044:	e006      	b.n	8002054 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800204e:	e001      	b.n	8002054 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002050:	2302      	movs	r3, #2
 8002052:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002054:	7dfb      	ldrb	r3, [r7, #23]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40022000 	.word	0x40022000
 8002064:	40022100 	.word	0x40022100
 8002068:	40022300 	.word	0x40022300
 800206c:	58026300 	.word	0x58026300
 8002070:	fffff0fe 	.word	0xfffff0fe

08002074 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_ADC_Stop+0x16>
 8002086:	2302      	movs	r3, #2
 8002088:	e021      	b.n	80020ce <HAL_ADC_Stop+0x5a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002092:	2103      	movs	r1, #3
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fc73 	bl	8002980 <ADC_ConversionStop>
 800209a:	4603      	mov	r3, r0
 800209c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10f      	bne.n	80020c4 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 fdb1 	bl	8002c0c <ADC_Disable>
 80020aa:	4603      	mov	r3, r0
 80020ac:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d107      	bne.n	80020c4 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020b8:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <HAL_ADC_Stop+0x64>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	ffffeefe 	.word	0xffffeefe

080020dc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a72      	ldr	r2, [pc, #456]	; (80022b4 <HAL_ADC_PollForConversion+0x1d8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d004      	beq.n	80020fa <HAL_ADC_PollForConversion+0x1e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a70      	ldr	r2, [pc, #448]	; (80022b8 <HAL_ADC_PollForConversion+0x1dc>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_PollForConversion+0x22>
 80020fa:	4b70      	ldr	r3, [pc, #448]	; (80022bc <HAL_ADC_PollForConversion+0x1e0>)
 80020fc:	e000      	b.n	8002100 <HAL_ADC_PollForConversion+0x24>
 80020fe:	4b70      	ldr	r3, [pc, #448]	; (80022c0 <HAL_ADC_PollForConversion+0x1e4>)
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fc31 	bl	8001968 <LL_ADC_GetMultimode>
 8002106:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	2b08      	cmp	r3, #8
 800210e:	d102      	bne.n	8002116 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002110:	2308      	movs	r3, #8
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	e037      	b.n	8002186 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b05      	cmp	r3, #5
 8002120:	d002      	beq.n	8002128 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b09      	cmp	r3, #9
 8002126:	d111      	bne.n	800214c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f043 0220 	orr.w	r2, r3, #32
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e0b1      	b.n	80022aa <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002146:	2304      	movs	r3, #4
 8002148:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800214a:	e01c      	b.n	8002186 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a58      	ldr	r2, [pc, #352]	; (80022b4 <HAL_ADC_PollForConversion+0x1d8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d004      	beq.n	8002160 <HAL_ADC_PollForConversion+0x84>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a57      	ldr	r2, [pc, #348]	; (80022b8 <HAL_ADC_PollForConversion+0x1dc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d101      	bne.n	8002164 <HAL_ADC_PollForConversion+0x88>
 8002160:	4b56      	ldr	r3, [pc, #344]	; (80022bc <HAL_ADC_PollForConversion+0x1e0>)
 8002162:	e000      	b.n	8002166 <HAL_ADC_PollForConversion+0x8a>
 8002164:	4b56      	ldr	r3, [pc, #344]	; (80022c0 <HAL_ADC_PollForConversion+0x1e4>)
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fc0c 	bl	8001984 <LL_ADC_GetMultiDMATransfer>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d007      	beq.n	8002182 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	f043 0220 	orr.w	r2, r3, #32
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e093      	b.n	80022aa <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002182:	2304      	movs	r3, #4
 8002184:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002186:	f7ff fa9d 	bl	80016c4 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800218c:	e021      	b.n	80021d2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d01d      	beq.n	80021d2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002196:	f7ff fa95 	bl	80016c4 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d302      	bcc.n	80021ac <HAL_ADC_PollForConversion+0xd0>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d112      	bne.n	80021d2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10b      	bne.n	80021d2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	f043 0204 	orr.w	r2, r3, #4
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e06b      	b.n	80022aa <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0d6      	beq.n	800218e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fb2b 	bl	800184c <LL_ADC_REG_IsTriggerSourceSWStart>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01c      	beq.n	8002236 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7d5b      	ldrb	r3, [r3, #21]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d118      	bne.n	8002236 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b08      	cmp	r3, #8
 8002210:	d111      	bne.n	8002236 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <HAL_ADC_PollForConversion+0x1dc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d002      	beq.n	8002246 <HAL_ADC_PollForConversion+0x16a>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	e000      	b.n	8002248 <HAL_ADC_PollForConversion+0x16c>
 8002246:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <HAL_ADC_PollForConversion+0x1d8>)
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	4293      	cmp	r3, r2
 800224e:	d008      	beq.n	8002262 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b05      	cmp	r3, #5
 800225a:	d002      	beq.n	8002262 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2b09      	cmp	r3, #9
 8002260:	d104      	bne.n	800226c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	e00c      	b.n	8002286 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a11      	ldr	r2, [pc, #68]	; (80022b8 <HAL_ADC_PollForConversion+0x1dc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d002      	beq.n	800227c <HAL_ADC_PollForConversion+0x1a0>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	e000      	b.n	800227e <HAL_ADC_PollForConversion+0x1a2>
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <HAL_ADC_PollForConversion+0x1d8>)
 800227e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	2b08      	cmp	r3, #8
 800228a:	d104      	bne.n	8002296 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2208      	movs	r2, #8
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	e008      	b.n	80022a8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d103      	bne.n	80022a8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	220c      	movs	r2, #12
 80022a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3720      	adds	r7, #32
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40022000 	.word	0x40022000
 80022b8:	40022100 	.word	0x40022100
 80022bc:	40022300 	.word	0x40022300
 80022c0:	58026300 	.word	0x58026300

080022c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	b0a1      	sub	sp, #132	; 0x84
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a9d      	ldr	r2, [pc, #628]	; (8002570 <HAL_ADC_ConfigChannel+0x290>)
 80022fa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_ADC_ConfigChannel+0x2a>
 8002306:	2302      	movs	r3, #2
 8002308:	e321      	b.n	800294e <HAL_ADC_ConfigChannel+0x66e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fc06 	bl	8001b28 <LL_ADC_REG_IsConversionOngoing>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 8306 	bne.w	8002930 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800232c:	2b00      	cmp	r3, #0
 800232e:	d108      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x62>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	2201      	movs	r2, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	e016      	b.n	8002370 <HAL_ADC_ConfigChannel+0x90>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002352:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002354:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800235a:	2320      	movs	r3, #32
 800235c:	e003      	b.n	8002366 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800235e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002360:	fab3 f383 	clz	r3, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	2201      	movs	r2, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	69d1      	ldr	r1, [r2, #28]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	430b      	orrs	r3, r1
 800237c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6859      	ldr	r1, [r3, #4]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	f7ff fa71 	bl	8001872 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fbc7 	bl	8001b28 <LL_ADC_REG_IsConversionOngoing>
 800239a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fbe9 	bl	8001b78 <LL_ADC_INJ_IsConversionOngoing>
 80023a6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 80b3 	bne.w	8002516 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 80af 	bne.w	8002516 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6819      	ldr	r1, [r3, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	461a      	mov	r2, r3
 80023c6:	f7ff fa80 	bl	80018ca <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023ca:	4b6a      	ldr	r3, [pc, #424]	; (8002574 <HAL_ADC_ConfigChannel+0x294>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80023d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023d6:	d10b      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x110>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	e01d      	b.n	800242c <HAL_ADC_ConfigChannel+0x14c>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10b      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x136>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	e00a      	b.n	800242c <HAL_ADC_ConfigChannel+0x14c>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b04      	cmp	r3, #4
 8002434:	d027      	beq.n	8002486 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6919      	ldr	r1, [r3, #16]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002444:	f7ff f9ae 	bl	80017a4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	6919      	ldr	r1, [r3, #16]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	7e5b      	ldrb	r3, [r3, #25]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d102      	bne.n	800245e <HAL_ADC_ConfigChannel+0x17e>
 8002458:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800245c:	e000      	b.n	8002460 <HAL_ADC_ConfigChannel+0x180>
 800245e:	2300      	movs	r3, #0
 8002460:	461a      	mov	r2, r3
 8002462:	f7ff f9d8 	bl	8001816 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6919      	ldr	r1, [r3, #16]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	7e1b      	ldrb	r3, [r3, #24]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d102      	bne.n	800247c <HAL_ADC_ConfigChannel+0x19c>
 8002476:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800247a:	e000      	b.n	800247e <HAL_ADC_ConfigChannel+0x19e>
 800247c:	2300      	movs	r3, #0
 800247e:	461a      	mov	r2, r3
 8002480:	f7ff f9b0 	bl	80017e4 <LL_ADC_SetDataRightShift>
 8002484:	e047      	b.n	8002516 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	069b      	lsls	r3, r3, #26
 8002496:	429a      	cmp	r2, r3
 8002498:	d107      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024a8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	069b      	lsls	r3, r3, #26
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d107      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024cc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	069b      	lsls	r3, r3, #26
 80024de:	429a      	cmp	r2, r3
 80024e0:	d107      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024f0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	069b      	lsls	r3, r3, #26
 8002502:	429a      	cmp	r2, r3
 8002504:	d107      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002514:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fab6 	bl	8001a8c <LL_ADC_IsEnabled>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 820d 	bne.w	8002942 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6819      	ldr	r1, [r3, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	461a      	mov	r2, r3
 8002536:	f7ff f9f3 	bl	8001920 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4a0c      	ldr	r2, [pc, #48]	; (8002570 <HAL_ADC_ConfigChannel+0x290>)
 8002540:	4293      	cmp	r3, r2
 8002542:	f040 8133 	bne.w	80027ac <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002552:	2b00      	cmp	r3, #0
 8002554:	d110      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x298>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	0e9b      	lsrs	r3, r3, #26
 800255c:	3301      	adds	r3, #1
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	2b09      	cmp	r3, #9
 8002564:	bf94      	ite	ls
 8002566:	2301      	movls	r3, #1
 8002568:	2300      	movhi	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	e01e      	b.n	80025ac <HAL_ADC_ConfigChannel+0x2cc>
 800256e:	bf00      	nop
 8002570:	47ff0000 	.word	0x47ff0000
 8002574:	5c001000 	.word	0x5c001000
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002588:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800258a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002590:	2320      	movs	r3, #32
 8002592:	e003      	b.n	800259c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	3301      	adds	r3, #1
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	2b09      	cmp	r3, #9
 80025a4:	bf94      	ite	ls
 80025a6:	2301      	movls	r3, #1
 80025a8:	2300      	movhi	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d079      	beq.n	80026a4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x2ec>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	3301      	adds	r3, #1
 80025c4:	069b      	lsls	r3, r3, #26
 80025c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ca:	e015      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x318>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80025da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80025de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80025e4:	2320      	movs	r3, #32
 80025e6:	e003      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80025e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	3301      	adds	r3, #1
 80025f2:	069b      	lsls	r3, r3, #26
 80025f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002600:	2b00      	cmp	r3, #0
 8002602:	d109      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x338>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	0e9b      	lsrs	r3, r3, #26
 800260a:	3301      	adds	r3, #1
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	2101      	movs	r1, #1
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	e017      	b.n	8002648 <HAL_ADC_ConfigChannel+0x368>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002628:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800262a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002630:	2320      	movs	r3, #32
 8002632:	e003      	b.n	800263c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	3301      	adds	r3, #1
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	2101      	movs	r1, #1
 8002644:	fa01 f303 	lsl.w	r3, r1, r3
 8002648:	ea42 0103 	orr.w	r1, r2, r3
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10a      	bne.n	800266e <HAL_ADC_ConfigChannel+0x38e>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	0e9b      	lsrs	r3, r3, #26
 800265e:	3301      	adds	r3, #1
 8002660:	f003 021f 	and.w	r2, r3, #31
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	051b      	lsls	r3, r3, #20
 800266c:	e018      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x3c0>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002686:	2320      	movs	r3, #32
 8002688:	e003      	b.n	8002692 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800268a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268c:	fab3 f383 	clz	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	3301      	adds	r3, #1
 8002694:	f003 021f 	and.w	r2, r3, #31
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a0:	430b      	orrs	r3, r1
 80026a2:	e07e      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d107      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x3e0>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0e9b      	lsrs	r3, r3, #26
 80026b6:	3301      	adds	r3, #1
 80026b8:	069b      	lsls	r3, r3, #26
 80026ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026be:	e015      	b.n	80026ec <HAL_ADC_ConfigChannel+0x40c>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80026d8:	2320      	movs	r3, #32
 80026da:	e003      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	3301      	adds	r3, #1
 80026e6:	069b      	lsls	r3, r3, #26
 80026e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d109      	bne.n	800270c <HAL_ADC_ConfigChannel+0x42c>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	0e9b      	lsrs	r3, r3, #26
 80026fe:	3301      	adds	r3, #1
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	2101      	movs	r1, #1
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	e017      	b.n	800273c <HAL_ADC_ConfigChannel+0x45c>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	61bb      	str	r3, [r7, #24]
  return result;
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002724:	2320      	movs	r3, #32
 8002726:	e003      	b.n	8002730 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	3301      	adds	r3, #1
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	2101      	movs	r1, #1
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	ea42 0103 	orr.w	r1, r2, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10d      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x488>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0e9b      	lsrs	r3, r3, #26
 8002752:	3301      	adds	r3, #1
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	4613      	mov	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4413      	add	r3, r2
 800275e:	3b1e      	subs	r3, #30
 8002760:	051b      	lsls	r3, r3, #20
 8002762:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002766:	e01b      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x4c0>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	60fb      	str	r3, [r7, #12]
  return result;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002780:	2320      	movs	r3, #32
 8002782:	e003      	b.n	800278c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	3301      	adds	r3, #1
 800278e:	f003 021f 	and.w	r2, r3, #31
 8002792:	4613      	mov	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	3b1e      	subs	r3, #30
 800279a:	051b      	lsls	r3, r3, #20
 800279c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a0:	430b      	orrs	r3, r1
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	6892      	ldr	r2, [r2, #8]
 80027a6:	4619      	mov	r1, r3
 80027a8:	f7ff f88f 	bl	80018ca <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f280 80c6 	bge.w	8002942 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a67      	ldr	r2, [pc, #412]	; (8002958 <HAL_ADC_ConfigChannel+0x678>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d004      	beq.n	80027ca <HAL_ADC_ConfigChannel+0x4ea>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a65      	ldr	r2, [pc, #404]	; (800295c <HAL_ADC_ConfigChannel+0x67c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x4ee>
 80027ca:	4b65      	ldr	r3, [pc, #404]	; (8002960 <HAL_ADC_ConfigChannel+0x680>)
 80027cc:	e000      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x4f0>
 80027ce:	4b65      	ldr	r3, [pc, #404]	; (8002964 <HAL_ADC_ConfigChannel+0x684>)
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fe ffd9 	bl	8001788 <LL_ADC_GetCommonPathInternalCh>
 80027d6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a5e      	ldr	r2, [pc, #376]	; (8002958 <HAL_ADC_ConfigChannel+0x678>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d004      	beq.n	80027ec <HAL_ADC_ConfigChannel+0x50c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a5d      	ldr	r2, [pc, #372]	; (800295c <HAL_ADC_ConfigChannel+0x67c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d10e      	bne.n	800280a <HAL_ADC_ConfigChannel+0x52a>
 80027ec:	485a      	ldr	r0, [pc, #360]	; (8002958 <HAL_ADC_ConfigChannel+0x678>)
 80027ee:	f7ff f94d 	bl	8001a8c <LL_ADC_IsEnabled>
 80027f2:	4604      	mov	r4, r0
 80027f4:	4859      	ldr	r0, [pc, #356]	; (800295c <HAL_ADC_ConfigChannel+0x67c>)
 80027f6:	f7ff f949 	bl	8001a8c <LL_ADC_IsEnabled>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4323      	orrs	r3, r4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	bf0c      	ite	eq
 8002802:	2301      	moveq	r3, #1
 8002804:	2300      	movne	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	e008      	b.n	800281c <HAL_ADC_ConfigChannel+0x53c>
 800280a:	4857      	ldr	r0, [pc, #348]	; (8002968 <HAL_ADC_ConfigChannel+0x688>)
 800280c:	f7ff f93e 	bl	8001a8c <LL_ADC_IsEnabled>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	bf0c      	ite	eq
 8002816:	2301      	moveq	r3, #1
 8002818:	2300      	movne	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d07d      	beq.n	800291c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a51      	ldr	r2, [pc, #324]	; (800296c <HAL_ADC_ConfigChannel+0x68c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d130      	bne.n	800288c <HAL_ADC_ConfigChannel+0x5ac>
 800282a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800282c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d12b      	bne.n	800288c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a4b      	ldr	r2, [pc, #300]	; (8002968 <HAL_ADC_ConfigChannel+0x688>)
 800283a:	4293      	cmp	r3, r2
 800283c:	f040 8081 	bne.w	8002942 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a44      	ldr	r2, [pc, #272]	; (8002958 <HAL_ADC_ConfigChannel+0x678>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d004      	beq.n	8002854 <HAL_ADC_ConfigChannel+0x574>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a43      	ldr	r2, [pc, #268]	; (800295c <HAL_ADC_ConfigChannel+0x67c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d101      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x578>
 8002854:	4a42      	ldr	r2, [pc, #264]	; (8002960 <HAL_ADC_ConfigChannel+0x680>)
 8002856:	e000      	b.n	800285a <HAL_ADC_ConfigChannel+0x57a>
 8002858:	4a42      	ldr	r2, [pc, #264]	; (8002964 <HAL_ADC_ConfigChannel+0x684>)
 800285a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f7fe ff7d 	bl	8001762 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002868:	4b41      	ldr	r3, [pc, #260]	; (8002970 <HAL_ADC_ConfigChannel+0x690>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	099b      	lsrs	r3, r3, #6
 800286e:	4a41      	ldr	r2, [pc, #260]	; (8002974 <HAL_ADC_ConfigChannel+0x694>)
 8002870:	fba2 2303 	umull	r2, r3, r2, r3
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	3301      	adds	r3, #1
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800287c:	e002      	b.n	8002884 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	3b01      	subs	r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f9      	bne.n	800287e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800288a:	e05a      	b.n	8002942 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a39      	ldr	r2, [pc, #228]	; (8002978 <HAL_ADC_ConfigChannel+0x698>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d11e      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x5f4>
 8002896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d119      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a30      	ldr	r2, [pc, #192]	; (8002968 <HAL_ADC_ConfigChannel+0x688>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d14b      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a2a      	ldr	r2, [pc, #168]	; (8002958 <HAL_ADC_ConfigChannel+0x678>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d004      	beq.n	80028be <HAL_ADC_ConfigChannel+0x5de>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a28      	ldr	r2, [pc, #160]	; (800295c <HAL_ADC_ConfigChannel+0x67c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d101      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x5e2>
 80028be:	4a28      	ldr	r2, [pc, #160]	; (8002960 <HAL_ADC_ConfigChannel+0x680>)
 80028c0:	e000      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x5e4>
 80028c2:	4a28      	ldr	r2, [pc, #160]	; (8002964 <HAL_ADC_ConfigChannel+0x684>)
 80028c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ca:	4619      	mov	r1, r3
 80028cc:	4610      	mov	r0, r2
 80028ce:	f7fe ff48 	bl	8001762 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028d2:	e036      	b.n	8002942 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a28      	ldr	r2, [pc, #160]	; (800297c <HAL_ADC_ConfigChannel+0x69c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d131      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x662>
 80028de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d12c      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1e      	ldr	r2, [pc, #120]	; (8002968 <HAL_ADC_ConfigChannel+0x688>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d127      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a18      	ldr	r2, [pc, #96]	; (8002958 <HAL_ADC_ConfigChannel+0x678>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d004      	beq.n	8002906 <HAL_ADC_ConfigChannel+0x626>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a16      	ldr	r2, [pc, #88]	; (800295c <HAL_ADC_ConfigChannel+0x67c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d101      	bne.n	800290a <HAL_ADC_ConfigChannel+0x62a>
 8002906:	4a16      	ldr	r2, [pc, #88]	; (8002960 <HAL_ADC_ConfigChannel+0x680>)
 8002908:	e000      	b.n	800290c <HAL_ADC_ConfigChannel+0x62c>
 800290a:	4a16      	ldr	r2, [pc, #88]	; (8002964 <HAL_ADC_ConfigChannel+0x684>)
 800290c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800290e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002912:	4619      	mov	r1, r3
 8002914:	4610      	mov	r0, r2
 8002916:	f7fe ff24 	bl	8001762 <LL_ADC_SetCommonPathInternalCh>
 800291a:	e012      	b.n	8002942 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	f043 0220 	orr.w	r2, r3, #32
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800292e:	e008      	b.n	8002942 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800294a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800294e:	4618      	mov	r0, r3
 8002950:	3784      	adds	r7, #132	; 0x84
 8002952:	46bd      	mov	sp, r7
 8002954:	bd90      	pop	{r4, r7, pc}
 8002956:	bf00      	nop
 8002958:	40022000 	.word	0x40022000
 800295c:	40022100 	.word	0x40022100
 8002960:	40022300 	.word	0x40022300
 8002964:	58026300 	.word	0x58026300
 8002968:	58026000 	.word	0x58026000
 800296c:	cb840000 	.word	0xcb840000
 8002970:	24000000 	.word	0x24000000
 8002974:	053e2d63 	.word	0x053e2d63
 8002978:	c7520000 	.word	0xc7520000
 800297c:	cfb80000 	.word	0xcfb80000

08002980 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff f8c6 	bl	8001b28 <LL_ADC_REG_IsConversionOngoing>
 800299c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff f8e8 	bl	8001b78 <LL_ADC_INJ_IsConversionOngoing>
 80029a8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d103      	bne.n	80029b8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8098 	beq.w	8002ae8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d02a      	beq.n	8002a1c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7d5b      	ldrb	r3, [r3, #21]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d126      	bne.n	8002a1c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	7d1b      	ldrb	r3, [r3, #20]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d122      	bne.n	8002a1c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80029d6:	2301      	movs	r3, #1
 80029d8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80029da:	e014      	b.n	8002a06 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	4a45      	ldr	r2, [pc, #276]	; (8002af4 <ADC_ConversionStop+0x174>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d90d      	bls.n	8002a00 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e8:	f043 0210 	orr.w	r2, r3, #16
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	f043 0201 	orr.w	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e074      	b.n	8002aea <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	3301      	adds	r3, #1
 8002a04:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a10:	2b40      	cmp	r3, #64	; 0x40
 8002a12:	d1e3      	bne.n	80029dc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2240      	movs	r2, #64	; 0x40
 8002a1a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d014      	beq.n	8002a4c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff f87e 	bl	8001b28 <LL_ADC_REG_IsConversionOngoing>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00c      	beq.n	8002a4c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff f83b 	bl	8001ab2 <LL_ADC_IsDisableOngoing>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d104      	bne.n	8002a4c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff f85a 	bl	8001b00 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d014      	beq.n	8002a7c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff f88e 	bl	8001b78 <LL_ADC_INJ_IsConversionOngoing>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00c      	beq.n	8002a7c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff f823 	bl	8001ab2 <LL_ADC_IsDisableOngoing>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d104      	bne.n	8002a7c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff f86a 	bl	8001b50 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d005      	beq.n	8002a8e <ADC_ConversionStop+0x10e>
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d105      	bne.n	8002a94 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a88:	230c      	movs	r3, #12
 8002a8a:	617b      	str	r3, [r7, #20]
        break;
 8002a8c:	e005      	b.n	8002a9a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a8e:	2308      	movs	r3, #8
 8002a90:	617b      	str	r3, [r7, #20]
        break;
 8002a92:	e002      	b.n	8002a9a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a94:	2304      	movs	r3, #4
 8002a96:	617b      	str	r3, [r7, #20]
        break;
 8002a98:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a9a:	f7fe fe13 	bl	80016c4 <HAL_GetTick>
 8002a9e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002aa0:	e01b      	b.n	8002ada <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002aa2:	f7fe fe0f 	bl	80016c4 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b05      	cmp	r3, #5
 8002aae:	d914      	bls.n	8002ada <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00d      	beq.n	8002ada <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac2:	f043 0210 	orr.w	r2, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	f043 0201 	orr.w	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e007      	b.n	8002aea <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1dc      	bne.n	8002aa2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3720      	adds	r7, #32
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	000cdbff 	.word	0x000cdbff

08002af8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe ffc1 	bl	8001a8c <LL_ADC_IsEnabled>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d16e      	bne.n	8002bee <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	4b38      	ldr	r3, [pc, #224]	; (8002bf8 <ADC_Enable+0x100>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00d      	beq.n	8002b3a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	f043 0210 	orr.w	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	f043 0201 	orr.w	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e05a      	b.n	8002bf0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe ff7c 	bl	8001a3c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b44:	f7fe fdbe 	bl	80016c4 <HAL_GetTick>
 8002b48:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a2b      	ldr	r2, [pc, #172]	; (8002bfc <ADC_Enable+0x104>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d004      	beq.n	8002b5e <ADC_Enable+0x66>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a29      	ldr	r2, [pc, #164]	; (8002c00 <ADC_Enable+0x108>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d101      	bne.n	8002b62 <ADC_Enable+0x6a>
 8002b5e:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <ADC_Enable+0x10c>)
 8002b60:	e000      	b.n	8002b64 <ADC_Enable+0x6c>
 8002b62:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <ADC_Enable+0x110>)
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe feff 	bl	8001968 <LL_ADC_GetMultimode>
 8002b6a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a23      	ldr	r2, [pc, #140]	; (8002c00 <ADC_Enable+0x108>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d002      	beq.n	8002b7c <ADC_Enable+0x84>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	e000      	b.n	8002b7e <ADC_Enable+0x86>
 8002b7c:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <ADC_Enable+0x104>)
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d02c      	beq.n	8002be0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d130      	bne.n	8002bee <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b8c:	e028      	b.n	8002be0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe ff7a 	bl	8001a8c <LL_ADC_IsEnabled>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d104      	bne.n	8002ba8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe ff4a 	bl	8001a3c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ba8:	f7fe fd8c 	bl	80016c4 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d914      	bls.n	8002be0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d00d      	beq.n	8002be0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	f043 0210 	orr.w	r2, r3, #16
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	f043 0201 	orr.w	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e007      	b.n	8002bf0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d1cf      	bne.n	8002b8e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	8000003f 	.word	0x8000003f
 8002bfc:	40022000 	.word	0x40022000
 8002c00:	40022100 	.word	0x40022100
 8002c04:	40022300 	.word	0x40022300
 8002c08:	58026300 	.word	0x58026300

08002c0c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe ff4a 	bl	8001ab2 <LL_ADC_IsDisableOngoing>
 8002c1e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe ff31 	bl	8001a8c <LL_ADC_IsEnabled>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d047      	beq.n	8002cc0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d144      	bne.n	8002cc0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 030d 	and.w	r3, r3, #13
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d10c      	bne.n	8002c5e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe ff0b 	bl	8001a64 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2203      	movs	r2, #3
 8002c54:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c56:	f7fe fd35 	bl	80016c4 <HAL_GetTick>
 8002c5a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c5c:	e029      	b.n	8002cb2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c62:	f043 0210 	orr.w	r2, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6e:	f043 0201 	orr.w	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e023      	b.n	8002cc2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c7a:	f7fe fd23 	bl	80016c4 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d914      	bls.n	8002cb2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00d      	beq.n	8002cb2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	f043 0210 	orr.w	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca6:	f043 0201 	orr.w	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e007      	b.n	8002cc2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1dc      	bne.n	8002c7a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a79      	ldr	r2, [pc, #484]	; (8002ec0 <ADC_ConfigureBoostMode+0x1f4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d004      	beq.n	8002ce8 <ADC_ConfigureBoostMode+0x1c>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a78      	ldr	r2, [pc, #480]	; (8002ec4 <ADC_ConfigureBoostMode+0x1f8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d109      	bne.n	8002cfc <ADC_ConfigureBoostMode+0x30>
 8002ce8:	4b77      	ldr	r3, [pc, #476]	; (8002ec8 <ADC_ConfigureBoostMode+0x1fc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e008      	b.n	8002d0e <ADC_ConfigureBoostMode+0x42>
 8002cfc:	4b73      	ldr	r3, [pc, #460]	; (8002ecc <ADC_ConfigureBoostMode+0x200>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf14      	ite	ne
 8002d08:	2301      	movne	r3, #1
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d01c      	beq.n	8002d4c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002d12:	f001 fb5f 	bl	80043d4 <HAL_RCC_GetHCLKFreq>
 8002d16:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d20:	d010      	beq.n	8002d44 <ADC_ConfigureBoostMode+0x78>
 8002d22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d26:	d871      	bhi.n	8002e0c <ADC_ConfigureBoostMode+0x140>
 8002d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2c:	d002      	beq.n	8002d34 <ADC_ConfigureBoostMode+0x68>
 8002d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d32:	d16b      	bne.n	8002e0c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	0c1b      	lsrs	r3, r3, #16
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	60fb      	str	r3, [r7, #12]
        break;
 8002d42:	e066      	b.n	8002e12 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	60fb      	str	r3, [r7, #12]
        break;
 8002d4a:	e062      	b.n	8002e12 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002d4c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d50:	f002 fab0 	bl	80052b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d54:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002d5e:	d051      	beq.n	8002e04 <ADC_ConfigureBoostMode+0x138>
 8002d60:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002d64:	d854      	bhi.n	8002e10 <ADC_ConfigureBoostMode+0x144>
 8002d66:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002d6a:	d047      	beq.n	8002dfc <ADC_ConfigureBoostMode+0x130>
 8002d6c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002d70:	d84e      	bhi.n	8002e10 <ADC_ConfigureBoostMode+0x144>
 8002d72:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002d76:	d03d      	beq.n	8002df4 <ADC_ConfigureBoostMode+0x128>
 8002d78:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002d7c:	d848      	bhi.n	8002e10 <ADC_ConfigureBoostMode+0x144>
 8002d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d82:	d033      	beq.n	8002dec <ADC_ConfigureBoostMode+0x120>
 8002d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d88:	d842      	bhi.n	8002e10 <ADC_ConfigureBoostMode+0x144>
 8002d8a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002d8e:	d029      	beq.n	8002de4 <ADC_ConfigureBoostMode+0x118>
 8002d90:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002d94:	d83c      	bhi.n	8002e10 <ADC_ConfigureBoostMode+0x144>
 8002d96:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002d9a:	d01a      	beq.n	8002dd2 <ADC_ConfigureBoostMode+0x106>
 8002d9c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002da0:	d836      	bhi.n	8002e10 <ADC_ConfigureBoostMode+0x144>
 8002da2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002da6:	d014      	beq.n	8002dd2 <ADC_ConfigureBoostMode+0x106>
 8002da8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002dac:	d830      	bhi.n	8002e10 <ADC_ConfigureBoostMode+0x144>
 8002dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002db2:	d00e      	beq.n	8002dd2 <ADC_ConfigureBoostMode+0x106>
 8002db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002db8:	d82a      	bhi.n	8002e10 <ADC_ConfigureBoostMode+0x144>
 8002dba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dbe:	d008      	beq.n	8002dd2 <ADC_ConfigureBoostMode+0x106>
 8002dc0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dc4:	d824      	bhi.n	8002e10 <ADC_ConfigureBoostMode+0x144>
 8002dc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dca:	d002      	beq.n	8002dd2 <ADC_ConfigureBoostMode+0x106>
 8002dcc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dd0:	d11e      	bne.n	8002e10 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	0c9b      	lsrs	r3, r3, #18
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de0:	60fb      	str	r3, [r7, #12]
        break;
 8002de2:	e016      	b.n	8002e12 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	60fb      	str	r3, [r7, #12]
        break;
 8002dea:	e012      	b.n	8002e12 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	60fb      	str	r3, [r7, #12]
        break;
 8002df2:	e00e      	b.n	8002e12 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	099b      	lsrs	r3, r3, #6
 8002df8:	60fb      	str	r3, [r7, #12]
        break;
 8002dfa:	e00a      	b.n	8002e12 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	09db      	lsrs	r3, r3, #7
 8002e00:	60fb      	str	r3, [r7, #12]
        break;
 8002e02:	e006      	b.n	8002e12 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	0a1b      	lsrs	r3, r3, #8
 8002e08:	60fb      	str	r3, [r7, #12]
        break;
 8002e0a:	e002      	b.n	8002e12 <ADC_ConfigureBoostMode+0x146>
        break;
 8002e0c:	bf00      	nop
 8002e0e:	e000      	b.n	8002e12 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002e10:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002e12:	f7fe fc87 	bl	8001724 <HAL_GetREVID>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d815      	bhi.n	8002e4c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4a2b      	ldr	r2, [pc, #172]	; (8002ed0 <ADC_ConfigureBoostMode+0x204>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d908      	bls.n	8002e3a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e36:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002e38:	e03e      	b.n	8002eb8 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e48:	609a      	str	r2, [r3, #8]
}
 8002e4a:	e035      	b.n	8002eb8 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	085b      	lsrs	r3, r3, #1
 8002e50:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4a1f      	ldr	r2, [pc, #124]	; (8002ed4 <ADC_ConfigureBoostMode+0x208>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d808      	bhi.n	8002e6c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e68:	609a      	str	r2, [r3, #8]
}
 8002e6a:	e025      	b.n	8002eb8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4a1a      	ldr	r2, [pc, #104]	; (8002ed8 <ADC_ConfigureBoostMode+0x20c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d80a      	bhi.n	8002e8a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e86:	609a      	str	r2, [r3, #8]
}
 8002e88:	e016      	b.n	8002eb8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4a13      	ldr	r2, [pc, #76]	; (8002edc <ADC_ConfigureBoostMode+0x210>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d80a      	bhi.n	8002ea8 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea4:	609a      	str	r2, [r3, #8]
}
 8002ea6:	e007      	b.n	8002eb8 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002eb6:	609a      	str	r2, [r3, #8]
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40022000 	.word	0x40022000
 8002ec4:	40022100 	.word	0x40022100
 8002ec8:	40022300 	.word	0x40022300
 8002ecc:	58026300 	.word	0x58026300
 8002ed0:	01312d00 	.word	0x01312d00
 8002ed4:	005f5e10 	.word	0x005f5e10
 8002ed8:	00bebc20 	.word	0x00bebc20
 8002edc:	017d7840 	.word	0x017d7840

08002ee0 <__NVIC_SetPriorityGrouping>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <__NVIC_SetPriorityGrouping+0x40>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002efc:	4013      	ands	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f0e:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <__NVIC_SetPriorityGrouping+0x40>)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	60d3      	str	r3, [r2, #12]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000ed00 	.word	0xe000ed00
 8002f24:	05fa0000 	.word	0x05fa0000

08002f28 <__NVIC_GetPriorityGrouping>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <__NVIC_GetPriorityGrouping+0x18>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	f003 0307 	and.w	r3, r3, #7
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_SetPriority>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	db0a      	blt.n	8002f6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	490c      	ldr	r1, [pc, #48]	; (8002f90 <__NVIC_SetPriority+0x4c>)
 8002f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f62:	0112      	lsls	r2, r2, #4
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	440b      	add	r3, r1
 8002f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f6c:	e00a      	b.n	8002f84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4908      	ldr	r1, [pc, #32]	; (8002f94 <__NVIC_SetPriority+0x50>)
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	3b04      	subs	r3, #4
 8002f7c:	0112      	lsls	r2, r2, #4
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	440b      	add	r3, r1
 8002f82:	761a      	strb	r2, [r3, #24]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000e100 	.word	0xe000e100
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <NVIC_EncodePriority>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	; 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f1c3 0307 	rsb	r3, r3, #7
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	bf28      	it	cs
 8002fb6:	2304      	movcs	r3, #4
 8002fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	2b06      	cmp	r3, #6
 8002fc0:	d902      	bls.n	8002fc8 <NVIC_EncodePriority+0x30>
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3b03      	subs	r3, #3
 8002fc6:	e000      	b.n	8002fca <NVIC_EncodePriority+0x32>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	401a      	ands	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	43d9      	mvns	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff0:	4313      	orrs	r3, r2
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3724      	adds	r7, #36	; 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003010:	d301      	bcc.n	8003016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003012:	2301      	movs	r3, #1
 8003014:	e00f      	b.n	8003036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <SysTick_Config+0x40>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800301e:	210f      	movs	r1, #15
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	f7ff ff8e 	bl	8002f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <SysTick_Config+0x40>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302e:	4b04      	ldr	r3, [pc, #16]	; (8003040 <SysTick_Config+0x40>)
 8003030:	2207      	movs	r2, #7
 8003032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	e000e010 	.word	0xe000e010

08003044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff47 	bl	8002ee0 <__NVIC_SetPriorityGrouping>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003068:	f7ff ff5e 	bl	8002f28 <__NVIC_GetPriorityGrouping>
 800306c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	6978      	ldr	r0, [r7, #20]
 8003074:	f7ff ff90 	bl	8002f98 <NVIC_EncodePriority>
 8003078:	4602      	mov	r2, r0
 800307a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff ff5f 	bl	8002f44 <__NVIC_SetPriority>
}
 8003086:	bf00      	nop
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ffb2 	bl	8003000 <SysTick_Config>
 800309c:	4603      	mov	r3, r0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b089      	sub	sp, #36	; 0x24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80030b6:	4b89      	ldr	r3, [pc, #548]	; (80032dc <HAL_GPIO_Init+0x234>)
 80030b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030ba:	e194      	b.n	80033e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	2101      	movs	r1, #1
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8186 	beq.w	80033e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d00b      	beq.n	80030f4 <HAL_GPIO_Init+0x4c>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d007      	beq.n	80030f4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030e8:	2b11      	cmp	r3, #17
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b12      	cmp	r3, #18
 80030f2:	d130      	bne.n	8003156 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	2203      	movs	r2, #3
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4013      	ands	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800312a:	2201      	movs	r2, #1
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	f003 0201 	and.w	r2, r3, #1
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	2203      	movs	r2, #3
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0xee>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b12      	cmp	r3, #18
 8003194:	d123      	bne.n	80031de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	08da      	lsrs	r2, r3, #3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3208      	adds	r2, #8
 800319e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	220f      	movs	r2, #15
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	08da      	lsrs	r2, r3, #3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3208      	adds	r2, #8
 80031d8:	69b9      	ldr	r1, [r7, #24]
 80031da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	2203      	movs	r2, #3
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0203 	and.w	r2, r3, #3
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 80e0 	beq.w	80033e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003220:	4b2f      	ldr	r3, [pc, #188]	; (80032e0 <HAL_GPIO_Init+0x238>)
 8003222:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003226:	4a2e      	ldr	r2, [pc, #184]	; (80032e0 <HAL_GPIO_Init+0x238>)
 8003228:	f043 0302 	orr.w	r3, r3, #2
 800322c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003230:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <HAL_GPIO_Init+0x238>)
 8003232:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800323e:	4a29      	ldr	r2, [pc, #164]	; (80032e4 <HAL_GPIO_Init+0x23c>)
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	089b      	lsrs	r3, r3, #2
 8003244:	3302      	adds	r3, #2
 8003246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	220f      	movs	r2, #15
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a20      	ldr	r2, [pc, #128]	; (80032e8 <HAL_GPIO_Init+0x240>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d052      	beq.n	8003310 <HAL_GPIO_Init+0x268>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a1f      	ldr	r2, [pc, #124]	; (80032ec <HAL_GPIO_Init+0x244>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d031      	beq.n	80032d6 <HAL_GPIO_Init+0x22e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a1e      	ldr	r2, [pc, #120]	; (80032f0 <HAL_GPIO_Init+0x248>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d02b      	beq.n	80032d2 <HAL_GPIO_Init+0x22a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a1d      	ldr	r2, [pc, #116]	; (80032f4 <HAL_GPIO_Init+0x24c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d025      	beq.n	80032ce <HAL_GPIO_Init+0x226>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a1c      	ldr	r2, [pc, #112]	; (80032f8 <HAL_GPIO_Init+0x250>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01f      	beq.n	80032ca <HAL_GPIO_Init+0x222>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <HAL_GPIO_Init+0x254>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d019      	beq.n	80032c6 <HAL_GPIO_Init+0x21e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a1a      	ldr	r2, [pc, #104]	; (8003300 <HAL_GPIO_Init+0x258>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <HAL_GPIO_Init+0x21a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a19      	ldr	r2, [pc, #100]	; (8003304 <HAL_GPIO_Init+0x25c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00d      	beq.n	80032be <HAL_GPIO_Init+0x216>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a18      	ldr	r2, [pc, #96]	; (8003308 <HAL_GPIO_Init+0x260>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d007      	beq.n	80032ba <HAL_GPIO_Init+0x212>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a17      	ldr	r2, [pc, #92]	; (800330c <HAL_GPIO_Init+0x264>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d101      	bne.n	80032b6 <HAL_GPIO_Init+0x20e>
 80032b2:	2309      	movs	r3, #9
 80032b4:	e02d      	b.n	8003312 <HAL_GPIO_Init+0x26a>
 80032b6:	230a      	movs	r3, #10
 80032b8:	e02b      	b.n	8003312 <HAL_GPIO_Init+0x26a>
 80032ba:	2308      	movs	r3, #8
 80032bc:	e029      	b.n	8003312 <HAL_GPIO_Init+0x26a>
 80032be:	2307      	movs	r3, #7
 80032c0:	e027      	b.n	8003312 <HAL_GPIO_Init+0x26a>
 80032c2:	2306      	movs	r3, #6
 80032c4:	e025      	b.n	8003312 <HAL_GPIO_Init+0x26a>
 80032c6:	2305      	movs	r3, #5
 80032c8:	e023      	b.n	8003312 <HAL_GPIO_Init+0x26a>
 80032ca:	2304      	movs	r3, #4
 80032cc:	e021      	b.n	8003312 <HAL_GPIO_Init+0x26a>
 80032ce:	2303      	movs	r3, #3
 80032d0:	e01f      	b.n	8003312 <HAL_GPIO_Init+0x26a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e01d      	b.n	8003312 <HAL_GPIO_Init+0x26a>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e01b      	b.n	8003312 <HAL_GPIO_Init+0x26a>
 80032da:	bf00      	nop
 80032dc:	58000080 	.word	0x58000080
 80032e0:	58024400 	.word	0x58024400
 80032e4:	58000400 	.word	0x58000400
 80032e8:	58020000 	.word	0x58020000
 80032ec:	58020400 	.word	0x58020400
 80032f0:	58020800 	.word	0x58020800
 80032f4:	58020c00 	.word	0x58020c00
 80032f8:	58021000 	.word	0x58021000
 80032fc:	58021400 	.word	0x58021400
 8003300:	58021800 	.word	0x58021800
 8003304:	58021c00 	.word	0x58021c00
 8003308:	58022000 	.word	0x58022000
 800330c:	58022400 	.word	0x58022400
 8003310:	2300      	movs	r3, #0
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	f002 0203 	and.w	r2, r2, #3
 8003318:	0092      	lsls	r2, r2, #2
 800331a:	4093      	lsls	r3, r2
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003322:	4938      	ldr	r1, [pc, #224]	; (8003404 <HAL_GPIO_Init+0x35c>)
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	089b      	lsrs	r3, r3, #2
 8003328:	3302      	adds	r3, #2
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	43db      	mvns	r3, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4013      	ands	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80033aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80033b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80033d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	3301      	adds	r3, #1
 80033e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f47f ae63 	bne.w	80030bc <HAL_GPIO_Init+0x14>
  }
}
 80033f6:	bf00      	nop
 80033f8:	bf00      	nop
 80033fa:	3724      	adds	r7, #36	; 0x24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	58000400 	.word	0x58000400

08003408 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	887b      	ldrh	r3, [r7, #2]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
 8003424:	e001      	b.n	800342a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800342a:	7bfb      	ldrb	r3, [r7, #15]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	807b      	strh	r3, [r7, #2]
 8003444:	4613      	mov	r3, r2
 8003446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003448:	787b      	ldrb	r3, [r7, #1]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800344e:	887a      	ldrh	r2, [r7, #2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003454:	e003      	b.n	800345e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003456:	887b      	ldrh	r3, [r7, #2]
 8003458:	041a      	lsls	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	619a      	str	r2, [r3, #24]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800346a:	b480      	push	{r7}
 800346c:	b085      	sub	sp, #20
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	460b      	mov	r3, r1
 8003474:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800347c:	887a      	ldrh	r2, [r7, #2]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4013      	ands	r3, r2
 8003482:	041a      	lsls	r2, r3, #16
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	43d9      	mvns	r1, r3
 8003488:	887b      	ldrh	r3, [r7, #2]
 800348a:	400b      	ands	r3, r1
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	619a      	str	r2, [r3, #24]
}
 8003492:	bf00      	nop
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80034a8:	4b29      	ldr	r3, [pc, #164]	; (8003550 <HAL_PWREx_ConfigSupply+0xb0>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	2b06      	cmp	r3, #6
 80034b2:	d00a      	beq.n	80034ca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80034b4:	4b26      	ldr	r3, [pc, #152]	; (8003550 <HAL_PWREx_ConfigSupply+0xb0>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d001      	beq.n	80034c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e040      	b.n	8003548 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e03e      	b.n	8003548 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80034ca:	4b21      	ldr	r3, [pc, #132]	; (8003550 <HAL_PWREx_ConfigSupply+0xb0>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80034d2:	491f      	ldr	r1, [pc, #124]	; (8003550 <HAL_PWREx_ConfigSupply+0xb0>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80034da:	f7fe f8f3 	bl	80016c4 <HAL_GetTick>
 80034de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034e0:	e009      	b.n	80034f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034e2:	f7fe f8ef 	bl	80016c4 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034f0:	d901      	bls.n	80034f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e028      	b.n	8003548 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034f6:	4b16      	ldr	r3, [pc, #88]	; (8003550 <HAL_PWREx_ConfigSupply+0xb0>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003502:	d1ee      	bne.n	80034e2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b1e      	cmp	r3, #30
 8003508:	d008      	beq.n	800351c <HAL_PWREx_ConfigSupply+0x7c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b2e      	cmp	r3, #46	; 0x2e
 800350e:	d005      	beq.n	800351c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b1d      	cmp	r3, #29
 8003514:	d002      	beq.n	800351c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b2d      	cmp	r3, #45	; 0x2d
 800351a:	d114      	bne.n	8003546 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800351c:	f7fe f8d2 	bl	80016c4 <HAL_GetTick>
 8003520:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003522:	e009      	b.n	8003538 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003524:	f7fe f8ce 	bl	80016c4 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003532:	d901      	bls.n	8003538 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e007      	b.n	8003548 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003538:	4b05      	ldr	r3, [pc, #20]	; (8003550 <HAL_PWREx_ConfigSupply+0xb0>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003544:	d1ee      	bne.n	8003524 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	58024800 	.word	0x58024800

08003554 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08c      	sub	sp, #48	; 0x30
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e3ff      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 8087 	beq.w	8003682 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003574:	4b99      	ldr	r3, [pc, #612]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800357e:	4b97      	ldr	r3, [pc, #604]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	2b10      	cmp	r3, #16
 8003588:	d007      	beq.n	800359a <HAL_RCC_OscConfig+0x46>
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	2b18      	cmp	r3, #24
 800358e:	d110      	bne.n	80035b2 <HAL_RCC_OscConfig+0x5e>
 8003590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d10b      	bne.n	80035b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359a:	4b90      	ldr	r3, [pc, #576]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d06c      	beq.n	8003680 <HAL_RCC_OscConfig+0x12c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d168      	bne.n	8003680 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e3d9      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ba:	d106      	bne.n	80035ca <HAL_RCC_OscConfig+0x76>
 80035bc:	4b87      	ldr	r3, [pc, #540]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a86      	ldr	r2, [pc, #536]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 80035c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	e02e      	b.n	8003628 <HAL_RCC_OscConfig+0xd4>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0x98>
 80035d2:	4b82      	ldr	r3, [pc, #520]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a81      	ldr	r2, [pc, #516]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 80035d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b7f      	ldr	r3, [pc, #508]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a7e      	ldr	r2, [pc, #504]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 80035e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e01d      	b.n	8003628 <HAL_RCC_OscConfig+0xd4>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0xbc>
 80035f6:	4b79      	ldr	r3, [pc, #484]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a78      	ldr	r2, [pc, #480]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 80035fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	4b76      	ldr	r3, [pc, #472]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a75      	ldr	r2, [pc, #468]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 8003608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e00b      	b.n	8003628 <HAL_RCC_OscConfig+0xd4>
 8003610:	4b72      	ldr	r3, [pc, #456]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a71      	ldr	r2, [pc, #452]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 8003616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	4b6f      	ldr	r3, [pc, #444]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a6e      	ldr	r2, [pc, #440]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 8003622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d013      	beq.n	8003658 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7fe f848 	bl	80016c4 <HAL_GetTick>
 8003634:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003638:	f7fe f844 	bl	80016c4 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e38d      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800364a:	4b64      	ldr	r3, [pc, #400]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0xe4>
 8003656:	e014      	b.n	8003682 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fe f834 	bl	80016c4 <HAL_GetTick>
 800365c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003660:	f7fe f830 	bl	80016c4 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e379      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003672:	4b5a      	ldr	r3, [pc, #360]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x10c>
 800367e:	e000      	b.n	8003682 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80ae 	beq.w	80037ec <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003690:	4b52      	ldr	r3, [pc, #328]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003698:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800369a:	4b50      	ldr	r3, [pc, #320]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <HAL_RCC_OscConfig+0x162>
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	2b18      	cmp	r3, #24
 80036aa:	d13a      	bne.n	8003722 <HAL_RCC_OscConfig+0x1ce>
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d135      	bne.n	8003722 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b6:	4b49      	ldr	r3, [pc, #292]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_RCC_OscConfig+0x17a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e34b      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ce:	f7fe f829 	bl	8001724 <HAL_GetREVID>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80036d8:	4293      	cmp	r3, r2
 80036da:	d817      	bhi.n	800370c <HAL_RCC_OscConfig+0x1b8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2b40      	cmp	r3, #64	; 0x40
 80036e2:	d108      	bne.n	80036f6 <HAL_RCC_OscConfig+0x1a2>
 80036e4:	4b3d      	ldr	r3, [pc, #244]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80036ec:	4a3b      	ldr	r2, [pc, #236]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 80036ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036f4:	e07a      	b.n	80037ec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f6:	4b39      	ldr	r3, [pc, #228]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	031b      	lsls	r3, r3, #12
 8003704:	4935      	ldr	r1, [pc, #212]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 8003706:	4313      	orrs	r3, r2
 8003708:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800370a:	e06f      	b.n	80037ec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370c:	4b33      	ldr	r3, [pc, #204]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	061b      	lsls	r3, r3, #24
 800371a:	4930      	ldr	r1, [pc, #192]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003720:	e064      	b.n	80037ec <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d045      	beq.n	80037b6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800372a:	4b2c      	ldr	r3, [pc, #176]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 0219 	bic.w	r2, r3, #25
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	4929      	ldr	r1, [pc, #164]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 8003738:	4313      	orrs	r3, r2
 800373a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fd ffc2 	bl	80016c4 <HAL_GetTick>
 8003740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003744:	f7fd ffbe 	bl	80016c4 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e307      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003756:	4b21      	ldr	r3, [pc, #132]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003762:	f7fd ffdf 	bl	8001724 <HAL_GetREVID>
 8003766:	4603      	mov	r3, r0
 8003768:	f241 0203 	movw	r2, #4099	; 0x1003
 800376c:	4293      	cmp	r3, r2
 800376e:	d817      	bhi.n	80037a0 <HAL_RCC_OscConfig+0x24c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	2b40      	cmp	r3, #64	; 0x40
 8003776:	d108      	bne.n	800378a <HAL_RCC_OscConfig+0x236>
 8003778:	4b18      	ldr	r3, [pc, #96]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003780:	4a16      	ldr	r2, [pc, #88]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 8003782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003786:	6053      	str	r3, [r2, #4]
 8003788:	e030      	b.n	80037ec <HAL_RCC_OscConfig+0x298>
 800378a:	4b14      	ldr	r3, [pc, #80]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	031b      	lsls	r3, r3, #12
 8003798:	4910      	ldr	r1, [pc, #64]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
 800379e:	e025      	b.n	80037ec <HAL_RCC_OscConfig+0x298>
 80037a0:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	061b      	lsls	r3, r3, #24
 80037ae:	490b      	ldr	r1, [pc, #44]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]
 80037b4:	e01a      	b.n	80037ec <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a08      	ldr	r2, [pc, #32]	; (80037dc <HAL_RCC_OscConfig+0x288>)
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fd ff7f 	bl	80016c4 <HAL_GetTick>
 80037c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037c8:	e00a      	b.n	80037e0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ca:	f7fd ff7b 	bl	80016c4 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d903      	bls.n	80037e0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e2c4      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
 80037dc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037e0:	4ba4      	ldr	r3, [pc, #656]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1ee      	bne.n	80037ca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0310 	and.w	r3, r3, #16
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80a9 	beq.w	800394c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037fa:	4b9e      	ldr	r3, [pc, #632]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003802:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003804:	4b9b      	ldr	r3, [pc, #620]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d007      	beq.n	8003820 <HAL_RCC_OscConfig+0x2cc>
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b18      	cmp	r3, #24
 8003814:	d13a      	bne.n	800388c <HAL_RCC_OscConfig+0x338>
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	2b01      	cmp	r3, #1
 800381e:	d135      	bne.n	800388c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003820:	4b94      	ldr	r3, [pc, #592]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_RCC_OscConfig+0x2e4>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	2b80      	cmp	r3, #128	; 0x80
 8003832:	d001      	beq.n	8003838 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e296      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003838:	f7fd ff74 	bl	8001724 <HAL_GetREVID>
 800383c:	4603      	mov	r3, r0
 800383e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003842:	4293      	cmp	r3, r2
 8003844:	d817      	bhi.n	8003876 <HAL_RCC_OscConfig+0x322>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	2b20      	cmp	r3, #32
 800384c:	d108      	bne.n	8003860 <HAL_RCC_OscConfig+0x30c>
 800384e:	4b89      	ldr	r3, [pc, #548]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003856:	4a87      	ldr	r2, [pc, #540]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003858:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800385c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800385e:	e075      	b.n	800394c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003860:	4b84      	ldr	r3, [pc, #528]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	069b      	lsls	r3, r3, #26
 800386e:	4981      	ldr	r1, [pc, #516]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003870:	4313      	orrs	r3, r2
 8003872:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003874:	e06a      	b.n	800394c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003876:	4b7f      	ldr	r3, [pc, #508]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	061b      	lsls	r3, r3, #24
 8003884:	497b      	ldr	r1, [pc, #492]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003886:	4313      	orrs	r3, r2
 8003888:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800388a:	e05f      	b.n	800394c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d042      	beq.n	800391a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003894:	4b77      	ldr	r3, [pc, #476]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a76      	ldr	r2, [pc, #472]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 800389a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800389e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fd ff10 	bl	80016c4 <HAL_GetTick>
 80038a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80038a8:	f7fd ff0c 	bl	80016c4 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e255      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038ba:	4b6e      	ldr	r3, [pc, #440]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038c6:	f7fd ff2d 	bl	8001724 <HAL_GetREVID>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d817      	bhi.n	8003904 <HAL_RCC_OscConfig+0x3b0>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d108      	bne.n	80038ee <HAL_RCC_OscConfig+0x39a>
 80038dc:	4b65      	ldr	r3, [pc, #404]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80038e4:	4a63      	ldr	r2, [pc, #396]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 80038e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038ea:	6053      	str	r3, [r2, #4]
 80038ec:	e02e      	b.n	800394c <HAL_RCC_OscConfig+0x3f8>
 80038ee:	4b61      	ldr	r3, [pc, #388]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	069b      	lsls	r3, r3, #26
 80038fc:	495d      	ldr	r1, [pc, #372]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
 8003902:	e023      	b.n	800394c <HAL_RCC_OscConfig+0x3f8>
 8003904:	4b5b      	ldr	r3, [pc, #364]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	061b      	lsls	r3, r3, #24
 8003912:	4958      	ldr	r1, [pc, #352]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003914:	4313      	orrs	r3, r2
 8003916:	60cb      	str	r3, [r1, #12]
 8003918:	e018      	b.n	800394c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800391a:	4b56      	ldr	r3, [pc, #344]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a55      	ldr	r2, [pc, #340]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003926:	f7fd fecd 	bl	80016c4 <HAL_GetTick>
 800392a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800392e:	f7fd fec9 	bl	80016c4 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e212      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003940:	4b4c      	ldr	r3, [pc, #304]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f0      	bne.n	800392e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d036      	beq.n	80039c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d019      	beq.n	8003994 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003960:	4b44      	ldr	r3, [pc, #272]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003964:	4a43      	ldr	r2, [pc, #268]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fd feaa 	bl	80016c4 <HAL_GetTick>
 8003970:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003974:	f7fd fea6 	bl	80016c4 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e1ef      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003986:	4b3b      	ldr	r3, [pc, #236]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0x420>
 8003992:	e018      	b.n	80039c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003994:	4b37      	ldr	r3, [pc, #220]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003998:	4a36      	ldr	r2, [pc, #216]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 800399a:	f023 0301 	bic.w	r3, r3, #1
 800399e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fd fe90 	bl	80016c4 <HAL_GetTick>
 80039a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a8:	f7fd fe8c 	bl	80016c4 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e1d5      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039ba:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 80039bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d036      	beq.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d019      	beq.n	8003a0e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039da:	4b26      	ldr	r3, [pc, #152]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a25      	ldr	r2, [pc, #148]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 80039e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039e6:	f7fd fe6d 	bl	80016c4 <HAL_GetTick>
 80039ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80039ee:	f7fd fe69 	bl	80016c4 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e1b2      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a00:	4b1c      	ldr	r3, [pc, #112]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x49a>
 8003a0c:	e018      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a0e:	4b19      	ldr	r3, [pc, #100]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a18      	ldr	r2, [pc, #96]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a1a:	f7fd fe53 	bl	80016c4 <HAL_GetTick>
 8003a1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a22:	f7fd fe4f 	bl	80016c4 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e198      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a34:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <HAL_RCC_OscConfig+0x520>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f0      	bne.n	8003a22 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8085 	beq.w	8003b58 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <HAL_RCC_OscConfig+0x524>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a09      	ldr	r2, [pc, #36]	; (8003a78 <HAL_RCC_OscConfig+0x524>)
 8003a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a5a:	f7fd fe33 	bl	80016c4 <HAL_GetTick>
 8003a5e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a60:	e00c      	b.n	8003a7c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a62:	f7fd fe2f 	bl	80016c4 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b64      	cmp	r3, #100	; 0x64
 8003a6e:	d905      	bls.n	8003a7c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e178      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
 8003a74:	58024400 	.word	0x58024400
 8003a78:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a7c:	4b96      	ldr	r3, [pc, #600]	; (8003cd8 <HAL_RCC_OscConfig+0x784>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0ec      	beq.n	8003a62 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d106      	bne.n	8003a9e <HAL_RCC_OscConfig+0x54a>
 8003a90:	4b92      	ldr	r3, [pc, #584]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a94:	4a91      	ldr	r2, [pc, #580]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9c:	e02d      	b.n	8003afa <HAL_RCC_OscConfig+0x5a6>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x56c>
 8003aa6:	4b8d      	ldr	r3, [pc, #564]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aaa:	4a8c      	ldr	r2, [pc, #560]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab2:	4b8a      	ldr	r3, [pc, #552]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	4a89      	ldr	r2, [pc, #548]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003ab8:	f023 0304 	bic.w	r3, r3, #4
 8003abc:	6713      	str	r3, [r2, #112]	; 0x70
 8003abe:	e01c      	b.n	8003afa <HAL_RCC_OscConfig+0x5a6>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b05      	cmp	r3, #5
 8003ac6:	d10c      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x58e>
 8003ac8:	4b84      	ldr	r3, [pc, #528]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003acc:	4a83      	ldr	r2, [pc, #524]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003ace:	f043 0304 	orr.w	r3, r3, #4
 8003ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad4:	4b81      	ldr	r3, [pc, #516]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad8:	4a80      	ldr	r2, [pc, #512]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae0:	e00b      	b.n	8003afa <HAL_RCC_OscConfig+0x5a6>
 8003ae2:	4b7e      	ldr	r3, [pc, #504]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	4a7d      	ldr	r2, [pc, #500]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003ae8:	f023 0301 	bic.w	r3, r3, #1
 8003aec:	6713      	str	r3, [r2, #112]	; 0x70
 8003aee:	4b7b      	ldr	r3, [pc, #492]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	4a7a      	ldr	r2, [pc, #488]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003af4:	f023 0304 	bic.w	r3, r3, #4
 8003af8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d015      	beq.n	8003b2e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b02:	f7fd fddf 	bl	80016c4 <HAL_GetTick>
 8003b06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b08:	e00a      	b.n	8003b20 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b0a:	f7fd fddb 	bl	80016c4 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e122      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b20:	4b6e      	ldr	r3, [pc, #440]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0ee      	beq.n	8003b0a <HAL_RCC_OscConfig+0x5b6>
 8003b2c:	e014      	b.n	8003b58 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2e:	f7fd fdc9 	bl	80016c4 <HAL_GetTick>
 8003b32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b34:	e00a      	b.n	8003b4c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b36:	f7fd fdc5 	bl	80016c4 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e10c      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b4c:	4b63      	ldr	r3, [pc, #396]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1ee      	bne.n	8003b36 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 8101 	beq.w	8003d64 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b62:	4b5e      	ldr	r3, [pc, #376]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b6a:	2b18      	cmp	r3, #24
 8003b6c:	f000 80bc 	beq.w	8003ce8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	f040 8095 	bne.w	8003ca4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7a:	4b58      	ldr	r3, [pc, #352]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a57      	ldr	r2, [pc, #348]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fd fd9d 	bl	80016c4 <HAL_GetTick>
 8003b8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8e:	f7fd fd99 	bl	80016c4 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e0e2      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ba0:	4b4e      	ldr	r3, [pc, #312]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f0      	bne.n	8003b8e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bac:	4b4b      	ldr	r3, [pc, #300]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bb0:	4b4b      	ldr	r3, [pc, #300]	; (8003ce0 <HAL_RCC_OscConfig+0x78c>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003bbc:	0112      	lsls	r2, r2, #4
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	4946      	ldr	r1, [pc, #280]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	628b      	str	r3, [r1, #40]	; 0x28
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	025b      	lsls	r3, r3, #9
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	3b01      	subs	r3, #1
 8003be2:	041b      	lsls	r3, r3, #16
 8003be4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	061b      	lsls	r3, r3, #24
 8003bf2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003bf6:	4939      	ldr	r1, [pc, #228]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003bfc:	4b37      	ldr	r3, [pc, #220]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	4a36      	ldr	r2, [pc, #216]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c08:	4b34      	ldr	r3, [pc, #208]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c0c:	4b35      	ldr	r3, [pc, #212]	; (8003ce4 <HAL_RCC_OscConfig+0x790>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c14:	00d2      	lsls	r2, r2, #3
 8003c16:	4931      	ldr	r1, [pc, #196]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c1c:	4b2f      	ldr	r3, [pc, #188]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	f023 020c 	bic.w	r2, r3, #12
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	492c      	ldr	r1, [pc, #176]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c2e:	4b2b      	ldr	r3, [pc, #172]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	f023 0202 	bic.w	r2, r3, #2
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	4928      	ldr	r1, [pc, #160]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c40:	4b26      	ldr	r3, [pc, #152]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	4a25      	ldr	r2, [pc, #148]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c4c:	4b23      	ldr	r3, [pc, #140]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	4a22      	ldr	r2, [pc, #136]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c58:	4b20      	ldr	r3, [pc, #128]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003c64:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	4a1c      	ldr	r2, [pc, #112]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c70:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fd fd22 	bl	80016c4 <HAL_GetTick>
 8003c80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c84:	f7fd fd1e 	bl	80016c4 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e067      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c96:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x730>
 8003ca2:	e05f      	b.n	8003d64 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca4:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a0c      	ldr	r2, [pc, #48]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003caa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fd fd08 	bl	80016c4 <HAL_GetTick>
 8003cb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7fd fd04 	bl	80016c4 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e04d      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cca:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <HAL_RCC_OscConfig+0x788>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x764>
 8003cd6:	e045      	b.n	8003d64 <HAL_RCC_OscConfig+0x810>
 8003cd8:	58024800 	.word	0x58024800
 8003cdc:	58024400 	.word	0x58024400
 8003ce0:	fffffc0c 	.word	0xfffffc0c
 8003ce4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ce8:	4b21      	ldr	r3, [pc, #132]	; (8003d70 <HAL_RCC_OscConfig+0x81c>)
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003cee:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <HAL_RCC_OscConfig+0x81c>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d031      	beq.n	8003d60 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f003 0203 	and.w	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d12a      	bne.n	8003d60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	091b      	lsrs	r3, r3, #4
 8003d0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d122      	bne.n	8003d60 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d11a      	bne.n	8003d60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	0a5b      	lsrs	r3, r3, #9
 8003d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d36:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d111      	bne.n	8003d60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	0c1b      	lsrs	r3, r3, #16
 8003d40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d108      	bne.n	8003d60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	0e1b      	lsrs	r3, r3, #24
 8003d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3730      	adds	r7, #48	; 0x30
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	58024400 	.word	0x58024400

08003d74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e19c      	b.n	80040c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d88:	4b8a      	ldr	r3, [pc, #552]	; (8003fb4 <HAL_RCC_ClockConfig+0x240>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d910      	bls.n	8003db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b87      	ldr	r3, [pc, #540]	; (8003fb4 <HAL_RCC_ClockConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 020f 	bic.w	r2, r3, #15
 8003d9e:	4985      	ldr	r1, [pc, #532]	; (8003fb4 <HAL_RCC_ClockConfig+0x240>)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	4b83      	ldr	r3, [pc, #524]	; (8003fb4 <HAL_RCC_ClockConfig+0x240>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d001      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e184      	b.n	80040c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d010      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	4b7b      	ldr	r3, [pc, #492]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d908      	bls.n	8003de6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003dd4:	4b78      	ldr	r3, [pc, #480]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	4975      	ldr	r1, [pc, #468]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d010      	beq.n	8003e14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	4b70      	ldr	r3, [pc, #448]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d908      	bls.n	8003e14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e02:	4b6d      	ldr	r3, [pc, #436]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	496a      	ldr	r1, [pc, #424]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d010      	beq.n	8003e42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699a      	ldr	r2, [r3, #24]
 8003e24:	4b64      	ldr	r3, [pc, #400]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d908      	bls.n	8003e42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e30:	4b61      	ldr	r3, [pc, #388]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	495e      	ldr	r1, [pc, #376]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d010      	beq.n	8003e70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	4b59      	ldr	r3, [pc, #356]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d908      	bls.n	8003e70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e5e:	4b56      	ldr	r3, [pc, #344]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	4953      	ldr	r1, [pc, #332]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d010      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	4b4d      	ldr	r3, [pc, #308]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d908      	bls.n	8003e9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e8c:	4b4a      	ldr	r3, [pc, #296]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	f023 020f 	bic.w	r2, r3, #15
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4947      	ldr	r1, [pc, #284]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d055      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003eaa:	4b43      	ldr	r3, [pc, #268]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	4940      	ldr	r1, [pc, #256]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d107      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ec4:	4b3c      	ldr	r3, [pc, #240]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d121      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0f6      	b.n	80040c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d107      	bne.n	8003eec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003edc:	4b36      	ldr	r3, [pc, #216]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d115      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0ea      	b.n	80040c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d107      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ef4:	4b30      	ldr	r3, [pc, #192]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0de      	b.n	80040c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f04:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0d6      	b.n	80040c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f14:	4b28      	ldr	r3, [pc, #160]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f023 0207 	bic.w	r2, r3, #7
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4925      	ldr	r1, [pc, #148]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f26:	f7fd fbcd 	bl	80016c4 <HAL_GetTick>
 8003f2a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f2e:	f7fd fbc9 	bl	80016c4 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e0be      	b.n	80040c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f44:	4b1c      	ldr	r3, [pc, #112]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d1eb      	bne.n	8003f2e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d010      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d208      	bcs.n	8003f84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f72:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f023 020f 	bic.w	r2, r3, #15
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	490e      	ldr	r1, [pc, #56]	; (8003fb8 <HAL_RCC_ClockConfig+0x244>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_RCC_ClockConfig+0x240>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d214      	bcs.n	8003fbc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f92:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <HAL_RCC_ClockConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f023 020f 	bic.w	r2, r3, #15
 8003f9a:	4906      	ldr	r1, [pc, #24]	; (8003fb4 <HAL_RCC_ClockConfig+0x240>)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa2:	4b04      	ldr	r3, [pc, #16]	; (8003fb4 <HAL_RCC_ClockConfig+0x240>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e086      	b.n	80040c2 <HAL_RCC_ClockConfig+0x34e>
 8003fb4:	52002000 	.word	0x52002000
 8003fb8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d010      	beq.n	8003fea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	4b3f      	ldr	r3, [pc, #252]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d208      	bcs.n	8003fea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fd8:	4b3c      	ldr	r3, [pc, #240]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	4939      	ldr	r1, [pc, #228]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d010      	beq.n	8004018 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	4b34      	ldr	r3, [pc, #208]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004002:	429a      	cmp	r2, r3
 8004004:	d208      	bcs.n	8004018 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004006:	4b31      	ldr	r3, [pc, #196]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	492e      	ldr	r1, [pc, #184]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8004014:	4313      	orrs	r3, r2
 8004016:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	d010      	beq.n	8004046 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699a      	ldr	r2, [r3, #24]
 8004028:	4b28      	ldr	r3, [pc, #160]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004030:	429a      	cmp	r2, r3
 8004032:	d208      	bcs.n	8004046 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004034:	4b25      	ldr	r3, [pc, #148]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	4922      	ldr	r1, [pc, #136]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8004042:	4313      	orrs	r3, r2
 8004044:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d010      	beq.n	8004074 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69da      	ldr	r2, [r3, #28]
 8004056:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800405e:	429a      	cmp	r2, r3
 8004060:	d208      	bcs.n	8004074 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004062:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	4917      	ldr	r1, [pc, #92]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8004070:	4313      	orrs	r3, r2
 8004072:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004074:	f000 f834 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 8004078:	4602      	mov	r2, r0
 800407a:	4b14      	ldr	r3, [pc, #80]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	4912      	ldr	r1, [pc, #72]	; (80040d0 <HAL_RCC_ClockConfig+0x35c>)
 8004086:	5ccb      	ldrb	r3, [r1, r3]
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
 8004090:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004092:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <HAL_RCC_ClockConfig+0x358>)
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	4a0d      	ldr	r2, [pc, #52]	; (80040d0 <HAL_RCC_ClockConfig+0x35c>)
 800409c:	5cd3      	ldrb	r3, [r2, r3]
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	fa22 f303 	lsr.w	r3, r2, r3
 80040a8:	4a0a      	ldr	r2, [pc, #40]	; (80040d4 <HAL_RCC_ClockConfig+0x360>)
 80040aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040ac:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <HAL_RCC_ClockConfig+0x364>)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <HAL_RCC_ClockConfig+0x368>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fd faba 	bl	8001630 <HAL_InitTick>
 80040bc:	4603      	mov	r3, r0
 80040be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	58024400 	.word	0x58024400
 80040d0:	08009b1c 	.word	0x08009b1c
 80040d4:	24000004 	.word	0x24000004
 80040d8:	24000000 	.word	0x24000000
 80040dc:	24000008 	.word	0x24000008

080040e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b089      	sub	sp, #36	; 0x24
 80040e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040e6:	4bb3      	ldr	r3, [pc, #716]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ee:	2b18      	cmp	r3, #24
 80040f0:	f200 8155 	bhi.w	800439e <HAL_RCC_GetSysClockFreq+0x2be>
 80040f4:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80040f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fa:	bf00      	nop
 80040fc:	08004161 	.word	0x08004161
 8004100:	0800439f 	.word	0x0800439f
 8004104:	0800439f 	.word	0x0800439f
 8004108:	0800439f 	.word	0x0800439f
 800410c:	0800439f 	.word	0x0800439f
 8004110:	0800439f 	.word	0x0800439f
 8004114:	0800439f 	.word	0x0800439f
 8004118:	0800439f 	.word	0x0800439f
 800411c:	08004187 	.word	0x08004187
 8004120:	0800439f 	.word	0x0800439f
 8004124:	0800439f 	.word	0x0800439f
 8004128:	0800439f 	.word	0x0800439f
 800412c:	0800439f 	.word	0x0800439f
 8004130:	0800439f 	.word	0x0800439f
 8004134:	0800439f 	.word	0x0800439f
 8004138:	0800439f 	.word	0x0800439f
 800413c:	0800418d 	.word	0x0800418d
 8004140:	0800439f 	.word	0x0800439f
 8004144:	0800439f 	.word	0x0800439f
 8004148:	0800439f 	.word	0x0800439f
 800414c:	0800439f 	.word	0x0800439f
 8004150:	0800439f 	.word	0x0800439f
 8004154:	0800439f 	.word	0x0800439f
 8004158:	0800439f 	.word	0x0800439f
 800415c:	08004193 	.word	0x08004193
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004160:	4b94      	ldr	r3, [pc, #592]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800416c:	4b91      	ldr	r3, [pc, #580]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	08db      	lsrs	r3, r3, #3
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	4a90      	ldr	r2, [pc, #576]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
 800417c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800417e:	e111      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004180:	4b8d      	ldr	r3, [pc, #564]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004182:	61bb      	str	r3, [r7, #24]
    break;
 8004184:	e10e      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004186:	4b8d      	ldr	r3, [pc, #564]	; (80043bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004188:	61bb      	str	r3, [r7, #24]
    break;
 800418a:	e10b      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800418c:	4b8c      	ldr	r3, [pc, #560]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800418e:	61bb      	str	r3, [r7, #24]
    break;
 8004190:	e108      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004192:	4b88      	ldr	r3, [pc, #544]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800419c:	4b85      	ldr	r3, [pc, #532]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80041a8:	4b82      	ldr	r3, [pc, #520]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80041b2:	4b80      	ldr	r3, [pc, #512]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b6:	08db      	lsrs	r3, r3, #3
 80041b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	fb02 f303 	mul.w	r3, r2, r3
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80e1 	beq.w	8004398 <HAL_RCC_GetSysClockFreq+0x2b8>
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	f000 8083 	beq.w	80042e4 <HAL_RCC_GetSysClockFreq+0x204>
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	f200 80a1 	bhi.w	8004328 <HAL_RCC_GetSysClockFreq+0x248>
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0x114>
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d056      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80041f2:	e099      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041f4:	4b6f      	ldr	r3, [pc, #444]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d02d      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004200:	4b6c      	ldr	r3, [pc, #432]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	08db      	lsrs	r3, r3, #3
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	4a6b      	ldr	r2, [pc, #428]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
 8004210:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422a:	4b62      	ldr	r3, [pc, #392]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423a:	ed97 6a02 	vldr	s12, [r7, #8]
 800423e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80043c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800424e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004256:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800425a:	e087      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004266:	eddf 6a58 	vldr	s13, [pc, #352]	; 80043c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800426a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800426e:	4b51      	ldr	r3, [pc, #324]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004276:	ee07 3a90 	vmov	s15, r3
 800427a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800427e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004282:	eddf 5a50 	vldr	s11, [pc, #320]	; 80043c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800428a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800428e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800429e:	e065      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	ee07 3a90 	vmov	s15, r3
 80042a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80043cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80042ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042b2:	4b40      	ldr	r3, [pc, #256]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80043c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042e2:	e043      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80043d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80042f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042f6:	4b2f      	ldr	r3, [pc, #188]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004306:	ed97 6a02 	vldr	s12, [r7, #8]
 800430a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80043c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800430e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800431a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800431e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004326:	e021      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004332:	eddf 6a26 	vldr	s13, [pc, #152]	; 80043cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800433a:	4b1e      	ldr	r3, [pc, #120]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004342:	ee07 3a90 	vmov	s15, r3
 8004346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800434a:	ed97 6a02 	vldr	s12, [r7, #8]
 800434e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80043c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800435a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800435e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800436a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800436c:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	0a5b      	lsrs	r3, r3, #9
 8004372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004376:	3301      	adds	r3, #1
 8004378:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	ee07 3a90 	vmov	s15, r3
 8004380:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004384:	edd7 6a07 	vldr	s13, [r7, #28]
 8004388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800438c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004390:	ee17 3a90 	vmov	r3, s15
 8004394:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004396:	e005      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	61bb      	str	r3, [r7, #24]
    break;
 800439c:	e002      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800439e:	4b07      	ldr	r3, [pc, #28]	; (80043bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043a0:	61bb      	str	r3, [r7, #24]
    break;
 80043a2:	bf00      	nop
  }

  return sysclockfreq;
 80043a4:	69bb      	ldr	r3, [r7, #24]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3724      	adds	r7, #36	; 0x24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	58024400 	.word	0x58024400
 80043b8:	03d09000 	.word	0x03d09000
 80043bc:	003d0900 	.word	0x003d0900
 80043c0:	017d7840 	.word	0x017d7840
 80043c4:	46000000 	.word	0x46000000
 80043c8:	4c742400 	.word	0x4c742400
 80043cc:	4a742400 	.word	0x4a742400
 80043d0:	4bbebc20 	.word	0x4bbebc20

080043d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043da:	f7ff fe81 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 80043de:	4602      	mov	r2, r0
 80043e0:	4b10      	ldr	r3, [pc, #64]	; (8004424 <HAL_RCC_GetHCLKFreq+0x50>)
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	490f      	ldr	r1, [pc, #60]	; (8004428 <HAL_RCC_GetHCLKFreq+0x54>)
 80043ec:	5ccb      	ldrb	r3, [r1, r3]
 80043ee:	f003 031f 	and.w	r3, r3, #31
 80043f2:	fa22 f303 	lsr.w	r3, r2, r3
 80043f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043f8:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <HAL_RCC_GetHCLKFreq+0x50>)
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	4a09      	ldr	r2, [pc, #36]	; (8004428 <HAL_RCC_GetHCLKFreq+0x54>)
 8004402:	5cd3      	ldrb	r3, [r2, r3]
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	fa22 f303 	lsr.w	r3, r2, r3
 800440e:	4a07      	ldr	r2, [pc, #28]	; (800442c <HAL_RCC_GetHCLKFreq+0x58>)
 8004410:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004412:	4a07      	ldr	r2, [pc, #28]	; (8004430 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004418:	4b04      	ldr	r3, [pc, #16]	; (800442c <HAL_RCC_GetHCLKFreq+0x58>)
 800441a:	681b      	ldr	r3, [r3, #0]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	58024400 	.word	0x58024400
 8004428:	08009b1c 	.word	0x08009b1c
 800442c:	24000004 	.word	0x24000004
 8004430:	24000000 	.word	0x24000000

08004434 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800443c:	2300      	movs	r3, #0
 800443e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004440:	2300      	movs	r3, #0
 8004442:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d03f      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004454:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004458:	d02a      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800445a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800445e:	d824      	bhi.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004460:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004464:	d018      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004466:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800446a:	d81e      	bhi.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004470:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004474:	d007      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004476:	e018      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004478:	4bab      	ldr	r3, [pc, #684]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	4aaa      	ldr	r2, [pc, #680]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800447e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004482:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004484:	e015      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3304      	adds	r3, #4
 800448a:	2102      	movs	r1, #2
 800448c:	4618      	mov	r0, r3
 800448e:	f001 fff3 	bl	8006478 <RCCEx_PLL2_Config>
 8004492:	4603      	mov	r3, r0
 8004494:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004496:	e00c      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3324      	adds	r3, #36	; 0x24
 800449c:	2102      	movs	r1, #2
 800449e:	4618      	mov	r0, r3
 80044a0:	f002 f89c 	bl	80065dc <RCCEx_PLL3_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044a8:	e003      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	75fb      	strb	r3, [r7, #23]
      break;
 80044ae:	e000      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80044b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d109      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80044b8:	4b9b      	ldr	r3, [pc, #620]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044c4:	4998      	ldr	r1, [pc, #608]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	650b      	str	r3, [r1, #80]	; 0x50
 80044ca:	e001      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044cc:	7dfb      	ldrb	r3, [r7, #23]
 80044ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d03d      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d826      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80044e4:	a201      	add	r2, pc, #4	; (adr r2, 80044ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80044e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ea:	bf00      	nop
 80044ec:	08004501 	.word	0x08004501
 80044f0:	0800450f 	.word	0x0800450f
 80044f4:	08004521 	.word	0x08004521
 80044f8:	08004539 	.word	0x08004539
 80044fc:	08004539 	.word	0x08004539
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004500:	4b89      	ldr	r3, [pc, #548]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	4a88      	ldr	r2, [pc, #544]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800450a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800450c:	e015      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3304      	adds	r3, #4
 8004512:	2100      	movs	r1, #0
 8004514:	4618      	mov	r0, r3
 8004516:	f001 ffaf 	bl	8006478 <RCCEx_PLL2_Config>
 800451a:	4603      	mov	r3, r0
 800451c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800451e:	e00c      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3324      	adds	r3, #36	; 0x24
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f002 f858 	bl	80065dc <RCCEx_PLL3_Config>
 800452c:	4603      	mov	r3, r0
 800452e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004530:	e003      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	75fb      	strb	r3, [r7, #23]
      break;
 8004536:	e000      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800453a:	7dfb      	ldrb	r3, [r7, #23]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004540:	4b79      	ldr	r3, [pc, #484]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004544:	f023 0207 	bic.w	r2, r3, #7
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454c:	4976      	ldr	r1, [pc, #472]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800454e:	4313      	orrs	r3, r2
 8004550:	650b      	str	r3, [r1, #80]	; 0x50
 8004552:	e001      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004554:	7dfb      	ldrb	r3, [r7, #23]
 8004556:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004560:	2b00      	cmp	r3, #0
 8004562:	d042      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456c:	d02b      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800456e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004572:	d825      	bhi.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004574:	2bc0      	cmp	r3, #192	; 0xc0
 8004576:	d028      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004578:	2bc0      	cmp	r3, #192	; 0xc0
 800457a:	d821      	bhi.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800457c:	2b80      	cmp	r3, #128	; 0x80
 800457e:	d016      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004580:	2b80      	cmp	r3, #128	; 0x80
 8004582:	d81d      	bhi.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004588:	2b40      	cmp	r3, #64	; 0x40
 800458a:	d007      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800458c:	e018      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800458e:	4b66      	ldr	r3, [pc, #408]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	4a65      	ldr	r2, [pc, #404]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004598:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800459a:	e017      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3304      	adds	r3, #4
 80045a0:	2100      	movs	r1, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 ff68 	bl	8006478 <RCCEx_PLL2_Config>
 80045a8:	4603      	mov	r3, r0
 80045aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80045ac:	e00e      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3324      	adds	r3, #36	; 0x24
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f002 f811 	bl	80065dc <RCCEx_PLL3_Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80045be:	e005      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	75fb      	strb	r3, [r7, #23]
      break;
 80045c4:	e002      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80045c6:	bf00      	nop
 80045c8:	e000      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80045ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80045d2:	4b55      	ldr	r3, [pc, #340]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045de:	4952      	ldr	r1, [pc, #328]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	650b      	str	r3, [r1, #80]	; 0x50
 80045e4:	e001      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
 80045e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d049      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80045fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004600:	d030      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004602:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004606:	d82a      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004608:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800460c:	d02c      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800460e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004612:	d824      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004618:	d018      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800461a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800461e:	d81e      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004624:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004628:	d007      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800462a:	e018      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800462c:	4b3e      	ldr	r3, [pc, #248]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	4a3d      	ldr	r2, [pc, #244]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004636:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004638:	e017      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3304      	adds	r3, #4
 800463e:	2100      	movs	r1, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f001 ff19 	bl	8006478 <RCCEx_PLL2_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800464a:	e00e      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3324      	adds	r3, #36	; 0x24
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f001 ffc2 	bl	80065dc <RCCEx_PLL3_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800465c:	e005      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	75fb      	strb	r3, [r7, #23]
      break;
 8004662:	e002      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004664:	bf00      	nop
 8004666:	e000      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004668:	bf00      	nop
    }

    if(ret == HAL_OK)
 800466a:	7dfb      	ldrb	r3, [r7, #23]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004670:	4b2d      	ldr	r3, [pc, #180]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004674:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800467e:	492a      	ldr	r1, [pc, #168]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004680:	4313      	orrs	r3, r2
 8004682:	658b      	str	r3, [r1, #88]	; 0x58
 8004684:	e001      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004686:	7dfb      	ldrb	r3, [r7, #23]
 8004688:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004692:	2b00      	cmp	r3, #0
 8004694:	d04c      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800469c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046a0:	d030      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80046a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046a6:	d82a      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80046a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046ac:	d02c      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80046ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046b2:	d824      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80046b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046b8:	d018      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80046ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046be:	d81e      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80046c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046c8:	d007      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80046ca:	e018      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046cc:	4b16      	ldr	r3, [pc, #88]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	4a15      	ldr	r2, [pc, #84]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046d8:	e017      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3304      	adds	r3, #4
 80046de:	2100      	movs	r1, #0
 80046e0:	4618      	mov	r0, r3
 80046e2:	f001 fec9 	bl	8006478 <RCCEx_PLL2_Config>
 80046e6:	4603      	mov	r3, r0
 80046e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80046ea:	e00e      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3324      	adds	r3, #36	; 0x24
 80046f0:	2100      	movs	r1, #0
 80046f2:	4618      	mov	r0, r3
 80046f4:	f001 ff72 	bl	80065dc <RCCEx_PLL3_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046fc:	e005      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	75fb      	strb	r3, [r7, #23]
      break;
 8004702:	e002      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004704:	bf00      	nop
 8004706:	e000      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004708:	bf00      	nop
    }

    if(ret == HAL_OK)
 800470a:	7dfb      	ldrb	r3, [r7, #23]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10d      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800471e:	4902      	ldr	r1, [pc, #8]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004720:	4313      	orrs	r3, r2
 8004722:	658b      	str	r3, [r1, #88]	; 0x58
 8004724:	e004      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004726:	bf00      	nop
 8004728:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472c:	7dfb      	ldrb	r3, [r7, #23]
 800472e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d032      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004740:	2b30      	cmp	r3, #48	; 0x30
 8004742:	d01c      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004744:	2b30      	cmp	r3, #48	; 0x30
 8004746:	d817      	bhi.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004748:	2b20      	cmp	r3, #32
 800474a:	d00c      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800474c:	2b20      	cmp	r3, #32
 800474e:	d813      	bhi.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d016      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004754:	2b10      	cmp	r3, #16
 8004756:	d10f      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004758:	4baf      	ldr	r3, [pc, #700]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	4aae      	ldr	r2, [pc, #696]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800475e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004764:	e00e      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3304      	adds	r3, #4
 800476a:	2102      	movs	r1, #2
 800476c:	4618      	mov	r0, r3
 800476e:	f001 fe83 	bl	8006478 <RCCEx_PLL2_Config>
 8004772:	4603      	mov	r3, r0
 8004774:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004776:	e005      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	75fb      	strb	r3, [r7, #23]
      break;
 800477c:	e002      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800477e:	bf00      	nop
 8004780:	e000      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004784:	7dfb      	ldrb	r3, [r7, #23]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d109      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800478a:	4ba3      	ldr	r3, [pc, #652]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800478c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004796:	49a0      	ldr	r1, [pc, #640]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004798:	4313      	orrs	r3, r2
 800479a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800479c:	e001      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d047      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047b6:	d030      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80047b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047bc:	d82a      	bhi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80047be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047c2:	d02c      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80047c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047c8:	d824      	bhi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80047ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ce:	d018      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80047d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d4:	d81e      	bhi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	d007      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80047e0:	e018      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e2:	4b8d      	ldr	r3, [pc, #564]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	4a8c      	ldr	r2, [pc, #560]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80047e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80047ee:	e017      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3304      	adds	r3, #4
 80047f4:	2100      	movs	r1, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f001 fe3e 	bl	8006478 <RCCEx_PLL2_Config>
 80047fc:	4603      	mov	r3, r0
 80047fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004800:	e00e      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3324      	adds	r3, #36	; 0x24
 8004806:	2100      	movs	r1, #0
 8004808:	4618      	mov	r0, r3
 800480a:	f001 fee7 	bl	80065dc <RCCEx_PLL3_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004812:	e005      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	75fb      	strb	r3, [r7, #23]
      break;
 8004818:	e002      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800481a:	bf00      	nop
 800481c:	e000      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800481e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004820:	7dfb      	ldrb	r3, [r7, #23]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004826:	4b7c      	ldr	r3, [pc, #496]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004832:	4979      	ldr	r1, [pc, #484]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004834:	4313      	orrs	r3, r2
 8004836:	650b      	str	r3, [r1, #80]	; 0x50
 8004838:	e001      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483a:	7dfb      	ldrb	r3, [r7, #23]
 800483c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d049      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004852:	d02e      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004858:	d828      	bhi.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 800485a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800485e:	d02a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004860:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004864:	d822      	bhi.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004866:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800486a:	d026      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x486>
 800486c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004870:	d81c      	bhi.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004872:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004876:	d010      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800487c:	d816      	bhi.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01d      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004886:	d111      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3304      	adds	r3, #4
 800488c:	2101      	movs	r1, #1
 800488e:	4618      	mov	r0, r3
 8004890:	f001 fdf2 	bl	8006478 <RCCEx_PLL2_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004898:	e012      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3324      	adds	r3, #36	; 0x24
 800489e:	2101      	movs	r1, #1
 80048a0:	4618      	mov	r0, r3
 80048a2:	f001 fe9b 	bl	80065dc <RCCEx_PLL3_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80048aa:	e009      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	75fb      	strb	r3, [r7, #23]
      break;
 80048b0:	e006      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80048b2:	bf00      	nop
 80048b4:	e004      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80048b6:	bf00      	nop
 80048b8:	e002      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80048ba:	bf00      	nop
 80048bc:	e000      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80048be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d109      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80048c6:	4b54      	ldr	r3, [pc, #336]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ca:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d2:	4951      	ldr	r1, [pc, #324]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	650b      	str	r3, [r1, #80]	; 0x50
 80048d8:	e001      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048da:	7dfb      	ldrb	r3, [r7, #23]
 80048dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d04b      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80048f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048f4:	d02e      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80048f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048fa:	d828      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80048fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004900:	d02a      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004906:	d822      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004908:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800490c:	d026      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800490e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004912:	d81c      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004918:	d010      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800491a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800491e:	d816      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01d      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004928:	d111      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3304      	adds	r3, #4
 800492e:	2101      	movs	r1, #1
 8004930:	4618      	mov	r0, r3
 8004932:	f001 fda1 	bl	8006478 <RCCEx_PLL2_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800493a:	e012      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3324      	adds	r3, #36	; 0x24
 8004940:	2101      	movs	r1, #1
 8004942:	4618      	mov	r0, r3
 8004944:	f001 fe4a 	bl	80065dc <RCCEx_PLL3_Config>
 8004948:	4603      	mov	r3, r0
 800494a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800494c:	e009      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	75fb      	strb	r3, [r7, #23]
      break;
 8004952:	e006      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004954:	bf00      	nop
 8004956:	e004      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004958:	bf00      	nop
 800495a:	e002      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800495c:	bf00      	nop
 800495e:	e000      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004962:	7dfb      	ldrb	r3, [r7, #23]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004968:	4b2b      	ldr	r3, [pc, #172]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800496a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004976:	4928      	ldr	r1, [pc, #160]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004978:	4313      	orrs	r3, r2
 800497a:	658b      	str	r3, [r1, #88]	; 0x58
 800497c:	e001      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497e:	7dfb      	ldrb	r3, [r7, #23]
 8004980:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d02f      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004996:	d00e      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800499c:	d814      	bhi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d015      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80049a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049a6:	d10f      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a8:	4b1b      	ldr	r3, [pc, #108]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	4a1a      	ldr	r2, [pc, #104]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80049ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80049b4:	e00c      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3304      	adds	r3, #4
 80049ba:	2101      	movs	r1, #1
 80049bc:	4618      	mov	r0, r3
 80049be:	f001 fd5b 	bl	8006478 <RCCEx_PLL2_Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80049c6:	e003      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	75fb      	strb	r3, [r7, #23]
      break;
 80049cc:	e000      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80049ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049d6:	4b10      	ldr	r3, [pc, #64]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80049d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049e2:	490d      	ldr	r1, [pc, #52]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	650b      	str	r3, [r1, #80]	; 0x50
 80049e8:	e001      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
 80049ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d033      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d81c      	bhi.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004a02:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a08:	08004a43 	.word	0x08004a43
 8004a0c:	08004a1d 	.word	0x08004a1d
 8004a10:	08004a2b 	.word	0x08004a2b
 8004a14:	08004a43 	.word	0x08004a43
 8004a18:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a1c:	4bb8      	ldr	r3, [pc, #736]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	4ab7      	ldr	r2, [pc, #732]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004a28:	e00c      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	2102      	movs	r1, #2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f001 fd21 	bl	8006478 <RCCEx_PLL2_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004a3a:	e003      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a40:	e000      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004a42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a44:	7dfb      	ldrb	r3, [r7, #23]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004a4a:	4bad      	ldr	r3, [pc, #692]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4e:	f023 0203 	bic.w	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a56:	49aa      	ldr	r1, [pc, #680]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a5c:	e001      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5e:	7dfb      	ldrb	r3, [r7, #23]
 8004a60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 8086 	beq.w	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a70:	4ba4      	ldr	r3, [pc, #656]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4aa3      	ldr	r2, [pc, #652]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a7c:	f7fc fe22 	bl	80016c4 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a82:	e009      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a84:	f7fc fe1e 	bl	80016c4 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b64      	cmp	r3, #100	; 0x64
 8004a90:	d902      	bls.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	75fb      	strb	r3, [r7, #23]
        break;
 8004a96:	e005      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a98:	4b9a      	ldr	r3, [pc, #616]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0ef      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d166      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004aaa:	4b95      	ldr	r3, [pc, #596]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004aac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ab4:	4053      	eors	r3, r2
 8004ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d013      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004abe:	4b90      	ldr	r3, [pc, #576]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ac8:	4b8d      	ldr	r3, [pc, #564]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004acc:	4a8c      	ldr	r2, [pc, #560]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ad4:	4b8a      	ldr	r3, [pc, #552]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad8:	4a89      	ldr	r2, [pc, #548]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ade:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ae0:	4a87      	ldr	r2, [pc, #540]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af0:	d115      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af2:	f7fc fde7 	bl	80016c4 <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004af8:	e00b      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afa:	f7fc fde3 	bl	80016c4 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d902      	bls.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	75fb      	strb	r3, [r7, #23]
            break;
 8004b10:	e005      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b12:	4b7b      	ldr	r3, [pc, #492]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0ed      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d126      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b32:	d10d      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004b34:	4b72      	ldr	r3, [pc, #456]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b42:	0919      	lsrs	r1, r3, #4
 8004b44:	4b70      	ldr	r3, [pc, #448]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004b46:	400b      	ands	r3, r1
 8004b48:	496d      	ldr	r1, [pc, #436]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	610b      	str	r3, [r1, #16]
 8004b4e:	e005      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004b50:	4b6b      	ldr	r3, [pc, #428]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	4a6a      	ldr	r2, [pc, #424]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004b5a:	6113      	str	r3, [r2, #16]
 8004b5c:	4b68      	ldr	r3, [pc, #416]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b6a:	4965      	ldr	r1, [pc, #404]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	670b      	str	r3, [r1, #112]	; 0x70
 8004b70:	e004      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b72:	7dfb      	ldrb	r3, [r7, #23]
 8004b74:	75bb      	strb	r3, [r7, #22]
 8004b76:	e001      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d07e      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b8c:	2b28      	cmp	r3, #40	; 0x28
 8004b8e:	d867      	bhi.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004b90:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b96:	bf00      	nop
 8004b98:	08004c67 	.word	0x08004c67
 8004b9c:	08004c61 	.word	0x08004c61
 8004ba0:	08004c61 	.word	0x08004c61
 8004ba4:	08004c61 	.word	0x08004c61
 8004ba8:	08004c61 	.word	0x08004c61
 8004bac:	08004c61 	.word	0x08004c61
 8004bb0:	08004c61 	.word	0x08004c61
 8004bb4:	08004c61 	.word	0x08004c61
 8004bb8:	08004c3d 	.word	0x08004c3d
 8004bbc:	08004c61 	.word	0x08004c61
 8004bc0:	08004c61 	.word	0x08004c61
 8004bc4:	08004c61 	.word	0x08004c61
 8004bc8:	08004c61 	.word	0x08004c61
 8004bcc:	08004c61 	.word	0x08004c61
 8004bd0:	08004c61 	.word	0x08004c61
 8004bd4:	08004c61 	.word	0x08004c61
 8004bd8:	08004c4f 	.word	0x08004c4f
 8004bdc:	08004c61 	.word	0x08004c61
 8004be0:	08004c61 	.word	0x08004c61
 8004be4:	08004c61 	.word	0x08004c61
 8004be8:	08004c61 	.word	0x08004c61
 8004bec:	08004c61 	.word	0x08004c61
 8004bf0:	08004c61 	.word	0x08004c61
 8004bf4:	08004c61 	.word	0x08004c61
 8004bf8:	08004c67 	.word	0x08004c67
 8004bfc:	08004c61 	.word	0x08004c61
 8004c00:	08004c61 	.word	0x08004c61
 8004c04:	08004c61 	.word	0x08004c61
 8004c08:	08004c61 	.word	0x08004c61
 8004c0c:	08004c61 	.word	0x08004c61
 8004c10:	08004c61 	.word	0x08004c61
 8004c14:	08004c61 	.word	0x08004c61
 8004c18:	08004c67 	.word	0x08004c67
 8004c1c:	08004c61 	.word	0x08004c61
 8004c20:	08004c61 	.word	0x08004c61
 8004c24:	08004c61 	.word	0x08004c61
 8004c28:	08004c61 	.word	0x08004c61
 8004c2c:	08004c61 	.word	0x08004c61
 8004c30:	08004c61 	.word	0x08004c61
 8004c34:	08004c61 	.word	0x08004c61
 8004c38:	08004c67 	.word	0x08004c67
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	2101      	movs	r1, #1
 8004c42:	4618      	mov	r0, r3
 8004c44:	f001 fc18 	bl	8006478 <RCCEx_PLL2_Config>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004c4c:	e00c      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3324      	adds	r3, #36	; 0x24
 8004c52:	2101      	movs	r1, #1
 8004c54:	4618      	mov	r0, r3
 8004c56:	f001 fcc1 	bl	80065dc <RCCEx_PLL3_Config>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004c5e:	e003      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	75fb      	strb	r3, [r7, #23]
      break;
 8004c64:	e000      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004c6e:	4b24      	ldr	r3, [pc, #144]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c72:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c7a:	4921      	ldr	r1, [pc, #132]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	654b      	str	r3, [r1, #84]	; 0x54
 8004c80:	e001      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c82:	7dfb      	ldrb	r3, [r7, #23]
 8004c84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d03e      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c96:	2b05      	cmp	r3, #5
 8004c98:	d820      	bhi.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004c9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca0:	08004ce3 	.word	0x08004ce3
 8004ca4:	08004cb9 	.word	0x08004cb9
 8004ca8:	08004ccb 	.word	0x08004ccb
 8004cac:	08004ce3 	.word	0x08004ce3
 8004cb0:	08004ce3 	.word	0x08004ce3
 8004cb4:	08004ce3 	.word	0x08004ce3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 fbda 	bl	8006478 <RCCEx_PLL2_Config>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004cc8:	e00c      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	3324      	adds	r3, #36	; 0x24
 8004cce:	2101      	movs	r1, #1
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f001 fc83 	bl	80065dc <RCCEx_PLL3_Config>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004cda:	e003      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	75fb      	strb	r3, [r7, #23]
      break;
 8004ce0:	e000      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004ce2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d110      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004cea:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cee:	f023 0207 	bic.w	r2, r3, #7
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf6:	4902      	ldr	r1, [pc, #8]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	654b      	str	r3, [r1, #84]	; 0x54
 8004cfc:	e008      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004cfe:	bf00      	nop
 8004d00:	58024400 	.word	0x58024400
 8004d04:	58024800 	.word	0x58024800
 8004d08:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
 8004d0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d039      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d22:	2b05      	cmp	r3, #5
 8004d24:	d820      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004d26:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004d6f 	.word	0x08004d6f
 8004d30:	08004d45 	.word	0x08004d45
 8004d34:	08004d57 	.word	0x08004d57
 8004d38:	08004d6f 	.word	0x08004d6f
 8004d3c:	08004d6f 	.word	0x08004d6f
 8004d40:	08004d6f 	.word	0x08004d6f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3304      	adds	r3, #4
 8004d48:	2101      	movs	r1, #1
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f001 fb94 	bl	8006478 <RCCEx_PLL2_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004d54:	e00c      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3324      	adds	r3, #36	; 0x24
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f001 fc3d 	bl	80065dc <RCCEx_PLL3_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004d66:	e003      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d6c:	e000      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004d6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d70:	7dfb      	ldrb	r3, [r7, #23]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10a      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d76:	4bb7      	ldr	r3, [pc, #732]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7a:	f023 0207 	bic.w	r2, r3, #7
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	49b3      	ldr	r1, [pc, #716]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	658b      	str	r3, [r1, #88]	; 0x58
 8004d8a:	e001      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8c:	7dfb      	ldrb	r3, [r7, #23]
 8004d8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d04b      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004da6:	d02e      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dac:	d828      	bhi.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db2:	d02a      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db8:	d822      	bhi.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004dba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dbe:	d026      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004dc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dc4:	d81c      	bhi.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004dc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dca:	d010      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dd0:	d816      	bhi.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d01d      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004dd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dda:	d111      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3304      	adds	r3, #4
 8004de0:	2100      	movs	r1, #0
 8004de2:	4618      	mov	r0, r3
 8004de4:	f001 fb48 	bl	8006478 <RCCEx_PLL2_Config>
 8004de8:	4603      	mov	r3, r0
 8004dea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004dec:	e012      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3324      	adds	r3, #36	; 0x24
 8004df2:	2102      	movs	r1, #2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f001 fbf1 	bl	80065dc <RCCEx_PLL3_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004dfe:	e009      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	75fb      	strb	r3, [r7, #23]
      break;
 8004e04:	e006      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004e06:	bf00      	nop
 8004e08:	e004      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004e0a:	bf00      	nop
 8004e0c:	e002      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004e12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e14:	7dfb      	ldrb	r3, [r7, #23]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10a      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e1a:	4b8e      	ldr	r3, [pc, #568]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e28:	498a      	ldr	r1, [pc, #552]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	654b      	str	r3, [r1, #84]	; 0x54
 8004e2e:	e001      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e30:	7dfb      	ldrb	r3, [r7, #23]
 8004e32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d04b      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e4a:	d02e      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004e4c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e50:	d828      	bhi.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e56:	d02a      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5c:	d822      	bhi.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004e5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e62:	d026      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004e64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e68:	d81c      	bhi.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e6e:	d010      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004e70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e74:	d816      	bhi.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d01d      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e7e:	d111      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	2100      	movs	r1, #0
 8004e86:	4618      	mov	r0, r3
 8004e88:	f001 faf6 	bl	8006478 <RCCEx_PLL2_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004e90:	e012      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3324      	adds	r3, #36	; 0x24
 8004e96:	2102      	movs	r1, #2
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f001 fb9f 	bl	80065dc <RCCEx_PLL3_Config>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ea2:	e009      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ea8:	e006      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004eaa:	bf00      	nop
 8004eac:	e004      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004eae:	bf00      	nop
 8004eb0:	e002      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004eb2:	bf00      	nop
 8004eb4:	e000      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004eb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10a      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ebe:	4b65      	ldr	r3, [pc, #404]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ecc:	4961      	ldr	r1, [pc, #388]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	658b      	str	r3, [r1, #88]	; 0x58
 8004ed2:	e001      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
 8004ed6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d04b      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004eea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004eee:	d02e      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004ef0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ef4:	d828      	bhi.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004efa:	d02a      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f00:	d822      	bhi.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004f02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f06:	d026      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004f08:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f0c:	d81c      	bhi.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004f0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f12:	d010      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f18:	d816      	bhi.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01d      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f22:	d111      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f001 faa4 	bl	8006478 <RCCEx_PLL2_Config>
 8004f30:	4603      	mov	r3, r0
 8004f32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004f34:	e012      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3324      	adds	r3, #36	; 0x24
 8004f3a:	2102      	movs	r1, #2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f001 fb4d 	bl	80065dc <RCCEx_PLL3_Config>
 8004f42:	4603      	mov	r3, r0
 8004f44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004f46:	e009      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f4c:	e006      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004f4e:	bf00      	nop
 8004f50:	e004      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004f52:	bf00      	nop
 8004f54:	e002      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004f56:	bf00      	nop
 8004f58:	e000      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10a      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004f62:	4b3c      	ldr	r3, [pc, #240]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f70:	4938      	ldr	r1, [pc, #224]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	658b      	str	r3, [r1, #88]	; 0x58
 8004f76:	e001      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
 8004f7a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f92:	d10a      	bne.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3324      	adds	r3, #36	; 0x24
 8004f98:	2102      	movs	r1, #2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f001 fb1e 	bl	80065dc <RCCEx_PLL3_Config>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004faa:	4b2a      	ldr	r3, [pc, #168]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb8:	4926      	ldr	r1, [pc, #152]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d01a      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fd4:	d10a      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3324      	adds	r3, #36	; 0x24
 8004fda:	2102      	movs	r1, #2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f001 fafd 	bl	80065dc <RCCEx_PLL3_Config>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fec:	4b19      	ldr	r3, [pc, #100]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ffa:	4916      	ldr	r1, [pc, #88]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d036      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005012:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005016:	d01f      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800501c:	d817      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005026:	d009      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005028:	e011      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3304      	adds	r3, #4
 800502e:	2100      	movs	r1, #0
 8005030:	4618      	mov	r0, r3
 8005032:	f001 fa21 	bl	8006478 <RCCEx_PLL2_Config>
 8005036:	4603      	mov	r3, r0
 8005038:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800503a:	e00e      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3324      	adds	r3, #36	; 0x24
 8005040:	2102      	movs	r1, #2
 8005042:	4618      	mov	r0, r3
 8005044:	f001 faca 	bl	80065dc <RCCEx_PLL3_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800504c:	e005      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	75fb      	strb	r3, [r7, #23]
      break;
 8005052:	e002      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005054:	58024400 	.word	0x58024400
      break;
 8005058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005060:	4b93      	ldr	r3, [pc, #588]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005064:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800506e:	4990      	ldr	r1, [pc, #576]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005070:	4313      	orrs	r3, r2
 8005072:	658b      	str	r3, [r1, #88]	; 0x58
 8005074:	e001      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005076:	7dfb      	ldrb	r3, [r7, #23]
 8005078:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d033      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800508c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005090:	d01c      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005092:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005096:	d816      	bhi.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800509c:	d003      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800509e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050a2:	d007      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80050a4:	e00f      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a6:	4b82      	ldr	r3, [pc, #520]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050aa:	4a81      	ldr	r2, [pc, #516]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80050b2:	e00c      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3324      	adds	r3, #36	; 0x24
 80050b8:	2101      	movs	r1, #1
 80050ba:	4618      	mov	r0, r3
 80050bc:	f001 fa8e 	bl	80065dc <RCCEx_PLL3_Config>
 80050c0:	4603      	mov	r3, r0
 80050c2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80050c4:	e003      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	75fb      	strb	r3, [r7, #23]
      break;
 80050ca:	e000      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80050cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050d4:	4b76      	ldr	r3, [pc, #472]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e2:	4973      	ldr	r1, [pc, #460]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	654b      	str	r3, [r1, #84]	; 0x54
 80050e8:	e001      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ea:	7dfb      	ldrb	r3, [r7, #23]
 80050ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d029      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005106:	d007      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005108:	e00f      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800510a:	4b69      	ldr	r3, [pc, #420]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	4a68      	ldr	r2, [pc, #416]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005114:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005116:	e00b      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	2102      	movs	r1, #2
 800511e:	4618      	mov	r0, r3
 8005120:	f001 f9aa 	bl	8006478 <RCCEx_PLL2_Config>
 8005124:	4603      	mov	r3, r0
 8005126:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005128:	e002      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	75fb      	strb	r3, [r7, #23]
      break;
 800512e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005130:	7dfb      	ldrb	r3, [r7, #23]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d109      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005136:	4b5e      	ldr	r3, [pc, #376]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005142:	495b      	ldr	r1, [pc, #364]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005144:	4313      	orrs	r3, r2
 8005146:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005148:	e001      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514a:	7dfb      	ldrb	r3, [r7, #23]
 800514c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3324      	adds	r3, #36	; 0x24
 800515e:	2102      	movs	r1, #2
 8005160:	4618      	mov	r0, r3
 8005162:	f001 fa3b 	bl	80065dc <RCCEx_PLL3_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d030      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005180:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005184:	d017      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005186:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800518a:	d811      	bhi.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800518c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005190:	d013      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005196:	d80b      	bhi.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005198:	2b00      	cmp	r3, #0
 800519a:	d010      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800519c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a0:	d106      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a2:	4b43      	ldr	r3, [pc, #268]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	4a42      	ldr	r2, [pc, #264]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80051ae:	e007      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	75fb      	strb	r3, [r7, #23]
      break;
 80051b4:	e004      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80051b6:	bf00      	nop
 80051b8:	e002      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80051ba:	bf00      	nop
 80051bc:	e000      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80051be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c0:	7dfb      	ldrb	r3, [r7, #23]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051c6:	4b3a      	ldr	r3, [pc, #232]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051d2:	4937      	ldr	r1, [pc, #220]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	654b      	str	r3, [r1, #84]	; 0x54
 80051d8:	e001      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051da:	7dfb      	ldrb	r3, [r7, #23]
 80051dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051ea:	4b31      	ldr	r3, [pc, #196]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f6:	492e      	ldr	r1, [pc, #184]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d009      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005208:	4b29      	ldr	r3, [pc, #164]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005216:	4926      	ldr	r1, [pc, #152]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005218:	4313      	orrs	r3, r2
 800521a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d008      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005228:	4b21      	ldr	r3, [pc, #132]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800522a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005234:	491e      	ldr	r1, [pc, #120]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005236:	4313      	orrs	r3, r2
 8005238:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00d      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005246:	4b1a      	ldr	r3, [pc, #104]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	4a19      	ldr	r2, [pc, #100]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800524c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005250:	6113      	str	r3, [r2, #16]
 8005252:	4b17      	ldr	r3, [pc, #92]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005254:	691a      	ldr	r2, [r3, #16]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800525c:	4914      	ldr	r1, [pc, #80]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800525e:	4313      	orrs	r3, r2
 8005260:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	da08      	bge.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800526a:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800526c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005276:	490e      	ldr	r1, [pc, #56]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005278:	4313      	orrs	r3, r2
 800527a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005288:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800528a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005296:	4906      	ldr	r1, [pc, #24]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005298:	4313      	orrs	r3, r2
 800529a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800529c:	7dbb      	ldrb	r3, [r7, #22]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	e000      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	58024400 	.word	0x58024400

080052b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b090      	sub	sp, #64	; 0x40
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c2:	f040 8095 	bne.w	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80052c6:	4bae      	ldr	r3, [pc, #696]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80052c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	633b      	str	r3, [r7, #48]	; 0x30
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	f200 8088 	bhi.w	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80052d8:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	080052f5 	.word	0x080052f5
 80052e4:	0800531d 	.word	0x0800531d
 80052e8:	08005345 	.word	0x08005345
 80052ec:	080053e1 	.word	0x080053e1
 80052f0:	0800536d 	.word	0x0800536d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80052f4:	4ba2      	ldr	r3, [pc, #648]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005300:	d108      	bne.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005306:	4618      	mov	r0, r3
 8005308:	f000 ff64 	bl	80061d4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005310:	f000 bc95 	b.w	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005318:	f000 bc91 	b.w	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800531c:	4b98      	ldr	r3, [pc, #608]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005328:	d108      	bne.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800532a:	f107 0318 	add.w	r3, r7, #24
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fca8 	bl	8005c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005338:	f000 bc81 	b.w	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005340:	f000 bc7d 	b.w	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005344:	4b8e      	ldr	r3, [pc, #568]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800534c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005350:	d108      	bne.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005352:	f107 030c 	add.w	r3, r7, #12
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fde8 	bl	8005f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005360:	f000 bc6d 	b.w	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005368:	f000 bc69 	b.w	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800536c:	4b84      	ldr	r3, [pc, #528]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800536e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005374:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005376:	4b82      	ldr	r3, [pc, #520]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0304 	and.w	r3, r3, #4
 800537e:	2b04      	cmp	r3, #4
 8005380:	d10c      	bne.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005384:	2b00      	cmp	r3, #0
 8005386:	d109      	bne.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005388:	4b7d      	ldr	r3, [pc, #500]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	08db      	lsrs	r3, r3, #3
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	4a7c      	ldr	r2, [pc, #496]	; (8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
 8005398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800539a:	e01f      	b.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800539c:	4b78      	ldr	r3, [pc, #480]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a8:	d106      	bne.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80053aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053b0:	d102      	bne.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80053b2:	4b75      	ldr	r3, [pc, #468]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80053b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b6:	e011      	b.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053b8:	4b71      	ldr	r3, [pc, #452]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053c4:	d106      	bne.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80053c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053cc:	d102      	bne.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80053ce:	4b6f      	ldr	r3, [pc, #444]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80053d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d2:	e003      	b.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80053d4:	2300      	movs	r3, #0
 80053d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80053d8:	f000 bc31 	b.w	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80053dc:	f000 bc2f 	b.w	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80053e0:	4b6b      	ldr	r3, [pc, #428]	; (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80053e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053e4:	f000 bc2b 	b.w	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053ec:	f000 bc27 	b.w	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f6:	f040 8095 	bne.w	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80053fa:	4b61      	ldr	r3, [pc, #388]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80053fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005402:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800540a:	d04d      	beq.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005412:	f200 8084 	bhi.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	2bc0      	cmp	r3, #192	; 0xc0
 800541a:	d07d      	beq.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	2bc0      	cmp	r3, #192	; 0xc0
 8005420:	d87d      	bhi.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005424:	2b80      	cmp	r3, #128	; 0x80
 8005426:	d02d      	beq.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	2b80      	cmp	r3, #128	; 0x80
 800542c:	d877      	bhi.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	2b40      	cmp	r3, #64	; 0x40
 8005438:	d012      	beq.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800543a:	e070      	b.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800543c:	4b50      	ldr	r3, [pc, #320]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005444:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005448:	d107      	bne.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800544a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fec0 	bl	80061d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005458:	e3f1      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800545e:	e3ee      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005460:	4b47      	ldr	r3, [pc, #284]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800546c:	d107      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800546e:	f107 0318 	add.w	r3, r7, #24
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fc06 	bl	8005c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800547c:	e3df      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005482:	e3dc      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005484:	4b3e      	ldr	r3, [pc, #248]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800548c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005490:	d107      	bne.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005492:	f107 030c 	add.w	r3, r7, #12
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fd48 	bl	8005f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054a0:	e3cd      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054a6:	e3ca      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80054a8:	4b35      	ldr	r3, [pc, #212]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80054aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054b0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054b2:	4b33      	ldr	r3, [pc, #204]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d10c      	bne.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80054be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d109      	bne.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054c4:	4b2e      	ldr	r3, [pc, #184]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	08db      	lsrs	r3, r3, #3
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	4a2d      	ldr	r2, [pc, #180]	; (8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80054d0:	fa22 f303 	lsr.w	r3, r2, r3
 80054d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054d6:	e01e      	b.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054d8:	4b29      	ldr	r3, [pc, #164]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e4:	d106      	bne.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80054e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054ec:	d102      	bne.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80054ee:	4b26      	ldr	r3, [pc, #152]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80054f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054f2:	e010      	b.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80054f4:	4b22      	ldr	r3, [pc, #136]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005500:	d106      	bne.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005508:	d102      	bne.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800550a:	4b20      	ldr	r3, [pc, #128]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800550c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800550e:	e002      	b.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005514:	e393      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005516:	e392      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005518:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800551a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800551c:	e38f      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005522:	e38c      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800552a:	f040 80a7 	bne.w	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800552e:	4b14      	ldr	r3, [pc, #80]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005532:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005536:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800553e:	d05f      	beq.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005546:	f200 8096 	bhi.w	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005550:	f000 808e 	beq.w	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8005554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005556:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800555a:	f200 808c 	bhi.w	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005564:	d03a      	beq.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800556c:	f200 8083 	bhi.w	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00e      	beq.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800557c:	d01c      	beq.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800557e:	e07a      	b.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005580:	58024400 	.word	0x58024400
 8005584:	03d09000 	.word	0x03d09000
 8005588:	003d0900 	.word	0x003d0900
 800558c:	017d7840 	.word	0x017d7840
 8005590:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005594:	4baa      	ldr	r3, [pc, #680]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055a0:	d107      	bne.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fe14 	bl	80061d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055b0:	e345      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80055b2:	2300      	movs	r3, #0
 80055b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055b6:	e342      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055b8:	4ba1      	ldr	r3, [pc, #644]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c4:	d107      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055c6:	f107 0318 	add.w	r3, r7, #24
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fb5a 	bl	8005c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055d4:	e333      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80055d6:	2300      	movs	r3, #0
 80055d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055da:	e330      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055dc:	4b98      	ldr	r3, [pc, #608]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055e8:	d107      	bne.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055ea:	f107 030c 	add.w	r3, r7, #12
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fc9c 	bl	8005f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055f8:	e321      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055fe:	e31e      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005600:	4b8f      	ldr	r3, [pc, #572]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005604:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005608:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800560a:	4b8d      	ldr	r3, [pc, #564]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b04      	cmp	r3, #4
 8005614:	d10c      	bne.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8005616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005618:	2b00      	cmp	r3, #0
 800561a:	d109      	bne.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800561c:	4b88      	ldr	r3, [pc, #544]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	08db      	lsrs	r3, r3, #3
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	4a87      	ldr	r2, [pc, #540]	; (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005628:	fa22 f303 	lsr.w	r3, r2, r3
 800562c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800562e:	e01e      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005630:	4b83      	ldr	r3, [pc, #524]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563c:	d106      	bne.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800563e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005640:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005644:	d102      	bne.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005646:	4b80      	ldr	r3, [pc, #512]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800564a:	e010      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800564c:	4b7c      	ldr	r3, [pc, #496]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005654:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005658:	d106      	bne.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800565a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005660:	d102      	bne.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005662:	4b7a      	ldr	r3, [pc, #488]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005666:	e002      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005668:	2300      	movs	r3, #0
 800566a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800566c:	e2e7      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800566e:	e2e6      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005670:	4b77      	ldr	r3, [pc, #476]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005672:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005674:	e2e3      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005676:	2300      	movs	r3, #0
 8005678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800567a:	e2e0      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005682:	f040 809c 	bne.w	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005686:	4b6e      	ldr	r3, [pc, #440]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800568e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005696:	d054      	beq.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800569e:	f200 808b 	bhi.w	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056a8:	f000 8083 	beq.w	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056b2:	f200 8081 	bhi.w	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056bc:	d02f      	beq.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056c4:	d878      	bhi.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056d2:	d012      	beq.n	80056fa <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80056d4:	e070      	b.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056d6:	4b5a      	ldr	r3, [pc, #360]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056e2:	d107      	bne.n	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 fd73 	bl	80061d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80056f2:	e2a4      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056f8:	e2a1      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056fa:	4b51      	ldr	r3, [pc, #324]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005706:	d107      	bne.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005708:	f107 0318 	add.w	r3, r7, #24
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fab9 	bl	8005c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005716:	e292      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800571c:	e28f      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800571e:	4b48      	ldr	r3, [pc, #288]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800572a:	d107      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800572c:	f107 030c 	add.w	r3, r7, #12
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fbfb 	bl	8005f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800573a:	e280      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800573c:	2300      	movs	r3, #0
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005740:	e27d      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005742:	4b3f      	ldr	r3, [pc, #252]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005746:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800574a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800574c:	4b3c      	ldr	r3, [pc, #240]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b04      	cmp	r3, #4
 8005756:	d10c      	bne.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575a:	2b00      	cmp	r3, #0
 800575c:	d109      	bne.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800575e:	4b38      	ldr	r3, [pc, #224]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	08db      	lsrs	r3, r3, #3
 8005764:	f003 0303 	and.w	r3, r3, #3
 8005768:	4a36      	ldr	r2, [pc, #216]	; (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800576a:	fa22 f303 	lsr.w	r3, r2, r3
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005770:	e01e      	b.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005772:	4b33      	ldr	r3, [pc, #204]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577e:	d106      	bne.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8005780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005786:	d102      	bne.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005788:	4b2f      	ldr	r3, [pc, #188]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800578c:	e010      	b.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800578e:	4b2c      	ldr	r3, [pc, #176]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005796:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800579a:	d106      	bne.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800579c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a2:	d102      	bne.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80057a4:	4b29      	ldr	r3, [pc, #164]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80057a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a8:	e002      	b.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80057ae:	e246      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80057b0:	e245      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80057b2:	4b27      	ldr	r3, [pc, #156]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80057b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057b6:	e242      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057bc:	e23f      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c4:	f040 80a8 	bne.w	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80057c8:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80057ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057cc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80057d0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80057d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057d8:	d060      	beq.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80057da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057e0:	f200 8097 	bhi.w	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80057e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057ea:	f000 808f 	beq.w	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80057ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057f4:	f200 808d 	bhi.w	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80057f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fe:	d03b      	beq.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005806:	f200 8084 	bhi.w	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580c:	2b00      	cmp	r3, #0
 800580e:	d004      	beq.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8005810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005816:	d01d      	beq.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005818:	e07b      	b.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800581a:	4b09      	ldr	r3, [pc, #36]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005826:	d107      	bne.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fcd1 	bl	80061d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005836:	e202      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005838:	2300      	movs	r3, #0
 800583a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800583c:	e1ff      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800583e:	bf00      	nop
 8005840:	58024400 	.word	0x58024400
 8005844:	03d09000 	.word	0x03d09000
 8005848:	003d0900 	.word	0x003d0900
 800584c:	017d7840 	.word	0x017d7840
 8005850:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005854:	4ba3      	ldr	r3, [pc, #652]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800585c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005860:	d107      	bne.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005862:	f107 0318 	add.w	r3, r7, #24
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fa0c 	bl	8005c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005870:	e1e5      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005872:	2300      	movs	r3, #0
 8005874:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005876:	e1e2      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005878:	4b9a      	ldr	r3, [pc, #616]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005884:	d107      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005886:	f107 030c 	add.w	r3, r7, #12
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fb4e 	bl	8005f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005894:	e1d3      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800589a:	e1d0      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800589c:	4b91      	ldr	r3, [pc, #580]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800589e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058a4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058a6:	4b8f      	ldr	r3, [pc, #572]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d10c      	bne.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80058b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d109      	bne.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058b8:	4b8a      	ldr	r3, [pc, #552]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	08db      	lsrs	r3, r3, #3
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	4a89      	ldr	r2, [pc, #548]	; (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
 80058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ca:	e01e      	b.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058cc:	4b85      	ldr	r3, [pc, #532]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058d8:	d106      	bne.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80058da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058e0:	d102      	bne.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80058e2:	4b82      	ldr	r3, [pc, #520]	; (8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80058e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058e6:	e010      	b.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058e8:	4b7e      	ldr	r3, [pc, #504]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058f4:	d106      	bne.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80058f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058fc:	d102      	bne.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80058fe:	4b7c      	ldr	r3, [pc, #496]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005902:	e002      	b.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005908:	e199      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800590a:	e198      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800590c:	4b79      	ldr	r3, [pc, #484]	; (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800590e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005910:	e195      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005916:	e192      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800591e:	d173      	bne.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005920:	4b70      	ldr	r3, [pc, #448]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005928:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800592a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005930:	d02f      	beq.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005938:	d863      	bhi.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	2b00      	cmp	r3, #0
 800593e:	d004      	beq.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005946:	d012      	beq.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8005948:	e05b      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800594a:	4b66      	ldr	r3, [pc, #408]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005952:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005956:	d107      	bne.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005958:	f107 0318 	add.w	r3, r7, #24
 800595c:	4618      	mov	r0, r3
 800595e:	f000 f991 	bl	8005c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005966:	e16a      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005968:	2300      	movs	r3, #0
 800596a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800596c:	e167      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800596e:	4b5d      	ldr	r3, [pc, #372]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800597a:	d107      	bne.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800597c:	f107 030c 	add.w	r3, r7, #12
 8005980:	4618      	mov	r0, r3
 8005982:	f000 fad3 	bl	8005f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800598a:	e158      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800598c:	2300      	movs	r3, #0
 800598e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005990:	e155      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005992:	4b54      	ldr	r3, [pc, #336]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005996:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800599a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800599c:	4b51      	ldr	r3, [pc, #324]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d10c      	bne.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80059a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d109      	bne.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059ae:	4b4d      	ldr	r3, [pc, #308]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	08db      	lsrs	r3, r3, #3
 80059b4:	f003 0303 	and.w	r3, r3, #3
 80059b8:	4a4b      	ldr	r2, [pc, #300]	; (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80059ba:	fa22 f303 	lsr.w	r3, r2, r3
 80059be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c0:	e01e      	b.n	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059c2:	4b48      	ldr	r3, [pc, #288]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ce:	d106      	bne.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80059d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059d6:	d102      	bne.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80059d8:	4b44      	ldr	r3, [pc, #272]	; (8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80059da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059dc:	e010      	b.n	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059de:	4b41      	ldr	r3, [pc, #260]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059ea:	d106      	bne.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80059ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059f2:	d102      	bne.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80059f4:	4b3e      	ldr	r3, [pc, #248]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80059f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059f8:	e002      	b.n	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80059fe:	e11e      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005a00:	e11d      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a06:	e11a      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a0e:	d133      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005a10:	4b34      	ldr	r3, [pc, #208]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a18:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d004      	beq.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8005a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a26:	d012      	beq.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8005a28:	e023      	b.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a2a:	4b2e      	ldr	r3, [pc, #184]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a36:	d107      	bne.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 fbc9 	bl	80061d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a46:	e0fa      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a4c:	e0f7      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a4e:	4b25      	ldr	r3, [pc, #148]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a5a:	d107      	bne.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a5c:	f107 0318 	add.w	r3, r7, #24
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 f90f 	bl	8005c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a6a:	e0e8      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a70:	e0e5      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a76:	e0e2      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a7e:	f040 808f 	bne.w	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005a82:	4b18      	ldr	r3, [pc, #96]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a86:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005a8a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a92:	d075      	beq.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8005a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a9a:	d87e      	bhi.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa2:	d060      	beq.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aaa:	d876      	bhi.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ab2:	d045      	beq.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005aba:	d86e      	bhi.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ac2:	d02b      	beq.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aca:	d866      	bhi.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d004      	beq.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ad8:	d00e      	beq.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005ada:	e05e      	b.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005adc:	f000 f8bc 	bl	8005c58 <HAL_RCCEx_GetD3PCLK1Freq>
 8005ae0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005ae2:	e0ac      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005ae4:	58024400 	.word	0x58024400
 8005ae8:	03d09000 	.word	0x03d09000
 8005aec:	003d0900 	.word	0x003d0900
 8005af0:	017d7840 	.word	0x017d7840
 8005af4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005af8:	4b53      	ldr	r3, [pc, #332]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b04:	d107      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b06:	f107 0318 	add.w	r3, r7, #24
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 f8ba 	bl	8005c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b14:	e093      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b1a:	e090      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b1c:	4b4a      	ldr	r3, [pc, #296]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b28:	d107      	bne.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b2a:	f107 030c 	add.w	r3, r7, #12
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 f9fc 	bl	8005f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b38:	e081      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b3e:	e07e      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b40:	4b41      	ldr	r3, [pc, #260]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b04      	cmp	r3, #4
 8005b4a:	d109      	bne.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b4c:	4b3e      	ldr	r3, [pc, #248]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	08db      	lsrs	r3, r3, #3
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	4a3d      	ldr	r2, [pc, #244]	; (8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005b58:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b5e:	e06e      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b64:	e06b      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005b66:	4b38      	ldr	r3, [pc, #224]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b72:	d102      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8005b74:	4b36      	ldr	r3, [pc, #216]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005b76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b78:	e061      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b7e:	e05e      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b80:	4b31      	ldr	r3, [pc, #196]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b8c:	d102      	bne.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8005b8e:	4b31      	ldr	r3, [pc, #196]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005b90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b92:	e054      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b98:	e051      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b9e:	e04e      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba6:	d148      	bne.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005ba8:	4b27      	ldr	r3, [pc, #156]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bb0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bb8:	d02a      	beq.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bc0:	d838      	bhi.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d004      	beq.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bce:	d00d      	beq.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005bd0:	e030      	b.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005bd2:	4b1d      	ldr	r3, [pc, #116]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bde:	d102      	bne.n	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8005be0:	4b1c      	ldr	r3, [pc, #112]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005be2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005be4:	e02b      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bea:	e028      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bec:	4b16      	ldr	r3, [pc, #88]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bf8:	d107      	bne.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fae8 	bl	80061d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c08:	e019      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c0e:	e016      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c10:	4b0d      	ldr	r3, [pc, #52]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c1c:	d107      	bne.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c1e:	f107 0318 	add.w	r3, r7, #24
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 f82e 	bl	8005c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c2c:	e007      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c32:	e004      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c38:	e001      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3740      	adds	r7, #64	; 0x40
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	58024400 	.word	0x58024400
 8005c4c:	03d09000 	.word	0x03d09000
 8005c50:	003d0900 	.word	0x003d0900
 8005c54:	017d7840 	.word	0x017d7840

08005c58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c5c:	f7fe fbba 	bl	80043d4 <HAL_RCC_GetHCLKFreq>
 8005c60:	4602      	mov	r2, r0
 8005c62:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	091b      	lsrs	r3, r3, #4
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	4904      	ldr	r1, [pc, #16]	; (8005c80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c6e:	5ccb      	ldrb	r3, [r1, r3]
 8005c70:	f003 031f 	and.w	r3, r3, #31
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	58024400 	.word	0x58024400
 8005c80:	08009b1c 	.word	0x08009b1c

08005c84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b089      	sub	sp, #36	; 0x24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c8c:	4ba1      	ldr	r3, [pc, #644]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c90:	f003 0303 	and.w	r3, r3, #3
 8005c94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005c96:	4b9f      	ldr	r3, [pc, #636]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9a:	0b1b      	lsrs	r3, r3, #12
 8005c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ca0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ca2:	4b9c      	ldr	r3, [pc, #624]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	091b      	lsrs	r3, r3, #4
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005cae:	4b99      	ldr	r3, [pc, #612]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb2:	08db      	lsrs	r3, r3, #3
 8005cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	fb02 f303 	mul.w	r3, r2, r3
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 8111 	beq.w	8005ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	f000 8083 	beq.w	8005de0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	f200 80a1 	bhi.w	8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d056      	beq.n	8005d9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005cee:	e099      	b.n	8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cf0:	4b88      	ldr	r3, [pc, #544]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d02d      	beq.n	8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cfc:	4b85      	ldr	r3, [pc, #532]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	08db      	lsrs	r3, r3, #3
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	4a84      	ldr	r2, [pc, #528]	; (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d08:	fa22 f303 	lsr.w	r3, r2, r3
 8005d0c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	ee07 3a90 	vmov	s15, r3
 8005d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d26:	4b7b      	ldr	r3, [pc, #492]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d52:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d56:	e087      	b.n	8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005f20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d6a:	4b6a      	ldr	r3, [pc, #424]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d9a:	e065      	b.n	8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dae:	4b59      	ldr	r3, [pc, #356]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db6:	ee07 3a90 	vmov	s15, r3
 8005dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dc2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dde:	e043      	b.n	8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df2:	4b48      	ldr	r3, [pc, #288]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfa:	ee07 3a90 	vmov	s15, r3
 8005dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e06:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e22:	e021      	b.n	8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e36:	4b37      	ldr	r3, [pc, #220]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005e68:	4b2a      	ldr	r3, [pc, #168]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	0a5b      	lsrs	r3, r3, #9
 8005e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e8e:	ee17 2a90 	vmov	r2, s15
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005e96:	4b1f      	ldr	r3, [pc, #124]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	0c1b      	lsrs	r3, r3, #16
 8005e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea0:	ee07 3a90 	vmov	s15, r3
 8005ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ebc:	ee17 2a90 	vmov	r2, s15
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005ec4:	4b13      	ldr	r3, [pc, #76]	; (8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	0e1b      	lsrs	r3, r3, #24
 8005eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ede:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eea:	ee17 2a90 	vmov	r2, s15
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ef2:	e008      	b.n	8005f06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	609a      	str	r2, [r3, #8]
}
 8005f06:	bf00      	nop
 8005f08:	3724      	adds	r7, #36	; 0x24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	58024400 	.word	0x58024400
 8005f18:	03d09000 	.word	0x03d09000
 8005f1c:	46000000 	.word	0x46000000
 8005f20:	4c742400 	.word	0x4c742400
 8005f24:	4a742400 	.word	0x4a742400
 8005f28:	4bbebc20 	.word	0x4bbebc20

08005f2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b089      	sub	sp, #36	; 0x24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f34:	4ba1      	ldr	r3, [pc, #644]	; (80061bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f38:	f003 0303 	and.w	r3, r3, #3
 8005f3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005f3e:	4b9f      	ldr	r3, [pc, #636]	; (80061bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f42:	0d1b      	lsrs	r3, r3, #20
 8005f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f4a:	4b9c      	ldr	r3, [pc, #624]	; (80061bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4e:	0a1b      	lsrs	r3, r3, #8
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005f56:	4b99      	ldr	r3, [pc, #612]	; (80061bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5a:	08db      	lsrs	r3, r3, #3
 8005f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	fb02 f303 	mul.w	r3, r2, r3
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 8111 	beq.w	800619c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	f000 8083 	beq.w	8006088 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	f200 80a1 	bhi.w	80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d056      	beq.n	8006044 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005f96:	e099      	b.n	80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f98:	4b88      	ldr	r3, [pc, #544]	; (80061bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d02d      	beq.n	8006000 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fa4:	4b85      	ldr	r3, [pc, #532]	; (80061bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	08db      	lsrs	r3, r3, #3
 8005faa:	f003 0303 	and.w	r3, r3, #3
 8005fae:	4a84      	ldr	r2, [pc, #528]	; (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	ee07 3a90 	vmov	s15, r3
 8005fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fce:	4b7b      	ldr	r3, [pc, #492]	; (80061bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fe2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80061c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ffa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005ffe:	e087      	b.n	8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80061c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800600e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006012:	4b6a      	ldr	r3, [pc, #424]	; (80061bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006022:	ed97 6a03 	vldr	s12, [r7, #12]
 8006026:	eddf 5a67 	vldr	s11, [pc, #412]	; 80061c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800602a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800602e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800603a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006042:	e065      	b.n	8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006056:	4b59      	ldr	r3, [pc, #356]	; (80061bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006066:	ed97 6a03 	vldr	s12, [r7, #12]
 800606a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80061c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800606e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800607a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800607e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006082:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006086:	e043      	b.n	8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006092:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609a:	4b48      	ldr	r3, [pc, #288]	; (80061bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80061c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060ca:	e021      	b.n	8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060de:	4b37      	ldr	r3, [pc, #220]	; (80061bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e6:	ee07 3a90 	vmov	s15, r3
 80060ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80060f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80061c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800610e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006110:	4b2a      	ldr	r3, [pc, #168]	; (80061bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	0a5b      	lsrs	r3, r3, #9
 8006116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800612a:	edd7 6a07 	vldr	s13, [r7, #28]
 800612e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006136:	ee17 2a90 	vmov	r2, s15
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800613e:	4b1f      	ldr	r3, [pc, #124]	; (80061bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	0c1b      	lsrs	r3, r3, #16
 8006144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006148:	ee07 3a90 	vmov	s15, r3
 800614c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006154:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006158:	edd7 6a07 	vldr	s13, [r7, #28]
 800615c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006164:	ee17 2a90 	vmov	r2, s15
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800616c:	4b13      	ldr	r3, [pc, #76]	; (80061bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	0e1b      	lsrs	r3, r3, #24
 8006172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006186:	edd7 6a07 	vldr	s13, [r7, #28]
 800618a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800618e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006192:	ee17 2a90 	vmov	r2, s15
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800619a:	e008      	b.n	80061ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	609a      	str	r2, [r3, #8]
}
 80061ae:	bf00      	nop
 80061b0:	3724      	adds	r7, #36	; 0x24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	58024400 	.word	0x58024400
 80061c0:	03d09000 	.word	0x03d09000
 80061c4:	46000000 	.word	0x46000000
 80061c8:	4c742400 	.word	0x4c742400
 80061cc:	4a742400 	.word	0x4a742400
 80061d0:	4bbebc20 	.word	0x4bbebc20

080061d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b089      	sub	sp, #36	; 0x24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061dc:	4ba0      	ldr	r3, [pc, #640]	; (8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e0:	f003 0303 	and.w	r3, r3, #3
 80061e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80061e6:	4b9e      	ldr	r3, [pc, #632]	; (8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	091b      	lsrs	r3, r3, #4
 80061ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80061f2:	4b9b      	ldr	r3, [pc, #620]	; (8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80061fc:	4b98      	ldr	r3, [pc, #608]	; (8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006200:	08db      	lsrs	r3, r3, #3
 8006202:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	fb02 f303 	mul.w	r3, r2, r3
 800620c:	ee07 3a90 	vmov	s15, r3
 8006210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006214:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 8111 	beq.w	8006442 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2b02      	cmp	r3, #2
 8006224:	f000 8083 	beq.w	800632e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	2b02      	cmp	r3, #2
 800622c:	f200 80a1 	bhi.w	8006372 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d056      	beq.n	80062ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800623c:	e099      	b.n	8006372 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800623e:	4b88      	ldr	r3, [pc, #544]	; (8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0320 	and.w	r3, r3, #32
 8006246:	2b00      	cmp	r3, #0
 8006248:	d02d      	beq.n	80062a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800624a:	4b85      	ldr	r3, [pc, #532]	; (8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	08db      	lsrs	r3, r3, #3
 8006250:	f003 0303 	and.w	r3, r3, #3
 8006254:	4a83      	ldr	r2, [pc, #524]	; (8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006256:	fa22 f303 	lsr.w	r3, r2, r3
 800625a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	ee07 3a90 	vmov	s15, r3
 800626c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006274:	4b7a      	ldr	r3, [pc, #488]	; (8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627c:	ee07 3a90 	vmov	s15, r3
 8006280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006284:	ed97 6a03 	vldr	s12, [r7, #12]
 8006288:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800628c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006290:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006294:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800629c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80062a4:	e087      	b.n	80063b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	ee07 3a90 	vmov	s15, r3
 80062ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800646c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80062b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b8:	4b69      	ldr	r3, [pc, #420]	; (8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80062cc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062e8:	e065      	b.n	80063b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	ee07 3a90 	vmov	s15, r3
 80062f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006470 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80062f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062fc:	4b58      	ldr	r3, [pc, #352]	; (8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006304:	ee07 3a90 	vmov	s15, r3
 8006308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800630c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006310:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006314:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006318:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800631c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006320:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006328:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800632c:	e043      	b.n	80063b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	ee07 3a90 	vmov	s15, r3
 8006334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006338:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800633c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006340:	4b47      	ldr	r3, [pc, #284]	; (8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006348:	ee07 3a90 	vmov	s15, r3
 800634c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006350:	ed97 6a03 	vldr	s12, [r7, #12]
 8006354:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006358:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800635c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006360:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006364:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006370:	e021      	b.n	80063b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	ee07 3a90 	vmov	s15, r3
 8006378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800646c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006380:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006384:	4b36      	ldr	r3, [pc, #216]	; (8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638c:	ee07 3a90 	vmov	s15, r3
 8006390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006394:	ed97 6a03 	vldr	s12, [r7, #12]
 8006398:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800639c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80063b6:	4b2a      	ldr	r3, [pc, #168]	; (8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ba:	0a5b      	lsrs	r3, r3, #9
 80063bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063c0:	ee07 3a90 	vmov	s15, r3
 80063c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80063d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063dc:	ee17 2a90 	vmov	r2, s15
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80063e4:	4b1e      	ldr	r3, [pc, #120]	; (8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e8:	0c1b      	lsrs	r3, r3, #16
 80063ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800640a:	ee17 2a90 	vmov	r2, s15
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006412:	4b13      	ldr	r3, [pc, #76]	; (8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006416:	0e1b      	lsrs	r3, r3, #24
 8006418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800641c:	ee07 3a90 	vmov	s15, r3
 8006420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006424:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006428:	ee37 7a87 	vadd.f32	s14, s15, s14
 800642c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006438:	ee17 2a90 	vmov	r2, s15
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006440:	e008      	b.n	8006454 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	609a      	str	r2, [r3, #8]
}
 8006454:	bf00      	nop
 8006456:	3724      	adds	r7, #36	; 0x24
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	58024400 	.word	0x58024400
 8006464:	03d09000 	.word	0x03d09000
 8006468:	46000000 	.word	0x46000000
 800646c:	4c742400 	.word	0x4c742400
 8006470:	4a742400 	.word	0x4a742400
 8006474:	4bbebc20 	.word	0x4bbebc20

08006478 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006486:	4b53      	ldr	r3, [pc, #332]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	2b03      	cmp	r3, #3
 8006490:	d101      	bne.n	8006496 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e099      	b.n	80065ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006496:	4b4f      	ldr	r3, [pc, #316]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a4e      	ldr	r2, [pc, #312]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800649c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064a2:	f7fb f90f 	bl	80016c4 <HAL_GetTick>
 80064a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064a8:	e008      	b.n	80064bc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80064aa:	f7fb f90b 	bl	80016c4 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d901      	bls.n	80064bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e086      	b.n	80065ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064bc:	4b45      	ldr	r3, [pc, #276]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1f0      	bne.n	80064aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80064c8:	4b42      	ldr	r3, [pc, #264]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 80064ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	031b      	lsls	r3, r3, #12
 80064d6:	493f      	ldr	r1, [pc, #252]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	628b      	str	r3, [r1, #40]	; 0x28
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	025b      	lsls	r3, r3, #9
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	431a      	orrs	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	041b      	lsls	r3, r3, #16
 80064fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064fe:	431a      	orrs	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	3b01      	subs	r3, #1
 8006506:	061b      	lsls	r3, r3, #24
 8006508:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800650c:	4931      	ldr	r1, [pc, #196]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800650e:	4313      	orrs	r3, r2
 8006510:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006512:	4b30      	ldr	r3, [pc, #192]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006516:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	492d      	ldr	r1, [pc, #180]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006520:	4313      	orrs	r3, r2
 8006522:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006524:	4b2b      	ldr	r3, [pc, #172]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	f023 0220 	bic.w	r2, r3, #32
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	4928      	ldr	r1, [pc, #160]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006532:	4313      	orrs	r3, r2
 8006534:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006536:	4b27      	ldr	r3, [pc, #156]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	4a26      	ldr	r2, [pc, #152]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800653c:	f023 0310 	bic.w	r3, r3, #16
 8006540:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006542:	4b24      	ldr	r3, [pc, #144]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006546:	4b24      	ldr	r3, [pc, #144]	; (80065d8 <RCCEx_PLL2_Config+0x160>)
 8006548:	4013      	ands	r3, r2
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	69d2      	ldr	r2, [r2, #28]
 800654e:	00d2      	lsls	r2, r2, #3
 8006550:	4920      	ldr	r1, [pc, #128]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006552:	4313      	orrs	r3, r2
 8006554:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006556:	4b1f      	ldr	r3, [pc, #124]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655a:	4a1e      	ldr	r2, [pc, #120]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800655c:	f043 0310 	orr.w	r3, r3, #16
 8006560:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d106      	bne.n	8006576 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006568:	4b1a      	ldr	r3, [pc, #104]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800656a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656c:	4a19      	ldr	r2, [pc, #100]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800656e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006572:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006574:	e00f      	b.n	8006596 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d106      	bne.n	800658a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800657c:	4b15      	ldr	r3, [pc, #84]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	4a14      	ldr	r2, [pc, #80]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006586:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006588:	e005      	b.n	8006596 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800658a:	4b12      	ldr	r3, [pc, #72]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800658c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658e:	4a11      	ldr	r2, [pc, #68]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006594:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006596:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a0e      	ldr	r2, [pc, #56]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 800659c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a2:	f7fb f88f 	bl	80016c4 <HAL_GetTick>
 80065a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065a8:	e008      	b.n	80065bc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80065aa:	f7fb f88b 	bl	80016c4 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d901      	bls.n	80065bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e006      	b.n	80065ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065bc:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <RCCEx_PLL2_Config+0x15c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0f0      	beq.n	80065aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	58024400 	.word	0x58024400
 80065d8:	ffff0007 	.word	0xffff0007

080065dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80065ea:	4b53      	ldr	r3, [pc, #332]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d101      	bne.n	80065fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e099      	b.n	800672e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80065fa:	4b4f      	ldr	r3, [pc, #316]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a4e      	ldr	r2, [pc, #312]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 8006600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006606:	f7fb f85d 	bl	80016c4 <HAL_GetTick>
 800660a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800660c:	e008      	b.n	8006620 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800660e:	f7fb f859 	bl	80016c4 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e086      	b.n	800672e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006620:	4b45      	ldr	r3, [pc, #276]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1f0      	bne.n	800660e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800662c:	4b42      	ldr	r3, [pc, #264]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 800662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006630:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	051b      	lsls	r3, r3, #20
 800663a:	493f      	ldr	r1, [pc, #252]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 800663c:	4313      	orrs	r3, r2
 800663e:	628b      	str	r3, [r1, #40]	; 0x28
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	3b01      	subs	r3, #1
 8006646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	3b01      	subs	r3, #1
 8006650:	025b      	lsls	r3, r3, #9
 8006652:	b29b      	uxth	r3, r3
 8006654:	431a      	orrs	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	3b01      	subs	r3, #1
 800665c:	041b      	lsls	r3, r3, #16
 800665e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	3b01      	subs	r3, #1
 800666a:	061b      	lsls	r3, r3, #24
 800666c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006670:	4931      	ldr	r1, [pc, #196]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 8006672:	4313      	orrs	r3, r2
 8006674:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006676:	4b30      	ldr	r3, [pc, #192]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 8006678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	492d      	ldr	r1, [pc, #180]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 8006684:	4313      	orrs	r3, r2
 8006686:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006688:	4b2b      	ldr	r3, [pc, #172]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	4928      	ldr	r1, [pc, #160]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 8006696:	4313      	orrs	r3, r2
 8006698:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800669a:	4b27      	ldr	r3, [pc, #156]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 800669c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669e:	4a26      	ldr	r2, [pc, #152]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80066a6:	4b24      	ldr	r3, [pc, #144]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066aa:	4b24      	ldr	r3, [pc, #144]	; (800673c <RCCEx_PLL3_Config+0x160>)
 80066ac:	4013      	ands	r3, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	69d2      	ldr	r2, [r2, #28]
 80066b2:	00d2      	lsls	r2, r2, #3
 80066b4:	4920      	ldr	r1, [pc, #128]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80066ba:	4b1f      	ldr	r3, [pc, #124]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	4a1e      	ldr	r2, [pc, #120]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d106      	bne.n	80066da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80066cc:	4b1a      	ldr	r3, [pc, #104]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	4a19      	ldr	r2, [pc, #100]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066d8:	e00f      	b.n	80066fa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d106      	bne.n	80066ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80066e0:	4b15      	ldr	r3, [pc, #84]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	4a14      	ldr	r2, [pc, #80]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80066ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066ec:	e005      	b.n	80066fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80066ee:	4b12      	ldr	r3, [pc, #72]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	4a11      	ldr	r2, [pc, #68]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80066fa:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a0e      	ldr	r2, [pc, #56]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 8006700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006706:	f7fa ffdd 	bl	80016c4 <HAL_GetTick>
 800670a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800670c:	e008      	b.n	8006720 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800670e:	f7fa ffd9 	bl	80016c4 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e006      	b.n	800672e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006720:	4b05      	ldr	r3, [pc, #20]	; (8006738 <RCCEx_PLL3_Config+0x15c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0f0      	beq.n	800670e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	58024400 	.word	0x58024400
 800673c:	ffff0007 	.word	0xffff0007

08006740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e049      	b.n	80067e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d106      	bne.n	800676c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7fa fdd4 	bl	8001314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3304      	adds	r3, #4
 800677c:	4619      	mov	r1, r3
 800677e:	4610      	mov	r0, r2
 8006780:	f000 f99a 	bl	8006ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b01      	cmp	r3, #1
 8006802:	d001      	beq.n	8006808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e04f      	b.n	80068a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a23      	ldr	r2, [pc, #140]	; (80068b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d01d      	beq.n	8006866 <HAL_TIM_Base_Start_IT+0x76>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006832:	d018      	beq.n	8006866 <HAL_TIM_Base_Start_IT+0x76>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a1f      	ldr	r2, [pc, #124]	; (80068b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d013      	beq.n	8006866 <HAL_TIM_Base_Start_IT+0x76>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1e      	ldr	r2, [pc, #120]	; (80068bc <HAL_TIM_Base_Start_IT+0xcc>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00e      	beq.n	8006866 <HAL_TIM_Base_Start_IT+0x76>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1c      	ldr	r2, [pc, #112]	; (80068c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d009      	beq.n	8006866 <HAL_TIM_Base_Start_IT+0x76>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1b      	ldr	r2, [pc, #108]	; (80068c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d004      	beq.n	8006866 <HAL_TIM_Base_Start_IT+0x76>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a19      	ldr	r2, [pc, #100]	; (80068c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d115      	bne.n	8006892 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	4b17      	ldr	r3, [pc, #92]	; (80068cc <HAL_TIM_Base_Start_IT+0xdc>)
 800686e:	4013      	ands	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b06      	cmp	r3, #6
 8006876:	d015      	beq.n	80068a4 <HAL_TIM_Base_Start_IT+0xb4>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800687e:	d011      	beq.n	80068a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006890:	e008      	b.n	80068a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0201 	orr.w	r2, r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	e000      	b.n	80068a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	40010000 	.word	0x40010000
 80068b8:	40000400 	.word	0x40000400
 80068bc:	40000800 	.word	0x40000800
 80068c0:	40000c00 	.word	0x40000c00
 80068c4:	40010400 	.word	0x40010400
 80068c8:	40001800 	.word	0x40001800
 80068cc:	00010007 	.word	0x00010007

080068d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_TIM_ConfigClockSource+0x18>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e0db      	b.n	8006aa0 <HAL_TIM_ConfigClockSource+0x1d0>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4b69      	ldr	r3, [pc, #420]	; (8006aa8 <HAL_TIM_ConfigClockSource+0x1d8>)
 8006904:	4013      	ands	r3, r2
 8006906:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800690e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a63      	ldr	r2, [pc, #396]	; (8006aac <HAL_TIM_ConfigClockSource+0x1dc>)
 800691e:	4293      	cmp	r3, r2
 8006920:	f000 80a9 	beq.w	8006a76 <HAL_TIM_ConfigClockSource+0x1a6>
 8006924:	4a61      	ldr	r2, [pc, #388]	; (8006aac <HAL_TIM_ConfigClockSource+0x1dc>)
 8006926:	4293      	cmp	r3, r2
 8006928:	f200 80ae 	bhi.w	8006a88 <HAL_TIM_ConfigClockSource+0x1b8>
 800692c:	4a60      	ldr	r2, [pc, #384]	; (8006ab0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	f000 80a1 	beq.w	8006a76 <HAL_TIM_ConfigClockSource+0x1a6>
 8006934:	4a5e      	ldr	r2, [pc, #376]	; (8006ab0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	f200 80a6 	bhi.w	8006a88 <HAL_TIM_ConfigClockSource+0x1b8>
 800693c:	4a5d      	ldr	r2, [pc, #372]	; (8006ab4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	f000 8099 	beq.w	8006a76 <HAL_TIM_ConfigClockSource+0x1a6>
 8006944:	4a5b      	ldr	r2, [pc, #364]	; (8006ab4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	f200 809e 	bhi.w	8006a88 <HAL_TIM_ConfigClockSource+0x1b8>
 800694c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006950:	f000 8091 	beq.w	8006a76 <HAL_TIM_ConfigClockSource+0x1a6>
 8006954:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006958:	f200 8096 	bhi.w	8006a88 <HAL_TIM_ConfigClockSource+0x1b8>
 800695c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006960:	f000 8089 	beq.w	8006a76 <HAL_TIM_ConfigClockSource+0x1a6>
 8006964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006968:	f200 808e 	bhi.w	8006a88 <HAL_TIM_ConfigClockSource+0x1b8>
 800696c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006970:	d03e      	beq.n	80069f0 <HAL_TIM_ConfigClockSource+0x120>
 8006972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006976:	f200 8087 	bhi.w	8006a88 <HAL_TIM_ConfigClockSource+0x1b8>
 800697a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697e:	f000 8085 	beq.w	8006a8c <HAL_TIM_ConfigClockSource+0x1bc>
 8006982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006986:	d87f      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x1b8>
 8006988:	2b70      	cmp	r3, #112	; 0x70
 800698a:	d01a      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0xf2>
 800698c:	2b70      	cmp	r3, #112	; 0x70
 800698e:	d87b      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x1b8>
 8006990:	2b60      	cmp	r3, #96	; 0x60
 8006992:	d050      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x166>
 8006994:	2b60      	cmp	r3, #96	; 0x60
 8006996:	d877      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x1b8>
 8006998:	2b50      	cmp	r3, #80	; 0x50
 800699a:	d03c      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0x146>
 800699c:	2b50      	cmp	r3, #80	; 0x50
 800699e:	d873      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x1b8>
 80069a0:	2b40      	cmp	r3, #64	; 0x40
 80069a2:	d058      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0x186>
 80069a4:	2b40      	cmp	r3, #64	; 0x40
 80069a6:	d86f      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x1b8>
 80069a8:	2b30      	cmp	r3, #48	; 0x30
 80069aa:	d064      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x1a6>
 80069ac:	2b30      	cmp	r3, #48	; 0x30
 80069ae:	d86b      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x1b8>
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d060      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x1a6>
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d867      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x1b8>
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d05c      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x1a6>
 80069bc:	2b10      	cmp	r3, #16
 80069be:	d05a      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80069c0:	e062      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	6899      	ldr	r1, [r3, #8]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f000 f989 	bl	8006ce8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	609a      	str	r2, [r3, #8]
      break;
 80069ee:	e04e      	b.n	8006a8e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6818      	ldr	r0, [r3, #0]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	6899      	ldr	r1, [r3, #8]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f000 f972 	bl	8006ce8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a12:	609a      	str	r2, [r3, #8]
      break;
 8006a14:	e03b      	b.n	8006a8e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	6859      	ldr	r1, [r3, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	461a      	mov	r2, r3
 8006a24:	f000 f8e2 	bl	8006bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2150      	movs	r1, #80	; 0x50
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 f93c 	bl	8006cac <TIM_ITRx_SetConfig>
      break;
 8006a34:	e02b      	b.n	8006a8e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	6859      	ldr	r1, [r3, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	461a      	mov	r2, r3
 8006a44:	f000 f901 	bl	8006c4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2160      	movs	r1, #96	; 0x60
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 f92c 	bl	8006cac <TIM_ITRx_SetConfig>
      break;
 8006a54:	e01b      	b.n	8006a8e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	6859      	ldr	r1, [r3, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	461a      	mov	r2, r3
 8006a64:	f000 f8c2 	bl	8006bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2140      	movs	r1, #64	; 0x40
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 f91c 	bl	8006cac <TIM_ITRx_SetConfig>
      break;
 8006a74:	e00b      	b.n	8006a8e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4610      	mov	r0, r2
 8006a82:	f000 f913 	bl	8006cac <TIM_ITRx_SetConfig>
        break;
 8006a86:	e002      	b.n	8006a8e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8006a88:	bf00      	nop
 8006a8a:	e000      	b.n	8006a8e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8006a8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	ffceff88 	.word	0xffceff88
 8006aac:	00100040 	.word	0x00100040
 8006ab0:	00100030 	.word	0x00100030
 8006ab4:	00100020 	.word	0x00100020

08006ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a40      	ldr	r2, [pc, #256]	; (8006bcc <TIM_Base_SetConfig+0x114>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d013      	beq.n	8006af8 <TIM_Base_SetConfig+0x40>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad6:	d00f      	beq.n	8006af8 <TIM_Base_SetConfig+0x40>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a3d      	ldr	r2, [pc, #244]	; (8006bd0 <TIM_Base_SetConfig+0x118>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00b      	beq.n	8006af8 <TIM_Base_SetConfig+0x40>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a3c      	ldr	r2, [pc, #240]	; (8006bd4 <TIM_Base_SetConfig+0x11c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d007      	beq.n	8006af8 <TIM_Base_SetConfig+0x40>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a3b      	ldr	r2, [pc, #236]	; (8006bd8 <TIM_Base_SetConfig+0x120>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d003      	beq.n	8006af8 <TIM_Base_SetConfig+0x40>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a3a      	ldr	r2, [pc, #232]	; (8006bdc <TIM_Base_SetConfig+0x124>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d108      	bne.n	8006b0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a2f      	ldr	r2, [pc, #188]	; (8006bcc <TIM_Base_SetConfig+0x114>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01f      	beq.n	8006b52 <TIM_Base_SetConfig+0x9a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b18:	d01b      	beq.n	8006b52 <TIM_Base_SetConfig+0x9a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a2c      	ldr	r2, [pc, #176]	; (8006bd0 <TIM_Base_SetConfig+0x118>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d017      	beq.n	8006b52 <TIM_Base_SetConfig+0x9a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a2b      	ldr	r2, [pc, #172]	; (8006bd4 <TIM_Base_SetConfig+0x11c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d013      	beq.n	8006b52 <TIM_Base_SetConfig+0x9a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a2a      	ldr	r2, [pc, #168]	; (8006bd8 <TIM_Base_SetConfig+0x120>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d00f      	beq.n	8006b52 <TIM_Base_SetConfig+0x9a>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a29      	ldr	r2, [pc, #164]	; (8006bdc <TIM_Base_SetConfig+0x124>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d00b      	beq.n	8006b52 <TIM_Base_SetConfig+0x9a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a28      	ldr	r2, [pc, #160]	; (8006be0 <TIM_Base_SetConfig+0x128>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d007      	beq.n	8006b52 <TIM_Base_SetConfig+0x9a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a27      	ldr	r2, [pc, #156]	; (8006be4 <TIM_Base_SetConfig+0x12c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d003      	beq.n	8006b52 <TIM_Base_SetConfig+0x9a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a26      	ldr	r2, [pc, #152]	; (8006be8 <TIM_Base_SetConfig+0x130>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d108      	bne.n	8006b64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a10      	ldr	r2, [pc, #64]	; (8006bcc <TIM_Base_SetConfig+0x114>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d00f      	beq.n	8006bb0 <TIM_Base_SetConfig+0xf8>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a12      	ldr	r2, [pc, #72]	; (8006bdc <TIM_Base_SetConfig+0x124>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00b      	beq.n	8006bb0 <TIM_Base_SetConfig+0xf8>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a11      	ldr	r2, [pc, #68]	; (8006be0 <TIM_Base_SetConfig+0x128>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d007      	beq.n	8006bb0 <TIM_Base_SetConfig+0xf8>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a10      	ldr	r2, [pc, #64]	; (8006be4 <TIM_Base_SetConfig+0x12c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d003      	beq.n	8006bb0 <TIM_Base_SetConfig+0xf8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a0f      	ldr	r2, [pc, #60]	; (8006be8 <TIM_Base_SetConfig+0x130>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d103      	bne.n	8006bb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	615a      	str	r2, [r3, #20]
}
 8006bbe:	bf00      	nop
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40010000 	.word	0x40010000
 8006bd0:	40000400 	.word	0x40000400
 8006bd4:	40000800 	.word	0x40000800
 8006bd8:	40000c00 	.word	0x40000c00
 8006bdc:	40010400 	.word	0x40010400
 8006be0:	40014000 	.word	0x40014000
 8006be4:	40014400 	.word	0x40014400
 8006be8:	40014800 	.word	0x40014800

08006bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f023 0201 	bic.w	r2, r3, #1
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f023 030a 	bic.w	r3, r3, #10
 8006c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	621a      	str	r2, [r3, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b087      	sub	sp, #28
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f023 0210 	bic.w	r2, r3, #16
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	031b      	lsls	r3, r3, #12
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	621a      	str	r2, [r3, #32]
}
 8006c9e:	bf00      	nop
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
	...

08006cac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4b09      	ldr	r3, [pc, #36]	; (8006ce4 <TIM_ITRx_SetConfig+0x38>)
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	f043 0307 	orr.w	r3, r3, #7
 8006cce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	609a      	str	r2, [r3, #8]
}
 8006cd6:	bf00      	nop
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	ffcfff8f 	.word	0xffcfff8f

08006ce8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	021a      	lsls	r2, r3, #8
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	609a      	str	r2, [r3, #8]
}
 8006d1c:	bf00      	nop
 8006d1e:	371c      	adds	r7, #28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d101      	bne.n	8006d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	e068      	b.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a2e      	ldr	r2, [pc, #184]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d004      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a2d      	ldr	r2, [pc, #180]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d108      	bne.n	8006d86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a1e      	ldr	r2, [pc, #120]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d01d      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db2:	d018      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a1b      	ldr	r2, [pc, #108]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d013      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a1a      	ldr	r2, [pc, #104]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00e      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a18      	ldr	r2, [pc, #96]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d009      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a13      	ldr	r2, [pc, #76]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d004      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a14      	ldr	r2, [pc, #80]	; (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d10c      	bne.n	8006e00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	40010000 	.word	0x40010000
 8006e24:	40010400 	.word	0x40010400
 8006e28:	40000400 	.word	0x40000400
 8006e2c:	40000800 	.word	0x40000800
 8006e30:	40000c00 	.word	0x40000c00
 8006e34:	40001800 	.word	0x40001800

08006e38 <__errno>:
 8006e38:	4b01      	ldr	r3, [pc, #4]	; (8006e40 <__errno+0x8>)
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	24000010 	.word	0x24000010

08006e44 <__libc_init_array>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	4d0d      	ldr	r5, [pc, #52]	; (8006e7c <__libc_init_array+0x38>)
 8006e48:	4c0d      	ldr	r4, [pc, #52]	; (8006e80 <__libc_init_array+0x3c>)
 8006e4a:	1b64      	subs	r4, r4, r5
 8006e4c:	10a4      	asrs	r4, r4, #2
 8006e4e:	2600      	movs	r6, #0
 8006e50:	42a6      	cmp	r6, r4
 8006e52:	d109      	bne.n	8006e68 <__libc_init_array+0x24>
 8006e54:	4d0b      	ldr	r5, [pc, #44]	; (8006e84 <__libc_init_array+0x40>)
 8006e56:	4c0c      	ldr	r4, [pc, #48]	; (8006e88 <__libc_init_array+0x44>)
 8006e58:	f002 fe26 	bl	8009aa8 <_init>
 8006e5c:	1b64      	subs	r4, r4, r5
 8006e5e:	10a4      	asrs	r4, r4, #2
 8006e60:	2600      	movs	r6, #0
 8006e62:	42a6      	cmp	r6, r4
 8006e64:	d105      	bne.n	8006e72 <__libc_init_array+0x2e>
 8006e66:	bd70      	pop	{r4, r5, r6, pc}
 8006e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e6c:	4798      	blx	r3
 8006e6e:	3601      	adds	r6, #1
 8006e70:	e7ee      	b.n	8006e50 <__libc_init_array+0xc>
 8006e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e76:	4798      	blx	r3
 8006e78:	3601      	adds	r6, #1
 8006e7a:	e7f2      	b.n	8006e62 <__libc_init_array+0x1e>
 8006e7c:	08009f0c 	.word	0x08009f0c
 8006e80:	08009f0c 	.word	0x08009f0c
 8006e84:	08009f0c 	.word	0x08009f0c
 8006e88:	08009f10 	.word	0x08009f10

08006e8c <memset>:
 8006e8c:	4402      	add	r2, r0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d100      	bne.n	8006e96 <memset+0xa>
 8006e94:	4770      	bx	lr
 8006e96:	f803 1b01 	strb.w	r1, [r3], #1
 8006e9a:	e7f9      	b.n	8006e90 <memset+0x4>

08006e9c <__cvt>:
 8006e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e9e:	ed2d 8b02 	vpush	{d8}
 8006ea2:	eeb0 8b40 	vmov.f64	d8, d0
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	4617      	mov	r7, r2
 8006eaa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006eac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006eae:	ee18 2a90 	vmov	r2, s17
 8006eb2:	f025 0520 	bic.w	r5, r5, #32
 8006eb6:	2a00      	cmp	r2, #0
 8006eb8:	bfb6      	itet	lt
 8006eba:	222d      	movlt	r2, #45	; 0x2d
 8006ebc:	2200      	movge	r2, #0
 8006ebe:	eeb1 8b40 	vneglt.f64	d8, d0
 8006ec2:	2d46      	cmp	r5, #70	; 0x46
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	701a      	strb	r2, [r3, #0]
 8006ec8:	d004      	beq.n	8006ed4 <__cvt+0x38>
 8006eca:	2d45      	cmp	r5, #69	; 0x45
 8006ecc:	d100      	bne.n	8006ed0 <__cvt+0x34>
 8006ece:	3401      	adds	r4, #1
 8006ed0:	2102      	movs	r1, #2
 8006ed2:	e000      	b.n	8006ed6 <__cvt+0x3a>
 8006ed4:	2103      	movs	r1, #3
 8006ed6:	ab03      	add	r3, sp, #12
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	ab02      	add	r3, sp, #8
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	4622      	mov	r2, r4
 8006ee0:	4633      	mov	r3, r6
 8006ee2:	eeb0 0b48 	vmov.f64	d0, d8
 8006ee6:	f000 fccb 	bl	8007880 <_dtoa_r>
 8006eea:	2d47      	cmp	r5, #71	; 0x47
 8006eec:	d109      	bne.n	8006f02 <__cvt+0x66>
 8006eee:	07fb      	lsls	r3, r7, #31
 8006ef0:	d407      	bmi.n	8006f02 <__cvt+0x66>
 8006ef2:	9b03      	ldr	r3, [sp, #12]
 8006ef4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ef6:	1a1b      	subs	r3, r3, r0
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	b005      	add	sp, #20
 8006efc:	ecbd 8b02 	vpop	{d8}
 8006f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f02:	2d46      	cmp	r5, #70	; 0x46
 8006f04:	eb00 0204 	add.w	r2, r0, r4
 8006f08:	d10c      	bne.n	8006f24 <__cvt+0x88>
 8006f0a:	7803      	ldrb	r3, [r0, #0]
 8006f0c:	2b30      	cmp	r3, #48	; 0x30
 8006f0e:	d107      	bne.n	8006f20 <__cvt+0x84>
 8006f10:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f18:	bf1c      	itt	ne
 8006f1a:	f1c4 0401 	rsbne	r4, r4, #1
 8006f1e:	6034      	strne	r4, [r6, #0]
 8006f20:	6833      	ldr	r3, [r6, #0]
 8006f22:	441a      	add	r2, r3
 8006f24:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f2c:	bf08      	it	eq
 8006f2e:	9203      	streq	r2, [sp, #12]
 8006f30:	2130      	movs	r1, #48	; 0x30
 8006f32:	9b03      	ldr	r3, [sp, #12]
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d2dc      	bcs.n	8006ef2 <__cvt+0x56>
 8006f38:	1c5c      	adds	r4, r3, #1
 8006f3a:	9403      	str	r4, [sp, #12]
 8006f3c:	7019      	strb	r1, [r3, #0]
 8006f3e:	e7f8      	b.n	8006f32 <__cvt+0x96>

08006f40 <__exponent>:
 8006f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f42:	4603      	mov	r3, r0
 8006f44:	2900      	cmp	r1, #0
 8006f46:	bfb8      	it	lt
 8006f48:	4249      	neglt	r1, r1
 8006f4a:	f803 2b02 	strb.w	r2, [r3], #2
 8006f4e:	bfb4      	ite	lt
 8006f50:	222d      	movlt	r2, #45	; 0x2d
 8006f52:	222b      	movge	r2, #43	; 0x2b
 8006f54:	2909      	cmp	r1, #9
 8006f56:	7042      	strb	r2, [r0, #1]
 8006f58:	dd2a      	ble.n	8006fb0 <__exponent+0x70>
 8006f5a:	f10d 0407 	add.w	r4, sp, #7
 8006f5e:	46a4      	mov	ip, r4
 8006f60:	270a      	movs	r7, #10
 8006f62:	46a6      	mov	lr, r4
 8006f64:	460a      	mov	r2, r1
 8006f66:	fb91 f6f7 	sdiv	r6, r1, r7
 8006f6a:	fb07 1516 	mls	r5, r7, r6, r1
 8006f6e:	3530      	adds	r5, #48	; 0x30
 8006f70:	2a63      	cmp	r2, #99	; 0x63
 8006f72:	f104 34ff 	add.w	r4, r4, #4294967295
 8006f76:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	dcf1      	bgt.n	8006f62 <__exponent+0x22>
 8006f7e:	3130      	adds	r1, #48	; 0x30
 8006f80:	f1ae 0502 	sub.w	r5, lr, #2
 8006f84:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006f88:	1c44      	adds	r4, r0, #1
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	4561      	cmp	r1, ip
 8006f8e:	d30a      	bcc.n	8006fa6 <__exponent+0x66>
 8006f90:	f10d 0209 	add.w	r2, sp, #9
 8006f94:	eba2 020e 	sub.w	r2, r2, lr
 8006f98:	4565      	cmp	r5, ip
 8006f9a:	bf88      	it	hi
 8006f9c:	2200      	movhi	r2, #0
 8006f9e:	4413      	add	r3, r2
 8006fa0:	1a18      	subs	r0, r3, r0
 8006fa2:	b003      	add	sp, #12
 8006fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006faa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006fae:	e7ed      	b.n	8006f8c <__exponent+0x4c>
 8006fb0:	2330      	movs	r3, #48	; 0x30
 8006fb2:	3130      	adds	r1, #48	; 0x30
 8006fb4:	7083      	strb	r3, [r0, #2]
 8006fb6:	70c1      	strb	r1, [r0, #3]
 8006fb8:	1d03      	adds	r3, r0, #4
 8006fba:	e7f1      	b.n	8006fa0 <__exponent+0x60>
 8006fbc:	0000      	movs	r0, r0
	...

08006fc0 <_printf_float>:
 8006fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc4:	b08b      	sub	sp, #44	; 0x2c
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006fcc:	4616      	mov	r6, r2
 8006fce:	461f      	mov	r7, r3
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	f001 f9d7 	bl	8008384 <_localeconv_r>
 8006fd6:	f8d0 b000 	ldr.w	fp, [r0]
 8006fda:	4658      	mov	r0, fp
 8006fdc:	f7f9 f980 	bl	80002e0 <strlen>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	9308      	str	r3, [sp, #32]
 8006fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8006fe8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006fec:	6822      	ldr	r2, [r4, #0]
 8006fee:	3307      	adds	r3, #7
 8006ff0:	f023 0307 	bic.w	r3, r3, #7
 8006ff4:	f103 0108 	add.w	r1, r3, #8
 8006ff8:	f8c8 1000 	str.w	r1, [r8]
 8006ffc:	4682      	mov	sl, r0
 8006ffe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007002:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007006:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007268 <_printf_float+0x2a8>
 800700a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800700e:	eeb0 6bc0 	vabs.f64	d6, d0
 8007012:	eeb4 6b47 	vcmp.f64	d6, d7
 8007016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800701a:	dd24      	ble.n	8007066 <_printf_float+0xa6>
 800701c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007024:	d502      	bpl.n	800702c <_printf_float+0x6c>
 8007026:	232d      	movs	r3, #45	; 0x2d
 8007028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800702c:	4b90      	ldr	r3, [pc, #576]	; (8007270 <_printf_float+0x2b0>)
 800702e:	4891      	ldr	r0, [pc, #580]	; (8007274 <_printf_float+0x2b4>)
 8007030:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007034:	bf94      	ite	ls
 8007036:	4698      	movls	r8, r3
 8007038:	4680      	movhi	r8, r0
 800703a:	2303      	movs	r3, #3
 800703c:	6123      	str	r3, [r4, #16]
 800703e:	f022 0204 	bic.w	r2, r2, #4
 8007042:	2300      	movs	r3, #0
 8007044:	6022      	str	r2, [r4, #0]
 8007046:	9304      	str	r3, [sp, #16]
 8007048:	9700      	str	r7, [sp, #0]
 800704a:	4633      	mov	r3, r6
 800704c:	aa09      	add	r2, sp, #36	; 0x24
 800704e:	4621      	mov	r1, r4
 8007050:	4628      	mov	r0, r5
 8007052:	f000 f9d3 	bl	80073fc <_printf_common>
 8007056:	3001      	adds	r0, #1
 8007058:	f040 808a 	bne.w	8007170 <_printf_float+0x1b0>
 800705c:	f04f 30ff 	mov.w	r0, #4294967295
 8007060:	b00b      	add	sp, #44	; 0x2c
 8007062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007066:	eeb4 0b40 	vcmp.f64	d0, d0
 800706a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800706e:	d709      	bvc.n	8007084 <_printf_float+0xc4>
 8007070:	ee10 3a90 	vmov	r3, s1
 8007074:	2b00      	cmp	r3, #0
 8007076:	bfbc      	itt	lt
 8007078:	232d      	movlt	r3, #45	; 0x2d
 800707a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800707e:	487e      	ldr	r0, [pc, #504]	; (8007278 <_printf_float+0x2b8>)
 8007080:	4b7e      	ldr	r3, [pc, #504]	; (800727c <_printf_float+0x2bc>)
 8007082:	e7d5      	b.n	8007030 <_printf_float+0x70>
 8007084:	6863      	ldr	r3, [r4, #4]
 8007086:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800708a:	9104      	str	r1, [sp, #16]
 800708c:	1c59      	adds	r1, r3, #1
 800708e:	d13c      	bne.n	800710a <_printf_float+0x14a>
 8007090:	2306      	movs	r3, #6
 8007092:	6063      	str	r3, [r4, #4]
 8007094:	2300      	movs	r3, #0
 8007096:	9303      	str	r3, [sp, #12]
 8007098:	ab08      	add	r3, sp, #32
 800709a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800709e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070a2:	ab07      	add	r3, sp, #28
 80070a4:	6861      	ldr	r1, [r4, #4]
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	6022      	str	r2, [r4, #0]
 80070aa:	f10d 031b 	add.w	r3, sp, #27
 80070ae:	4628      	mov	r0, r5
 80070b0:	f7ff fef4 	bl	8006e9c <__cvt>
 80070b4:	9b04      	ldr	r3, [sp, #16]
 80070b6:	9907      	ldr	r1, [sp, #28]
 80070b8:	2b47      	cmp	r3, #71	; 0x47
 80070ba:	4680      	mov	r8, r0
 80070bc:	d108      	bne.n	80070d0 <_printf_float+0x110>
 80070be:	1cc8      	adds	r0, r1, #3
 80070c0:	db02      	blt.n	80070c8 <_printf_float+0x108>
 80070c2:	6863      	ldr	r3, [r4, #4]
 80070c4:	4299      	cmp	r1, r3
 80070c6:	dd41      	ble.n	800714c <_printf_float+0x18c>
 80070c8:	f1a9 0902 	sub.w	r9, r9, #2
 80070cc:	fa5f f989 	uxtb.w	r9, r9
 80070d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80070d4:	d820      	bhi.n	8007118 <_printf_float+0x158>
 80070d6:	3901      	subs	r1, #1
 80070d8:	464a      	mov	r2, r9
 80070da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80070de:	9107      	str	r1, [sp, #28]
 80070e0:	f7ff ff2e 	bl	8006f40 <__exponent>
 80070e4:	9a08      	ldr	r2, [sp, #32]
 80070e6:	9004      	str	r0, [sp, #16]
 80070e8:	1813      	adds	r3, r2, r0
 80070ea:	2a01      	cmp	r2, #1
 80070ec:	6123      	str	r3, [r4, #16]
 80070ee:	dc02      	bgt.n	80070f6 <_printf_float+0x136>
 80070f0:	6822      	ldr	r2, [r4, #0]
 80070f2:	07d2      	lsls	r2, r2, #31
 80070f4:	d501      	bpl.n	80070fa <_printf_float+0x13a>
 80070f6:	3301      	adds	r3, #1
 80070f8:	6123      	str	r3, [r4, #16]
 80070fa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0a2      	beq.n	8007048 <_printf_float+0x88>
 8007102:	232d      	movs	r3, #45	; 0x2d
 8007104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007108:	e79e      	b.n	8007048 <_printf_float+0x88>
 800710a:	9904      	ldr	r1, [sp, #16]
 800710c:	2947      	cmp	r1, #71	; 0x47
 800710e:	d1c1      	bne.n	8007094 <_printf_float+0xd4>
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1bf      	bne.n	8007094 <_printf_float+0xd4>
 8007114:	2301      	movs	r3, #1
 8007116:	e7bc      	b.n	8007092 <_printf_float+0xd2>
 8007118:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800711c:	d118      	bne.n	8007150 <_printf_float+0x190>
 800711e:	2900      	cmp	r1, #0
 8007120:	6863      	ldr	r3, [r4, #4]
 8007122:	dd0b      	ble.n	800713c <_printf_float+0x17c>
 8007124:	6121      	str	r1, [r4, #16]
 8007126:	b913      	cbnz	r3, 800712e <_printf_float+0x16e>
 8007128:	6822      	ldr	r2, [r4, #0]
 800712a:	07d0      	lsls	r0, r2, #31
 800712c:	d502      	bpl.n	8007134 <_printf_float+0x174>
 800712e:	3301      	adds	r3, #1
 8007130:	440b      	add	r3, r1
 8007132:	6123      	str	r3, [r4, #16]
 8007134:	2300      	movs	r3, #0
 8007136:	65a1      	str	r1, [r4, #88]	; 0x58
 8007138:	9304      	str	r3, [sp, #16]
 800713a:	e7de      	b.n	80070fa <_printf_float+0x13a>
 800713c:	b913      	cbnz	r3, 8007144 <_printf_float+0x184>
 800713e:	6822      	ldr	r2, [r4, #0]
 8007140:	07d2      	lsls	r2, r2, #31
 8007142:	d501      	bpl.n	8007148 <_printf_float+0x188>
 8007144:	3302      	adds	r3, #2
 8007146:	e7f4      	b.n	8007132 <_printf_float+0x172>
 8007148:	2301      	movs	r3, #1
 800714a:	e7f2      	b.n	8007132 <_printf_float+0x172>
 800714c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007150:	9b08      	ldr	r3, [sp, #32]
 8007152:	4299      	cmp	r1, r3
 8007154:	db05      	blt.n	8007162 <_printf_float+0x1a2>
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	6121      	str	r1, [r4, #16]
 800715a:	07d8      	lsls	r0, r3, #31
 800715c:	d5ea      	bpl.n	8007134 <_printf_float+0x174>
 800715e:	1c4b      	adds	r3, r1, #1
 8007160:	e7e7      	b.n	8007132 <_printf_float+0x172>
 8007162:	2900      	cmp	r1, #0
 8007164:	bfd4      	ite	le
 8007166:	f1c1 0202 	rsble	r2, r1, #2
 800716a:	2201      	movgt	r2, #1
 800716c:	4413      	add	r3, r2
 800716e:	e7e0      	b.n	8007132 <_printf_float+0x172>
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	055a      	lsls	r2, r3, #21
 8007174:	d407      	bmi.n	8007186 <_printf_float+0x1c6>
 8007176:	6923      	ldr	r3, [r4, #16]
 8007178:	4642      	mov	r2, r8
 800717a:	4631      	mov	r1, r6
 800717c:	4628      	mov	r0, r5
 800717e:	47b8      	blx	r7
 8007180:	3001      	adds	r0, #1
 8007182:	d12a      	bne.n	80071da <_printf_float+0x21a>
 8007184:	e76a      	b.n	800705c <_printf_float+0x9c>
 8007186:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800718a:	f240 80e2 	bls.w	8007352 <_printf_float+0x392>
 800718e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007192:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800719a:	d133      	bne.n	8007204 <_printf_float+0x244>
 800719c:	4a38      	ldr	r2, [pc, #224]	; (8007280 <_printf_float+0x2c0>)
 800719e:	2301      	movs	r3, #1
 80071a0:	4631      	mov	r1, r6
 80071a2:	4628      	mov	r0, r5
 80071a4:	47b8      	blx	r7
 80071a6:	3001      	adds	r0, #1
 80071a8:	f43f af58 	beq.w	800705c <_printf_float+0x9c>
 80071ac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	db02      	blt.n	80071ba <_printf_float+0x1fa>
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	07d8      	lsls	r0, r3, #31
 80071b8:	d50f      	bpl.n	80071da <_printf_float+0x21a>
 80071ba:	4653      	mov	r3, sl
 80071bc:	465a      	mov	r2, fp
 80071be:	4631      	mov	r1, r6
 80071c0:	4628      	mov	r0, r5
 80071c2:	47b8      	blx	r7
 80071c4:	3001      	adds	r0, #1
 80071c6:	f43f af49 	beq.w	800705c <_printf_float+0x9c>
 80071ca:	f04f 0800 	mov.w	r8, #0
 80071ce:	f104 091a 	add.w	r9, r4, #26
 80071d2:	9b08      	ldr	r3, [sp, #32]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	4543      	cmp	r3, r8
 80071d8:	dc09      	bgt.n	80071ee <_printf_float+0x22e>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	079b      	lsls	r3, r3, #30
 80071de:	f100 8108 	bmi.w	80073f2 <_printf_float+0x432>
 80071e2:	68e0      	ldr	r0, [r4, #12]
 80071e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e6:	4298      	cmp	r0, r3
 80071e8:	bfb8      	it	lt
 80071ea:	4618      	movlt	r0, r3
 80071ec:	e738      	b.n	8007060 <_printf_float+0xa0>
 80071ee:	2301      	movs	r3, #1
 80071f0:	464a      	mov	r2, r9
 80071f2:	4631      	mov	r1, r6
 80071f4:	4628      	mov	r0, r5
 80071f6:	47b8      	blx	r7
 80071f8:	3001      	adds	r0, #1
 80071fa:	f43f af2f 	beq.w	800705c <_printf_float+0x9c>
 80071fe:	f108 0801 	add.w	r8, r8, #1
 8007202:	e7e6      	b.n	80071d2 <_printf_float+0x212>
 8007204:	9b07      	ldr	r3, [sp, #28]
 8007206:	2b00      	cmp	r3, #0
 8007208:	dc3c      	bgt.n	8007284 <_printf_float+0x2c4>
 800720a:	4a1d      	ldr	r2, [pc, #116]	; (8007280 <_printf_float+0x2c0>)
 800720c:	2301      	movs	r3, #1
 800720e:	4631      	mov	r1, r6
 8007210:	4628      	mov	r0, r5
 8007212:	47b8      	blx	r7
 8007214:	3001      	adds	r0, #1
 8007216:	f43f af21 	beq.w	800705c <_printf_float+0x9c>
 800721a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800721e:	4313      	orrs	r3, r2
 8007220:	d102      	bne.n	8007228 <_printf_float+0x268>
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	07d9      	lsls	r1, r3, #31
 8007226:	d5d8      	bpl.n	80071da <_printf_float+0x21a>
 8007228:	4653      	mov	r3, sl
 800722a:	465a      	mov	r2, fp
 800722c:	4631      	mov	r1, r6
 800722e:	4628      	mov	r0, r5
 8007230:	47b8      	blx	r7
 8007232:	3001      	adds	r0, #1
 8007234:	f43f af12 	beq.w	800705c <_printf_float+0x9c>
 8007238:	f04f 0900 	mov.w	r9, #0
 800723c:	f104 0a1a 	add.w	sl, r4, #26
 8007240:	9b07      	ldr	r3, [sp, #28]
 8007242:	425b      	negs	r3, r3
 8007244:	454b      	cmp	r3, r9
 8007246:	dc01      	bgt.n	800724c <_printf_float+0x28c>
 8007248:	9b08      	ldr	r3, [sp, #32]
 800724a:	e795      	b.n	8007178 <_printf_float+0x1b8>
 800724c:	2301      	movs	r3, #1
 800724e:	4652      	mov	r2, sl
 8007250:	4631      	mov	r1, r6
 8007252:	4628      	mov	r0, r5
 8007254:	47b8      	blx	r7
 8007256:	3001      	adds	r0, #1
 8007258:	f43f af00 	beq.w	800705c <_printf_float+0x9c>
 800725c:	f109 0901 	add.w	r9, r9, #1
 8007260:	e7ee      	b.n	8007240 <_printf_float+0x280>
 8007262:	bf00      	nop
 8007264:	f3af 8000 	nop.w
 8007268:	ffffffff 	.word	0xffffffff
 800726c:	7fefffff 	.word	0x7fefffff
 8007270:	08009b30 	.word	0x08009b30
 8007274:	08009b34 	.word	0x08009b34
 8007278:	08009b3c 	.word	0x08009b3c
 800727c:	08009b38 	.word	0x08009b38
 8007280:	08009b40 	.word	0x08009b40
 8007284:	9a08      	ldr	r2, [sp, #32]
 8007286:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007288:	429a      	cmp	r2, r3
 800728a:	bfa8      	it	ge
 800728c:	461a      	movge	r2, r3
 800728e:	2a00      	cmp	r2, #0
 8007290:	4691      	mov	r9, r2
 8007292:	dc38      	bgt.n	8007306 <_printf_float+0x346>
 8007294:	2300      	movs	r3, #0
 8007296:	9305      	str	r3, [sp, #20]
 8007298:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800729c:	f104 021a 	add.w	r2, r4, #26
 80072a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072a2:	9905      	ldr	r1, [sp, #20]
 80072a4:	9304      	str	r3, [sp, #16]
 80072a6:	eba3 0309 	sub.w	r3, r3, r9
 80072aa:	428b      	cmp	r3, r1
 80072ac:	dc33      	bgt.n	8007316 <_printf_float+0x356>
 80072ae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	db3c      	blt.n	8007330 <_printf_float+0x370>
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	07da      	lsls	r2, r3, #31
 80072ba:	d439      	bmi.n	8007330 <_printf_float+0x370>
 80072bc:	9a08      	ldr	r2, [sp, #32]
 80072be:	9b04      	ldr	r3, [sp, #16]
 80072c0:	9907      	ldr	r1, [sp, #28]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	eba2 0901 	sub.w	r9, r2, r1
 80072c8:	4599      	cmp	r9, r3
 80072ca:	bfa8      	it	ge
 80072cc:	4699      	movge	r9, r3
 80072ce:	f1b9 0f00 	cmp.w	r9, #0
 80072d2:	dc35      	bgt.n	8007340 <_printf_float+0x380>
 80072d4:	f04f 0800 	mov.w	r8, #0
 80072d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072dc:	f104 0a1a 	add.w	sl, r4, #26
 80072e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80072e4:	1a9b      	subs	r3, r3, r2
 80072e6:	eba3 0309 	sub.w	r3, r3, r9
 80072ea:	4543      	cmp	r3, r8
 80072ec:	f77f af75 	ble.w	80071da <_printf_float+0x21a>
 80072f0:	2301      	movs	r3, #1
 80072f2:	4652      	mov	r2, sl
 80072f4:	4631      	mov	r1, r6
 80072f6:	4628      	mov	r0, r5
 80072f8:	47b8      	blx	r7
 80072fa:	3001      	adds	r0, #1
 80072fc:	f43f aeae 	beq.w	800705c <_printf_float+0x9c>
 8007300:	f108 0801 	add.w	r8, r8, #1
 8007304:	e7ec      	b.n	80072e0 <_printf_float+0x320>
 8007306:	4613      	mov	r3, r2
 8007308:	4631      	mov	r1, r6
 800730a:	4642      	mov	r2, r8
 800730c:	4628      	mov	r0, r5
 800730e:	47b8      	blx	r7
 8007310:	3001      	adds	r0, #1
 8007312:	d1bf      	bne.n	8007294 <_printf_float+0x2d4>
 8007314:	e6a2      	b.n	800705c <_printf_float+0x9c>
 8007316:	2301      	movs	r3, #1
 8007318:	4631      	mov	r1, r6
 800731a:	4628      	mov	r0, r5
 800731c:	9204      	str	r2, [sp, #16]
 800731e:	47b8      	blx	r7
 8007320:	3001      	adds	r0, #1
 8007322:	f43f ae9b 	beq.w	800705c <_printf_float+0x9c>
 8007326:	9b05      	ldr	r3, [sp, #20]
 8007328:	9a04      	ldr	r2, [sp, #16]
 800732a:	3301      	adds	r3, #1
 800732c:	9305      	str	r3, [sp, #20]
 800732e:	e7b7      	b.n	80072a0 <_printf_float+0x2e0>
 8007330:	4653      	mov	r3, sl
 8007332:	465a      	mov	r2, fp
 8007334:	4631      	mov	r1, r6
 8007336:	4628      	mov	r0, r5
 8007338:	47b8      	blx	r7
 800733a:	3001      	adds	r0, #1
 800733c:	d1be      	bne.n	80072bc <_printf_float+0x2fc>
 800733e:	e68d      	b.n	800705c <_printf_float+0x9c>
 8007340:	9a04      	ldr	r2, [sp, #16]
 8007342:	464b      	mov	r3, r9
 8007344:	4442      	add	r2, r8
 8007346:	4631      	mov	r1, r6
 8007348:	4628      	mov	r0, r5
 800734a:	47b8      	blx	r7
 800734c:	3001      	adds	r0, #1
 800734e:	d1c1      	bne.n	80072d4 <_printf_float+0x314>
 8007350:	e684      	b.n	800705c <_printf_float+0x9c>
 8007352:	9a08      	ldr	r2, [sp, #32]
 8007354:	2a01      	cmp	r2, #1
 8007356:	dc01      	bgt.n	800735c <_printf_float+0x39c>
 8007358:	07db      	lsls	r3, r3, #31
 800735a:	d537      	bpl.n	80073cc <_printf_float+0x40c>
 800735c:	2301      	movs	r3, #1
 800735e:	4642      	mov	r2, r8
 8007360:	4631      	mov	r1, r6
 8007362:	4628      	mov	r0, r5
 8007364:	47b8      	blx	r7
 8007366:	3001      	adds	r0, #1
 8007368:	f43f ae78 	beq.w	800705c <_printf_float+0x9c>
 800736c:	4653      	mov	r3, sl
 800736e:	465a      	mov	r2, fp
 8007370:	4631      	mov	r1, r6
 8007372:	4628      	mov	r0, r5
 8007374:	47b8      	blx	r7
 8007376:	3001      	adds	r0, #1
 8007378:	f43f ae70 	beq.w	800705c <_printf_float+0x9c>
 800737c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007380:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007388:	d01b      	beq.n	80073c2 <_printf_float+0x402>
 800738a:	9b08      	ldr	r3, [sp, #32]
 800738c:	f108 0201 	add.w	r2, r8, #1
 8007390:	3b01      	subs	r3, #1
 8007392:	4631      	mov	r1, r6
 8007394:	4628      	mov	r0, r5
 8007396:	47b8      	blx	r7
 8007398:	3001      	adds	r0, #1
 800739a:	d10e      	bne.n	80073ba <_printf_float+0x3fa>
 800739c:	e65e      	b.n	800705c <_printf_float+0x9c>
 800739e:	2301      	movs	r3, #1
 80073a0:	464a      	mov	r2, r9
 80073a2:	4631      	mov	r1, r6
 80073a4:	4628      	mov	r0, r5
 80073a6:	47b8      	blx	r7
 80073a8:	3001      	adds	r0, #1
 80073aa:	f43f ae57 	beq.w	800705c <_printf_float+0x9c>
 80073ae:	f108 0801 	add.w	r8, r8, #1
 80073b2:	9b08      	ldr	r3, [sp, #32]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	4543      	cmp	r3, r8
 80073b8:	dcf1      	bgt.n	800739e <_printf_float+0x3de>
 80073ba:	9b04      	ldr	r3, [sp, #16]
 80073bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80073c0:	e6db      	b.n	800717a <_printf_float+0x1ba>
 80073c2:	f04f 0800 	mov.w	r8, #0
 80073c6:	f104 091a 	add.w	r9, r4, #26
 80073ca:	e7f2      	b.n	80073b2 <_printf_float+0x3f2>
 80073cc:	2301      	movs	r3, #1
 80073ce:	4642      	mov	r2, r8
 80073d0:	e7df      	b.n	8007392 <_printf_float+0x3d2>
 80073d2:	2301      	movs	r3, #1
 80073d4:	464a      	mov	r2, r9
 80073d6:	4631      	mov	r1, r6
 80073d8:	4628      	mov	r0, r5
 80073da:	47b8      	blx	r7
 80073dc:	3001      	adds	r0, #1
 80073de:	f43f ae3d 	beq.w	800705c <_printf_float+0x9c>
 80073e2:	f108 0801 	add.w	r8, r8, #1
 80073e6:	68e3      	ldr	r3, [r4, #12]
 80073e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073ea:	1a5b      	subs	r3, r3, r1
 80073ec:	4543      	cmp	r3, r8
 80073ee:	dcf0      	bgt.n	80073d2 <_printf_float+0x412>
 80073f0:	e6f7      	b.n	80071e2 <_printf_float+0x222>
 80073f2:	f04f 0800 	mov.w	r8, #0
 80073f6:	f104 0919 	add.w	r9, r4, #25
 80073fa:	e7f4      	b.n	80073e6 <_printf_float+0x426>

080073fc <_printf_common>:
 80073fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007400:	4616      	mov	r6, r2
 8007402:	4699      	mov	r9, r3
 8007404:	688a      	ldr	r2, [r1, #8]
 8007406:	690b      	ldr	r3, [r1, #16]
 8007408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800740c:	4293      	cmp	r3, r2
 800740e:	bfb8      	it	lt
 8007410:	4613      	movlt	r3, r2
 8007412:	6033      	str	r3, [r6, #0]
 8007414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007418:	4607      	mov	r7, r0
 800741a:	460c      	mov	r4, r1
 800741c:	b10a      	cbz	r2, 8007422 <_printf_common+0x26>
 800741e:	3301      	adds	r3, #1
 8007420:	6033      	str	r3, [r6, #0]
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	0699      	lsls	r1, r3, #26
 8007426:	bf42      	ittt	mi
 8007428:	6833      	ldrmi	r3, [r6, #0]
 800742a:	3302      	addmi	r3, #2
 800742c:	6033      	strmi	r3, [r6, #0]
 800742e:	6825      	ldr	r5, [r4, #0]
 8007430:	f015 0506 	ands.w	r5, r5, #6
 8007434:	d106      	bne.n	8007444 <_printf_common+0x48>
 8007436:	f104 0a19 	add.w	sl, r4, #25
 800743a:	68e3      	ldr	r3, [r4, #12]
 800743c:	6832      	ldr	r2, [r6, #0]
 800743e:	1a9b      	subs	r3, r3, r2
 8007440:	42ab      	cmp	r3, r5
 8007442:	dc26      	bgt.n	8007492 <_printf_common+0x96>
 8007444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007448:	1e13      	subs	r3, r2, #0
 800744a:	6822      	ldr	r2, [r4, #0]
 800744c:	bf18      	it	ne
 800744e:	2301      	movne	r3, #1
 8007450:	0692      	lsls	r2, r2, #26
 8007452:	d42b      	bmi.n	80074ac <_printf_common+0xb0>
 8007454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007458:	4649      	mov	r1, r9
 800745a:	4638      	mov	r0, r7
 800745c:	47c0      	blx	r8
 800745e:	3001      	adds	r0, #1
 8007460:	d01e      	beq.n	80074a0 <_printf_common+0xa4>
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	68e5      	ldr	r5, [r4, #12]
 8007466:	6832      	ldr	r2, [r6, #0]
 8007468:	f003 0306 	and.w	r3, r3, #6
 800746c:	2b04      	cmp	r3, #4
 800746e:	bf08      	it	eq
 8007470:	1aad      	subeq	r5, r5, r2
 8007472:	68a3      	ldr	r3, [r4, #8]
 8007474:	6922      	ldr	r2, [r4, #16]
 8007476:	bf0c      	ite	eq
 8007478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800747c:	2500      	movne	r5, #0
 800747e:	4293      	cmp	r3, r2
 8007480:	bfc4      	itt	gt
 8007482:	1a9b      	subgt	r3, r3, r2
 8007484:	18ed      	addgt	r5, r5, r3
 8007486:	2600      	movs	r6, #0
 8007488:	341a      	adds	r4, #26
 800748a:	42b5      	cmp	r5, r6
 800748c:	d11a      	bne.n	80074c4 <_printf_common+0xc8>
 800748e:	2000      	movs	r0, #0
 8007490:	e008      	b.n	80074a4 <_printf_common+0xa8>
 8007492:	2301      	movs	r3, #1
 8007494:	4652      	mov	r2, sl
 8007496:	4649      	mov	r1, r9
 8007498:	4638      	mov	r0, r7
 800749a:	47c0      	blx	r8
 800749c:	3001      	adds	r0, #1
 800749e:	d103      	bne.n	80074a8 <_printf_common+0xac>
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
 80074a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a8:	3501      	adds	r5, #1
 80074aa:	e7c6      	b.n	800743a <_printf_common+0x3e>
 80074ac:	18e1      	adds	r1, r4, r3
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	2030      	movs	r0, #48	; 0x30
 80074b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074b6:	4422      	add	r2, r4
 80074b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074c0:	3302      	adds	r3, #2
 80074c2:	e7c7      	b.n	8007454 <_printf_common+0x58>
 80074c4:	2301      	movs	r3, #1
 80074c6:	4622      	mov	r2, r4
 80074c8:	4649      	mov	r1, r9
 80074ca:	4638      	mov	r0, r7
 80074cc:	47c0      	blx	r8
 80074ce:	3001      	adds	r0, #1
 80074d0:	d0e6      	beq.n	80074a0 <_printf_common+0xa4>
 80074d2:	3601      	adds	r6, #1
 80074d4:	e7d9      	b.n	800748a <_printf_common+0x8e>
	...

080074d8 <_printf_i>:
 80074d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074dc:	460c      	mov	r4, r1
 80074de:	4691      	mov	r9, r2
 80074e0:	7e27      	ldrb	r7, [r4, #24]
 80074e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074e4:	2f78      	cmp	r7, #120	; 0x78
 80074e6:	4680      	mov	r8, r0
 80074e8:	469a      	mov	sl, r3
 80074ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074ee:	d807      	bhi.n	8007500 <_printf_i+0x28>
 80074f0:	2f62      	cmp	r7, #98	; 0x62
 80074f2:	d80a      	bhi.n	800750a <_printf_i+0x32>
 80074f4:	2f00      	cmp	r7, #0
 80074f6:	f000 80d8 	beq.w	80076aa <_printf_i+0x1d2>
 80074fa:	2f58      	cmp	r7, #88	; 0x58
 80074fc:	f000 80a3 	beq.w	8007646 <_printf_i+0x16e>
 8007500:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007508:	e03a      	b.n	8007580 <_printf_i+0xa8>
 800750a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800750e:	2b15      	cmp	r3, #21
 8007510:	d8f6      	bhi.n	8007500 <_printf_i+0x28>
 8007512:	a001      	add	r0, pc, #4	; (adr r0, 8007518 <_printf_i+0x40>)
 8007514:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007518:	08007571 	.word	0x08007571
 800751c:	08007585 	.word	0x08007585
 8007520:	08007501 	.word	0x08007501
 8007524:	08007501 	.word	0x08007501
 8007528:	08007501 	.word	0x08007501
 800752c:	08007501 	.word	0x08007501
 8007530:	08007585 	.word	0x08007585
 8007534:	08007501 	.word	0x08007501
 8007538:	08007501 	.word	0x08007501
 800753c:	08007501 	.word	0x08007501
 8007540:	08007501 	.word	0x08007501
 8007544:	08007691 	.word	0x08007691
 8007548:	080075b5 	.word	0x080075b5
 800754c:	08007673 	.word	0x08007673
 8007550:	08007501 	.word	0x08007501
 8007554:	08007501 	.word	0x08007501
 8007558:	080076b3 	.word	0x080076b3
 800755c:	08007501 	.word	0x08007501
 8007560:	080075b5 	.word	0x080075b5
 8007564:	08007501 	.word	0x08007501
 8007568:	08007501 	.word	0x08007501
 800756c:	0800767b 	.word	0x0800767b
 8007570:	680b      	ldr	r3, [r1, #0]
 8007572:	1d1a      	adds	r2, r3, #4
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	600a      	str	r2, [r1, #0]
 8007578:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800757c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007580:	2301      	movs	r3, #1
 8007582:	e0a3      	b.n	80076cc <_printf_i+0x1f4>
 8007584:	6825      	ldr	r5, [r4, #0]
 8007586:	6808      	ldr	r0, [r1, #0]
 8007588:	062e      	lsls	r6, r5, #24
 800758a:	f100 0304 	add.w	r3, r0, #4
 800758e:	d50a      	bpl.n	80075a6 <_printf_i+0xce>
 8007590:	6805      	ldr	r5, [r0, #0]
 8007592:	600b      	str	r3, [r1, #0]
 8007594:	2d00      	cmp	r5, #0
 8007596:	da03      	bge.n	80075a0 <_printf_i+0xc8>
 8007598:	232d      	movs	r3, #45	; 0x2d
 800759a:	426d      	negs	r5, r5
 800759c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a0:	485e      	ldr	r0, [pc, #376]	; (800771c <_printf_i+0x244>)
 80075a2:	230a      	movs	r3, #10
 80075a4:	e019      	b.n	80075da <_printf_i+0x102>
 80075a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80075aa:	6805      	ldr	r5, [r0, #0]
 80075ac:	600b      	str	r3, [r1, #0]
 80075ae:	bf18      	it	ne
 80075b0:	b22d      	sxthne	r5, r5
 80075b2:	e7ef      	b.n	8007594 <_printf_i+0xbc>
 80075b4:	680b      	ldr	r3, [r1, #0]
 80075b6:	6825      	ldr	r5, [r4, #0]
 80075b8:	1d18      	adds	r0, r3, #4
 80075ba:	6008      	str	r0, [r1, #0]
 80075bc:	0628      	lsls	r0, r5, #24
 80075be:	d501      	bpl.n	80075c4 <_printf_i+0xec>
 80075c0:	681d      	ldr	r5, [r3, #0]
 80075c2:	e002      	b.n	80075ca <_printf_i+0xf2>
 80075c4:	0669      	lsls	r1, r5, #25
 80075c6:	d5fb      	bpl.n	80075c0 <_printf_i+0xe8>
 80075c8:	881d      	ldrh	r5, [r3, #0]
 80075ca:	4854      	ldr	r0, [pc, #336]	; (800771c <_printf_i+0x244>)
 80075cc:	2f6f      	cmp	r7, #111	; 0x6f
 80075ce:	bf0c      	ite	eq
 80075d0:	2308      	moveq	r3, #8
 80075d2:	230a      	movne	r3, #10
 80075d4:	2100      	movs	r1, #0
 80075d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075da:	6866      	ldr	r6, [r4, #4]
 80075dc:	60a6      	str	r6, [r4, #8]
 80075de:	2e00      	cmp	r6, #0
 80075e0:	bfa2      	ittt	ge
 80075e2:	6821      	ldrge	r1, [r4, #0]
 80075e4:	f021 0104 	bicge.w	r1, r1, #4
 80075e8:	6021      	strge	r1, [r4, #0]
 80075ea:	b90d      	cbnz	r5, 80075f0 <_printf_i+0x118>
 80075ec:	2e00      	cmp	r6, #0
 80075ee:	d04d      	beq.n	800768c <_printf_i+0x1b4>
 80075f0:	4616      	mov	r6, r2
 80075f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80075f6:	fb03 5711 	mls	r7, r3, r1, r5
 80075fa:	5dc7      	ldrb	r7, [r0, r7]
 80075fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007600:	462f      	mov	r7, r5
 8007602:	42bb      	cmp	r3, r7
 8007604:	460d      	mov	r5, r1
 8007606:	d9f4      	bls.n	80075f2 <_printf_i+0x11a>
 8007608:	2b08      	cmp	r3, #8
 800760a:	d10b      	bne.n	8007624 <_printf_i+0x14c>
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	07df      	lsls	r7, r3, #31
 8007610:	d508      	bpl.n	8007624 <_printf_i+0x14c>
 8007612:	6923      	ldr	r3, [r4, #16]
 8007614:	6861      	ldr	r1, [r4, #4]
 8007616:	4299      	cmp	r1, r3
 8007618:	bfde      	ittt	le
 800761a:	2330      	movle	r3, #48	; 0x30
 800761c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007620:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007624:	1b92      	subs	r2, r2, r6
 8007626:	6122      	str	r2, [r4, #16]
 8007628:	f8cd a000 	str.w	sl, [sp]
 800762c:	464b      	mov	r3, r9
 800762e:	aa03      	add	r2, sp, #12
 8007630:	4621      	mov	r1, r4
 8007632:	4640      	mov	r0, r8
 8007634:	f7ff fee2 	bl	80073fc <_printf_common>
 8007638:	3001      	adds	r0, #1
 800763a:	d14c      	bne.n	80076d6 <_printf_i+0x1fe>
 800763c:	f04f 30ff 	mov.w	r0, #4294967295
 8007640:	b004      	add	sp, #16
 8007642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007646:	4835      	ldr	r0, [pc, #212]	; (800771c <_printf_i+0x244>)
 8007648:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	680e      	ldr	r6, [r1, #0]
 8007650:	061f      	lsls	r7, r3, #24
 8007652:	f856 5b04 	ldr.w	r5, [r6], #4
 8007656:	600e      	str	r6, [r1, #0]
 8007658:	d514      	bpl.n	8007684 <_printf_i+0x1ac>
 800765a:	07d9      	lsls	r1, r3, #31
 800765c:	bf44      	itt	mi
 800765e:	f043 0320 	orrmi.w	r3, r3, #32
 8007662:	6023      	strmi	r3, [r4, #0]
 8007664:	b91d      	cbnz	r5, 800766e <_printf_i+0x196>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	f023 0320 	bic.w	r3, r3, #32
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	2310      	movs	r3, #16
 8007670:	e7b0      	b.n	80075d4 <_printf_i+0xfc>
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	f043 0320 	orr.w	r3, r3, #32
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	2378      	movs	r3, #120	; 0x78
 800767c:	4828      	ldr	r0, [pc, #160]	; (8007720 <_printf_i+0x248>)
 800767e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007682:	e7e3      	b.n	800764c <_printf_i+0x174>
 8007684:	065e      	lsls	r6, r3, #25
 8007686:	bf48      	it	mi
 8007688:	b2ad      	uxthmi	r5, r5
 800768a:	e7e6      	b.n	800765a <_printf_i+0x182>
 800768c:	4616      	mov	r6, r2
 800768e:	e7bb      	b.n	8007608 <_printf_i+0x130>
 8007690:	680b      	ldr	r3, [r1, #0]
 8007692:	6826      	ldr	r6, [r4, #0]
 8007694:	6960      	ldr	r0, [r4, #20]
 8007696:	1d1d      	adds	r5, r3, #4
 8007698:	600d      	str	r5, [r1, #0]
 800769a:	0635      	lsls	r5, r6, #24
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	d501      	bpl.n	80076a4 <_printf_i+0x1cc>
 80076a0:	6018      	str	r0, [r3, #0]
 80076a2:	e002      	b.n	80076aa <_printf_i+0x1d2>
 80076a4:	0671      	lsls	r1, r6, #25
 80076a6:	d5fb      	bpl.n	80076a0 <_printf_i+0x1c8>
 80076a8:	8018      	strh	r0, [r3, #0]
 80076aa:	2300      	movs	r3, #0
 80076ac:	6123      	str	r3, [r4, #16]
 80076ae:	4616      	mov	r6, r2
 80076b0:	e7ba      	b.n	8007628 <_printf_i+0x150>
 80076b2:	680b      	ldr	r3, [r1, #0]
 80076b4:	1d1a      	adds	r2, r3, #4
 80076b6:	600a      	str	r2, [r1, #0]
 80076b8:	681e      	ldr	r6, [r3, #0]
 80076ba:	6862      	ldr	r2, [r4, #4]
 80076bc:	2100      	movs	r1, #0
 80076be:	4630      	mov	r0, r6
 80076c0:	f7f8 fe16 	bl	80002f0 <memchr>
 80076c4:	b108      	cbz	r0, 80076ca <_printf_i+0x1f2>
 80076c6:	1b80      	subs	r0, r0, r6
 80076c8:	6060      	str	r0, [r4, #4]
 80076ca:	6863      	ldr	r3, [r4, #4]
 80076cc:	6123      	str	r3, [r4, #16]
 80076ce:	2300      	movs	r3, #0
 80076d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076d4:	e7a8      	b.n	8007628 <_printf_i+0x150>
 80076d6:	6923      	ldr	r3, [r4, #16]
 80076d8:	4632      	mov	r2, r6
 80076da:	4649      	mov	r1, r9
 80076dc:	4640      	mov	r0, r8
 80076de:	47d0      	blx	sl
 80076e0:	3001      	adds	r0, #1
 80076e2:	d0ab      	beq.n	800763c <_printf_i+0x164>
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	079b      	lsls	r3, r3, #30
 80076e8:	d413      	bmi.n	8007712 <_printf_i+0x23a>
 80076ea:	68e0      	ldr	r0, [r4, #12]
 80076ec:	9b03      	ldr	r3, [sp, #12]
 80076ee:	4298      	cmp	r0, r3
 80076f0:	bfb8      	it	lt
 80076f2:	4618      	movlt	r0, r3
 80076f4:	e7a4      	b.n	8007640 <_printf_i+0x168>
 80076f6:	2301      	movs	r3, #1
 80076f8:	4632      	mov	r2, r6
 80076fa:	4649      	mov	r1, r9
 80076fc:	4640      	mov	r0, r8
 80076fe:	47d0      	blx	sl
 8007700:	3001      	adds	r0, #1
 8007702:	d09b      	beq.n	800763c <_printf_i+0x164>
 8007704:	3501      	adds	r5, #1
 8007706:	68e3      	ldr	r3, [r4, #12]
 8007708:	9903      	ldr	r1, [sp, #12]
 800770a:	1a5b      	subs	r3, r3, r1
 800770c:	42ab      	cmp	r3, r5
 800770e:	dcf2      	bgt.n	80076f6 <_printf_i+0x21e>
 8007710:	e7eb      	b.n	80076ea <_printf_i+0x212>
 8007712:	2500      	movs	r5, #0
 8007714:	f104 0619 	add.w	r6, r4, #25
 8007718:	e7f5      	b.n	8007706 <_printf_i+0x22e>
 800771a:	bf00      	nop
 800771c:	08009b42 	.word	0x08009b42
 8007720:	08009b53 	.word	0x08009b53

08007724 <siprintf>:
 8007724:	b40e      	push	{r1, r2, r3}
 8007726:	b500      	push	{lr}
 8007728:	b09c      	sub	sp, #112	; 0x70
 800772a:	ab1d      	add	r3, sp, #116	; 0x74
 800772c:	9002      	str	r0, [sp, #8]
 800772e:	9006      	str	r0, [sp, #24]
 8007730:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007734:	4809      	ldr	r0, [pc, #36]	; (800775c <siprintf+0x38>)
 8007736:	9107      	str	r1, [sp, #28]
 8007738:	9104      	str	r1, [sp, #16]
 800773a:	4909      	ldr	r1, [pc, #36]	; (8007760 <siprintf+0x3c>)
 800773c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007740:	9105      	str	r1, [sp, #20]
 8007742:	6800      	ldr	r0, [r0, #0]
 8007744:	9301      	str	r3, [sp, #4]
 8007746:	a902      	add	r1, sp, #8
 8007748:	f001 faca 	bl	8008ce0 <_svfiprintf_r>
 800774c:	9b02      	ldr	r3, [sp, #8]
 800774e:	2200      	movs	r2, #0
 8007750:	701a      	strb	r2, [r3, #0]
 8007752:	b01c      	add	sp, #112	; 0x70
 8007754:	f85d eb04 	ldr.w	lr, [sp], #4
 8007758:	b003      	add	sp, #12
 800775a:	4770      	bx	lr
 800775c:	24000010 	.word	0x24000010
 8007760:	ffff0208 	.word	0xffff0208

08007764 <quorem>:
 8007764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007768:	6903      	ldr	r3, [r0, #16]
 800776a:	690c      	ldr	r4, [r1, #16]
 800776c:	42a3      	cmp	r3, r4
 800776e:	4607      	mov	r7, r0
 8007770:	f2c0 8081 	blt.w	8007876 <quorem+0x112>
 8007774:	3c01      	subs	r4, #1
 8007776:	f101 0814 	add.w	r8, r1, #20
 800777a:	f100 0514 	add.w	r5, r0, #20
 800777e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007782:	9301      	str	r3, [sp, #4]
 8007784:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007788:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800778c:	3301      	adds	r3, #1
 800778e:	429a      	cmp	r2, r3
 8007790:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007794:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007798:	fbb2 f6f3 	udiv	r6, r2, r3
 800779c:	d331      	bcc.n	8007802 <quorem+0x9e>
 800779e:	f04f 0e00 	mov.w	lr, #0
 80077a2:	4640      	mov	r0, r8
 80077a4:	46ac      	mov	ip, r5
 80077a6:	46f2      	mov	sl, lr
 80077a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80077ac:	b293      	uxth	r3, r2
 80077ae:	fb06 e303 	mla	r3, r6, r3, lr
 80077b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	ebaa 0303 	sub.w	r3, sl, r3
 80077bc:	0c12      	lsrs	r2, r2, #16
 80077be:	f8dc a000 	ldr.w	sl, [ip]
 80077c2:	fb06 e202 	mla	r2, r6, r2, lr
 80077c6:	fa13 f38a 	uxtah	r3, r3, sl
 80077ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077ce:	fa1f fa82 	uxth.w	sl, r2
 80077d2:	f8dc 2000 	ldr.w	r2, [ip]
 80077d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80077da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077de:	b29b      	uxth	r3, r3
 80077e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077e4:	4581      	cmp	r9, r0
 80077e6:	f84c 3b04 	str.w	r3, [ip], #4
 80077ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077ee:	d2db      	bcs.n	80077a8 <quorem+0x44>
 80077f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80077f4:	b92b      	cbnz	r3, 8007802 <quorem+0x9e>
 80077f6:	9b01      	ldr	r3, [sp, #4]
 80077f8:	3b04      	subs	r3, #4
 80077fa:	429d      	cmp	r5, r3
 80077fc:	461a      	mov	r2, r3
 80077fe:	d32e      	bcc.n	800785e <quorem+0xfa>
 8007800:	613c      	str	r4, [r7, #16]
 8007802:	4638      	mov	r0, r7
 8007804:	f001 f856 	bl	80088b4 <__mcmp>
 8007808:	2800      	cmp	r0, #0
 800780a:	db24      	blt.n	8007856 <quorem+0xf2>
 800780c:	3601      	adds	r6, #1
 800780e:	4628      	mov	r0, r5
 8007810:	f04f 0c00 	mov.w	ip, #0
 8007814:	f858 2b04 	ldr.w	r2, [r8], #4
 8007818:	f8d0 e000 	ldr.w	lr, [r0]
 800781c:	b293      	uxth	r3, r2
 800781e:	ebac 0303 	sub.w	r3, ip, r3
 8007822:	0c12      	lsrs	r2, r2, #16
 8007824:	fa13 f38e 	uxtah	r3, r3, lr
 8007828:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800782c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007830:	b29b      	uxth	r3, r3
 8007832:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007836:	45c1      	cmp	r9, r8
 8007838:	f840 3b04 	str.w	r3, [r0], #4
 800783c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007840:	d2e8      	bcs.n	8007814 <quorem+0xb0>
 8007842:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007846:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800784a:	b922      	cbnz	r2, 8007856 <quorem+0xf2>
 800784c:	3b04      	subs	r3, #4
 800784e:	429d      	cmp	r5, r3
 8007850:	461a      	mov	r2, r3
 8007852:	d30a      	bcc.n	800786a <quorem+0x106>
 8007854:	613c      	str	r4, [r7, #16]
 8007856:	4630      	mov	r0, r6
 8007858:	b003      	add	sp, #12
 800785a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785e:	6812      	ldr	r2, [r2, #0]
 8007860:	3b04      	subs	r3, #4
 8007862:	2a00      	cmp	r2, #0
 8007864:	d1cc      	bne.n	8007800 <quorem+0x9c>
 8007866:	3c01      	subs	r4, #1
 8007868:	e7c7      	b.n	80077fa <quorem+0x96>
 800786a:	6812      	ldr	r2, [r2, #0]
 800786c:	3b04      	subs	r3, #4
 800786e:	2a00      	cmp	r2, #0
 8007870:	d1f0      	bne.n	8007854 <quorem+0xf0>
 8007872:	3c01      	subs	r4, #1
 8007874:	e7eb      	b.n	800784e <quorem+0xea>
 8007876:	2000      	movs	r0, #0
 8007878:	e7ee      	b.n	8007858 <quorem+0xf4>
 800787a:	0000      	movs	r0, r0
 800787c:	0000      	movs	r0, r0
	...

08007880 <_dtoa_r>:
 8007880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007884:	ec59 8b10 	vmov	r8, r9, d0
 8007888:	b095      	sub	sp, #84	; 0x54
 800788a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800788c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800788e:	9107      	str	r1, [sp, #28]
 8007890:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007894:	4606      	mov	r6, r0
 8007896:	9209      	str	r2, [sp, #36]	; 0x24
 8007898:	9310      	str	r3, [sp, #64]	; 0x40
 800789a:	b975      	cbnz	r5, 80078ba <_dtoa_r+0x3a>
 800789c:	2010      	movs	r0, #16
 800789e:	f000 fd75 	bl	800838c <malloc>
 80078a2:	4602      	mov	r2, r0
 80078a4:	6270      	str	r0, [r6, #36]	; 0x24
 80078a6:	b920      	cbnz	r0, 80078b2 <_dtoa_r+0x32>
 80078a8:	4bab      	ldr	r3, [pc, #684]	; (8007b58 <_dtoa_r+0x2d8>)
 80078aa:	21ea      	movs	r1, #234	; 0xea
 80078ac:	48ab      	ldr	r0, [pc, #684]	; (8007b5c <_dtoa_r+0x2dc>)
 80078ae:	f001 fb27 	bl	8008f00 <__assert_func>
 80078b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80078b6:	6005      	str	r5, [r0, #0]
 80078b8:	60c5      	str	r5, [r0, #12]
 80078ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80078bc:	6819      	ldr	r1, [r3, #0]
 80078be:	b151      	cbz	r1, 80078d6 <_dtoa_r+0x56>
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	604a      	str	r2, [r1, #4]
 80078c4:	2301      	movs	r3, #1
 80078c6:	4093      	lsls	r3, r2
 80078c8:	608b      	str	r3, [r1, #8]
 80078ca:	4630      	mov	r0, r6
 80078cc:	f000 fdb4 	bl	8008438 <_Bfree>
 80078d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80078d2:	2200      	movs	r2, #0
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	f1b9 0300 	subs.w	r3, r9, #0
 80078da:	bfbb      	ittet	lt
 80078dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078e0:	9303      	strlt	r3, [sp, #12]
 80078e2:	2300      	movge	r3, #0
 80078e4:	2201      	movlt	r2, #1
 80078e6:	bfac      	ite	ge
 80078e8:	6023      	strge	r3, [r4, #0]
 80078ea:	6022      	strlt	r2, [r4, #0]
 80078ec:	4b9c      	ldr	r3, [pc, #624]	; (8007b60 <_dtoa_r+0x2e0>)
 80078ee:	9c03      	ldr	r4, [sp, #12]
 80078f0:	43a3      	bics	r3, r4
 80078f2:	d11a      	bne.n	800792a <_dtoa_r+0xaa>
 80078f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007900:	ea53 0308 	orrs.w	r3, r3, r8
 8007904:	f000 8512 	beq.w	800832c <_dtoa_r+0xaac>
 8007908:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800790a:	b953      	cbnz	r3, 8007922 <_dtoa_r+0xa2>
 800790c:	4b95      	ldr	r3, [pc, #596]	; (8007b64 <_dtoa_r+0x2e4>)
 800790e:	e01f      	b.n	8007950 <_dtoa_r+0xd0>
 8007910:	4b95      	ldr	r3, [pc, #596]	; (8007b68 <_dtoa_r+0x2e8>)
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	3308      	adds	r3, #8
 8007916:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007918:	6013      	str	r3, [r2, #0]
 800791a:	9800      	ldr	r0, [sp, #0]
 800791c:	b015      	add	sp, #84	; 0x54
 800791e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007922:	4b90      	ldr	r3, [pc, #576]	; (8007b64 <_dtoa_r+0x2e4>)
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	3303      	adds	r3, #3
 8007928:	e7f5      	b.n	8007916 <_dtoa_r+0x96>
 800792a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800792e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007936:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800793a:	d10b      	bne.n	8007954 <_dtoa_r+0xd4>
 800793c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800793e:	2301      	movs	r3, #1
 8007940:	6013      	str	r3, [r2, #0]
 8007942:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 84ee 	beq.w	8008326 <_dtoa_r+0xaa6>
 800794a:	4888      	ldr	r0, [pc, #544]	; (8007b6c <_dtoa_r+0x2ec>)
 800794c:	6018      	str	r0, [r3, #0]
 800794e:	1e43      	subs	r3, r0, #1
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	e7e2      	b.n	800791a <_dtoa_r+0x9a>
 8007954:	a913      	add	r1, sp, #76	; 0x4c
 8007956:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800795a:	aa12      	add	r2, sp, #72	; 0x48
 800795c:	4630      	mov	r0, r6
 800795e:	f001 f84d 	bl	80089fc <__d2b>
 8007962:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007966:	4605      	mov	r5, r0
 8007968:	9812      	ldr	r0, [sp, #72]	; 0x48
 800796a:	2900      	cmp	r1, #0
 800796c:	d047      	beq.n	80079fe <_dtoa_r+0x17e>
 800796e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007970:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007974:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007978:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800797c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007980:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007984:	2400      	movs	r4, #0
 8007986:	ec43 2b16 	vmov	d6, r2, r3
 800798a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800798e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8007b40 <_dtoa_r+0x2c0>
 8007992:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007996:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8007b48 <_dtoa_r+0x2c8>
 800799a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800799e:	eeb0 7b46 	vmov.f64	d7, d6
 80079a2:	ee06 1a90 	vmov	s13, r1
 80079a6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80079aa:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8007b50 <_dtoa_r+0x2d0>
 80079ae:	eea5 7b06 	vfma.f64	d7, d5, d6
 80079b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80079b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80079ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079be:	ee16 ba90 	vmov	fp, s13
 80079c2:	9411      	str	r4, [sp, #68]	; 0x44
 80079c4:	d508      	bpl.n	80079d8 <_dtoa_r+0x158>
 80079c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80079ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80079ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d2:	bf18      	it	ne
 80079d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80079d8:	f1bb 0f16 	cmp.w	fp, #22
 80079dc:	d832      	bhi.n	8007a44 <_dtoa_r+0x1c4>
 80079de:	4b64      	ldr	r3, [pc, #400]	; (8007b70 <_dtoa_r+0x2f0>)
 80079e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80079e4:	ed93 7b00 	vldr	d7, [r3]
 80079e8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80079ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80079f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f4:	d501      	bpl.n	80079fa <_dtoa_r+0x17a>
 80079f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079fa:	2300      	movs	r3, #0
 80079fc:	e023      	b.n	8007a46 <_dtoa_r+0x1c6>
 80079fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007a00:	4401      	add	r1, r0
 8007a02:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	bfc3      	ittte	gt
 8007a0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a0e:	fa04 f303 	lslgt.w	r3, r4, r3
 8007a12:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007a16:	f1c3 0320 	rsble	r3, r3, #32
 8007a1a:	bfc6      	itte	gt
 8007a1c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007a20:	ea43 0308 	orrgt.w	r3, r3, r8
 8007a24:	fa08 f303 	lslle.w	r3, r8, r3
 8007a28:	ee07 3a90 	vmov	s15, r3
 8007a2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007a30:	3901      	subs	r1, #1
 8007a32:	ed8d 7b00 	vstr	d7, [sp]
 8007a36:	9c01      	ldr	r4, [sp, #4]
 8007a38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a3c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007a40:	2401      	movs	r4, #1
 8007a42:	e7a0      	b.n	8007986 <_dtoa_r+0x106>
 8007a44:	2301      	movs	r3, #1
 8007a46:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a48:	1a43      	subs	r3, r0, r1
 8007a4a:	1e5a      	subs	r2, r3, #1
 8007a4c:	bf45      	ittet	mi
 8007a4e:	f1c3 0301 	rsbmi	r3, r3, #1
 8007a52:	9305      	strmi	r3, [sp, #20]
 8007a54:	2300      	movpl	r3, #0
 8007a56:	2300      	movmi	r3, #0
 8007a58:	9206      	str	r2, [sp, #24]
 8007a5a:	bf54      	ite	pl
 8007a5c:	9305      	strpl	r3, [sp, #20]
 8007a5e:	9306      	strmi	r3, [sp, #24]
 8007a60:	f1bb 0f00 	cmp.w	fp, #0
 8007a64:	db18      	blt.n	8007a98 <_dtoa_r+0x218>
 8007a66:	9b06      	ldr	r3, [sp, #24]
 8007a68:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007a6c:	445b      	add	r3, fp
 8007a6e:	9306      	str	r3, [sp, #24]
 8007a70:	2300      	movs	r3, #0
 8007a72:	9a07      	ldr	r2, [sp, #28]
 8007a74:	2a09      	cmp	r2, #9
 8007a76:	d849      	bhi.n	8007b0c <_dtoa_r+0x28c>
 8007a78:	2a05      	cmp	r2, #5
 8007a7a:	bfc4      	itt	gt
 8007a7c:	3a04      	subgt	r2, #4
 8007a7e:	9207      	strgt	r2, [sp, #28]
 8007a80:	9a07      	ldr	r2, [sp, #28]
 8007a82:	f1a2 0202 	sub.w	r2, r2, #2
 8007a86:	bfcc      	ite	gt
 8007a88:	2400      	movgt	r4, #0
 8007a8a:	2401      	movle	r4, #1
 8007a8c:	2a03      	cmp	r2, #3
 8007a8e:	d848      	bhi.n	8007b22 <_dtoa_r+0x2a2>
 8007a90:	e8df f002 	tbb	[pc, r2]
 8007a94:	3a2c2e0b 	.word	0x3a2c2e0b
 8007a98:	9b05      	ldr	r3, [sp, #20]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	eba3 030b 	sub.w	r3, r3, fp
 8007aa0:	9305      	str	r3, [sp, #20]
 8007aa2:	920e      	str	r2, [sp, #56]	; 0x38
 8007aa4:	f1cb 0300 	rsb	r3, fp, #0
 8007aa8:	e7e3      	b.n	8007a72 <_dtoa_r+0x1f2>
 8007aaa:	2200      	movs	r2, #0
 8007aac:	9208      	str	r2, [sp, #32]
 8007aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ab0:	2a00      	cmp	r2, #0
 8007ab2:	dc39      	bgt.n	8007b28 <_dtoa_r+0x2a8>
 8007ab4:	f04f 0a01 	mov.w	sl, #1
 8007ab8:	46d1      	mov	r9, sl
 8007aba:	4652      	mov	r2, sl
 8007abc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007ac0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	6079      	str	r1, [r7, #4]
 8007ac6:	2004      	movs	r0, #4
 8007ac8:	f100 0c14 	add.w	ip, r0, #20
 8007acc:	4594      	cmp	ip, r2
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	d92f      	bls.n	8007b32 <_dtoa_r+0x2b2>
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	930c      	str	r3, [sp, #48]	; 0x30
 8007ad6:	f000 fc6f 	bl	80083b8 <_Balloc>
 8007ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007adc:	9000      	str	r0, [sp, #0]
 8007ade:	4602      	mov	r2, r0
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d149      	bne.n	8007b78 <_dtoa_r+0x2f8>
 8007ae4:	4b23      	ldr	r3, [pc, #140]	; (8007b74 <_dtoa_r+0x2f4>)
 8007ae6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007aea:	e6df      	b.n	80078ac <_dtoa_r+0x2c>
 8007aec:	2201      	movs	r2, #1
 8007aee:	e7dd      	b.n	8007aac <_dtoa_r+0x22c>
 8007af0:	2200      	movs	r2, #0
 8007af2:	9208      	str	r2, [sp, #32]
 8007af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007af6:	eb0b 0a02 	add.w	sl, fp, r2
 8007afa:	f10a 0901 	add.w	r9, sl, #1
 8007afe:	464a      	mov	r2, r9
 8007b00:	2a01      	cmp	r2, #1
 8007b02:	bfb8      	it	lt
 8007b04:	2201      	movlt	r2, #1
 8007b06:	e7db      	b.n	8007ac0 <_dtoa_r+0x240>
 8007b08:	2201      	movs	r2, #1
 8007b0a:	e7f2      	b.n	8007af2 <_dtoa_r+0x272>
 8007b0c:	2401      	movs	r4, #1
 8007b0e:	2200      	movs	r2, #0
 8007b10:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007b14:	f04f 3aff 	mov.w	sl, #4294967295
 8007b18:	2100      	movs	r1, #0
 8007b1a:	46d1      	mov	r9, sl
 8007b1c:	2212      	movs	r2, #18
 8007b1e:	9109      	str	r1, [sp, #36]	; 0x24
 8007b20:	e7ce      	b.n	8007ac0 <_dtoa_r+0x240>
 8007b22:	2201      	movs	r2, #1
 8007b24:	9208      	str	r2, [sp, #32]
 8007b26:	e7f5      	b.n	8007b14 <_dtoa_r+0x294>
 8007b28:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8007b2c:	46d1      	mov	r9, sl
 8007b2e:	4652      	mov	r2, sl
 8007b30:	e7c6      	b.n	8007ac0 <_dtoa_r+0x240>
 8007b32:	3101      	adds	r1, #1
 8007b34:	6079      	str	r1, [r7, #4]
 8007b36:	0040      	lsls	r0, r0, #1
 8007b38:	e7c6      	b.n	8007ac8 <_dtoa_r+0x248>
 8007b3a:	bf00      	nop
 8007b3c:	f3af 8000 	nop.w
 8007b40:	636f4361 	.word	0x636f4361
 8007b44:	3fd287a7 	.word	0x3fd287a7
 8007b48:	8b60c8b3 	.word	0x8b60c8b3
 8007b4c:	3fc68a28 	.word	0x3fc68a28
 8007b50:	509f79fb 	.word	0x509f79fb
 8007b54:	3fd34413 	.word	0x3fd34413
 8007b58:	08009b71 	.word	0x08009b71
 8007b5c:	08009b88 	.word	0x08009b88
 8007b60:	7ff00000 	.word	0x7ff00000
 8007b64:	08009b6d 	.word	0x08009b6d
 8007b68:	08009b64 	.word	0x08009b64
 8007b6c:	08009b41 	.word	0x08009b41
 8007b70:	08009c80 	.word	0x08009c80
 8007b74:	08009be7 	.word	0x08009be7
 8007b78:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007b7a:	9900      	ldr	r1, [sp, #0]
 8007b7c:	6011      	str	r1, [r2, #0]
 8007b7e:	f1b9 0f0e 	cmp.w	r9, #14
 8007b82:	d872      	bhi.n	8007c6a <_dtoa_r+0x3ea>
 8007b84:	2c00      	cmp	r4, #0
 8007b86:	d070      	beq.n	8007c6a <_dtoa_r+0x3ea>
 8007b88:	f1bb 0f00 	cmp.w	fp, #0
 8007b8c:	f340 80a6 	ble.w	8007cdc <_dtoa_r+0x45c>
 8007b90:	49ca      	ldr	r1, [pc, #808]	; (8007ebc <_dtoa_r+0x63c>)
 8007b92:	f00b 020f 	and.w	r2, fp, #15
 8007b96:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007b9a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007b9e:	ed92 7b00 	vldr	d7, [r2]
 8007ba2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007ba6:	f000 808d 	beq.w	8007cc4 <_dtoa_r+0x444>
 8007baa:	4ac5      	ldr	r2, [pc, #788]	; (8007ec0 <_dtoa_r+0x640>)
 8007bac:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8007bb0:	ed92 6b08 	vldr	d6, [r2, #32]
 8007bb4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8007bb8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007bbc:	f001 010f 	and.w	r1, r1, #15
 8007bc0:	2203      	movs	r2, #3
 8007bc2:	48bf      	ldr	r0, [pc, #764]	; (8007ec0 <_dtoa_r+0x640>)
 8007bc4:	2900      	cmp	r1, #0
 8007bc6:	d17f      	bne.n	8007cc8 <_dtoa_r+0x448>
 8007bc8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007bcc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007bd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007bd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007bd6:	2900      	cmp	r1, #0
 8007bd8:	f000 80b2 	beq.w	8007d40 <_dtoa_r+0x4c0>
 8007bdc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007be0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007be4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bec:	f140 80a8 	bpl.w	8007d40 <_dtoa_r+0x4c0>
 8007bf0:	f1b9 0f00 	cmp.w	r9, #0
 8007bf4:	f000 80a4 	beq.w	8007d40 <_dtoa_r+0x4c0>
 8007bf8:	f1ba 0f00 	cmp.w	sl, #0
 8007bfc:	dd31      	ble.n	8007c62 <_dtoa_r+0x3e2>
 8007bfe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007c02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c06:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c0a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007c0e:	3201      	adds	r2, #1
 8007c10:	4650      	mov	r0, sl
 8007c12:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007c16:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007c1a:	ee07 2a90 	vmov	s15, r2
 8007c1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007c22:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007c26:	ed8d 5b02 	vstr	d5, [sp, #8]
 8007c2a:	9c03      	ldr	r4, [sp, #12]
 8007c2c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007c30:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8007c34:	2800      	cmp	r0, #0
 8007c36:	f040 8086 	bne.w	8007d46 <_dtoa_r+0x4c6>
 8007c3a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007c3e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007c42:	ec42 1b17 	vmov	d7, r1, r2
 8007c46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c4e:	f300 8272 	bgt.w	8008136 <_dtoa_r+0x8b6>
 8007c52:	eeb1 7b47 	vneg.f64	d7, d7
 8007c56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c5e:	f100 8267 	bmi.w	8008130 <_dtoa_r+0x8b0>
 8007c62:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8007c66:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007c6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c6c:	2a00      	cmp	r2, #0
 8007c6e:	f2c0 8129 	blt.w	8007ec4 <_dtoa_r+0x644>
 8007c72:	f1bb 0f0e 	cmp.w	fp, #14
 8007c76:	f300 8125 	bgt.w	8007ec4 <_dtoa_r+0x644>
 8007c7a:	4b90      	ldr	r3, [pc, #576]	; (8007ebc <_dtoa_r+0x63c>)
 8007c7c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c80:	ed93 6b00 	vldr	d6, [r3]
 8007c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f280 80c3 	bge.w	8007e12 <_dtoa_r+0x592>
 8007c8c:	f1b9 0f00 	cmp.w	r9, #0
 8007c90:	f300 80bf 	bgt.w	8007e12 <_dtoa_r+0x592>
 8007c94:	f040 824c 	bne.w	8008130 <_dtoa_r+0x8b0>
 8007c98:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007c9c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007ca0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ca4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cac:	464c      	mov	r4, r9
 8007cae:	464f      	mov	r7, r9
 8007cb0:	f280 8222 	bge.w	80080f8 <_dtoa_r+0x878>
 8007cb4:	f8dd 8000 	ldr.w	r8, [sp]
 8007cb8:	2331      	movs	r3, #49	; 0x31
 8007cba:	f808 3b01 	strb.w	r3, [r8], #1
 8007cbe:	f10b 0b01 	add.w	fp, fp, #1
 8007cc2:	e21e      	b.n	8008102 <_dtoa_r+0x882>
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	e77c      	b.n	8007bc2 <_dtoa_r+0x342>
 8007cc8:	07cc      	lsls	r4, r1, #31
 8007cca:	d504      	bpl.n	8007cd6 <_dtoa_r+0x456>
 8007ccc:	ed90 6b00 	vldr	d6, [r0]
 8007cd0:	3201      	adds	r2, #1
 8007cd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007cd6:	1049      	asrs	r1, r1, #1
 8007cd8:	3008      	adds	r0, #8
 8007cda:	e773      	b.n	8007bc4 <_dtoa_r+0x344>
 8007cdc:	d02e      	beq.n	8007d3c <_dtoa_r+0x4bc>
 8007cde:	f1cb 0100 	rsb	r1, fp, #0
 8007ce2:	4a76      	ldr	r2, [pc, #472]	; (8007ebc <_dtoa_r+0x63c>)
 8007ce4:	f001 000f 	and.w	r0, r1, #15
 8007ce8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007cec:	ed92 7b00 	vldr	d7, [r2]
 8007cf0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007cf4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007cf8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007cfc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8007d00:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8007d04:	486e      	ldr	r0, [pc, #440]	; (8007ec0 <_dtoa_r+0x640>)
 8007d06:	1109      	asrs	r1, r1, #4
 8007d08:	2400      	movs	r4, #0
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	b939      	cbnz	r1, 8007d1e <_dtoa_r+0x49e>
 8007d0e:	2c00      	cmp	r4, #0
 8007d10:	f43f af60 	beq.w	8007bd4 <_dtoa_r+0x354>
 8007d14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d1c:	e75a      	b.n	8007bd4 <_dtoa_r+0x354>
 8007d1e:	07cf      	lsls	r7, r1, #31
 8007d20:	d509      	bpl.n	8007d36 <_dtoa_r+0x4b6>
 8007d22:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8007d26:	ed90 7b00 	vldr	d7, [r0]
 8007d2a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007d2e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007d32:	3201      	adds	r2, #1
 8007d34:	2401      	movs	r4, #1
 8007d36:	1049      	asrs	r1, r1, #1
 8007d38:	3008      	adds	r0, #8
 8007d3a:	e7e7      	b.n	8007d0c <_dtoa_r+0x48c>
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	e749      	b.n	8007bd4 <_dtoa_r+0x354>
 8007d40:	465f      	mov	r7, fp
 8007d42:	4648      	mov	r0, r9
 8007d44:	e765      	b.n	8007c12 <_dtoa_r+0x392>
 8007d46:	ec42 1b17 	vmov	d7, r1, r2
 8007d4a:	4a5c      	ldr	r2, [pc, #368]	; (8007ebc <_dtoa_r+0x63c>)
 8007d4c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007d50:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007d54:	9a00      	ldr	r2, [sp, #0]
 8007d56:	1814      	adds	r4, r2, r0
 8007d58:	9a08      	ldr	r2, [sp, #32]
 8007d5a:	b352      	cbz	r2, 8007db2 <_dtoa_r+0x532>
 8007d5c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007d60:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007d64:	f8dd 8000 	ldr.w	r8, [sp]
 8007d68:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007d6c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007d70:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007d74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007d78:	ee14 2a90 	vmov	r2, s9
 8007d7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007d80:	3230      	adds	r2, #48	; 0x30
 8007d82:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007d86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d8e:	f808 2b01 	strb.w	r2, [r8], #1
 8007d92:	d439      	bmi.n	8007e08 <_dtoa_r+0x588>
 8007d94:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007d98:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da0:	d472      	bmi.n	8007e88 <_dtoa_r+0x608>
 8007da2:	45a0      	cmp	r8, r4
 8007da4:	f43f af5d 	beq.w	8007c62 <_dtoa_r+0x3e2>
 8007da8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007dac:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007db0:	e7e0      	b.n	8007d74 <_dtoa_r+0x4f4>
 8007db2:	f8dd 8000 	ldr.w	r8, [sp]
 8007db6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007dba:	4621      	mov	r1, r4
 8007dbc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007dc0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007dc4:	ee14 2a90 	vmov	r2, s9
 8007dc8:	3230      	adds	r2, #48	; 0x30
 8007dca:	f808 2b01 	strb.w	r2, [r8], #1
 8007dce:	45a0      	cmp	r8, r4
 8007dd0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007dd4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007dd8:	d118      	bne.n	8007e0c <_dtoa_r+0x58c>
 8007dda:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007dde:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007de2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dea:	dc4d      	bgt.n	8007e88 <_dtoa_r+0x608>
 8007dec:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007df0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007df8:	f57f af33 	bpl.w	8007c62 <_dtoa_r+0x3e2>
 8007dfc:	4688      	mov	r8, r1
 8007dfe:	3901      	subs	r1, #1
 8007e00:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007e04:	2b30      	cmp	r3, #48	; 0x30
 8007e06:	d0f9      	beq.n	8007dfc <_dtoa_r+0x57c>
 8007e08:	46bb      	mov	fp, r7
 8007e0a:	e02a      	b.n	8007e62 <_dtoa_r+0x5e2>
 8007e0c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007e10:	e7d6      	b.n	8007dc0 <_dtoa_r+0x540>
 8007e12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e16:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007e1a:	f8dd 8000 	ldr.w	r8, [sp]
 8007e1e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007e22:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007e26:	ee15 3a10 	vmov	r3, s10
 8007e2a:	3330      	adds	r3, #48	; 0x30
 8007e2c:	f808 3b01 	strb.w	r3, [r8], #1
 8007e30:	9b00      	ldr	r3, [sp, #0]
 8007e32:	eba8 0303 	sub.w	r3, r8, r3
 8007e36:	4599      	cmp	r9, r3
 8007e38:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007e3c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007e40:	d133      	bne.n	8007eaa <_dtoa_r+0x62a>
 8007e42:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007e46:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e4e:	dc1a      	bgt.n	8007e86 <_dtoa_r+0x606>
 8007e50:	eeb4 7b46 	vcmp.f64	d7, d6
 8007e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e58:	d103      	bne.n	8007e62 <_dtoa_r+0x5e2>
 8007e5a:	ee15 3a10 	vmov	r3, s10
 8007e5e:	07d9      	lsls	r1, r3, #31
 8007e60:	d411      	bmi.n	8007e86 <_dtoa_r+0x606>
 8007e62:	4629      	mov	r1, r5
 8007e64:	4630      	mov	r0, r6
 8007e66:	f000 fae7 	bl	8008438 <_Bfree>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e6e:	f888 3000 	strb.w	r3, [r8]
 8007e72:	f10b 0301 	add.w	r3, fp, #1
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f43f ad4d 	beq.w	800791a <_dtoa_r+0x9a>
 8007e80:	f8c3 8000 	str.w	r8, [r3]
 8007e84:	e549      	b.n	800791a <_dtoa_r+0x9a>
 8007e86:	465f      	mov	r7, fp
 8007e88:	4643      	mov	r3, r8
 8007e8a:	4698      	mov	r8, r3
 8007e8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e90:	2a39      	cmp	r2, #57	; 0x39
 8007e92:	d106      	bne.n	8007ea2 <_dtoa_r+0x622>
 8007e94:	9a00      	ldr	r2, [sp, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d1f7      	bne.n	8007e8a <_dtoa_r+0x60a>
 8007e9a:	9900      	ldr	r1, [sp, #0]
 8007e9c:	2230      	movs	r2, #48	; 0x30
 8007e9e:	3701      	adds	r7, #1
 8007ea0:	700a      	strb	r2, [r1, #0]
 8007ea2:	781a      	ldrb	r2, [r3, #0]
 8007ea4:	3201      	adds	r2, #1
 8007ea6:	701a      	strb	r2, [r3, #0]
 8007ea8:	e7ae      	b.n	8007e08 <_dtoa_r+0x588>
 8007eaa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007eae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eb6:	d1b2      	bne.n	8007e1e <_dtoa_r+0x59e>
 8007eb8:	e7d3      	b.n	8007e62 <_dtoa_r+0x5e2>
 8007eba:	bf00      	nop
 8007ebc:	08009c80 	.word	0x08009c80
 8007ec0:	08009c58 	.word	0x08009c58
 8007ec4:	9908      	ldr	r1, [sp, #32]
 8007ec6:	2900      	cmp	r1, #0
 8007ec8:	f000 80d1 	beq.w	800806e <_dtoa_r+0x7ee>
 8007ecc:	9907      	ldr	r1, [sp, #28]
 8007ece:	2901      	cmp	r1, #1
 8007ed0:	f300 80b4 	bgt.w	800803c <_dtoa_r+0x7bc>
 8007ed4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007ed6:	2900      	cmp	r1, #0
 8007ed8:	f000 80ac 	beq.w	8008034 <_dtoa_r+0x7b4>
 8007edc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007ee0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007ee4:	461c      	mov	r4, r3
 8007ee6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ee8:	9b05      	ldr	r3, [sp, #20]
 8007eea:	4413      	add	r3, r2
 8007eec:	9305      	str	r3, [sp, #20]
 8007eee:	9b06      	ldr	r3, [sp, #24]
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	4413      	add	r3, r2
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	9306      	str	r3, [sp, #24]
 8007ef8:	f000 fb5a 	bl	80085b0 <__i2b>
 8007efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007efe:	4607      	mov	r7, r0
 8007f00:	f1b8 0f00 	cmp.w	r8, #0
 8007f04:	dd0d      	ble.n	8007f22 <_dtoa_r+0x6a2>
 8007f06:	9a06      	ldr	r2, [sp, #24]
 8007f08:	2a00      	cmp	r2, #0
 8007f0a:	dd0a      	ble.n	8007f22 <_dtoa_r+0x6a2>
 8007f0c:	4542      	cmp	r2, r8
 8007f0e:	9905      	ldr	r1, [sp, #20]
 8007f10:	bfa8      	it	ge
 8007f12:	4642      	movge	r2, r8
 8007f14:	1a89      	subs	r1, r1, r2
 8007f16:	9105      	str	r1, [sp, #20]
 8007f18:	9906      	ldr	r1, [sp, #24]
 8007f1a:	eba8 0802 	sub.w	r8, r8, r2
 8007f1e:	1a8a      	subs	r2, r1, r2
 8007f20:	9206      	str	r2, [sp, #24]
 8007f22:	b303      	cbz	r3, 8007f66 <_dtoa_r+0x6e6>
 8007f24:	9a08      	ldr	r2, [sp, #32]
 8007f26:	2a00      	cmp	r2, #0
 8007f28:	f000 80a6 	beq.w	8008078 <_dtoa_r+0x7f8>
 8007f2c:	2c00      	cmp	r4, #0
 8007f2e:	dd13      	ble.n	8007f58 <_dtoa_r+0x6d8>
 8007f30:	4639      	mov	r1, r7
 8007f32:	4622      	mov	r2, r4
 8007f34:	4630      	mov	r0, r6
 8007f36:	930c      	str	r3, [sp, #48]	; 0x30
 8007f38:	f000 fbf6 	bl	8008728 <__pow5mult>
 8007f3c:	462a      	mov	r2, r5
 8007f3e:	4601      	mov	r1, r0
 8007f40:	4607      	mov	r7, r0
 8007f42:	4630      	mov	r0, r6
 8007f44:	f000 fb4a 	bl	80085dc <__multiply>
 8007f48:	4629      	mov	r1, r5
 8007f4a:	900a      	str	r0, [sp, #40]	; 0x28
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f000 fa73 	bl	8008438 <_Bfree>
 8007f52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f56:	4615      	mov	r5, r2
 8007f58:	1b1a      	subs	r2, r3, r4
 8007f5a:	d004      	beq.n	8007f66 <_dtoa_r+0x6e6>
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	4630      	mov	r0, r6
 8007f60:	f000 fbe2 	bl	8008728 <__pow5mult>
 8007f64:	4605      	mov	r5, r0
 8007f66:	2101      	movs	r1, #1
 8007f68:	4630      	mov	r0, r6
 8007f6a:	f000 fb21 	bl	80085b0 <__i2b>
 8007f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	4604      	mov	r4, r0
 8007f74:	f340 8082 	ble.w	800807c <_dtoa_r+0x7fc>
 8007f78:	461a      	mov	r2, r3
 8007f7a:	4601      	mov	r1, r0
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f000 fbd3 	bl	8008728 <__pow5mult>
 8007f82:	9b07      	ldr	r3, [sp, #28]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	4604      	mov	r4, r0
 8007f88:	dd7b      	ble.n	8008082 <_dtoa_r+0x802>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	930a      	str	r3, [sp, #40]	; 0x28
 8007f8e:	6922      	ldr	r2, [r4, #16]
 8007f90:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007f94:	6910      	ldr	r0, [r2, #16]
 8007f96:	f000 fabb 	bl	8008510 <__hi0bits>
 8007f9a:	f1c0 0020 	rsb	r0, r0, #32
 8007f9e:	9b06      	ldr	r3, [sp, #24]
 8007fa0:	4418      	add	r0, r3
 8007fa2:	f010 001f 	ands.w	r0, r0, #31
 8007fa6:	f000 808d 	beq.w	80080c4 <_dtoa_r+0x844>
 8007faa:	f1c0 0220 	rsb	r2, r0, #32
 8007fae:	2a04      	cmp	r2, #4
 8007fb0:	f340 8086 	ble.w	80080c0 <_dtoa_r+0x840>
 8007fb4:	f1c0 001c 	rsb	r0, r0, #28
 8007fb8:	9b05      	ldr	r3, [sp, #20]
 8007fba:	4403      	add	r3, r0
 8007fbc:	9305      	str	r3, [sp, #20]
 8007fbe:	9b06      	ldr	r3, [sp, #24]
 8007fc0:	4403      	add	r3, r0
 8007fc2:	4480      	add	r8, r0
 8007fc4:	9306      	str	r3, [sp, #24]
 8007fc6:	9b05      	ldr	r3, [sp, #20]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	dd05      	ble.n	8007fd8 <_dtoa_r+0x758>
 8007fcc:	4629      	mov	r1, r5
 8007fce:	461a      	mov	r2, r3
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f000 fc03 	bl	80087dc <__lshift>
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	9b06      	ldr	r3, [sp, #24]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	dd05      	ble.n	8007fea <_dtoa_r+0x76a>
 8007fde:	4621      	mov	r1, r4
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f000 fbfa 	bl	80087dc <__lshift>
 8007fe8:	4604      	mov	r4, r0
 8007fea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d06b      	beq.n	80080c8 <_dtoa_r+0x848>
 8007ff0:	4621      	mov	r1, r4
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	f000 fc5e 	bl	80088b4 <__mcmp>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	da65      	bge.n	80080c8 <_dtoa_r+0x848>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	4629      	mov	r1, r5
 8008000:	220a      	movs	r2, #10
 8008002:	4630      	mov	r0, r6
 8008004:	f000 fa3a 	bl	800847c <__multadd>
 8008008:	9b08      	ldr	r3, [sp, #32]
 800800a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800800e:	4605      	mov	r5, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 8192 	beq.w	800833a <_dtoa_r+0xaba>
 8008016:	4639      	mov	r1, r7
 8008018:	2300      	movs	r3, #0
 800801a:	220a      	movs	r2, #10
 800801c:	4630      	mov	r0, r6
 800801e:	f000 fa2d 	bl	800847c <__multadd>
 8008022:	f1ba 0f00 	cmp.w	sl, #0
 8008026:	4607      	mov	r7, r0
 8008028:	f300 808e 	bgt.w	8008148 <_dtoa_r+0x8c8>
 800802c:	9b07      	ldr	r3, [sp, #28]
 800802e:	2b02      	cmp	r3, #2
 8008030:	dc51      	bgt.n	80080d6 <_dtoa_r+0x856>
 8008032:	e089      	b.n	8008148 <_dtoa_r+0x8c8>
 8008034:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008036:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800803a:	e751      	b.n	8007ee0 <_dtoa_r+0x660>
 800803c:	f109 34ff 	add.w	r4, r9, #4294967295
 8008040:	42a3      	cmp	r3, r4
 8008042:	bfbf      	itttt	lt
 8008044:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008046:	1ae3      	sublt	r3, r4, r3
 8008048:	18d2      	addlt	r2, r2, r3
 800804a:	4613      	movlt	r3, r2
 800804c:	bfb7      	itett	lt
 800804e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008050:	1b1c      	subge	r4, r3, r4
 8008052:	4623      	movlt	r3, r4
 8008054:	2400      	movlt	r4, #0
 8008056:	f1b9 0f00 	cmp.w	r9, #0
 800805a:	bfb5      	itete	lt
 800805c:	9a05      	ldrlt	r2, [sp, #20]
 800805e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8008062:	eba2 0809 	sublt.w	r8, r2, r9
 8008066:	464a      	movge	r2, r9
 8008068:	bfb8      	it	lt
 800806a:	2200      	movlt	r2, #0
 800806c:	e73b      	b.n	8007ee6 <_dtoa_r+0x666>
 800806e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008072:	9f08      	ldr	r7, [sp, #32]
 8008074:	461c      	mov	r4, r3
 8008076:	e743      	b.n	8007f00 <_dtoa_r+0x680>
 8008078:	461a      	mov	r2, r3
 800807a:	e76f      	b.n	8007f5c <_dtoa_r+0x6dc>
 800807c:	9b07      	ldr	r3, [sp, #28]
 800807e:	2b01      	cmp	r3, #1
 8008080:	dc18      	bgt.n	80080b4 <_dtoa_r+0x834>
 8008082:	9b02      	ldr	r3, [sp, #8]
 8008084:	b9b3      	cbnz	r3, 80080b4 <_dtoa_r+0x834>
 8008086:	9b03      	ldr	r3, [sp, #12]
 8008088:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800808c:	b9a2      	cbnz	r2, 80080b8 <_dtoa_r+0x838>
 800808e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008092:	0d12      	lsrs	r2, r2, #20
 8008094:	0512      	lsls	r2, r2, #20
 8008096:	b18a      	cbz	r2, 80080bc <_dtoa_r+0x83c>
 8008098:	9b05      	ldr	r3, [sp, #20]
 800809a:	3301      	adds	r3, #1
 800809c:	9305      	str	r3, [sp, #20]
 800809e:	9b06      	ldr	r3, [sp, #24]
 80080a0:	3301      	adds	r3, #1
 80080a2:	9306      	str	r3, [sp, #24]
 80080a4:	2301      	movs	r3, #1
 80080a6:	930a      	str	r3, [sp, #40]	; 0x28
 80080a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f47f af6f 	bne.w	8007f8e <_dtoa_r+0x70e>
 80080b0:	2001      	movs	r0, #1
 80080b2:	e774      	b.n	8007f9e <_dtoa_r+0x71e>
 80080b4:	2300      	movs	r3, #0
 80080b6:	e7f6      	b.n	80080a6 <_dtoa_r+0x826>
 80080b8:	9b02      	ldr	r3, [sp, #8]
 80080ba:	e7f4      	b.n	80080a6 <_dtoa_r+0x826>
 80080bc:	920a      	str	r2, [sp, #40]	; 0x28
 80080be:	e7f3      	b.n	80080a8 <_dtoa_r+0x828>
 80080c0:	d081      	beq.n	8007fc6 <_dtoa_r+0x746>
 80080c2:	4610      	mov	r0, r2
 80080c4:	301c      	adds	r0, #28
 80080c6:	e777      	b.n	8007fb8 <_dtoa_r+0x738>
 80080c8:	f1b9 0f00 	cmp.w	r9, #0
 80080cc:	dc37      	bgt.n	800813e <_dtoa_r+0x8be>
 80080ce:	9b07      	ldr	r3, [sp, #28]
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	dd34      	ble.n	800813e <_dtoa_r+0x8be>
 80080d4:	46ca      	mov	sl, r9
 80080d6:	f1ba 0f00 	cmp.w	sl, #0
 80080da:	d10d      	bne.n	80080f8 <_dtoa_r+0x878>
 80080dc:	4621      	mov	r1, r4
 80080de:	4653      	mov	r3, sl
 80080e0:	2205      	movs	r2, #5
 80080e2:	4630      	mov	r0, r6
 80080e4:	f000 f9ca 	bl	800847c <__multadd>
 80080e8:	4601      	mov	r1, r0
 80080ea:	4604      	mov	r4, r0
 80080ec:	4628      	mov	r0, r5
 80080ee:	f000 fbe1 	bl	80088b4 <__mcmp>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	f73f adde 	bgt.w	8007cb4 <_dtoa_r+0x434>
 80080f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080fa:	f8dd 8000 	ldr.w	r8, [sp]
 80080fe:	ea6f 0b03 	mvn.w	fp, r3
 8008102:	f04f 0900 	mov.w	r9, #0
 8008106:	4621      	mov	r1, r4
 8008108:	4630      	mov	r0, r6
 800810a:	f000 f995 	bl	8008438 <_Bfree>
 800810e:	2f00      	cmp	r7, #0
 8008110:	f43f aea7 	beq.w	8007e62 <_dtoa_r+0x5e2>
 8008114:	f1b9 0f00 	cmp.w	r9, #0
 8008118:	d005      	beq.n	8008126 <_dtoa_r+0x8a6>
 800811a:	45b9      	cmp	r9, r7
 800811c:	d003      	beq.n	8008126 <_dtoa_r+0x8a6>
 800811e:	4649      	mov	r1, r9
 8008120:	4630      	mov	r0, r6
 8008122:	f000 f989 	bl	8008438 <_Bfree>
 8008126:	4639      	mov	r1, r7
 8008128:	4630      	mov	r0, r6
 800812a:	f000 f985 	bl	8008438 <_Bfree>
 800812e:	e698      	b.n	8007e62 <_dtoa_r+0x5e2>
 8008130:	2400      	movs	r4, #0
 8008132:	4627      	mov	r7, r4
 8008134:	e7e0      	b.n	80080f8 <_dtoa_r+0x878>
 8008136:	46bb      	mov	fp, r7
 8008138:	4604      	mov	r4, r0
 800813a:	4607      	mov	r7, r0
 800813c:	e5ba      	b.n	8007cb4 <_dtoa_r+0x434>
 800813e:	9b08      	ldr	r3, [sp, #32]
 8008140:	46ca      	mov	sl, r9
 8008142:	2b00      	cmp	r3, #0
 8008144:	f000 8100 	beq.w	8008348 <_dtoa_r+0xac8>
 8008148:	f1b8 0f00 	cmp.w	r8, #0
 800814c:	dd05      	ble.n	800815a <_dtoa_r+0x8da>
 800814e:	4639      	mov	r1, r7
 8008150:	4642      	mov	r2, r8
 8008152:	4630      	mov	r0, r6
 8008154:	f000 fb42 	bl	80087dc <__lshift>
 8008158:	4607      	mov	r7, r0
 800815a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800815c:	2b00      	cmp	r3, #0
 800815e:	d05d      	beq.n	800821c <_dtoa_r+0x99c>
 8008160:	6879      	ldr	r1, [r7, #4]
 8008162:	4630      	mov	r0, r6
 8008164:	f000 f928 	bl	80083b8 <_Balloc>
 8008168:	4680      	mov	r8, r0
 800816a:	b928      	cbnz	r0, 8008178 <_dtoa_r+0x8f8>
 800816c:	4b82      	ldr	r3, [pc, #520]	; (8008378 <_dtoa_r+0xaf8>)
 800816e:	4602      	mov	r2, r0
 8008170:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008174:	f7ff bb9a 	b.w	80078ac <_dtoa_r+0x2c>
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	3202      	adds	r2, #2
 800817c:	0092      	lsls	r2, r2, #2
 800817e:	f107 010c 	add.w	r1, r7, #12
 8008182:	300c      	adds	r0, #12
 8008184:	f000 f90a 	bl	800839c <memcpy>
 8008188:	2201      	movs	r2, #1
 800818a:	4641      	mov	r1, r8
 800818c:	4630      	mov	r0, r6
 800818e:	f000 fb25 	bl	80087dc <__lshift>
 8008192:	9b00      	ldr	r3, [sp, #0]
 8008194:	3301      	adds	r3, #1
 8008196:	9305      	str	r3, [sp, #20]
 8008198:	9b00      	ldr	r3, [sp, #0]
 800819a:	4453      	add	r3, sl
 800819c:	9309      	str	r3, [sp, #36]	; 0x24
 800819e:	9b02      	ldr	r3, [sp, #8]
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	46b9      	mov	r9, r7
 80081a6:	9308      	str	r3, [sp, #32]
 80081a8:	4607      	mov	r7, r0
 80081aa:	9b05      	ldr	r3, [sp, #20]
 80081ac:	4621      	mov	r1, r4
 80081ae:	3b01      	subs	r3, #1
 80081b0:	4628      	mov	r0, r5
 80081b2:	9302      	str	r3, [sp, #8]
 80081b4:	f7ff fad6 	bl	8007764 <quorem>
 80081b8:	4603      	mov	r3, r0
 80081ba:	3330      	adds	r3, #48	; 0x30
 80081bc:	9006      	str	r0, [sp, #24]
 80081be:	4649      	mov	r1, r9
 80081c0:	4628      	mov	r0, r5
 80081c2:	930a      	str	r3, [sp, #40]	; 0x28
 80081c4:	f000 fb76 	bl	80088b4 <__mcmp>
 80081c8:	463a      	mov	r2, r7
 80081ca:	4682      	mov	sl, r0
 80081cc:	4621      	mov	r1, r4
 80081ce:	4630      	mov	r0, r6
 80081d0:	f000 fb8c 	bl	80088ec <__mdiff>
 80081d4:	68c2      	ldr	r2, [r0, #12]
 80081d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d8:	4680      	mov	r8, r0
 80081da:	bb0a      	cbnz	r2, 8008220 <_dtoa_r+0x9a0>
 80081dc:	4601      	mov	r1, r0
 80081de:	4628      	mov	r0, r5
 80081e0:	f000 fb68 	bl	80088b4 <__mcmp>
 80081e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e6:	4602      	mov	r2, r0
 80081e8:	4641      	mov	r1, r8
 80081ea:	4630      	mov	r0, r6
 80081ec:	920e      	str	r2, [sp, #56]	; 0x38
 80081ee:	930a      	str	r3, [sp, #40]	; 0x28
 80081f0:	f000 f922 	bl	8008438 <_Bfree>
 80081f4:	9b07      	ldr	r3, [sp, #28]
 80081f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80081fc:	ea43 0102 	orr.w	r1, r3, r2
 8008200:	9b08      	ldr	r3, [sp, #32]
 8008202:	430b      	orrs	r3, r1
 8008204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008206:	d10d      	bne.n	8008224 <_dtoa_r+0x9a4>
 8008208:	2b39      	cmp	r3, #57	; 0x39
 800820a:	d029      	beq.n	8008260 <_dtoa_r+0x9e0>
 800820c:	f1ba 0f00 	cmp.w	sl, #0
 8008210:	dd01      	ble.n	8008216 <_dtoa_r+0x996>
 8008212:	9b06      	ldr	r3, [sp, #24]
 8008214:	3331      	adds	r3, #49	; 0x31
 8008216:	9a02      	ldr	r2, [sp, #8]
 8008218:	7013      	strb	r3, [r2, #0]
 800821a:	e774      	b.n	8008106 <_dtoa_r+0x886>
 800821c:	4638      	mov	r0, r7
 800821e:	e7b8      	b.n	8008192 <_dtoa_r+0x912>
 8008220:	2201      	movs	r2, #1
 8008222:	e7e1      	b.n	80081e8 <_dtoa_r+0x968>
 8008224:	f1ba 0f00 	cmp.w	sl, #0
 8008228:	db06      	blt.n	8008238 <_dtoa_r+0x9b8>
 800822a:	9907      	ldr	r1, [sp, #28]
 800822c:	ea41 0a0a 	orr.w	sl, r1, sl
 8008230:	9908      	ldr	r1, [sp, #32]
 8008232:	ea5a 0101 	orrs.w	r1, sl, r1
 8008236:	d120      	bne.n	800827a <_dtoa_r+0x9fa>
 8008238:	2a00      	cmp	r2, #0
 800823a:	ddec      	ble.n	8008216 <_dtoa_r+0x996>
 800823c:	4629      	mov	r1, r5
 800823e:	2201      	movs	r2, #1
 8008240:	4630      	mov	r0, r6
 8008242:	9305      	str	r3, [sp, #20]
 8008244:	f000 faca 	bl	80087dc <__lshift>
 8008248:	4621      	mov	r1, r4
 800824a:	4605      	mov	r5, r0
 800824c:	f000 fb32 	bl	80088b4 <__mcmp>
 8008250:	2800      	cmp	r0, #0
 8008252:	9b05      	ldr	r3, [sp, #20]
 8008254:	dc02      	bgt.n	800825c <_dtoa_r+0x9dc>
 8008256:	d1de      	bne.n	8008216 <_dtoa_r+0x996>
 8008258:	07da      	lsls	r2, r3, #31
 800825a:	d5dc      	bpl.n	8008216 <_dtoa_r+0x996>
 800825c:	2b39      	cmp	r3, #57	; 0x39
 800825e:	d1d8      	bne.n	8008212 <_dtoa_r+0x992>
 8008260:	9a02      	ldr	r2, [sp, #8]
 8008262:	2339      	movs	r3, #57	; 0x39
 8008264:	7013      	strb	r3, [r2, #0]
 8008266:	4643      	mov	r3, r8
 8008268:	4698      	mov	r8, r3
 800826a:	3b01      	subs	r3, #1
 800826c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008270:	2a39      	cmp	r2, #57	; 0x39
 8008272:	d051      	beq.n	8008318 <_dtoa_r+0xa98>
 8008274:	3201      	adds	r2, #1
 8008276:	701a      	strb	r2, [r3, #0]
 8008278:	e745      	b.n	8008106 <_dtoa_r+0x886>
 800827a:	2a00      	cmp	r2, #0
 800827c:	dd03      	ble.n	8008286 <_dtoa_r+0xa06>
 800827e:	2b39      	cmp	r3, #57	; 0x39
 8008280:	d0ee      	beq.n	8008260 <_dtoa_r+0x9e0>
 8008282:	3301      	adds	r3, #1
 8008284:	e7c7      	b.n	8008216 <_dtoa_r+0x996>
 8008286:	9a05      	ldr	r2, [sp, #20]
 8008288:	9909      	ldr	r1, [sp, #36]	; 0x24
 800828a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800828e:	428a      	cmp	r2, r1
 8008290:	d02b      	beq.n	80082ea <_dtoa_r+0xa6a>
 8008292:	4629      	mov	r1, r5
 8008294:	2300      	movs	r3, #0
 8008296:	220a      	movs	r2, #10
 8008298:	4630      	mov	r0, r6
 800829a:	f000 f8ef 	bl	800847c <__multadd>
 800829e:	45b9      	cmp	r9, r7
 80082a0:	4605      	mov	r5, r0
 80082a2:	f04f 0300 	mov.w	r3, #0
 80082a6:	f04f 020a 	mov.w	r2, #10
 80082aa:	4649      	mov	r1, r9
 80082ac:	4630      	mov	r0, r6
 80082ae:	d107      	bne.n	80082c0 <_dtoa_r+0xa40>
 80082b0:	f000 f8e4 	bl	800847c <__multadd>
 80082b4:	4681      	mov	r9, r0
 80082b6:	4607      	mov	r7, r0
 80082b8:	9b05      	ldr	r3, [sp, #20]
 80082ba:	3301      	adds	r3, #1
 80082bc:	9305      	str	r3, [sp, #20]
 80082be:	e774      	b.n	80081aa <_dtoa_r+0x92a>
 80082c0:	f000 f8dc 	bl	800847c <__multadd>
 80082c4:	4639      	mov	r1, r7
 80082c6:	4681      	mov	r9, r0
 80082c8:	2300      	movs	r3, #0
 80082ca:	220a      	movs	r2, #10
 80082cc:	4630      	mov	r0, r6
 80082ce:	f000 f8d5 	bl	800847c <__multadd>
 80082d2:	4607      	mov	r7, r0
 80082d4:	e7f0      	b.n	80082b8 <_dtoa_r+0xa38>
 80082d6:	f1ba 0f00 	cmp.w	sl, #0
 80082da:	9a00      	ldr	r2, [sp, #0]
 80082dc:	bfcc      	ite	gt
 80082de:	46d0      	movgt	r8, sl
 80082e0:	f04f 0801 	movle.w	r8, #1
 80082e4:	4490      	add	r8, r2
 80082e6:	f04f 0900 	mov.w	r9, #0
 80082ea:	4629      	mov	r1, r5
 80082ec:	2201      	movs	r2, #1
 80082ee:	4630      	mov	r0, r6
 80082f0:	9302      	str	r3, [sp, #8]
 80082f2:	f000 fa73 	bl	80087dc <__lshift>
 80082f6:	4621      	mov	r1, r4
 80082f8:	4605      	mov	r5, r0
 80082fa:	f000 fadb 	bl	80088b4 <__mcmp>
 80082fe:	2800      	cmp	r0, #0
 8008300:	dcb1      	bgt.n	8008266 <_dtoa_r+0x9e6>
 8008302:	d102      	bne.n	800830a <_dtoa_r+0xa8a>
 8008304:	9b02      	ldr	r3, [sp, #8]
 8008306:	07db      	lsls	r3, r3, #31
 8008308:	d4ad      	bmi.n	8008266 <_dtoa_r+0x9e6>
 800830a:	4643      	mov	r3, r8
 800830c:	4698      	mov	r8, r3
 800830e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008312:	2a30      	cmp	r2, #48	; 0x30
 8008314:	d0fa      	beq.n	800830c <_dtoa_r+0xa8c>
 8008316:	e6f6      	b.n	8008106 <_dtoa_r+0x886>
 8008318:	9a00      	ldr	r2, [sp, #0]
 800831a:	429a      	cmp	r2, r3
 800831c:	d1a4      	bne.n	8008268 <_dtoa_r+0x9e8>
 800831e:	f10b 0b01 	add.w	fp, fp, #1
 8008322:	2331      	movs	r3, #49	; 0x31
 8008324:	e778      	b.n	8008218 <_dtoa_r+0x998>
 8008326:	4b15      	ldr	r3, [pc, #84]	; (800837c <_dtoa_r+0xafc>)
 8008328:	f7ff bb12 	b.w	8007950 <_dtoa_r+0xd0>
 800832c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800832e:	2b00      	cmp	r3, #0
 8008330:	f47f aaee 	bne.w	8007910 <_dtoa_r+0x90>
 8008334:	4b12      	ldr	r3, [pc, #72]	; (8008380 <_dtoa_r+0xb00>)
 8008336:	f7ff bb0b 	b.w	8007950 <_dtoa_r+0xd0>
 800833a:	f1ba 0f00 	cmp.w	sl, #0
 800833e:	dc03      	bgt.n	8008348 <_dtoa_r+0xac8>
 8008340:	9b07      	ldr	r3, [sp, #28]
 8008342:	2b02      	cmp	r3, #2
 8008344:	f73f aec7 	bgt.w	80080d6 <_dtoa_r+0x856>
 8008348:	f8dd 8000 	ldr.w	r8, [sp]
 800834c:	4621      	mov	r1, r4
 800834e:	4628      	mov	r0, r5
 8008350:	f7ff fa08 	bl	8007764 <quorem>
 8008354:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008358:	f808 3b01 	strb.w	r3, [r8], #1
 800835c:	9a00      	ldr	r2, [sp, #0]
 800835e:	eba8 0202 	sub.w	r2, r8, r2
 8008362:	4592      	cmp	sl, r2
 8008364:	ddb7      	ble.n	80082d6 <_dtoa_r+0xa56>
 8008366:	4629      	mov	r1, r5
 8008368:	2300      	movs	r3, #0
 800836a:	220a      	movs	r2, #10
 800836c:	4630      	mov	r0, r6
 800836e:	f000 f885 	bl	800847c <__multadd>
 8008372:	4605      	mov	r5, r0
 8008374:	e7ea      	b.n	800834c <_dtoa_r+0xacc>
 8008376:	bf00      	nop
 8008378:	08009be7 	.word	0x08009be7
 800837c:	08009b40 	.word	0x08009b40
 8008380:	08009b64 	.word	0x08009b64

08008384 <_localeconv_r>:
 8008384:	4800      	ldr	r0, [pc, #0]	; (8008388 <_localeconv_r+0x4>)
 8008386:	4770      	bx	lr
 8008388:	24000164 	.word	0x24000164

0800838c <malloc>:
 800838c:	4b02      	ldr	r3, [pc, #8]	; (8008398 <malloc+0xc>)
 800838e:	4601      	mov	r1, r0
 8008390:	6818      	ldr	r0, [r3, #0]
 8008392:	f000 bbef 	b.w	8008b74 <_malloc_r>
 8008396:	bf00      	nop
 8008398:	24000010 	.word	0x24000010

0800839c <memcpy>:
 800839c:	440a      	add	r2, r1
 800839e:	4291      	cmp	r1, r2
 80083a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80083a4:	d100      	bne.n	80083a8 <memcpy+0xc>
 80083a6:	4770      	bx	lr
 80083a8:	b510      	push	{r4, lr}
 80083aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083b2:	4291      	cmp	r1, r2
 80083b4:	d1f9      	bne.n	80083aa <memcpy+0xe>
 80083b6:	bd10      	pop	{r4, pc}

080083b8 <_Balloc>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80083bc:	4604      	mov	r4, r0
 80083be:	460d      	mov	r5, r1
 80083c0:	b976      	cbnz	r6, 80083e0 <_Balloc+0x28>
 80083c2:	2010      	movs	r0, #16
 80083c4:	f7ff ffe2 	bl	800838c <malloc>
 80083c8:	4602      	mov	r2, r0
 80083ca:	6260      	str	r0, [r4, #36]	; 0x24
 80083cc:	b920      	cbnz	r0, 80083d8 <_Balloc+0x20>
 80083ce:	4b18      	ldr	r3, [pc, #96]	; (8008430 <_Balloc+0x78>)
 80083d0:	4818      	ldr	r0, [pc, #96]	; (8008434 <_Balloc+0x7c>)
 80083d2:	2166      	movs	r1, #102	; 0x66
 80083d4:	f000 fd94 	bl	8008f00 <__assert_func>
 80083d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083dc:	6006      	str	r6, [r0, #0]
 80083de:	60c6      	str	r6, [r0, #12]
 80083e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80083e2:	68f3      	ldr	r3, [r6, #12]
 80083e4:	b183      	cbz	r3, 8008408 <_Balloc+0x50>
 80083e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083ee:	b9b8      	cbnz	r0, 8008420 <_Balloc+0x68>
 80083f0:	2101      	movs	r1, #1
 80083f2:	fa01 f605 	lsl.w	r6, r1, r5
 80083f6:	1d72      	adds	r2, r6, #5
 80083f8:	0092      	lsls	r2, r2, #2
 80083fa:	4620      	mov	r0, r4
 80083fc:	f000 fb5a 	bl	8008ab4 <_calloc_r>
 8008400:	b160      	cbz	r0, 800841c <_Balloc+0x64>
 8008402:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008406:	e00e      	b.n	8008426 <_Balloc+0x6e>
 8008408:	2221      	movs	r2, #33	; 0x21
 800840a:	2104      	movs	r1, #4
 800840c:	4620      	mov	r0, r4
 800840e:	f000 fb51 	bl	8008ab4 <_calloc_r>
 8008412:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008414:	60f0      	str	r0, [r6, #12]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e4      	bne.n	80083e6 <_Balloc+0x2e>
 800841c:	2000      	movs	r0, #0
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	6802      	ldr	r2, [r0, #0]
 8008422:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008426:	2300      	movs	r3, #0
 8008428:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800842c:	e7f7      	b.n	800841e <_Balloc+0x66>
 800842e:	bf00      	nop
 8008430:	08009b71 	.word	0x08009b71
 8008434:	08009bf8 	.word	0x08009bf8

08008438 <_Bfree>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800843c:	4605      	mov	r5, r0
 800843e:	460c      	mov	r4, r1
 8008440:	b976      	cbnz	r6, 8008460 <_Bfree+0x28>
 8008442:	2010      	movs	r0, #16
 8008444:	f7ff ffa2 	bl	800838c <malloc>
 8008448:	4602      	mov	r2, r0
 800844a:	6268      	str	r0, [r5, #36]	; 0x24
 800844c:	b920      	cbnz	r0, 8008458 <_Bfree+0x20>
 800844e:	4b09      	ldr	r3, [pc, #36]	; (8008474 <_Bfree+0x3c>)
 8008450:	4809      	ldr	r0, [pc, #36]	; (8008478 <_Bfree+0x40>)
 8008452:	218a      	movs	r1, #138	; 0x8a
 8008454:	f000 fd54 	bl	8008f00 <__assert_func>
 8008458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800845c:	6006      	str	r6, [r0, #0]
 800845e:	60c6      	str	r6, [r0, #12]
 8008460:	b13c      	cbz	r4, 8008472 <_Bfree+0x3a>
 8008462:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008464:	6862      	ldr	r2, [r4, #4]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800846c:	6021      	str	r1, [r4, #0]
 800846e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	08009b71 	.word	0x08009b71
 8008478:	08009bf8 	.word	0x08009bf8

0800847c <__multadd>:
 800847c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008480:	690e      	ldr	r6, [r1, #16]
 8008482:	4607      	mov	r7, r0
 8008484:	4698      	mov	r8, r3
 8008486:	460c      	mov	r4, r1
 8008488:	f101 0014 	add.w	r0, r1, #20
 800848c:	2300      	movs	r3, #0
 800848e:	6805      	ldr	r5, [r0, #0]
 8008490:	b2a9      	uxth	r1, r5
 8008492:	fb02 8101 	mla	r1, r2, r1, r8
 8008496:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800849a:	0c2d      	lsrs	r5, r5, #16
 800849c:	fb02 c505 	mla	r5, r2, r5, ip
 80084a0:	b289      	uxth	r1, r1
 80084a2:	3301      	adds	r3, #1
 80084a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80084a8:	429e      	cmp	r6, r3
 80084aa:	f840 1b04 	str.w	r1, [r0], #4
 80084ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80084b2:	dcec      	bgt.n	800848e <__multadd+0x12>
 80084b4:	f1b8 0f00 	cmp.w	r8, #0
 80084b8:	d022      	beq.n	8008500 <__multadd+0x84>
 80084ba:	68a3      	ldr	r3, [r4, #8]
 80084bc:	42b3      	cmp	r3, r6
 80084be:	dc19      	bgt.n	80084f4 <__multadd+0x78>
 80084c0:	6861      	ldr	r1, [r4, #4]
 80084c2:	4638      	mov	r0, r7
 80084c4:	3101      	adds	r1, #1
 80084c6:	f7ff ff77 	bl	80083b8 <_Balloc>
 80084ca:	4605      	mov	r5, r0
 80084cc:	b928      	cbnz	r0, 80084da <__multadd+0x5e>
 80084ce:	4602      	mov	r2, r0
 80084d0:	4b0d      	ldr	r3, [pc, #52]	; (8008508 <__multadd+0x8c>)
 80084d2:	480e      	ldr	r0, [pc, #56]	; (800850c <__multadd+0x90>)
 80084d4:	21b5      	movs	r1, #181	; 0xb5
 80084d6:	f000 fd13 	bl	8008f00 <__assert_func>
 80084da:	6922      	ldr	r2, [r4, #16]
 80084dc:	3202      	adds	r2, #2
 80084de:	f104 010c 	add.w	r1, r4, #12
 80084e2:	0092      	lsls	r2, r2, #2
 80084e4:	300c      	adds	r0, #12
 80084e6:	f7ff ff59 	bl	800839c <memcpy>
 80084ea:	4621      	mov	r1, r4
 80084ec:	4638      	mov	r0, r7
 80084ee:	f7ff ffa3 	bl	8008438 <_Bfree>
 80084f2:	462c      	mov	r4, r5
 80084f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80084f8:	3601      	adds	r6, #1
 80084fa:	f8c3 8014 	str.w	r8, [r3, #20]
 80084fe:	6126      	str	r6, [r4, #16]
 8008500:	4620      	mov	r0, r4
 8008502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008506:	bf00      	nop
 8008508:	08009be7 	.word	0x08009be7
 800850c:	08009bf8 	.word	0x08009bf8

08008510 <__hi0bits>:
 8008510:	0c03      	lsrs	r3, r0, #16
 8008512:	041b      	lsls	r3, r3, #16
 8008514:	b9d3      	cbnz	r3, 800854c <__hi0bits+0x3c>
 8008516:	0400      	lsls	r0, r0, #16
 8008518:	2310      	movs	r3, #16
 800851a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800851e:	bf04      	itt	eq
 8008520:	0200      	lsleq	r0, r0, #8
 8008522:	3308      	addeq	r3, #8
 8008524:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008528:	bf04      	itt	eq
 800852a:	0100      	lsleq	r0, r0, #4
 800852c:	3304      	addeq	r3, #4
 800852e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008532:	bf04      	itt	eq
 8008534:	0080      	lsleq	r0, r0, #2
 8008536:	3302      	addeq	r3, #2
 8008538:	2800      	cmp	r0, #0
 800853a:	db05      	blt.n	8008548 <__hi0bits+0x38>
 800853c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008540:	f103 0301 	add.w	r3, r3, #1
 8008544:	bf08      	it	eq
 8008546:	2320      	moveq	r3, #32
 8008548:	4618      	mov	r0, r3
 800854a:	4770      	bx	lr
 800854c:	2300      	movs	r3, #0
 800854e:	e7e4      	b.n	800851a <__hi0bits+0xa>

08008550 <__lo0bits>:
 8008550:	6803      	ldr	r3, [r0, #0]
 8008552:	f013 0207 	ands.w	r2, r3, #7
 8008556:	4601      	mov	r1, r0
 8008558:	d00b      	beq.n	8008572 <__lo0bits+0x22>
 800855a:	07da      	lsls	r2, r3, #31
 800855c:	d424      	bmi.n	80085a8 <__lo0bits+0x58>
 800855e:	0798      	lsls	r0, r3, #30
 8008560:	bf49      	itett	mi
 8008562:	085b      	lsrmi	r3, r3, #1
 8008564:	089b      	lsrpl	r3, r3, #2
 8008566:	2001      	movmi	r0, #1
 8008568:	600b      	strmi	r3, [r1, #0]
 800856a:	bf5c      	itt	pl
 800856c:	600b      	strpl	r3, [r1, #0]
 800856e:	2002      	movpl	r0, #2
 8008570:	4770      	bx	lr
 8008572:	b298      	uxth	r0, r3
 8008574:	b9b0      	cbnz	r0, 80085a4 <__lo0bits+0x54>
 8008576:	0c1b      	lsrs	r3, r3, #16
 8008578:	2010      	movs	r0, #16
 800857a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800857e:	bf04      	itt	eq
 8008580:	0a1b      	lsreq	r3, r3, #8
 8008582:	3008      	addeq	r0, #8
 8008584:	071a      	lsls	r2, r3, #28
 8008586:	bf04      	itt	eq
 8008588:	091b      	lsreq	r3, r3, #4
 800858a:	3004      	addeq	r0, #4
 800858c:	079a      	lsls	r2, r3, #30
 800858e:	bf04      	itt	eq
 8008590:	089b      	lsreq	r3, r3, #2
 8008592:	3002      	addeq	r0, #2
 8008594:	07da      	lsls	r2, r3, #31
 8008596:	d403      	bmi.n	80085a0 <__lo0bits+0x50>
 8008598:	085b      	lsrs	r3, r3, #1
 800859a:	f100 0001 	add.w	r0, r0, #1
 800859e:	d005      	beq.n	80085ac <__lo0bits+0x5c>
 80085a0:	600b      	str	r3, [r1, #0]
 80085a2:	4770      	bx	lr
 80085a4:	4610      	mov	r0, r2
 80085a6:	e7e8      	b.n	800857a <__lo0bits+0x2a>
 80085a8:	2000      	movs	r0, #0
 80085aa:	4770      	bx	lr
 80085ac:	2020      	movs	r0, #32
 80085ae:	4770      	bx	lr

080085b0 <__i2b>:
 80085b0:	b510      	push	{r4, lr}
 80085b2:	460c      	mov	r4, r1
 80085b4:	2101      	movs	r1, #1
 80085b6:	f7ff feff 	bl	80083b8 <_Balloc>
 80085ba:	4602      	mov	r2, r0
 80085bc:	b928      	cbnz	r0, 80085ca <__i2b+0x1a>
 80085be:	4b05      	ldr	r3, [pc, #20]	; (80085d4 <__i2b+0x24>)
 80085c0:	4805      	ldr	r0, [pc, #20]	; (80085d8 <__i2b+0x28>)
 80085c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80085c6:	f000 fc9b 	bl	8008f00 <__assert_func>
 80085ca:	2301      	movs	r3, #1
 80085cc:	6144      	str	r4, [r0, #20]
 80085ce:	6103      	str	r3, [r0, #16]
 80085d0:	bd10      	pop	{r4, pc}
 80085d2:	bf00      	nop
 80085d4:	08009be7 	.word	0x08009be7
 80085d8:	08009bf8 	.word	0x08009bf8

080085dc <__multiply>:
 80085dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e0:	4614      	mov	r4, r2
 80085e2:	690a      	ldr	r2, [r1, #16]
 80085e4:	6923      	ldr	r3, [r4, #16]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	bfb8      	it	lt
 80085ea:	460b      	movlt	r3, r1
 80085ec:	460d      	mov	r5, r1
 80085ee:	bfbc      	itt	lt
 80085f0:	4625      	movlt	r5, r4
 80085f2:	461c      	movlt	r4, r3
 80085f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80085f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80085fc:	68ab      	ldr	r3, [r5, #8]
 80085fe:	6869      	ldr	r1, [r5, #4]
 8008600:	eb0a 0709 	add.w	r7, sl, r9
 8008604:	42bb      	cmp	r3, r7
 8008606:	b085      	sub	sp, #20
 8008608:	bfb8      	it	lt
 800860a:	3101      	addlt	r1, #1
 800860c:	f7ff fed4 	bl	80083b8 <_Balloc>
 8008610:	b930      	cbnz	r0, 8008620 <__multiply+0x44>
 8008612:	4602      	mov	r2, r0
 8008614:	4b42      	ldr	r3, [pc, #264]	; (8008720 <__multiply+0x144>)
 8008616:	4843      	ldr	r0, [pc, #268]	; (8008724 <__multiply+0x148>)
 8008618:	f240 115d 	movw	r1, #349	; 0x15d
 800861c:	f000 fc70 	bl	8008f00 <__assert_func>
 8008620:	f100 0614 	add.w	r6, r0, #20
 8008624:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008628:	4633      	mov	r3, r6
 800862a:	2200      	movs	r2, #0
 800862c:	4543      	cmp	r3, r8
 800862e:	d31e      	bcc.n	800866e <__multiply+0x92>
 8008630:	f105 0c14 	add.w	ip, r5, #20
 8008634:	f104 0314 	add.w	r3, r4, #20
 8008638:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800863c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008640:	9202      	str	r2, [sp, #8]
 8008642:	ebac 0205 	sub.w	r2, ip, r5
 8008646:	3a15      	subs	r2, #21
 8008648:	f022 0203 	bic.w	r2, r2, #3
 800864c:	3204      	adds	r2, #4
 800864e:	f105 0115 	add.w	r1, r5, #21
 8008652:	458c      	cmp	ip, r1
 8008654:	bf38      	it	cc
 8008656:	2204      	movcc	r2, #4
 8008658:	9201      	str	r2, [sp, #4]
 800865a:	9a02      	ldr	r2, [sp, #8]
 800865c:	9303      	str	r3, [sp, #12]
 800865e:	429a      	cmp	r2, r3
 8008660:	d808      	bhi.n	8008674 <__multiply+0x98>
 8008662:	2f00      	cmp	r7, #0
 8008664:	dc55      	bgt.n	8008712 <__multiply+0x136>
 8008666:	6107      	str	r7, [r0, #16]
 8008668:	b005      	add	sp, #20
 800866a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800866e:	f843 2b04 	str.w	r2, [r3], #4
 8008672:	e7db      	b.n	800862c <__multiply+0x50>
 8008674:	f8b3 a000 	ldrh.w	sl, [r3]
 8008678:	f1ba 0f00 	cmp.w	sl, #0
 800867c:	d020      	beq.n	80086c0 <__multiply+0xe4>
 800867e:	f105 0e14 	add.w	lr, r5, #20
 8008682:	46b1      	mov	r9, r6
 8008684:	2200      	movs	r2, #0
 8008686:	f85e 4b04 	ldr.w	r4, [lr], #4
 800868a:	f8d9 b000 	ldr.w	fp, [r9]
 800868e:	b2a1      	uxth	r1, r4
 8008690:	fa1f fb8b 	uxth.w	fp, fp
 8008694:	fb0a b101 	mla	r1, sl, r1, fp
 8008698:	4411      	add	r1, r2
 800869a:	f8d9 2000 	ldr.w	r2, [r9]
 800869e:	0c24      	lsrs	r4, r4, #16
 80086a0:	0c12      	lsrs	r2, r2, #16
 80086a2:	fb0a 2404 	mla	r4, sl, r4, r2
 80086a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80086aa:	b289      	uxth	r1, r1
 80086ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80086b0:	45f4      	cmp	ip, lr
 80086b2:	f849 1b04 	str.w	r1, [r9], #4
 80086b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80086ba:	d8e4      	bhi.n	8008686 <__multiply+0xaa>
 80086bc:	9901      	ldr	r1, [sp, #4]
 80086be:	5072      	str	r2, [r6, r1]
 80086c0:	9a03      	ldr	r2, [sp, #12]
 80086c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80086c6:	3304      	adds	r3, #4
 80086c8:	f1b9 0f00 	cmp.w	r9, #0
 80086cc:	d01f      	beq.n	800870e <__multiply+0x132>
 80086ce:	6834      	ldr	r4, [r6, #0]
 80086d0:	f105 0114 	add.w	r1, r5, #20
 80086d4:	46b6      	mov	lr, r6
 80086d6:	f04f 0a00 	mov.w	sl, #0
 80086da:	880a      	ldrh	r2, [r1, #0]
 80086dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80086e0:	fb09 b202 	mla	r2, r9, r2, fp
 80086e4:	4492      	add	sl, r2
 80086e6:	b2a4      	uxth	r4, r4
 80086e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80086ec:	f84e 4b04 	str.w	r4, [lr], #4
 80086f0:	f851 4b04 	ldr.w	r4, [r1], #4
 80086f4:	f8be 2000 	ldrh.w	r2, [lr]
 80086f8:	0c24      	lsrs	r4, r4, #16
 80086fa:	fb09 2404 	mla	r4, r9, r4, r2
 80086fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008702:	458c      	cmp	ip, r1
 8008704:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008708:	d8e7      	bhi.n	80086da <__multiply+0xfe>
 800870a:	9a01      	ldr	r2, [sp, #4]
 800870c:	50b4      	str	r4, [r6, r2]
 800870e:	3604      	adds	r6, #4
 8008710:	e7a3      	b.n	800865a <__multiply+0x7e>
 8008712:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1a5      	bne.n	8008666 <__multiply+0x8a>
 800871a:	3f01      	subs	r7, #1
 800871c:	e7a1      	b.n	8008662 <__multiply+0x86>
 800871e:	bf00      	nop
 8008720:	08009be7 	.word	0x08009be7
 8008724:	08009bf8 	.word	0x08009bf8

08008728 <__pow5mult>:
 8008728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800872c:	4615      	mov	r5, r2
 800872e:	f012 0203 	ands.w	r2, r2, #3
 8008732:	4606      	mov	r6, r0
 8008734:	460f      	mov	r7, r1
 8008736:	d007      	beq.n	8008748 <__pow5mult+0x20>
 8008738:	4c25      	ldr	r4, [pc, #148]	; (80087d0 <__pow5mult+0xa8>)
 800873a:	3a01      	subs	r2, #1
 800873c:	2300      	movs	r3, #0
 800873e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008742:	f7ff fe9b 	bl	800847c <__multadd>
 8008746:	4607      	mov	r7, r0
 8008748:	10ad      	asrs	r5, r5, #2
 800874a:	d03d      	beq.n	80087c8 <__pow5mult+0xa0>
 800874c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800874e:	b97c      	cbnz	r4, 8008770 <__pow5mult+0x48>
 8008750:	2010      	movs	r0, #16
 8008752:	f7ff fe1b 	bl	800838c <malloc>
 8008756:	4602      	mov	r2, r0
 8008758:	6270      	str	r0, [r6, #36]	; 0x24
 800875a:	b928      	cbnz	r0, 8008768 <__pow5mult+0x40>
 800875c:	4b1d      	ldr	r3, [pc, #116]	; (80087d4 <__pow5mult+0xac>)
 800875e:	481e      	ldr	r0, [pc, #120]	; (80087d8 <__pow5mult+0xb0>)
 8008760:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008764:	f000 fbcc 	bl	8008f00 <__assert_func>
 8008768:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800876c:	6004      	str	r4, [r0, #0]
 800876e:	60c4      	str	r4, [r0, #12]
 8008770:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008774:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008778:	b94c      	cbnz	r4, 800878e <__pow5mult+0x66>
 800877a:	f240 2171 	movw	r1, #625	; 0x271
 800877e:	4630      	mov	r0, r6
 8008780:	f7ff ff16 	bl	80085b0 <__i2b>
 8008784:	2300      	movs	r3, #0
 8008786:	f8c8 0008 	str.w	r0, [r8, #8]
 800878a:	4604      	mov	r4, r0
 800878c:	6003      	str	r3, [r0, #0]
 800878e:	f04f 0900 	mov.w	r9, #0
 8008792:	07eb      	lsls	r3, r5, #31
 8008794:	d50a      	bpl.n	80087ac <__pow5mult+0x84>
 8008796:	4639      	mov	r1, r7
 8008798:	4622      	mov	r2, r4
 800879a:	4630      	mov	r0, r6
 800879c:	f7ff ff1e 	bl	80085dc <__multiply>
 80087a0:	4639      	mov	r1, r7
 80087a2:	4680      	mov	r8, r0
 80087a4:	4630      	mov	r0, r6
 80087a6:	f7ff fe47 	bl	8008438 <_Bfree>
 80087aa:	4647      	mov	r7, r8
 80087ac:	106d      	asrs	r5, r5, #1
 80087ae:	d00b      	beq.n	80087c8 <__pow5mult+0xa0>
 80087b0:	6820      	ldr	r0, [r4, #0]
 80087b2:	b938      	cbnz	r0, 80087c4 <__pow5mult+0x9c>
 80087b4:	4622      	mov	r2, r4
 80087b6:	4621      	mov	r1, r4
 80087b8:	4630      	mov	r0, r6
 80087ba:	f7ff ff0f 	bl	80085dc <__multiply>
 80087be:	6020      	str	r0, [r4, #0]
 80087c0:	f8c0 9000 	str.w	r9, [r0]
 80087c4:	4604      	mov	r4, r0
 80087c6:	e7e4      	b.n	8008792 <__pow5mult+0x6a>
 80087c8:	4638      	mov	r0, r7
 80087ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ce:	bf00      	nop
 80087d0:	08009d48 	.word	0x08009d48
 80087d4:	08009b71 	.word	0x08009b71
 80087d8:	08009bf8 	.word	0x08009bf8

080087dc <__lshift>:
 80087dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e0:	460c      	mov	r4, r1
 80087e2:	6849      	ldr	r1, [r1, #4]
 80087e4:	6923      	ldr	r3, [r4, #16]
 80087e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087ea:	68a3      	ldr	r3, [r4, #8]
 80087ec:	4607      	mov	r7, r0
 80087ee:	4691      	mov	r9, r2
 80087f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087f4:	f108 0601 	add.w	r6, r8, #1
 80087f8:	42b3      	cmp	r3, r6
 80087fa:	db0b      	blt.n	8008814 <__lshift+0x38>
 80087fc:	4638      	mov	r0, r7
 80087fe:	f7ff fddb 	bl	80083b8 <_Balloc>
 8008802:	4605      	mov	r5, r0
 8008804:	b948      	cbnz	r0, 800881a <__lshift+0x3e>
 8008806:	4602      	mov	r2, r0
 8008808:	4b28      	ldr	r3, [pc, #160]	; (80088ac <__lshift+0xd0>)
 800880a:	4829      	ldr	r0, [pc, #164]	; (80088b0 <__lshift+0xd4>)
 800880c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008810:	f000 fb76 	bl	8008f00 <__assert_func>
 8008814:	3101      	adds	r1, #1
 8008816:	005b      	lsls	r3, r3, #1
 8008818:	e7ee      	b.n	80087f8 <__lshift+0x1c>
 800881a:	2300      	movs	r3, #0
 800881c:	f100 0114 	add.w	r1, r0, #20
 8008820:	f100 0210 	add.w	r2, r0, #16
 8008824:	4618      	mov	r0, r3
 8008826:	4553      	cmp	r3, sl
 8008828:	db33      	blt.n	8008892 <__lshift+0xb6>
 800882a:	6920      	ldr	r0, [r4, #16]
 800882c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008830:	f104 0314 	add.w	r3, r4, #20
 8008834:	f019 091f 	ands.w	r9, r9, #31
 8008838:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800883c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008840:	d02b      	beq.n	800889a <__lshift+0xbe>
 8008842:	f1c9 0e20 	rsb	lr, r9, #32
 8008846:	468a      	mov	sl, r1
 8008848:	2200      	movs	r2, #0
 800884a:	6818      	ldr	r0, [r3, #0]
 800884c:	fa00 f009 	lsl.w	r0, r0, r9
 8008850:	4302      	orrs	r2, r0
 8008852:	f84a 2b04 	str.w	r2, [sl], #4
 8008856:	f853 2b04 	ldr.w	r2, [r3], #4
 800885a:	459c      	cmp	ip, r3
 800885c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008860:	d8f3      	bhi.n	800884a <__lshift+0x6e>
 8008862:	ebac 0304 	sub.w	r3, ip, r4
 8008866:	3b15      	subs	r3, #21
 8008868:	f023 0303 	bic.w	r3, r3, #3
 800886c:	3304      	adds	r3, #4
 800886e:	f104 0015 	add.w	r0, r4, #21
 8008872:	4584      	cmp	ip, r0
 8008874:	bf38      	it	cc
 8008876:	2304      	movcc	r3, #4
 8008878:	50ca      	str	r2, [r1, r3]
 800887a:	b10a      	cbz	r2, 8008880 <__lshift+0xa4>
 800887c:	f108 0602 	add.w	r6, r8, #2
 8008880:	3e01      	subs	r6, #1
 8008882:	4638      	mov	r0, r7
 8008884:	612e      	str	r6, [r5, #16]
 8008886:	4621      	mov	r1, r4
 8008888:	f7ff fdd6 	bl	8008438 <_Bfree>
 800888c:	4628      	mov	r0, r5
 800888e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008892:	f842 0f04 	str.w	r0, [r2, #4]!
 8008896:	3301      	adds	r3, #1
 8008898:	e7c5      	b.n	8008826 <__lshift+0x4a>
 800889a:	3904      	subs	r1, #4
 800889c:	f853 2b04 	ldr.w	r2, [r3], #4
 80088a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80088a4:	459c      	cmp	ip, r3
 80088a6:	d8f9      	bhi.n	800889c <__lshift+0xc0>
 80088a8:	e7ea      	b.n	8008880 <__lshift+0xa4>
 80088aa:	bf00      	nop
 80088ac:	08009be7 	.word	0x08009be7
 80088b0:	08009bf8 	.word	0x08009bf8

080088b4 <__mcmp>:
 80088b4:	b530      	push	{r4, r5, lr}
 80088b6:	6902      	ldr	r2, [r0, #16]
 80088b8:	690c      	ldr	r4, [r1, #16]
 80088ba:	1b12      	subs	r2, r2, r4
 80088bc:	d10e      	bne.n	80088dc <__mcmp+0x28>
 80088be:	f100 0314 	add.w	r3, r0, #20
 80088c2:	3114      	adds	r1, #20
 80088c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80088c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80088cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80088d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80088d4:	42a5      	cmp	r5, r4
 80088d6:	d003      	beq.n	80088e0 <__mcmp+0x2c>
 80088d8:	d305      	bcc.n	80088e6 <__mcmp+0x32>
 80088da:	2201      	movs	r2, #1
 80088dc:	4610      	mov	r0, r2
 80088de:	bd30      	pop	{r4, r5, pc}
 80088e0:	4283      	cmp	r3, r0
 80088e2:	d3f3      	bcc.n	80088cc <__mcmp+0x18>
 80088e4:	e7fa      	b.n	80088dc <__mcmp+0x28>
 80088e6:	f04f 32ff 	mov.w	r2, #4294967295
 80088ea:	e7f7      	b.n	80088dc <__mcmp+0x28>

080088ec <__mdiff>:
 80088ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f0:	460c      	mov	r4, r1
 80088f2:	4606      	mov	r6, r0
 80088f4:	4611      	mov	r1, r2
 80088f6:	4620      	mov	r0, r4
 80088f8:	4617      	mov	r7, r2
 80088fa:	f7ff ffdb 	bl	80088b4 <__mcmp>
 80088fe:	1e05      	subs	r5, r0, #0
 8008900:	d110      	bne.n	8008924 <__mdiff+0x38>
 8008902:	4629      	mov	r1, r5
 8008904:	4630      	mov	r0, r6
 8008906:	f7ff fd57 	bl	80083b8 <_Balloc>
 800890a:	b930      	cbnz	r0, 800891a <__mdiff+0x2e>
 800890c:	4b39      	ldr	r3, [pc, #228]	; (80089f4 <__mdiff+0x108>)
 800890e:	4602      	mov	r2, r0
 8008910:	f240 2132 	movw	r1, #562	; 0x232
 8008914:	4838      	ldr	r0, [pc, #224]	; (80089f8 <__mdiff+0x10c>)
 8008916:	f000 faf3 	bl	8008f00 <__assert_func>
 800891a:	2301      	movs	r3, #1
 800891c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008924:	bfa4      	itt	ge
 8008926:	463b      	movge	r3, r7
 8008928:	4627      	movge	r7, r4
 800892a:	4630      	mov	r0, r6
 800892c:	6879      	ldr	r1, [r7, #4]
 800892e:	bfa6      	itte	ge
 8008930:	461c      	movge	r4, r3
 8008932:	2500      	movge	r5, #0
 8008934:	2501      	movlt	r5, #1
 8008936:	f7ff fd3f 	bl	80083b8 <_Balloc>
 800893a:	b920      	cbnz	r0, 8008946 <__mdiff+0x5a>
 800893c:	4b2d      	ldr	r3, [pc, #180]	; (80089f4 <__mdiff+0x108>)
 800893e:	4602      	mov	r2, r0
 8008940:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008944:	e7e6      	b.n	8008914 <__mdiff+0x28>
 8008946:	693e      	ldr	r6, [r7, #16]
 8008948:	60c5      	str	r5, [r0, #12]
 800894a:	6925      	ldr	r5, [r4, #16]
 800894c:	f107 0114 	add.w	r1, r7, #20
 8008950:	f104 0914 	add.w	r9, r4, #20
 8008954:	f100 0e14 	add.w	lr, r0, #20
 8008958:	f107 0210 	add.w	r2, r7, #16
 800895c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008960:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008964:	46f2      	mov	sl, lr
 8008966:	2700      	movs	r7, #0
 8008968:	f859 3b04 	ldr.w	r3, [r9], #4
 800896c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008970:	fa1f f883 	uxth.w	r8, r3
 8008974:	fa17 f78b 	uxtah	r7, r7, fp
 8008978:	0c1b      	lsrs	r3, r3, #16
 800897a:	eba7 0808 	sub.w	r8, r7, r8
 800897e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008982:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008986:	fa1f f888 	uxth.w	r8, r8
 800898a:	141f      	asrs	r7, r3, #16
 800898c:	454d      	cmp	r5, r9
 800898e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008992:	f84a 3b04 	str.w	r3, [sl], #4
 8008996:	d8e7      	bhi.n	8008968 <__mdiff+0x7c>
 8008998:	1b2b      	subs	r3, r5, r4
 800899a:	3b15      	subs	r3, #21
 800899c:	f023 0303 	bic.w	r3, r3, #3
 80089a0:	3304      	adds	r3, #4
 80089a2:	3415      	adds	r4, #21
 80089a4:	42a5      	cmp	r5, r4
 80089a6:	bf38      	it	cc
 80089a8:	2304      	movcc	r3, #4
 80089aa:	4419      	add	r1, r3
 80089ac:	4473      	add	r3, lr
 80089ae:	469e      	mov	lr, r3
 80089b0:	460d      	mov	r5, r1
 80089b2:	4565      	cmp	r5, ip
 80089b4:	d30e      	bcc.n	80089d4 <__mdiff+0xe8>
 80089b6:	f10c 0203 	add.w	r2, ip, #3
 80089ba:	1a52      	subs	r2, r2, r1
 80089bc:	f022 0203 	bic.w	r2, r2, #3
 80089c0:	3903      	subs	r1, #3
 80089c2:	458c      	cmp	ip, r1
 80089c4:	bf38      	it	cc
 80089c6:	2200      	movcc	r2, #0
 80089c8:	441a      	add	r2, r3
 80089ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80089ce:	b17b      	cbz	r3, 80089f0 <__mdiff+0x104>
 80089d0:	6106      	str	r6, [r0, #16]
 80089d2:	e7a5      	b.n	8008920 <__mdiff+0x34>
 80089d4:	f855 8b04 	ldr.w	r8, [r5], #4
 80089d8:	fa17 f488 	uxtah	r4, r7, r8
 80089dc:	1422      	asrs	r2, r4, #16
 80089de:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80089e2:	b2a4      	uxth	r4, r4
 80089e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80089e8:	f84e 4b04 	str.w	r4, [lr], #4
 80089ec:	1417      	asrs	r7, r2, #16
 80089ee:	e7e0      	b.n	80089b2 <__mdiff+0xc6>
 80089f0:	3e01      	subs	r6, #1
 80089f2:	e7ea      	b.n	80089ca <__mdiff+0xde>
 80089f4:	08009be7 	.word	0x08009be7
 80089f8:	08009bf8 	.word	0x08009bf8

080089fc <__d2b>:
 80089fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a00:	4689      	mov	r9, r1
 8008a02:	2101      	movs	r1, #1
 8008a04:	ec57 6b10 	vmov	r6, r7, d0
 8008a08:	4690      	mov	r8, r2
 8008a0a:	f7ff fcd5 	bl	80083b8 <_Balloc>
 8008a0e:	4604      	mov	r4, r0
 8008a10:	b930      	cbnz	r0, 8008a20 <__d2b+0x24>
 8008a12:	4602      	mov	r2, r0
 8008a14:	4b25      	ldr	r3, [pc, #148]	; (8008aac <__d2b+0xb0>)
 8008a16:	4826      	ldr	r0, [pc, #152]	; (8008ab0 <__d2b+0xb4>)
 8008a18:	f240 310a 	movw	r1, #778	; 0x30a
 8008a1c:	f000 fa70 	bl	8008f00 <__assert_func>
 8008a20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008a24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a28:	bb35      	cbnz	r5, 8008a78 <__d2b+0x7c>
 8008a2a:	2e00      	cmp	r6, #0
 8008a2c:	9301      	str	r3, [sp, #4]
 8008a2e:	d028      	beq.n	8008a82 <__d2b+0x86>
 8008a30:	4668      	mov	r0, sp
 8008a32:	9600      	str	r6, [sp, #0]
 8008a34:	f7ff fd8c 	bl	8008550 <__lo0bits>
 8008a38:	9900      	ldr	r1, [sp, #0]
 8008a3a:	b300      	cbz	r0, 8008a7e <__d2b+0x82>
 8008a3c:	9a01      	ldr	r2, [sp, #4]
 8008a3e:	f1c0 0320 	rsb	r3, r0, #32
 8008a42:	fa02 f303 	lsl.w	r3, r2, r3
 8008a46:	430b      	orrs	r3, r1
 8008a48:	40c2      	lsrs	r2, r0
 8008a4a:	6163      	str	r3, [r4, #20]
 8008a4c:	9201      	str	r2, [sp, #4]
 8008a4e:	9b01      	ldr	r3, [sp, #4]
 8008a50:	61a3      	str	r3, [r4, #24]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	bf14      	ite	ne
 8008a56:	2202      	movne	r2, #2
 8008a58:	2201      	moveq	r2, #1
 8008a5a:	6122      	str	r2, [r4, #16]
 8008a5c:	b1d5      	cbz	r5, 8008a94 <__d2b+0x98>
 8008a5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a62:	4405      	add	r5, r0
 8008a64:	f8c9 5000 	str.w	r5, [r9]
 8008a68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a6c:	f8c8 0000 	str.w	r0, [r8]
 8008a70:	4620      	mov	r0, r4
 8008a72:	b003      	add	sp, #12
 8008a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a7c:	e7d5      	b.n	8008a2a <__d2b+0x2e>
 8008a7e:	6161      	str	r1, [r4, #20]
 8008a80:	e7e5      	b.n	8008a4e <__d2b+0x52>
 8008a82:	a801      	add	r0, sp, #4
 8008a84:	f7ff fd64 	bl	8008550 <__lo0bits>
 8008a88:	9b01      	ldr	r3, [sp, #4]
 8008a8a:	6163      	str	r3, [r4, #20]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	6122      	str	r2, [r4, #16]
 8008a90:	3020      	adds	r0, #32
 8008a92:	e7e3      	b.n	8008a5c <__d2b+0x60>
 8008a94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a9c:	f8c9 0000 	str.w	r0, [r9]
 8008aa0:	6918      	ldr	r0, [r3, #16]
 8008aa2:	f7ff fd35 	bl	8008510 <__hi0bits>
 8008aa6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008aaa:	e7df      	b.n	8008a6c <__d2b+0x70>
 8008aac:	08009be7 	.word	0x08009be7
 8008ab0:	08009bf8 	.word	0x08009bf8

08008ab4 <_calloc_r>:
 8008ab4:	b513      	push	{r0, r1, r4, lr}
 8008ab6:	434a      	muls	r2, r1
 8008ab8:	4611      	mov	r1, r2
 8008aba:	9201      	str	r2, [sp, #4]
 8008abc:	f000 f85a 	bl	8008b74 <_malloc_r>
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	b118      	cbz	r0, 8008acc <_calloc_r+0x18>
 8008ac4:	9a01      	ldr	r2, [sp, #4]
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	f7fe f9e0 	bl	8006e8c <memset>
 8008acc:	4620      	mov	r0, r4
 8008ace:	b002      	add	sp, #8
 8008ad0:	bd10      	pop	{r4, pc}
	...

08008ad4 <_free_r>:
 8008ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ad6:	2900      	cmp	r1, #0
 8008ad8:	d048      	beq.n	8008b6c <_free_r+0x98>
 8008ada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ade:	9001      	str	r0, [sp, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ae6:	bfb8      	it	lt
 8008ae8:	18e4      	addlt	r4, r4, r3
 8008aea:	f000 fa65 	bl	8008fb8 <__malloc_lock>
 8008aee:	4a20      	ldr	r2, [pc, #128]	; (8008b70 <_free_r+0x9c>)
 8008af0:	9801      	ldr	r0, [sp, #4]
 8008af2:	6813      	ldr	r3, [r2, #0]
 8008af4:	4615      	mov	r5, r2
 8008af6:	b933      	cbnz	r3, 8008b06 <_free_r+0x32>
 8008af8:	6063      	str	r3, [r4, #4]
 8008afa:	6014      	str	r4, [r2, #0]
 8008afc:	b003      	add	sp, #12
 8008afe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b02:	f000 ba5f 	b.w	8008fc4 <__malloc_unlock>
 8008b06:	42a3      	cmp	r3, r4
 8008b08:	d90b      	bls.n	8008b22 <_free_r+0x4e>
 8008b0a:	6821      	ldr	r1, [r4, #0]
 8008b0c:	1862      	adds	r2, r4, r1
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	bf04      	itt	eq
 8008b12:	681a      	ldreq	r2, [r3, #0]
 8008b14:	685b      	ldreq	r3, [r3, #4]
 8008b16:	6063      	str	r3, [r4, #4]
 8008b18:	bf04      	itt	eq
 8008b1a:	1852      	addeq	r2, r2, r1
 8008b1c:	6022      	streq	r2, [r4, #0]
 8008b1e:	602c      	str	r4, [r5, #0]
 8008b20:	e7ec      	b.n	8008afc <_free_r+0x28>
 8008b22:	461a      	mov	r2, r3
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	b10b      	cbz	r3, 8008b2c <_free_r+0x58>
 8008b28:	42a3      	cmp	r3, r4
 8008b2a:	d9fa      	bls.n	8008b22 <_free_r+0x4e>
 8008b2c:	6811      	ldr	r1, [r2, #0]
 8008b2e:	1855      	adds	r5, r2, r1
 8008b30:	42a5      	cmp	r5, r4
 8008b32:	d10b      	bne.n	8008b4c <_free_r+0x78>
 8008b34:	6824      	ldr	r4, [r4, #0]
 8008b36:	4421      	add	r1, r4
 8008b38:	1854      	adds	r4, r2, r1
 8008b3a:	42a3      	cmp	r3, r4
 8008b3c:	6011      	str	r1, [r2, #0]
 8008b3e:	d1dd      	bne.n	8008afc <_free_r+0x28>
 8008b40:	681c      	ldr	r4, [r3, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	6053      	str	r3, [r2, #4]
 8008b46:	4421      	add	r1, r4
 8008b48:	6011      	str	r1, [r2, #0]
 8008b4a:	e7d7      	b.n	8008afc <_free_r+0x28>
 8008b4c:	d902      	bls.n	8008b54 <_free_r+0x80>
 8008b4e:	230c      	movs	r3, #12
 8008b50:	6003      	str	r3, [r0, #0]
 8008b52:	e7d3      	b.n	8008afc <_free_r+0x28>
 8008b54:	6825      	ldr	r5, [r4, #0]
 8008b56:	1961      	adds	r1, r4, r5
 8008b58:	428b      	cmp	r3, r1
 8008b5a:	bf04      	itt	eq
 8008b5c:	6819      	ldreq	r1, [r3, #0]
 8008b5e:	685b      	ldreq	r3, [r3, #4]
 8008b60:	6063      	str	r3, [r4, #4]
 8008b62:	bf04      	itt	eq
 8008b64:	1949      	addeq	r1, r1, r5
 8008b66:	6021      	streq	r1, [r4, #0]
 8008b68:	6054      	str	r4, [r2, #4]
 8008b6a:	e7c7      	b.n	8008afc <_free_r+0x28>
 8008b6c:	b003      	add	sp, #12
 8008b6e:	bd30      	pop	{r4, r5, pc}
 8008b70:	24000204 	.word	0x24000204

08008b74 <_malloc_r>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	1ccd      	adds	r5, r1, #3
 8008b78:	f025 0503 	bic.w	r5, r5, #3
 8008b7c:	3508      	adds	r5, #8
 8008b7e:	2d0c      	cmp	r5, #12
 8008b80:	bf38      	it	cc
 8008b82:	250c      	movcc	r5, #12
 8008b84:	2d00      	cmp	r5, #0
 8008b86:	4606      	mov	r6, r0
 8008b88:	db01      	blt.n	8008b8e <_malloc_r+0x1a>
 8008b8a:	42a9      	cmp	r1, r5
 8008b8c:	d903      	bls.n	8008b96 <_malloc_r+0x22>
 8008b8e:	230c      	movs	r3, #12
 8008b90:	6033      	str	r3, [r6, #0]
 8008b92:	2000      	movs	r0, #0
 8008b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b96:	f000 fa0f 	bl	8008fb8 <__malloc_lock>
 8008b9a:	4921      	ldr	r1, [pc, #132]	; (8008c20 <_malloc_r+0xac>)
 8008b9c:	680a      	ldr	r2, [r1, #0]
 8008b9e:	4614      	mov	r4, r2
 8008ba0:	b99c      	cbnz	r4, 8008bca <_malloc_r+0x56>
 8008ba2:	4f20      	ldr	r7, [pc, #128]	; (8008c24 <_malloc_r+0xb0>)
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	b923      	cbnz	r3, 8008bb2 <_malloc_r+0x3e>
 8008ba8:	4621      	mov	r1, r4
 8008baa:	4630      	mov	r0, r6
 8008bac:	f000 f998 	bl	8008ee0 <_sbrk_r>
 8008bb0:	6038      	str	r0, [r7, #0]
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	f000 f993 	bl	8008ee0 <_sbrk_r>
 8008bba:	1c43      	adds	r3, r0, #1
 8008bbc:	d123      	bne.n	8008c06 <_malloc_r+0x92>
 8008bbe:	230c      	movs	r3, #12
 8008bc0:	6033      	str	r3, [r6, #0]
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	f000 f9fe 	bl	8008fc4 <__malloc_unlock>
 8008bc8:	e7e3      	b.n	8008b92 <_malloc_r+0x1e>
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	1b5b      	subs	r3, r3, r5
 8008bce:	d417      	bmi.n	8008c00 <_malloc_r+0x8c>
 8008bd0:	2b0b      	cmp	r3, #11
 8008bd2:	d903      	bls.n	8008bdc <_malloc_r+0x68>
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	441c      	add	r4, r3
 8008bd8:	6025      	str	r5, [r4, #0]
 8008bda:	e004      	b.n	8008be6 <_malloc_r+0x72>
 8008bdc:	6863      	ldr	r3, [r4, #4]
 8008bde:	42a2      	cmp	r2, r4
 8008be0:	bf0c      	ite	eq
 8008be2:	600b      	streq	r3, [r1, #0]
 8008be4:	6053      	strne	r3, [r2, #4]
 8008be6:	4630      	mov	r0, r6
 8008be8:	f000 f9ec 	bl	8008fc4 <__malloc_unlock>
 8008bec:	f104 000b 	add.w	r0, r4, #11
 8008bf0:	1d23      	adds	r3, r4, #4
 8008bf2:	f020 0007 	bic.w	r0, r0, #7
 8008bf6:	1ac2      	subs	r2, r0, r3
 8008bf8:	d0cc      	beq.n	8008b94 <_malloc_r+0x20>
 8008bfa:	1a1b      	subs	r3, r3, r0
 8008bfc:	50a3      	str	r3, [r4, r2]
 8008bfe:	e7c9      	b.n	8008b94 <_malloc_r+0x20>
 8008c00:	4622      	mov	r2, r4
 8008c02:	6864      	ldr	r4, [r4, #4]
 8008c04:	e7cc      	b.n	8008ba0 <_malloc_r+0x2c>
 8008c06:	1cc4      	adds	r4, r0, #3
 8008c08:	f024 0403 	bic.w	r4, r4, #3
 8008c0c:	42a0      	cmp	r0, r4
 8008c0e:	d0e3      	beq.n	8008bd8 <_malloc_r+0x64>
 8008c10:	1a21      	subs	r1, r4, r0
 8008c12:	4630      	mov	r0, r6
 8008c14:	f000 f964 	bl	8008ee0 <_sbrk_r>
 8008c18:	3001      	adds	r0, #1
 8008c1a:	d1dd      	bne.n	8008bd8 <_malloc_r+0x64>
 8008c1c:	e7cf      	b.n	8008bbe <_malloc_r+0x4a>
 8008c1e:	bf00      	nop
 8008c20:	24000204 	.word	0x24000204
 8008c24:	24000208 	.word	0x24000208

08008c28 <__ssputs_r>:
 8008c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c2c:	688e      	ldr	r6, [r1, #8]
 8008c2e:	429e      	cmp	r6, r3
 8008c30:	4682      	mov	sl, r0
 8008c32:	460c      	mov	r4, r1
 8008c34:	4690      	mov	r8, r2
 8008c36:	461f      	mov	r7, r3
 8008c38:	d838      	bhi.n	8008cac <__ssputs_r+0x84>
 8008c3a:	898a      	ldrh	r2, [r1, #12]
 8008c3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c40:	d032      	beq.n	8008ca8 <__ssputs_r+0x80>
 8008c42:	6825      	ldr	r5, [r4, #0]
 8008c44:	6909      	ldr	r1, [r1, #16]
 8008c46:	eba5 0901 	sub.w	r9, r5, r1
 8008c4a:	6965      	ldr	r5, [r4, #20]
 8008c4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c54:	3301      	adds	r3, #1
 8008c56:	444b      	add	r3, r9
 8008c58:	106d      	asrs	r5, r5, #1
 8008c5a:	429d      	cmp	r5, r3
 8008c5c:	bf38      	it	cc
 8008c5e:	461d      	movcc	r5, r3
 8008c60:	0553      	lsls	r3, r2, #21
 8008c62:	d531      	bpl.n	8008cc8 <__ssputs_r+0xa0>
 8008c64:	4629      	mov	r1, r5
 8008c66:	f7ff ff85 	bl	8008b74 <_malloc_r>
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	b950      	cbnz	r0, 8008c84 <__ssputs_r+0x5c>
 8008c6e:	230c      	movs	r3, #12
 8008c70:	f8ca 3000 	str.w	r3, [sl]
 8008c74:	89a3      	ldrh	r3, [r4, #12]
 8008c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c7a:	81a3      	strh	r3, [r4, #12]
 8008c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c84:	6921      	ldr	r1, [r4, #16]
 8008c86:	464a      	mov	r2, r9
 8008c88:	f7ff fb88 	bl	800839c <memcpy>
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	6126      	str	r6, [r4, #16]
 8008c9a:	6165      	str	r5, [r4, #20]
 8008c9c:	444e      	add	r6, r9
 8008c9e:	eba5 0509 	sub.w	r5, r5, r9
 8008ca2:	6026      	str	r6, [r4, #0]
 8008ca4:	60a5      	str	r5, [r4, #8]
 8008ca6:	463e      	mov	r6, r7
 8008ca8:	42be      	cmp	r6, r7
 8008caa:	d900      	bls.n	8008cae <__ssputs_r+0x86>
 8008cac:	463e      	mov	r6, r7
 8008cae:	4632      	mov	r2, r6
 8008cb0:	6820      	ldr	r0, [r4, #0]
 8008cb2:	4641      	mov	r1, r8
 8008cb4:	f000 f966 	bl	8008f84 <memmove>
 8008cb8:	68a3      	ldr	r3, [r4, #8]
 8008cba:	6822      	ldr	r2, [r4, #0]
 8008cbc:	1b9b      	subs	r3, r3, r6
 8008cbe:	4432      	add	r2, r6
 8008cc0:	60a3      	str	r3, [r4, #8]
 8008cc2:	6022      	str	r2, [r4, #0]
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	e7db      	b.n	8008c80 <__ssputs_r+0x58>
 8008cc8:	462a      	mov	r2, r5
 8008cca:	f000 f981 	bl	8008fd0 <_realloc_r>
 8008cce:	4606      	mov	r6, r0
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	d1e1      	bne.n	8008c98 <__ssputs_r+0x70>
 8008cd4:	6921      	ldr	r1, [r4, #16]
 8008cd6:	4650      	mov	r0, sl
 8008cd8:	f7ff fefc 	bl	8008ad4 <_free_r>
 8008cdc:	e7c7      	b.n	8008c6e <__ssputs_r+0x46>
	...

08008ce0 <_svfiprintf_r>:
 8008ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce4:	4698      	mov	r8, r3
 8008ce6:	898b      	ldrh	r3, [r1, #12]
 8008ce8:	061b      	lsls	r3, r3, #24
 8008cea:	b09d      	sub	sp, #116	; 0x74
 8008cec:	4607      	mov	r7, r0
 8008cee:	460d      	mov	r5, r1
 8008cf0:	4614      	mov	r4, r2
 8008cf2:	d50e      	bpl.n	8008d12 <_svfiprintf_r+0x32>
 8008cf4:	690b      	ldr	r3, [r1, #16]
 8008cf6:	b963      	cbnz	r3, 8008d12 <_svfiprintf_r+0x32>
 8008cf8:	2140      	movs	r1, #64	; 0x40
 8008cfa:	f7ff ff3b 	bl	8008b74 <_malloc_r>
 8008cfe:	6028      	str	r0, [r5, #0]
 8008d00:	6128      	str	r0, [r5, #16]
 8008d02:	b920      	cbnz	r0, 8008d0e <_svfiprintf_r+0x2e>
 8008d04:	230c      	movs	r3, #12
 8008d06:	603b      	str	r3, [r7, #0]
 8008d08:	f04f 30ff 	mov.w	r0, #4294967295
 8008d0c:	e0d1      	b.n	8008eb2 <_svfiprintf_r+0x1d2>
 8008d0e:	2340      	movs	r3, #64	; 0x40
 8008d10:	616b      	str	r3, [r5, #20]
 8008d12:	2300      	movs	r3, #0
 8008d14:	9309      	str	r3, [sp, #36]	; 0x24
 8008d16:	2320      	movs	r3, #32
 8008d18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d20:	2330      	movs	r3, #48	; 0x30
 8008d22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ecc <_svfiprintf_r+0x1ec>
 8008d26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d2a:	f04f 0901 	mov.w	r9, #1
 8008d2e:	4623      	mov	r3, r4
 8008d30:	469a      	mov	sl, r3
 8008d32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d36:	b10a      	cbz	r2, 8008d3c <_svfiprintf_r+0x5c>
 8008d38:	2a25      	cmp	r2, #37	; 0x25
 8008d3a:	d1f9      	bne.n	8008d30 <_svfiprintf_r+0x50>
 8008d3c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d40:	d00b      	beq.n	8008d5a <_svfiprintf_r+0x7a>
 8008d42:	465b      	mov	r3, fp
 8008d44:	4622      	mov	r2, r4
 8008d46:	4629      	mov	r1, r5
 8008d48:	4638      	mov	r0, r7
 8008d4a:	f7ff ff6d 	bl	8008c28 <__ssputs_r>
 8008d4e:	3001      	adds	r0, #1
 8008d50:	f000 80aa 	beq.w	8008ea8 <_svfiprintf_r+0x1c8>
 8008d54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d56:	445a      	add	r2, fp
 8008d58:	9209      	str	r2, [sp, #36]	; 0x24
 8008d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 80a2 	beq.w	8008ea8 <_svfiprintf_r+0x1c8>
 8008d64:	2300      	movs	r3, #0
 8008d66:	f04f 32ff 	mov.w	r2, #4294967295
 8008d6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d6e:	f10a 0a01 	add.w	sl, sl, #1
 8008d72:	9304      	str	r3, [sp, #16]
 8008d74:	9307      	str	r3, [sp, #28]
 8008d76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d7a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d7c:	4654      	mov	r4, sl
 8008d7e:	2205      	movs	r2, #5
 8008d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d84:	4851      	ldr	r0, [pc, #324]	; (8008ecc <_svfiprintf_r+0x1ec>)
 8008d86:	f7f7 fab3 	bl	80002f0 <memchr>
 8008d8a:	9a04      	ldr	r2, [sp, #16]
 8008d8c:	b9d8      	cbnz	r0, 8008dc6 <_svfiprintf_r+0xe6>
 8008d8e:	06d0      	lsls	r0, r2, #27
 8008d90:	bf44      	itt	mi
 8008d92:	2320      	movmi	r3, #32
 8008d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d98:	0711      	lsls	r1, r2, #28
 8008d9a:	bf44      	itt	mi
 8008d9c:	232b      	movmi	r3, #43	; 0x2b
 8008d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008da2:	f89a 3000 	ldrb.w	r3, [sl]
 8008da6:	2b2a      	cmp	r3, #42	; 0x2a
 8008da8:	d015      	beq.n	8008dd6 <_svfiprintf_r+0xf6>
 8008daa:	9a07      	ldr	r2, [sp, #28]
 8008dac:	4654      	mov	r4, sl
 8008dae:	2000      	movs	r0, #0
 8008db0:	f04f 0c0a 	mov.w	ip, #10
 8008db4:	4621      	mov	r1, r4
 8008db6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dba:	3b30      	subs	r3, #48	; 0x30
 8008dbc:	2b09      	cmp	r3, #9
 8008dbe:	d94e      	bls.n	8008e5e <_svfiprintf_r+0x17e>
 8008dc0:	b1b0      	cbz	r0, 8008df0 <_svfiprintf_r+0x110>
 8008dc2:	9207      	str	r2, [sp, #28]
 8008dc4:	e014      	b.n	8008df0 <_svfiprintf_r+0x110>
 8008dc6:	eba0 0308 	sub.w	r3, r0, r8
 8008dca:	fa09 f303 	lsl.w	r3, r9, r3
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	9304      	str	r3, [sp, #16]
 8008dd2:	46a2      	mov	sl, r4
 8008dd4:	e7d2      	b.n	8008d7c <_svfiprintf_r+0x9c>
 8008dd6:	9b03      	ldr	r3, [sp, #12]
 8008dd8:	1d19      	adds	r1, r3, #4
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	9103      	str	r1, [sp, #12]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	bfbb      	ittet	lt
 8008de2:	425b      	neglt	r3, r3
 8008de4:	f042 0202 	orrlt.w	r2, r2, #2
 8008de8:	9307      	strge	r3, [sp, #28]
 8008dea:	9307      	strlt	r3, [sp, #28]
 8008dec:	bfb8      	it	lt
 8008dee:	9204      	strlt	r2, [sp, #16]
 8008df0:	7823      	ldrb	r3, [r4, #0]
 8008df2:	2b2e      	cmp	r3, #46	; 0x2e
 8008df4:	d10c      	bne.n	8008e10 <_svfiprintf_r+0x130>
 8008df6:	7863      	ldrb	r3, [r4, #1]
 8008df8:	2b2a      	cmp	r3, #42	; 0x2a
 8008dfa:	d135      	bne.n	8008e68 <_svfiprintf_r+0x188>
 8008dfc:	9b03      	ldr	r3, [sp, #12]
 8008dfe:	1d1a      	adds	r2, r3, #4
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	9203      	str	r2, [sp, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	bfb8      	it	lt
 8008e08:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e0c:	3402      	adds	r4, #2
 8008e0e:	9305      	str	r3, [sp, #20]
 8008e10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008edc <_svfiprintf_r+0x1fc>
 8008e14:	7821      	ldrb	r1, [r4, #0]
 8008e16:	2203      	movs	r2, #3
 8008e18:	4650      	mov	r0, sl
 8008e1a:	f7f7 fa69 	bl	80002f0 <memchr>
 8008e1e:	b140      	cbz	r0, 8008e32 <_svfiprintf_r+0x152>
 8008e20:	2340      	movs	r3, #64	; 0x40
 8008e22:	eba0 000a 	sub.w	r0, r0, sl
 8008e26:	fa03 f000 	lsl.w	r0, r3, r0
 8008e2a:	9b04      	ldr	r3, [sp, #16]
 8008e2c:	4303      	orrs	r3, r0
 8008e2e:	3401      	adds	r4, #1
 8008e30:	9304      	str	r3, [sp, #16]
 8008e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e36:	4826      	ldr	r0, [pc, #152]	; (8008ed0 <_svfiprintf_r+0x1f0>)
 8008e38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e3c:	2206      	movs	r2, #6
 8008e3e:	f7f7 fa57 	bl	80002f0 <memchr>
 8008e42:	2800      	cmp	r0, #0
 8008e44:	d038      	beq.n	8008eb8 <_svfiprintf_r+0x1d8>
 8008e46:	4b23      	ldr	r3, [pc, #140]	; (8008ed4 <_svfiprintf_r+0x1f4>)
 8008e48:	bb1b      	cbnz	r3, 8008e92 <_svfiprintf_r+0x1b2>
 8008e4a:	9b03      	ldr	r3, [sp, #12]
 8008e4c:	3307      	adds	r3, #7
 8008e4e:	f023 0307 	bic.w	r3, r3, #7
 8008e52:	3308      	adds	r3, #8
 8008e54:	9303      	str	r3, [sp, #12]
 8008e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e58:	4433      	add	r3, r6
 8008e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e5c:	e767      	b.n	8008d2e <_svfiprintf_r+0x4e>
 8008e5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e62:	460c      	mov	r4, r1
 8008e64:	2001      	movs	r0, #1
 8008e66:	e7a5      	b.n	8008db4 <_svfiprintf_r+0xd4>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	3401      	adds	r4, #1
 8008e6c:	9305      	str	r3, [sp, #20]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	f04f 0c0a 	mov.w	ip, #10
 8008e74:	4620      	mov	r0, r4
 8008e76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e7a:	3a30      	subs	r2, #48	; 0x30
 8008e7c:	2a09      	cmp	r2, #9
 8008e7e:	d903      	bls.n	8008e88 <_svfiprintf_r+0x1a8>
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d0c5      	beq.n	8008e10 <_svfiprintf_r+0x130>
 8008e84:	9105      	str	r1, [sp, #20]
 8008e86:	e7c3      	b.n	8008e10 <_svfiprintf_r+0x130>
 8008e88:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e7f0      	b.n	8008e74 <_svfiprintf_r+0x194>
 8008e92:	ab03      	add	r3, sp, #12
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	462a      	mov	r2, r5
 8008e98:	4b0f      	ldr	r3, [pc, #60]	; (8008ed8 <_svfiprintf_r+0x1f8>)
 8008e9a:	a904      	add	r1, sp, #16
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	f7fe f88f 	bl	8006fc0 <_printf_float>
 8008ea2:	1c42      	adds	r2, r0, #1
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	d1d6      	bne.n	8008e56 <_svfiprintf_r+0x176>
 8008ea8:	89ab      	ldrh	r3, [r5, #12]
 8008eaa:	065b      	lsls	r3, r3, #25
 8008eac:	f53f af2c 	bmi.w	8008d08 <_svfiprintf_r+0x28>
 8008eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eb2:	b01d      	add	sp, #116	; 0x74
 8008eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb8:	ab03      	add	r3, sp, #12
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	462a      	mov	r2, r5
 8008ebe:	4b06      	ldr	r3, [pc, #24]	; (8008ed8 <_svfiprintf_r+0x1f8>)
 8008ec0:	a904      	add	r1, sp, #16
 8008ec2:	4638      	mov	r0, r7
 8008ec4:	f7fe fb08 	bl	80074d8 <_printf_i>
 8008ec8:	e7eb      	b.n	8008ea2 <_svfiprintf_r+0x1c2>
 8008eca:	bf00      	nop
 8008ecc:	08009d54 	.word	0x08009d54
 8008ed0:	08009d5e 	.word	0x08009d5e
 8008ed4:	08006fc1 	.word	0x08006fc1
 8008ed8:	08008c29 	.word	0x08008c29
 8008edc:	08009d5a 	.word	0x08009d5a

08008ee0 <_sbrk_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4d06      	ldr	r5, [pc, #24]	; (8008efc <_sbrk_r+0x1c>)
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	4608      	mov	r0, r1
 8008eea:	602b      	str	r3, [r5, #0]
 8008eec:	f7f8 fb04 	bl	80014f8 <_sbrk>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	d102      	bne.n	8008efa <_sbrk_r+0x1a>
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	b103      	cbz	r3, 8008efa <_sbrk_r+0x1a>
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	24000334 	.word	0x24000334

08008f00 <__assert_func>:
 8008f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f02:	4614      	mov	r4, r2
 8008f04:	461a      	mov	r2, r3
 8008f06:	4b09      	ldr	r3, [pc, #36]	; (8008f2c <__assert_func+0x2c>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	68d8      	ldr	r0, [r3, #12]
 8008f0e:	b14c      	cbz	r4, 8008f24 <__assert_func+0x24>
 8008f10:	4b07      	ldr	r3, [pc, #28]	; (8008f30 <__assert_func+0x30>)
 8008f12:	9100      	str	r1, [sp, #0]
 8008f14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f18:	4906      	ldr	r1, [pc, #24]	; (8008f34 <__assert_func+0x34>)
 8008f1a:	462b      	mov	r3, r5
 8008f1c:	f000 f80e 	bl	8008f3c <fiprintf>
 8008f20:	f000 faa4 	bl	800946c <abort>
 8008f24:	4b04      	ldr	r3, [pc, #16]	; (8008f38 <__assert_func+0x38>)
 8008f26:	461c      	mov	r4, r3
 8008f28:	e7f3      	b.n	8008f12 <__assert_func+0x12>
 8008f2a:	bf00      	nop
 8008f2c:	24000010 	.word	0x24000010
 8008f30:	08009d65 	.word	0x08009d65
 8008f34:	08009d72 	.word	0x08009d72
 8008f38:	08009da0 	.word	0x08009da0

08008f3c <fiprintf>:
 8008f3c:	b40e      	push	{r1, r2, r3}
 8008f3e:	b503      	push	{r0, r1, lr}
 8008f40:	4601      	mov	r1, r0
 8008f42:	ab03      	add	r3, sp, #12
 8008f44:	4805      	ldr	r0, [pc, #20]	; (8008f5c <fiprintf+0x20>)
 8008f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f4a:	6800      	ldr	r0, [r0, #0]
 8008f4c:	9301      	str	r3, [sp, #4]
 8008f4e:	f000 f88f 	bl	8009070 <_vfiprintf_r>
 8008f52:	b002      	add	sp, #8
 8008f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f58:	b003      	add	sp, #12
 8008f5a:	4770      	bx	lr
 8008f5c:	24000010 	.word	0x24000010

08008f60 <__ascii_mbtowc>:
 8008f60:	b082      	sub	sp, #8
 8008f62:	b901      	cbnz	r1, 8008f66 <__ascii_mbtowc+0x6>
 8008f64:	a901      	add	r1, sp, #4
 8008f66:	b142      	cbz	r2, 8008f7a <__ascii_mbtowc+0x1a>
 8008f68:	b14b      	cbz	r3, 8008f7e <__ascii_mbtowc+0x1e>
 8008f6a:	7813      	ldrb	r3, [r2, #0]
 8008f6c:	600b      	str	r3, [r1, #0]
 8008f6e:	7812      	ldrb	r2, [r2, #0]
 8008f70:	1e10      	subs	r0, r2, #0
 8008f72:	bf18      	it	ne
 8008f74:	2001      	movne	r0, #1
 8008f76:	b002      	add	sp, #8
 8008f78:	4770      	bx	lr
 8008f7a:	4610      	mov	r0, r2
 8008f7c:	e7fb      	b.n	8008f76 <__ascii_mbtowc+0x16>
 8008f7e:	f06f 0001 	mvn.w	r0, #1
 8008f82:	e7f8      	b.n	8008f76 <__ascii_mbtowc+0x16>

08008f84 <memmove>:
 8008f84:	4288      	cmp	r0, r1
 8008f86:	b510      	push	{r4, lr}
 8008f88:	eb01 0402 	add.w	r4, r1, r2
 8008f8c:	d902      	bls.n	8008f94 <memmove+0x10>
 8008f8e:	4284      	cmp	r4, r0
 8008f90:	4623      	mov	r3, r4
 8008f92:	d807      	bhi.n	8008fa4 <memmove+0x20>
 8008f94:	1e43      	subs	r3, r0, #1
 8008f96:	42a1      	cmp	r1, r4
 8008f98:	d008      	beq.n	8008fac <memmove+0x28>
 8008f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fa2:	e7f8      	b.n	8008f96 <memmove+0x12>
 8008fa4:	4402      	add	r2, r0
 8008fa6:	4601      	mov	r1, r0
 8008fa8:	428a      	cmp	r2, r1
 8008faa:	d100      	bne.n	8008fae <memmove+0x2a>
 8008fac:	bd10      	pop	{r4, pc}
 8008fae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fb6:	e7f7      	b.n	8008fa8 <memmove+0x24>

08008fb8 <__malloc_lock>:
 8008fb8:	4801      	ldr	r0, [pc, #4]	; (8008fc0 <__malloc_lock+0x8>)
 8008fba:	f000 bc17 	b.w	80097ec <__retarget_lock_acquire_recursive>
 8008fbe:	bf00      	nop
 8008fc0:	2400033c 	.word	0x2400033c

08008fc4 <__malloc_unlock>:
 8008fc4:	4801      	ldr	r0, [pc, #4]	; (8008fcc <__malloc_unlock+0x8>)
 8008fc6:	f000 bc12 	b.w	80097ee <__retarget_lock_release_recursive>
 8008fca:	bf00      	nop
 8008fcc:	2400033c 	.word	0x2400033c

08008fd0 <_realloc_r>:
 8008fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd2:	4607      	mov	r7, r0
 8008fd4:	4614      	mov	r4, r2
 8008fd6:	460e      	mov	r6, r1
 8008fd8:	b921      	cbnz	r1, 8008fe4 <_realloc_r+0x14>
 8008fda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008fde:	4611      	mov	r1, r2
 8008fe0:	f7ff bdc8 	b.w	8008b74 <_malloc_r>
 8008fe4:	b922      	cbnz	r2, 8008ff0 <_realloc_r+0x20>
 8008fe6:	f7ff fd75 	bl	8008ad4 <_free_r>
 8008fea:	4625      	mov	r5, r4
 8008fec:	4628      	mov	r0, r5
 8008fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ff0:	f000 fc62 	bl	80098b8 <_malloc_usable_size_r>
 8008ff4:	42a0      	cmp	r0, r4
 8008ff6:	d20f      	bcs.n	8009018 <_realloc_r+0x48>
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	4638      	mov	r0, r7
 8008ffc:	f7ff fdba 	bl	8008b74 <_malloc_r>
 8009000:	4605      	mov	r5, r0
 8009002:	2800      	cmp	r0, #0
 8009004:	d0f2      	beq.n	8008fec <_realloc_r+0x1c>
 8009006:	4631      	mov	r1, r6
 8009008:	4622      	mov	r2, r4
 800900a:	f7ff f9c7 	bl	800839c <memcpy>
 800900e:	4631      	mov	r1, r6
 8009010:	4638      	mov	r0, r7
 8009012:	f7ff fd5f 	bl	8008ad4 <_free_r>
 8009016:	e7e9      	b.n	8008fec <_realloc_r+0x1c>
 8009018:	4635      	mov	r5, r6
 800901a:	e7e7      	b.n	8008fec <_realloc_r+0x1c>

0800901c <__sfputc_r>:
 800901c:	6893      	ldr	r3, [r2, #8]
 800901e:	3b01      	subs	r3, #1
 8009020:	2b00      	cmp	r3, #0
 8009022:	b410      	push	{r4}
 8009024:	6093      	str	r3, [r2, #8]
 8009026:	da08      	bge.n	800903a <__sfputc_r+0x1e>
 8009028:	6994      	ldr	r4, [r2, #24]
 800902a:	42a3      	cmp	r3, r4
 800902c:	db01      	blt.n	8009032 <__sfputc_r+0x16>
 800902e:	290a      	cmp	r1, #10
 8009030:	d103      	bne.n	800903a <__sfputc_r+0x1e>
 8009032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009036:	f000 b94b 	b.w	80092d0 <__swbuf_r>
 800903a:	6813      	ldr	r3, [r2, #0]
 800903c:	1c58      	adds	r0, r3, #1
 800903e:	6010      	str	r0, [r2, #0]
 8009040:	7019      	strb	r1, [r3, #0]
 8009042:	4608      	mov	r0, r1
 8009044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009048:	4770      	bx	lr

0800904a <__sfputs_r>:
 800904a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904c:	4606      	mov	r6, r0
 800904e:	460f      	mov	r7, r1
 8009050:	4614      	mov	r4, r2
 8009052:	18d5      	adds	r5, r2, r3
 8009054:	42ac      	cmp	r4, r5
 8009056:	d101      	bne.n	800905c <__sfputs_r+0x12>
 8009058:	2000      	movs	r0, #0
 800905a:	e007      	b.n	800906c <__sfputs_r+0x22>
 800905c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009060:	463a      	mov	r2, r7
 8009062:	4630      	mov	r0, r6
 8009064:	f7ff ffda 	bl	800901c <__sfputc_r>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	d1f3      	bne.n	8009054 <__sfputs_r+0xa>
 800906c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009070 <_vfiprintf_r>:
 8009070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009074:	460d      	mov	r5, r1
 8009076:	b09d      	sub	sp, #116	; 0x74
 8009078:	4614      	mov	r4, r2
 800907a:	4698      	mov	r8, r3
 800907c:	4606      	mov	r6, r0
 800907e:	b118      	cbz	r0, 8009088 <_vfiprintf_r+0x18>
 8009080:	6983      	ldr	r3, [r0, #24]
 8009082:	b90b      	cbnz	r3, 8009088 <_vfiprintf_r+0x18>
 8009084:	f000 fb14 	bl	80096b0 <__sinit>
 8009088:	4b89      	ldr	r3, [pc, #548]	; (80092b0 <_vfiprintf_r+0x240>)
 800908a:	429d      	cmp	r5, r3
 800908c:	d11b      	bne.n	80090c6 <_vfiprintf_r+0x56>
 800908e:	6875      	ldr	r5, [r6, #4]
 8009090:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009092:	07d9      	lsls	r1, r3, #31
 8009094:	d405      	bmi.n	80090a2 <_vfiprintf_r+0x32>
 8009096:	89ab      	ldrh	r3, [r5, #12]
 8009098:	059a      	lsls	r2, r3, #22
 800909a:	d402      	bmi.n	80090a2 <_vfiprintf_r+0x32>
 800909c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800909e:	f000 fba5 	bl	80097ec <__retarget_lock_acquire_recursive>
 80090a2:	89ab      	ldrh	r3, [r5, #12]
 80090a4:	071b      	lsls	r3, r3, #28
 80090a6:	d501      	bpl.n	80090ac <_vfiprintf_r+0x3c>
 80090a8:	692b      	ldr	r3, [r5, #16]
 80090aa:	b9eb      	cbnz	r3, 80090e8 <_vfiprintf_r+0x78>
 80090ac:	4629      	mov	r1, r5
 80090ae:	4630      	mov	r0, r6
 80090b0:	f000 f96e 	bl	8009390 <__swsetup_r>
 80090b4:	b1c0      	cbz	r0, 80090e8 <_vfiprintf_r+0x78>
 80090b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090b8:	07dc      	lsls	r4, r3, #31
 80090ba:	d50e      	bpl.n	80090da <_vfiprintf_r+0x6a>
 80090bc:	f04f 30ff 	mov.w	r0, #4294967295
 80090c0:	b01d      	add	sp, #116	; 0x74
 80090c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c6:	4b7b      	ldr	r3, [pc, #492]	; (80092b4 <_vfiprintf_r+0x244>)
 80090c8:	429d      	cmp	r5, r3
 80090ca:	d101      	bne.n	80090d0 <_vfiprintf_r+0x60>
 80090cc:	68b5      	ldr	r5, [r6, #8]
 80090ce:	e7df      	b.n	8009090 <_vfiprintf_r+0x20>
 80090d0:	4b79      	ldr	r3, [pc, #484]	; (80092b8 <_vfiprintf_r+0x248>)
 80090d2:	429d      	cmp	r5, r3
 80090d4:	bf08      	it	eq
 80090d6:	68f5      	ldreq	r5, [r6, #12]
 80090d8:	e7da      	b.n	8009090 <_vfiprintf_r+0x20>
 80090da:	89ab      	ldrh	r3, [r5, #12]
 80090dc:	0598      	lsls	r0, r3, #22
 80090de:	d4ed      	bmi.n	80090bc <_vfiprintf_r+0x4c>
 80090e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090e2:	f000 fb84 	bl	80097ee <__retarget_lock_release_recursive>
 80090e6:	e7e9      	b.n	80090bc <_vfiprintf_r+0x4c>
 80090e8:	2300      	movs	r3, #0
 80090ea:	9309      	str	r3, [sp, #36]	; 0x24
 80090ec:	2320      	movs	r3, #32
 80090ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80090f6:	2330      	movs	r3, #48	; 0x30
 80090f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80092bc <_vfiprintf_r+0x24c>
 80090fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009100:	f04f 0901 	mov.w	r9, #1
 8009104:	4623      	mov	r3, r4
 8009106:	469a      	mov	sl, r3
 8009108:	f813 2b01 	ldrb.w	r2, [r3], #1
 800910c:	b10a      	cbz	r2, 8009112 <_vfiprintf_r+0xa2>
 800910e:	2a25      	cmp	r2, #37	; 0x25
 8009110:	d1f9      	bne.n	8009106 <_vfiprintf_r+0x96>
 8009112:	ebba 0b04 	subs.w	fp, sl, r4
 8009116:	d00b      	beq.n	8009130 <_vfiprintf_r+0xc0>
 8009118:	465b      	mov	r3, fp
 800911a:	4622      	mov	r2, r4
 800911c:	4629      	mov	r1, r5
 800911e:	4630      	mov	r0, r6
 8009120:	f7ff ff93 	bl	800904a <__sfputs_r>
 8009124:	3001      	adds	r0, #1
 8009126:	f000 80aa 	beq.w	800927e <_vfiprintf_r+0x20e>
 800912a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800912c:	445a      	add	r2, fp
 800912e:	9209      	str	r2, [sp, #36]	; 0x24
 8009130:	f89a 3000 	ldrb.w	r3, [sl]
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 80a2 	beq.w	800927e <_vfiprintf_r+0x20e>
 800913a:	2300      	movs	r3, #0
 800913c:	f04f 32ff 	mov.w	r2, #4294967295
 8009140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009144:	f10a 0a01 	add.w	sl, sl, #1
 8009148:	9304      	str	r3, [sp, #16]
 800914a:	9307      	str	r3, [sp, #28]
 800914c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009150:	931a      	str	r3, [sp, #104]	; 0x68
 8009152:	4654      	mov	r4, sl
 8009154:	2205      	movs	r2, #5
 8009156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800915a:	4858      	ldr	r0, [pc, #352]	; (80092bc <_vfiprintf_r+0x24c>)
 800915c:	f7f7 f8c8 	bl	80002f0 <memchr>
 8009160:	9a04      	ldr	r2, [sp, #16]
 8009162:	b9d8      	cbnz	r0, 800919c <_vfiprintf_r+0x12c>
 8009164:	06d1      	lsls	r1, r2, #27
 8009166:	bf44      	itt	mi
 8009168:	2320      	movmi	r3, #32
 800916a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800916e:	0713      	lsls	r3, r2, #28
 8009170:	bf44      	itt	mi
 8009172:	232b      	movmi	r3, #43	; 0x2b
 8009174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009178:	f89a 3000 	ldrb.w	r3, [sl]
 800917c:	2b2a      	cmp	r3, #42	; 0x2a
 800917e:	d015      	beq.n	80091ac <_vfiprintf_r+0x13c>
 8009180:	9a07      	ldr	r2, [sp, #28]
 8009182:	4654      	mov	r4, sl
 8009184:	2000      	movs	r0, #0
 8009186:	f04f 0c0a 	mov.w	ip, #10
 800918a:	4621      	mov	r1, r4
 800918c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009190:	3b30      	subs	r3, #48	; 0x30
 8009192:	2b09      	cmp	r3, #9
 8009194:	d94e      	bls.n	8009234 <_vfiprintf_r+0x1c4>
 8009196:	b1b0      	cbz	r0, 80091c6 <_vfiprintf_r+0x156>
 8009198:	9207      	str	r2, [sp, #28]
 800919a:	e014      	b.n	80091c6 <_vfiprintf_r+0x156>
 800919c:	eba0 0308 	sub.w	r3, r0, r8
 80091a0:	fa09 f303 	lsl.w	r3, r9, r3
 80091a4:	4313      	orrs	r3, r2
 80091a6:	9304      	str	r3, [sp, #16]
 80091a8:	46a2      	mov	sl, r4
 80091aa:	e7d2      	b.n	8009152 <_vfiprintf_r+0xe2>
 80091ac:	9b03      	ldr	r3, [sp, #12]
 80091ae:	1d19      	adds	r1, r3, #4
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	9103      	str	r1, [sp, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	bfbb      	ittet	lt
 80091b8:	425b      	neglt	r3, r3
 80091ba:	f042 0202 	orrlt.w	r2, r2, #2
 80091be:	9307      	strge	r3, [sp, #28]
 80091c0:	9307      	strlt	r3, [sp, #28]
 80091c2:	bfb8      	it	lt
 80091c4:	9204      	strlt	r2, [sp, #16]
 80091c6:	7823      	ldrb	r3, [r4, #0]
 80091c8:	2b2e      	cmp	r3, #46	; 0x2e
 80091ca:	d10c      	bne.n	80091e6 <_vfiprintf_r+0x176>
 80091cc:	7863      	ldrb	r3, [r4, #1]
 80091ce:	2b2a      	cmp	r3, #42	; 0x2a
 80091d0:	d135      	bne.n	800923e <_vfiprintf_r+0x1ce>
 80091d2:	9b03      	ldr	r3, [sp, #12]
 80091d4:	1d1a      	adds	r2, r3, #4
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	9203      	str	r2, [sp, #12]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	bfb8      	it	lt
 80091de:	f04f 33ff 	movlt.w	r3, #4294967295
 80091e2:	3402      	adds	r4, #2
 80091e4:	9305      	str	r3, [sp, #20]
 80091e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80092cc <_vfiprintf_r+0x25c>
 80091ea:	7821      	ldrb	r1, [r4, #0]
 80091ec:	2203      	movs	r2, #3
 80091ee:	4650      	mov	r0, sl
 80091f0:	f7f7 f87e 	bl	80002f0 <memchr>
 80091f4:	b140      	cbz	r0, 8009208 <_vfiprintf_r+0x198>
 80091f6:	2340      	movs	r3, #64	; 0x40
 80091f8:	eba0 000a 	sub.w	r0, r0, sl
 80091fc:	fa03 f000 	lsl.w	r0, r3, r0
 8009200:	9b04      	ldr	r3, [sp, #16]
 8009202:	4303      	orrs	r3, r0
 8009204:	3401      	adds	r4, #1
 8009206:	9304      	str	r3, [sp, #16]
 8009208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800920c:	482c      	ldr	r0, [pc, #176]	; (80092c0 <_vfiprintf_r+0x250>)
 800920e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009212:	2206      	movs	r2, #6
 8009214:	f7f7 f86c 	bl	80002f0 <memchr>
 8009218:	2800      	cmp	r0, #0
 800921a:	d03f      	beq.n	800929c <_vfiprintf_r+0x22c>
 800921c:	4b29      	ldr	r3, [pc, #164]	; (80092c4 <_vfiprintf_r+0x254>)
 800921e:	bb1b      	cbnz	r3, 8009268 <_vfiprintf_r+0x1f8>
 8009220:	9b03      	ldr	r3, [sp, #12]
 8009222:	3307      	adds	r3, #7
 8009224:	f023 0307 	bic.w	r3, r3, #7
 8009228:	3308      	adds	r3, #8
 800922a:	9303      	str	r3, [sp, #12]
 800922c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800922e:	443b      	add	r3, r7
 8009230:	9309      	str	r3, [sp, #36]	; 0x24
 8009232:	e767      	b.n	8009104 <_vfiprintf_r+0x94>
 8009234:	fb0c 3202 	mla	r2, ip, r2, r3
 8009238:	460c      	mov	r4, r1
 800923a:	2001      	movs	r0, #1
 800923c:	e7a5      	b.n	800918a <_vfiprintf_r+0x11a>
 800923e:	2300      	movs	r3, #0
 8009240:	3401      	adds	r4, #1
 8009242:	9305      	str	r3, [sp, #20]
 8009244:	4619      	mov	r1, r3
 8009246:	f04f 0c0a 	mov.w	ip, #10
 800924a:	4620      	mov	r0, r4
 800924c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009250:	3a30      	subs	r2, #48	; 0x30
 8009252:	2a09      	cmp	r2, #9
 8009254:	d903      	bls.n	800925e <_vfiprintf_r+0x1ee>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0c5      	beq.n	80091e6 <_vfiprintf_r+0x176>
 800925a:	9105      	str	r1, [sp, #20]
 800925c:	e7c3      	b.n	80091e6 <_vfiprintf_r+0x176>
 800925e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009262:	4604      	mov	r4, r0
 8009264:	2301      	movs	r3, #1
 8009266:	e7f0      	b.n	800924a <_vfiprintf_r+0x1da>
 8009268:	ab03      	add	r3, sp, #12
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	462a      	mov	r2, r5
 800926e:	4b16      	ldr	r3, [pc, #88]	; (80092c8 <_vfiprintf_r+0x258>)
 8009270:	a904      	add	r1, sp, #16
 8009272:	4630      	mov	r0, r6
 8009274:	f7fd fea4 	bl	8006fc0 <_printf_float>
 8009278:	4607      	mov	r7, r0
 800927a:	1c78      	adds	r0, r7, #1
 800927c:	d1d6      	bne.n	800922c <_vfiprintf_r+0x1bc>
 800927e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009280:	07d9      	lsls	r1, r3, #31
 8009282:	d405      	bmi.n	8009290 <_vfiprintf_r+0x220>
 8009284:	89ab      	ldrh	r3, [r5, #12]
 8009286:	059a      	lsls	r2, r3, #22
 8009288:	d402      	bmi.n	8009290 <_vfiprintf_r+0x220>
 800928a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800928c:	f000 faaf 	bl	80097ee <__retarget_lock_release_recursive>
 8009290:	89ab      	ldrh	r3, [r5, #12]
 8009292:	065b      	lsls	r3, r3, #25
 8009294:	f53f af12 	bmi.w	80090bc <_vfiprintf_r+0x4c>
 8009298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800929a:	e711      	b.n	80090c0 <_vfiprintf_r+0x50>
 800929c:	ab03      	add	r3, sp, #12
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	462a      	mov	r2, r5
 80092a2:	4b09      	ldr	r3, [pc, #36]	; (80092c8 <_vfiprintf_r+0x258>)
 80092a4:	a904      	add	r1, sp, #16
 80092a6:	4630      	mov	r0, r6
 80092a8:	f7fe f916 	bl	80074d8 <_printf_i>
 80092ac:	e7e4      	b.n	8009278 <_vfiprintf_r+0x208>
 80092ae:	bf00      	nop
 80092b0:	08009ecc 	.word	0x08009ecc
 80092b4:	08009eec 	.word	0x08009eec
 80092b8:	08009eac 	.word	0x08009eac
 80092bc:	08009d54 	.word	0x08009d54
 80092c0:	08009d5e 	.word	0x08009d5e
 80092c4:	08006fc1 	.word	0x08006fc1
 80092c8:	0800904b 	.word	0x0800904b
 80092cc:	08009d5a 	.word	0x08009d5a

080092d0 <__swbuf_r>:
 80092d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d2:	460e      	mov	r6, r1
 80092d4:	4614      	mov	r4, r2
 80092d6:	4605      	mov	r5, r0
 80092d8:	b118      	cbz	r0, 80092e2 <__swbuf_r+0x12>
 80092da:	6983      	ldr	r3, [r0, #24]
 80092dc:	b90b      	cbnz	r3, 80092e2 <__swbuf_r+0x12>
 80092de:	f000 f9e7 	bl	80096b0 <__sinit>
 80092e2:	4b21      	ldr	r3, [pc, #132]	; (8009368 <__swbuf_r+0x98>)
 80092e4:	429c      	cmp	r4, r3
 80092e6:	d12b      	bne.n	8009340 <__swbuf_r+0x70>
 80092e8:	686c      	ldr	r4, [r5, #4]
 80092ea:	69a3      	ldr	r3, [r4, #24]
 80092ec:	60a3      	str	r3, [r4, #8]
 80092ee:	89a3      	ldrh	r3, [r4, #12]
 80092f0:	071a      	lsls	r2, r3, #28
 80092f2:	d52f      	bpl.n	8009354 <__swbuf_r+0x84>
 80092f4:	6923      	ldr	r3, [r4, #16]
 80092f6:	b36b      	cbz	r3, 8009354 <__swbuf_r+0x84>
 80092f8:	6923      	ldr	r3, [r4, #16]
 80092fa:	6820      	ldr	r0, [r4, #0]
 80092fc:	1ac0      	subs	r0, r0, r3
 80092fe:	6963      	ldr	r3, [r4, #20]
 8009300:	b2f6      	uxtb	r6, r6
 8009302:	4283      	cmp	r3, r0
 8009304:	4637      	mov	r7, r6
 8009306:	dc04      	bgt.n	8009312 <__swbuf_r+0x42>
 8009308:	4621      	mov	r1, r4
 800930a:	4628      	mov	r0, r5
 800930c:	f000 f93c 	bl	8009588 <_fflush_r>
 8009310:	bb30      	cbnz	r0, 8009360 <__swbuf_r+0x90>
 8009312:	68a3      	ldr	r3, [r4, #8]
 8009314:	3b01      	subs	r3, #1
 8009316:	60a3      	str	r3, [r4, #8]
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	6022      	str	r2, [r4, #0]
 800931e:	701e      	strb	r6, [r3, #0]
 8009320:	6963      	ldr	r3, [r4, #20]
 8009322:	3001      	adds	r0, #1
 8009324:	4283      	cmp	r3, r0
 8009326:	d004      	beq.n	8009332 <__swbuf_r+0x62>
 8009328:	89a3      	ldrh	r3, [r4, #12]
 800932a:	07db      	lsls	r3, r3, #31
 800932c:	d506      	bpl.n	800933c <__swbuf_r+0x6c>
 800932e:	2e0a      	cmp	r6, #10
 8009330:	d104      	bne.n	800933c <__swbuf_r+0x6c>
 8009332:	4621      	mov	r1, r4
 8009334:	4628      	mov	r0, r5
 8009336:	f000 f927 	bl	8009588 <_fflush_r>
 800933a:	b988      	cbnz	r0, 8009360 <__swbuf_r+0x90>
 800933c:	4638      	mov	r0, r7
 800933e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009340:	4b0a      	ldr	r3, [pc, #40]	; (800936c <__swbuf_r+0x9c>)
 8009342:	429c      	cmp	r4, r3
 8009344:	d101      	bne.n	800934a <__swbuf_r+0x7a>
 8009346:	68ac      	ldr	r4, [r5, #8]
 8009348:	e7cf      	b.n	80092ea <__swbuf_r+0x1a>
 800934a:	4b09      	ldr	r3, [pc, #36]	; (8009370 <__swbuf_r+0xa0>)
 800934c:	429c      	cmp	r4, r3
 800934e:	bf08      	it	eq
 8009350:	68ec      	ldreq	r4, [r5, #12]
 8009352:	e7ca      	b.n	80092ea <__swbuf_r+0x1a>
 8009354:	4621      	mov	r1, r4
 8009356:	4628      	mov	r0, r5
 8009358:	f000 f81a 	bl	8009390 <__swsetup_r>
 800935c:	2800      	cmp	r0, #0
 800935e:	d0cb      	beq.n	80092f8 <__swbuf_r+0x28>
 8009360:	f04f 37ff 	mov.w	r7, #4294967295
 8009364:	e7ea      	b.n	800933c <__swbuf_r+0x6c>
 8009366:	bf00      	nop
 8009368:	08009ecc 	.word	0x08009ecc
 800936c:	08009eec 	.word	0x08009eec
 8009370:	08009eac 	.word	0x08009eac

08009374 <__ascii_wctomb>:
 8009374:	b149      	cbz	r1, 800938a <__ascii_wctomb+0x16>
 8009376:	2aff      	cmp	r2, #255	; 0xff
 8009378:	bf85      	ittet	hi
 800937a:	238a      	movhi	r3, #138	; 0x8a
 800937c:	6003      	strhi	r3, [r0, #0]
 800937e:	700a      	strbls	r2, [r1, #0]
 8009380:	f04f 30ff 	movhi.w	r0, #4294967295
 8009384:	bf98      	it	ls
 8009386:	2001      	movls	r0, #1
 8009388:	4770      	bx	lr
 800938a:	4608      	mov	r0, r1
 800938c:	4770      	bx	lr
	...

08009390 <__swsetup_r>:
 8009390:	4b32      	ldr	r3, [pc, #200]	; (800945c <__swsetup_r+0xcc>)
 8009392:	b570      	push	{r4, r5, r6, lr}
 8009394:	681d      	ldr	r5, [r3, #0]
 8009396:	4606      	mov	r6, r0
 8009398:	460c      	mov	r4, r1
 800939a:	b125      	cbz	r5, 80093a6 <__swsetup_r+0x16>
 800939c:	69ab      	ldr	r3, [r5, #24]
 800939e:	b913      	cbnz	r3, 80093a6 <__swsetup_r+0x16>
 80093a0:	4628      	mov	r0, r5
 80093a2:	f000 f985 	bl	80096b0 <__sinit>
 80093a6:	4b2e      	ldr	r3, [pc, #184]	; (8009460 <__swsetup_r+0xd0>)
 80093a8:	429c      	cmp	r4, r3
 80093aa:	d10f      	bne.n	80093cc <__swsetup_r+0x3c>
 80093ac:	686c      	ldr	r4, [r5, #4]
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093b4:	0719      	lsls	r1, r3, #28
 80093b6:	d42c      	bmi.n	8009412 <__swsetup_r+0x82>
 80093b8:	06dd      	lsls	r5, r3, #27
 80093ba:	d411      	bmi.n	80093e0 <__swsetup_r+0x50>
 80093bc:	2309      	movs	r3, #9
 80093be:	6033      	str	r3, [r6, #0]
 80093c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093c4:	81a3      	strh	r3, [r4, #12]
 80093c6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ca:	e03e      	b.n	800944a <__swsetup_r+0xba>
 80093cc:	4b25      	ldr	r3, [pc, #148]	; (8009464 <__swsetup_r+0xd4>)
 80093ce:	429c      	cmp	r4, r3
 80093d0:	d101      	bne.n	80093d6 <__swsetup_r+0x46>
 80093d2:	68ac      	ldr	r4, [r5, #8]
 80093d4:	e7eb      	b.n	80093ae <__swsetup_r+0x1e>
 80093d6:	4b24      	ldr	r3, [pc, #144]	; (8009468 <__swsetup_r+0xd8>)
 80093d8:	429c      	cmp	r4, r3
 80093da:	bf08      	it	eq
 80093dc:	68ec      	ldreq	r4, [r5, #12]
 80093de:	e7e6      	b.n	80093ae <__swsetup_r+0x1e>
 80093e0:	0758      	lsls	r0, r3, #29
 80093e2:	d512      	bpl.n	800940a <__swsetup_r+0x7a>
 80093e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093e6:	b141      	cbz	r1, 80093fa <__swsetup_r+0x6a>
 80093e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093ec:	4299      	cmp	r1, r3
 80093ee:	d002      	beq.n	80093f6 <__swsetup_r+0x66>
 80093f0:	4630      	mov	r0, r6
 80093f2:	f7ff fb6f 	bl	8008ad4 <_free_r>
 80093f6:	2300      	movs	r3, #0
 80093f8:	6363      	str	r3, [r4, #52]	; 0x34
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009400:	81a3      	strh	r3, [r4, #12]
 8009402:	2300      	movs	r3, #0
 8009404:	6063      	str	r3, [r4, #4]
 8009406:	6923      	ldr	r3, [r4, #16]
 8009408:	6023      	str	r3, [r4, #0]
 800940a:	89a3      	ldrh	r3, [r4, #12]
 800940c:	f043 0308 	orr.w	r3, r3, #8
 8009410:	81a3      	strh	r3, [r4, #12]
 8009412:	6923      	ldr	r3, [r4, #16]
 8009414:	b94b      	cbnz	r3, 800942a <__swsetup_r+0x9a>
 8009416:	89a3      	ldrh	r3, [r4, #12]
 8009418:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800941c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009420:	d003      	beq.n	800942a <__swsetup_r+0x9a>
 8009422:	4621      	mov	r1, r4
 8009424:	4630      	mov	r0, r6
 8009426:	f000 fa07 	bl	8009838 <__smakebuf_r>
 800942a:	89a0      	ldrh	r0, [r4, #12]
 800942c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009430:	f010 0301 	ands.w	r3, r0, #1
 8009434:	d00a      	beq.n	800944c <__swsetup_r+0xbc>
 8009436:	2300      	movs	r3, #0
 8009438:	60a3      	str	r3, [r4, #8]
 800943a:	6963      	ldr	r3, [r4, #20]
 800943c:	425b      	negs	r3, r3
 800943e:	61a3      	str	r3, [r4, #24]
 8009440:	6923      	ldr	r3, [r4, #16]
 8009442:	b943      	cbnz	r3, 8009456 <__swsetup_r+0xc6>
 8009444:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009448:	d1ba      	bne.n	80093c0 <__swsetup_r+0x30>
 800944a:	bd70      	pop	{r4, r5, r6, pc}
 800944c:	0781      	lsls	r1, r0, #30
 800944e:	bf58      	it	pl
 8009450:	6963      	ldrpl	r3, [r4, #20]
 8009452:	60a3      	str	r3, [r4, #8]
 8009454:	e7f4      	b.n	8009440 <__swsetup_r+0xb0>
 8009456:	2000      	movs	r0, #0
 8009458:	e7f7      	b.n	800944a <__swsetup_r+0xba>
 800945a:	bf00      	nop
 800945c:	24000010 	.word	0x24000010
 8009460:	08009ecc 	.word	0x08009ecc
 8009464:	08009eec 	.word	0x08009eec
 8009468:	08009eac 	.word	0x08009eac

0800946c <abort>:
 800946c:	b508      	push	{r3, lr}
 800946e:	2006      	movs	r0, #6
 8009470:	f000 fa52 	bl	8009918 <raise>
 8009474:	2001      	movs	r0, #1
 8009476:	f7f7 ffc7 	bl	8001408 <_exit>
	...

0800947c <__sflush_r>:
 800947c:	898a      	ldrh	r2, [r1, #12]
 800947e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009482:	4605      	mov	r5, r0
 8009484:	0710      	lsls	r0, r2, #28
 8009486:	460c      	mov	r4, r1
 8009488:	d458      	bmi.n	800953c <__sflush_r+0xc0>
 800948a:	684b      	ldr	r3, [r1, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	dc05      	bgt.n	800949c <__sflush_r+0x20>
 8009490:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009492:	2b00      	cmp	r3, #0
 8009494:	dc02      	bgt.n	800949c <__sflush_r+0x20>
 8009496:	2000      	movs	r0, #0
 8009498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800949c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800949e:	2e00      	cmp	r6, #0
 80094a0:	d0f9      	beq.n	8009496 <__sflush_r+0x1a>
 80094a2:	2300      	movs	r3, #0
 80094a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094a8:	682f      	ldr	r7, [r5, #0]
 80094aa:	602b      	str	r3, [r5, #0]
 80094ac:	d032      	beq.n	8009514 <__sflush_r+0x98>
 80094ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094b0:	89a3      	ldrh	r3, [r4, #12]
 80094b2:	075a      	lsls	r2, r3, #29
 80094b4:	d505      	bpl.n	80094c2 <__sflush_r+0x46>
 80094b6:	6863      	ldr	r3, [r4, #4]
 80094b8:	1ac0      	subs	r0, r0, r3
 80094ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094bc:	b10b      	cbz	r3, 80094c2 <__sflush_r+0x46>
 80094be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094c0:	1ac0      	subs	r0, r0, r3
 80094c2:	2300      	movs	r3, #0
 80094c4:	4602      	mov	r2, r0
 80094c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094c8:	6a21      	ldr	r1, [r4, #32]
 80094ca:	4628      	mov	r0, r5
 80094cc:	47b0      	blx	r6
 80094ce:	1c43      	adds	r3, r0, #1
 80094d0:	89a3      	ldrh	r3, [r4, #12]
 80094d2:	d106      	bne.n	80094e2 <__sflush_r+0x66>
 80094d4:	6829      	ldr	r1, [r5, #0]
 80094d6:	291d      	cmp	r1, #29
 80094d8:	d82c      	bhi.n	8009534 <__sflush_r+0xb8>
 80094da:	4a2a      	ldr	r2, [pc, #168]	; (8009584 <__sflush_r+0x108>)
 80094dc:	40ca      	lsrs	r2, r1
 80094de:	07d6      	lsls	r6, r2, #31
 80094e0:	d528      	bpl.n	8009534 <__sflush_r+0xb8>
 80094e2:	2200      	movs	r2, #0
 80094e4:	6062      	str	r2, [r4, #4]
 80094e6:	04d9      	lsls	r1, r3, #19
 80094e8:	6922      	ldr	r2, [r4, #16]
 80094ea:	6022      	str	r2, [r4, #0]
 80094ec:	d504      	bpl.n	80094f8 <__sflush_r+0x7c>
 80094ee:	1c42      	adds	r2, r0, #1
 80094f0:	d101      	bne.n	80094f6 <__sflush_r+0x7a>
 80094f2:	682b      	ldr	r3, [r5, #0]
 80094f4:	b903      	cbnz	r3, 80094f8 <__sflush_r+0x7c>
 80094f6:	6560      	str	r0, [r4, #84]	; 0x54
 80094f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094fa:	602f      	str	r7, [r5, #0]
 80094fc:	2900      	cmp	r1, #0
 80094fe:	d0ca      	beq.n	8009496 <__sflush_r+0x1a>
 8009500:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009504:	4299      	cmp	r1, r3
 8009506:	d002      	beq.n	800950e <__sflush_r+0x92>
 8009508:	4628      	mov	r0, r5
 800950a:	f7ff fae3 	bl	8008ad4 <_free_r>
 800950e:	2000      	movs	r0, #0
 8009510:	6360      	str	r0, [r4, #52]	; 0x34
 8009512:	e7c1      	b.n	8009498 <__sflush_r+0x1c>
 8009514:	6a21      	ldr	r1, [r4, #32]
 8009516:	2301      	movs	r3, #1
 8009518:	4628      	mov	r0, r5
 800951a:	47b0      	blx	r6
 800951c:	1c41      	adds	r1, r0, #1
 800951e:	d1c7      	bne.n	80094b0 <__sflush_r+0x34>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d0c4      	beq.n	80094b0 <__sflush_r+0x34>
 8009526:	2b1d      	cmp	r3, #29
 8009528:	d001      	beq.n	800952e <__sflush_r+0xb2>
 800952a:	2b16      	cmp	r3, #22
 800952c:	d101      	bne.n	8009532 <__sflush_r+0xb6>
 800952e:	602f      	str	r7, [r5, #0]
 8009530:	e7b1      	b.n	8009496 <__sflush_r+0x1a>
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009538:	81a3      	strh	r3, [r4, #12]
 800953a:	e7ad      	b.n	8009498 <__sflush_r+0x1c>
 800953c:	690f      	ldr	r7, [r1, #16]
 800953e:	2f00      	cmp	r7, #0
 8009540:	d0a9      	beq.n	8009496 <__sflush_r+0x1a>
 8009542:	0793      	lsls	r3, r2, #30
 8009544:	680e      	ldr	r6, [r1, #0]
 8009546:	bf08      	it	eq
 8009548:	694b      	ldreq	r3, [r1, #20]
 800954a:	600f      	str	r7, [r1, #0]
 800954c:	bf18      	it	ne
 800954e:	2300      	movne	r3, #0
 8009550:	eba6 0807 	sub.w	r8, r6, r7
 8009554:	608b      	str	r3, [r1, #8]
 8009556:	f1b8 0f00 	cmp.w	r8, #0
 800955a:	dd9c      	ble.n	8009496 <__sflush_r+0x1a>
 800955c:	6a21      	ldr	r1, [r4, #32]
 800955e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009560:	4643      	mov	r3, r8
 8009562:	463a      	mov	r2, r7
 8009564:	4628      	mov	r0, r5
 8009566:	47b0      	blx	r6
 8009568:	2800      	cmp	r0, #0
 800956a:	dc06      	bgt.n	800957a <__sflush_r+0xfe>
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009572:	81a3      	strh	r3, [r4, #12]
 8009574:	f04f 30ff 	mov.w	r0, #4294967295
 8009578:	e78e      	b.n	8009498 <__sflush_r+0x1c>
 800957a:	4407      	add	r7, r0
 800957c:	eba8 0800 	sub.w	r8, r8, r0
 8009580:	e7e9      	b.n	8009556 <__sflush_r+0xda>
 8009582:	bf00      	nop
 8009584:	20400001 	.word	0x20400001

08009588 <_fflush_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	690b      	ldr	r3, [r1, #16]
 800958c:	4605      	mov	r5, r0
 800958e:	460c      	mov	r4, r1
 8009590:	b913      	cbnz	r3, 8009598 <_fflush_r+0x10>
 8009592:	2500      	movs	r5, #0
 8009594:	4628      	mov	r0, r5
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	b118      	cbz	r0, 80095a2 <_fflush_r+0x1a>
 800959a:	6983      	ldr	r3, [r0, #24]
 800959c:	b90b      	cbnz	r3, 80095a2 <_fflush_r+0x1a>
 800959e:	f000 f887 	bl	80096b0 <__sinit>
 80095a2:	4b14      	ldr	r3, [pc, #80]	; (80095f4 <_fflush_r+0x6c>)
 80095a4:	429c      	cmp	r4, r3
 80095a6:	d11b      	bne.n	80095e0 <_fflush_r+0x58>
 80095a8:	686c      	ldr	r4, [r5, #4]
 80095aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0ef      	beq.n	8009592 <_fflush_r+0xa>
 80095b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095b4:	07d0      	lsls	r0, r2, #31
 80095b6:	d404      	bmi.n	80095c2 <_fflush_r+0x3a>
 80095b8:	0599      	lsls	r1, r3, #22
 80095ba:	d402      	bmi.n	80095c2 <_fflush_r+0x3a>
 80095bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095be:	f000 f915 	bl	80097ec <__retarget_lock_acquire_recursive>
 80095c2:	4628      	mov	r0, r5
 80095c4:	4621      	mov	r1, r4
 80095c6:	f7ff ff59 	bl	800947c <__sflush_r>
 80095ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095cc:	07da      	lsls	r2, r3, #31
 80095ce:	4605      	mov	r5, r0
 80095d0:	d4e0      	bmi.n	8009594 <_fflush_r+0xc>
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	059b      	lsls	r3, r3, #22
 80095d6:	d4dd      	bmi.n	8009594 <_fflush_r+0xc>
 80095d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095da:	f000 f908 	bl	80097ee <__retarget_lock_release_recursive>
 80095de:	e7d9      	b.n	8009594 <_fflush_r+0xc>
 80095e0:	4b05      	ldr	r3, [pc, #20]	; (80095f8 <_fflush_r+0x70>)
 80095e2:	429c      	cmp	r4, r3
 80095e4:	d101      	bne.n	80095ea <_fflush_r+0x62>
 80095e6:	68ac      	ldr	r4, [r5, #8]
 80095e8:	e7df      	b.n	80095aa <_fflush_r+0x22>
 80095ea:	4b04      	ldr	r3, [pc, #16]	; (80095fc <_fflush_r+0x74>)
 80095ec:	429c      	cmp	r4, r3
 80095ee:	bf08      	it	eq
 80095f0:	68ec      	ldreq	r4, [r5, #12]
 80095f2:	e7da      	b.n	80095aa <_fflush_r+0x22>
 80095f4:	08009ecc 	.word	0x08009ecc
 80095f8:	08009eec 	.word	0x08009eec
 80095fc:	08009eac 	.word	0x08009eac

08009600 <std>:
 8009600:	2300      	movs	r3, #0
 8009602:	b510      	push	{r4, lr}
 8009604:	4604      	mov	r4, r0
 8009606:	e9c0 3300 	strd	r3, r3, [r0]
 800960a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800960e:	6083      	str	r3, [r0, #8]
 8009610:	8181      	strh	r1, [r0, #12]
 8009612:	6643      	str	r3, [r0, #100]	; 0x64
 8009614:	81c2      	strh	r2, [r0, #14]
 8009616:	6183      	str	r3, [r0, #24]
 8009618:	4619      	mov	r1, r3
 800961a:	2208      	movs	r2, #8
 800961c:	305c      	adds	r0, #92	; 0x5c
 800961e:	f7fd fc35 	bl	8006e8c <memset>
 8009622:	4b05      	ldr	r3, [pc, #20]	; (8009638 <std+0x38>)
 8009624:	6263      	str	r3, [r4, #36]	; 0x24
 8009626:	4b05      	ldr	r3, [pc, #20]	; (800963c <std+0x3c>)
 8009628:	62a3      	str	r3, [r4, #40]	; 0x28
 800962a:	4b05      	ldr	r3, [pc, #20]	; (8009640 <std+0x40>)
 800962c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800962e:	4b05      	ldr	r3, [pc, #20]	; (8009644 <std+0x44>)
 8009630:	6224      	str	r4, [r4, #32]
 8009632:	6323      	str	r3, [r4, #48]	; 0x30
 8009634:	bd10      	pop	{r4, pc}
 8009636:	bf00      	nop
 8009638:	08009951 	.word	0x08009951
 800963c:	08009973 	.word	0x08009973
 8009640:	080099ab 	.word	0x080099ab
 8009644:	080099cf 	.word	0x080099cf

08009648 <_cleanup_r>:
 8009648:	4901      	ldr	r1, [pc, #4]	; (8009650 <_cleanup_r+0x8>)
 800964a:	f000 b8af 	b.w	80097ac <_fwalk_reent>
 800964e:	bf00      	nop
 8009650:	08009589 	.word	0x08009589

08009654 <__sfmoreglue>:
 8009654:	b570      	push	{r4, r5, r6, lr}
 8009656:	1e4a      	subs	r2, r1, #1
 8009658:	2568      	movs	r5, #104	; 0x68
 800965a:	4355      	muls	r5, r2
 800965c:	460e      	mov	r6, r1
 800965e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009662:	f7ff fa87 	bl	8008b74 <_malloc_r>
 8009666:	4604      	mov	r4, r0
 8009668:	b140      	cbz	r0, 800967c <__sfmoreglue+0x28>
 800966a:	2100      	movs	r1, #0
 800966c:	e9c0 1600 	strd	r1, r6, [r0]
 8009670:	300c      	adds	r0, #12
 8009672:	60a0      	str	r0, [r4, #8]
 8009674:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009678:	f7fd fc08 	bl	8006e8c <memset>
 800967c:	4620      	mov	r0, r4
 800967e:	bd70      	pop	{r4, r5, r6, pc}

08009680 <__sfp_lock_acquire>:
 8009680:	4801      	ldr	r0, [pc, #4]	; (8009688 <__sfp_lock_acquire+0x8>)
 8009682:	f000 b8b3 	b.w	80097ec <__retarget_lock_acquire_recursive>
 8009686:	bf00      	nop
 8009688:	24000340 	.word	0x24000340

0800968c <__sfp_lock_release>:
 800968c:	4801      	ldr	r0, [pc, #4]	; (8009694 <__sfp_lock_release+0x8>)
 800968e:	f000 b8ae 	b.w	80097ee <__retarget_lock_release_recursive>
 8009692:	bf00      	nop
 8009694:	24000340 	.word	0x24000340

08009698 <__sinit_lock_acquire>:
 8009698:	4801      	ldr	r0, [pc, #4]	; (80096a0 <__sinit_lock_acquire+0x8>)
 800969a:	f000 b8a7 	b.w	80097ec <__retarget_lock_acquire_recursive>
 800969e:	bf00      	nop
 80096a0:	2400033b 	.word	0x2400033b

080096a4 <__sinit_lock_release>:
 80096a4:	4801      	ldr	r0, [pc, #4]	; (80096ac <__sinit_lock_release+0x8>)
 80096a6:	f000 b8a2 	b.w	80097ee <__retarget_lock_release_recursive>
 80096aa:	bf00      	nop
 80096ac:	2400033b 	.word	0x2400033b

080096b0 <__sinit>:
 80096b0:	b510      	push	{r4, lr}
 80096b2:	4604      	mov	r4, r0
 80096b4:	f7ff fff0 	bl	8009698 <__sinit_lock_acquire>
 80096b8:	69a3      	ldr	r3, [r4, #24]
 80096ba:	b11b      	cbz	r3, 80096c4 <__sinit+0x14>
 80096bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096c0:	f7ff bff0 	b.w	80096a4 <__sinit_lock_release>
 80096c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096c8:	6523      	str	r3, [r4, #80]	; 0x50
 80096ca:	4b13      	ldr	r3, [pc, #76]	; (8009718 <__sinit+0x68>)
 80096cc:	4a13      	ldr	r2, [pc, #76]	; (800971c <__sinit+0x6c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80096d2:	42a3      	cmp	r3, r4
 80096d4:	bf04      	itt	eq
 80096d6:	2301      	moveq	r3, #1
 80096d8:	61a3      	streq	r3, [r4, #24]
 80096da:	4620      	mov	r0, r4
 80096dc:	f000 f820 	bl	8009720 <__sfp>
 80096e0:	6060      	str	r0, [r4, #4]
 80096e2:	4620      	mov	r0, r4
 80096e4:	f000 f81c 	bl	8009720 <__sfp>
 80096e8:	60a0      	str	r0, [r4, #8]
 80096ea:	4620      	mov	r0, r4
 80096ec:	f000 f818 	bl	8009720 <__sfp>
 80096f0:	2200      	movs	r2, #0
 80096f2:	60e0      	str	r0, [r4, #12]
 80096f4:	2104      	movs	r1, #4
 80096f6:	6860      	ldr	r0, [r4, #4]
 80096f8:	f7ff ff82 	bl	8009600 <std>
 80096fc:	68a0      	ldr	r0, [r4, #8]
 80096fe:	2201      	movs	r2, #1
 8009700:	2109      	movs	r1, #9
 8009702:	f7ff ff7d 	bl	8009600 <std>
 8009706:	68e0      	ldr	r0, [r4, #12]
 8009708:	2202      	movs	r2, #2
 800970a:	2112      	movs	r1, #18
 800970c:	f7ff ff78 	bl	8009600 <std>
 8009710:	2301      	movs	r3, #1
 8009712:	61a3      	str	r3, [r4, #24]
 8009714:	e7d2      	b.n	80096bc <__sinit+0xc>
 8009716:	bf00      	nop
 8009718:	08009b2c 	.word	0x08009b2c
 800971c:	08009649 	.word	0x08009649

08009720 <__sfp>:
 8009720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009722:	4607      	mov	r7, r0
 8009724:	f7ff ffac 	bl	8009680 <__sfp_lock_acquire>
 8009728:	4b1e      	ldr	r3, [pc, #120]	; (80097a4 <__sfp+0x84>)
 800972a:	681e      	ldr	r6, [r3, #0]
 800972c:	69b3      	ldr	r3, [r6, #24]
 800972e:	b913      	cbnz	r3, 8009736 <__sfp+0x16>
 8009730:	4630      	mov	r0, r6
 8009732:	f7ff ffbd 	bl	80096b0 <__sinit>
 8009736:	3648      	adds	r6, #72	; 0x48
 8009738:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800973c:	3b01      	subs	r3, #1
 800973e:	d503      	bpl.n	8009748 <__sfp+0x28>
 8009740:	6833      	ldr	r3, [r6, #0]
 8009742:	b30b      	cbz	r3, 8009788 <__sfp+0x68>
 8009744:	6836      	ldr	r6, [r6, #0]
 8009746:	e7f7      	b.n	8009738 <__sfp+0x18>
 8009748:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800974c:	b9d5      	cbnz	r5, 8009784 <__sfp+0x64>
 800974e:	4b16      	ldr	r3, [pc, #88]	; (80097a8 <__sfp+0x88>)
 8009750:	60e3      	str	r3, [r4, #12]
 8009752:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009756:	6665      	str	r5, [r4, #100]	; 0x64
 8009758:	f000 f847 	bl	80097ea <__retarget_lock_init_recursive>
 800975c:	f7ff ff96 	bl	800968c <__sfp_lock_release>
 8009760:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009764:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009768:	6025      	str	r5, [r4, #0]
 800976a:	61a5      	str	r5, [r4, #24]
 800976c:	2208      	movs	r2, #8
 800976e:	4629      	mov	r1, r5
 8009770:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009774:	f7fd fb8a 	bl	8006e8c <memset>
 8009778:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800977c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009780:	4620      	mov	r0, r4
 8009782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009784:	3468      	adds	r4, #104	; 0x68
 8009786:	e7d9      	b.n	800973c <__sfp+0x1c>
 8009788:	2104      	movs	r1, #4
 800978a:	4638      	mov	r0, r7
 800978c:	f7ff ff62 	bl	8009654 <__sfmoreglue>
 8009790:	4604      	mov	r4, r0
 8009792:	6030      	str	r0, [r6, #0]
 8009794:	2800      	cmp	r0, #0
 8009796:	d1d5      	bne.n	8009744 <__sfp+0x24>
 8009798:	f7ff ff78 	bl	800968c <__sfp_lock_release>
 800979c:	230c      	movs	r3, #12
 800979e:	603b      	str	r3, [r7, #0]
 80097a0:	e7ee      	b.n	8009780 <__sfp+0x60>
 80097a2:	bf00      	nop
 80097a4:	08009b2c 	.word	0x08009b2c
 80097a8:	ffff0001 	.word	0xffff0001

080097ac <_fwalk_reent>:
 80097ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097b0:	4606      	mov	r6, r0
 80097b2:	4688      	mov	r8, r1
 80097b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097b8:	2700      	movs	r7, #0
 80097ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097be:	f1b9 0901 	subs.w	r9, r9, #1
 80097c2:	d505      	bpl.n	80097d0 <_fwalk_reent+0x24>
 80097c4:	6824      	ldr	r4, [r4, #0]
 80097c6:	2c00      	cmp	r4, #0
 80097c8:	d1f7      	bne.n	80097ba <_fwalk_reent+0xe>
 80097ca:	4638      	mov	r0, r7
 80097cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097d0:	89ab      	ldrh	r3, [r5, #12]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d907      	bls.n	80097e6 <_fwalk_reent+0x3a>
 80097d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097da:	3301      	adds	r3, #1
 80097dc:	d003      	beq.n	80097e6 <_fwalk_reent+0x3a>
 80097de:	4629      	mov	r1, r5
 80097e0:	4630      	mov	r0, r6
 80097e2:	47c0      	blx	r8
 80097e4:	4307      	orrs	r7, r0
 80097e6:	3568      	adds	r5, #104	; 0x68
 80097e8:	e7e9      	b.n	80097be <_fwalk_reent+0x12>

080097ea <__retarget_lock_init_recursive>:
 80097ea:	4770      	bx	lr

080097ec <__retarget_lock_acquire_recursive>:
 80097ec:	4770      	bx	lr

080097ee <__retarget_lock_release_recursive>:
 80097ee:	4770      	bx	lr

080097f0 <__swhatbuf_r>:
 80097f0:	b570      	push	{r4, r5, r6, lr}
 80097f2:	460e      	mov	r6, r1
 80097f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f8:	2900      	cmp	r1, #0
 80097fa:	b096      	sub	sp, #88	; 0x58
 80097fc:	4614      	mov	r4, r2
 80097fe:	461d      	mov	r5, r3
 8009800:	da07      	bge.n	8009812 <__swhatbuf_r+0x22>
 8009802:	2300      	movs	r3, #0
 8009804:	602b      	str	r3, [r5, #0]
 8009806:	89b3      	ldrh	r3, [r6, #12]
 8009808:	061a      	lsls	r2, r3, #24
 800980a:	d410      	bmi.n	800982e <__swhatbuf_r+0x3e>
 800980c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009810:	e00e      	b.n	8009830 <__swhatbuf_r+0x40>
 8009812:	466a      	mov	r2, sp
 8009814:	f000 f902 	bl	8009a1c <_fstat_r>
 8009818:	2800      	cmp	r0, #0
 800981a:	dbf2      	blt.n	8009802 <__swhatbuf_r+0x12>
 800981c:	9a01      	ldr	r2, [sp, #4]
 800981e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009822:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009826:	425a      	negs	r2, r3
 8009828:	415a      	adcs	r2, r3
 800982a:	602a      	str	r2, [r5, #0]
 800982c:	e7ee      	b.n	800980c <__swhatbuf_r+0x1c>
 800982e:	2340      	movs	r3, #64	; 0x40
 8009830:	2000      	movs	r0, #0
 8009832:	6023      	str	r3, [r4, #0]
 8009834:	b016      	add	sp, #88	; 0x58
 8009836:	bd70      	pop	{r4, r5, r6, pc}

08009838 <__smakebuf_r>:
 8009838:	898b      	ldrh	r3, [r1, #12]
 800983a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800983c:	079d      	lsls	r5, r3, #30
 800983e:	4606      	mov	r6, r0
 8009840:	460c      	mov	r4, r1
 8009842:	d507      	bpl.n	8009854 <__smakebuf_r+0x1c>
 8009844:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009848:	6023      	str	r3, [r4, #0]
 800984a:	6123      	str	r3, [r4, #16]
 800984c:	2301      	movs	r3, #1
 800984e:	6163      	str	r3, [r4, #20]
 8009850:	b002      	add	sp, #8
 8009852:	bd70      	pop	{r4, r5, r6, pc}
 8009854:	ab01      	add	r3, sp, #4
 8009856:	466a      	mov	r2, sp
 8009858:	f7ff ffca 	bl	80097f0 <__swhatbuf_r>
 800985c:	9900      	ldr	r1, [sp, #0]
 800985e:	4605      	mov	r5, r0
 8009860:	4630      	mov	r0, r6
 8009862:	f7ff f987 	bl	8008b74 <_malloc_r>
 8009866:	b948      	cbnz	r0, 800987c <__smakebuf_r+0x44>
 8009868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800986c:	059a      	lsls	r2, r3, #22
 800986e:	d4ef      	bmi.n	8009850 <__smakebuf_r+0x18>
 8009870:	f023 0303 	bic.w	r3, r3, #3
 8009874:	f043 0302 	orr.w	r3, r3, #2
 8009878:	81a3      	strh	r3, [r4, #12]
 800987a:	e7e3      	b.n	8009844 <__smakebuf_r+0xc>
 800987c:	4b0d      	ldr	r3, [pc, #52]	; (80098b4 <__smakebuf_r+0x7c>)
 800987e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009880:	89a3      	ldrh	r3, [r4, #12]
 8009882:	6020      	str	r0, [r4, #0]
 8009884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009888:	81a3      	strh	r3, [r4, #12]
 800988a:	9b00      	ldr	r3, [sp, #0]
 800988c:	6163      	str	r3, [r4, #20]
 800988e:	9b01      	ldr	r3, [sp, #4]
 8009890:	6120      	str	r0, [r4, #16]
 8009892:	b15b      	cbz	r3, 80098ac <__smakebuf_r+0x74>
 8009894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009898:	4630      	mov	r0, r6
 800989a:	f000 f8d1 	bl	8009a40 <_isatty_r>
 800989e:	b128      	cbz	r0, 80098ac <__smakebuf_r+0x74>
 80098a0:	89a3      	ldrh	r3, [r4, #12]
 80098a2:	f023 0303 	bic.w	r3, r3, #3
 80098a6:	f043 0301 	orr.w	r3, r3, #1
 80098aa:	81a3      	strh	r3, [r4, #12]
 80098ac:	89a0      	ldrh	r0, [r4, #12]
 80098ae:	4305      	orrs	r5, r0
 80098b0:	81a5      	strh	r5, [r4, #12]
 80098b2:	e7cd      	b.n	8009850 <__smakebuf_r+0x18>
 80098b4:	08009649 	.word	0x08009649

080098b8 <_malloc_usable_size_r>:
 80098b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098bc:	1f18      	subs	r0, r3, #4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	bfbc      	itt	lt
 80098c2:	580b      	ldrlt	r3, [r1, r0]
 80098c4:	18c0      	addlt	r0, r0, r3
 80098c6:	4770      	bx	lr

080098c8 <_raise_r>:
 80098c8:	291f      	cmp	r1, #31
 80098ca:	b538      	push	{r3, r4, r5, lr}
 80098cc:	4604      	mov	r4, r0
 80098ce:	460d      	mov	r5, r1
 80098d0:	d904      	bls.n	80098dc <_raise_r+0x14>
 80098d2:	2316      	movs	r3, #22
 80098d4:	6003      	str	r3, [r0, #0]
 80098d6:	f04f 30ff 	mov.w	r0, #4294967295
 80098da:	bd38      	pop	{r3, r4, r5, pc}
 80098dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098de:	b112      	cbz	r2, 80098e6 <_raise_r+0x1e>
 80098e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098e4:	b94b      	cbnz	r3, 80098fa <_raise_r+0x32>
 80098e6:	4620      	mov	r0, r4
 80098e8:	f000 f830 	bl	800994c <_getpid_r>
 80098ec:	462a      	mov	r2, r5
 80098ee:	4601      	mov	r1, r0
 80098f0:	4620      	mov	r0, r4
 80098f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098f6:	f000 b817 	b.w	8009928 <_kill_r>
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d00a      	beq.n	8009914 <_raise_r+0x4c>
 80098fe:	1c59      	adds	r1, r3, #1
 8009900:	d103      	bne.n	800990a <_raise_r+0x42>
 8009902:	2316      	movs	r3, #22
 8009904:	6003      	str	r3, [r0, #0]
 8009906:	2001      	movs	r0, #1
 8009908:	e7e7      	b.n	80098da <_raise_r+0x12>
 800990a:	2400      	movs	r4, #0
 800990c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009910:	4628      	mov	r0, r5
 8009912:	4798      	blx	r3
 8009914:	2000      	movs	r0, #0
 8009916:	e7e0      	b.n	80098da <_raise_r+0x12>

08009918 <raise>:
 8009918:	4b02      	ldr	r3, [pc, #8]	; (8009924 <raise+0xc>)
 800991a:	4601      	mov	r1, r0
 800991c:	6818      	ldr	r0, [r3, #0]
 800991e:	f7ff bfd3 	b.w	80098c8 <_raise_r>
 8009922:	bf00      	nop
 8009924:	24000010 	.word	0x24000010

08009928 <_kill_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	4d07      	ldr	r5, [pc, #28]	; (8009948 <_kill_r+0x20>)
 800992c:	2300      	movs	r3, #0
 800992e:	4604      	mov	r4, r0
 8009930:	4608      	mov	r0, r1
 8009932:	4611      	mov	r1, r2
 8009934:	602b      	str	r3, [r5, #0]
 8009936:	f7f7 fd57 	bl	80013e8 <_kill>
 800993a:	1c43      	adds	r3, r0, #1
 800993c:	d102      	bne.n	8009944 <_kill_r+0x1c>
 800993e:	682b      	ldr	r3, [r5, #0]
 8009940:	b103      	cbz	r3, 8009944 <_kill_r+0x1c>
 8009942:	6023      	str	r3, [r4, #0]
 8009944:	bd38      	pop	{r3, r4, r5, pc}
 8009946:	bf00      	nop
 8009948:	24000334 	.word	0x24000334

0800994c <_getpid_r>:
 800994c:	f7f7 bd44 	b.w	80013d8 <_getpid>

08009950 <__sread>:
 8009950:	b510      	push	{r4, lr}
 8009952:	460c      	mov	r4, r1
 8009954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009958:	f000 f894 	bl	8009a84 <_read_r>
 800995c:	2800      	cmp	r0, #0
 800995e:	bfab      	itete	ge
 8009960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009962:	89a3      	ldrhlt	r3, [r4, #12]
 8009964:	181b      	addge	r3, r3, r0
 8009966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800996a:	bfac      	ite	ge
 800996c:	6563      	strge	r3, [r4, #84]	; 0x54
 800996e:	81a3      	strhlt	r3, [r4, #12]
 8009970:	bd10      	pop	{r4, pc}

08009972 <__swrite>:
 8009972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009976:	461f      	mov	r7, r3
 8009978:	898b      	ldrh	r3, [r1, #12]
 800997a:	05db      	lsls	r3, r3, #23
 800997c:	4605      	mov	r5, r0
 800997e:	460c      	mov	r4, r1
 8009980:	4616      	mov	r6, r2
 8009982:	d505      	bpl.n	8009990 <__swrite+0x1e>
 8009984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009988:	2302      	movs	r3, #2
 800998a:	2200      	movs	r2, #0
 800998c:	f000 f868 	bl	8009a60 <_lseek_r>
 8009990:	89a3      	ldrh	r3, [r4, #12]
 8009992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800999a:	81a3      	strh	r3, [r4, #12]
 800999c:	4632      	mov	r2, r6
 800999e:	463b      	mov	r3, r7
 80099a0:	4628      	mov	r0, r5
 80099a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099a6:	f000 b817 	b.w	80099d8 <_write_r>

080099aa <__sseek>:
 80099aa:	b510      	push	{r4, lr}
 80099ac:	460c      	mov	r4, r1
 80099ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b2:	f000 f855 	bl	8009a60 <_lseek_r>
 80099b6:	1c43      	adds	r3, r0, #1
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	bf15      	itete	ne
 80099bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80099be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099c6:	81a3      	strheq	r3, [r4, #12]
 80099c8:	bf18      	it	ne
 80099ca:	81a3      	strhne	r3, [r4, #12]
 80099cc:	bd10      	pop	{r4, pc}

080099ce <__sclose>:
 80099ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d2:	f000 b813 	b.w	80099fc <_close_r>
	...

080099d8 <_write_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	4d07      	ldr	r5, [pc, #28]	; (80099f8 <_write_r+0x20>)
 80099dc:	4604      	mov	r4, r0
 80099de:	4608      	mov	r0, r1
 80099e0:	4611      	mov	r1, r2
 80099e2:	2200      	movs	r2, #0
 80099e4:	602a      	str	r2, [r5, #0]
 80099e6:	461a      	mov	r2, r3
 80099e8:	f7f7 fd35 	bl	8001456 <_write>
 80099ec:	1c43      	adds	r3, r0, #1
 80099ee:	d102      	bne.n	80099f6 <_write_r+0x1e>
 80099f0:	682b      	ldr	r3, [r5, #0]
 80099f2:	b103      	cbz	r3, 80099f6 <_write_r+0x1e>
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	bd38      	pop	{r3, r4, r5, pc}
 80099f8:	24000334 	.word	0x24000334

080099fc <_close_r>:
 80099fc:	b538      	push	{r3, r4, r5, lr}
 80099fe:	4d06      	ldr	r5, [pc, #24]	; (8009a18 <_close_r+0x1c>)
 8009a00:	2300      	movs	r3, #0
 8009a02:	4604      	mov	r4, r0
 8009a04:	4608      	mov	r0, r1
 8009a06:	602b      	str	r3, [r5, #0]
 8009a08:	f7f7 fd41 	bl	800148e <_close>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_close_r+0x1a>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_close_r+0x1a>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	24000334 	.word	0x24000334

08009a1c <_fstat_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4d07      	ldr	r5, [pc, #28]	; (8009a3c <_fstat_r+0x20>)
 8009a20:	2300      	movs	r3, #0
 8009a22:	4604      	mov	r4, r0
 8009a24:	4608      	mov	r0, r1
 8009a26:	4611      	mov	r1, r2
 8009a28:	602b      	str	r3, [r5, #0]
 8009a2a:	f7f7 fd3c 	bl	80014a6 <_fstat>
 8009a2e:	1c43      	adds	r3, r0, #1
 8009a30:	d102      	bne.n	8009a38 <_fstat_r+0x1c>
 8009a32:	682b      	ldr	r3, [r5, #0]
 8009a34:	b103      	cbz	r3, 8009a38 <_fstat_r+0x1c>
 8009a36:	6023      	str	r3, [r4, #0]
 8009a38:	bd38      	pop	{r3, r4, r5, pc}
 8009a3a:	bf00      	nop
 8009a3c:	24000334 	.word	0x24000334

08009a40 <_isatty_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	4d06      	ldr	r5, [pc, #24]	; (8009a5c <_isatty_r+0x1c>)
 8009a44:	2300      	movs	r3, #0
 8009a46:	4604      	mov	r4, r0
 8009a48:	4608      	mov	r0, r1
 8009a4a:	602b      	str	r3, [r5, #0]
 8009a4c:	f7f7 fd3b 	bl	80014c6 <_isatty>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d102      	bne.n	8009a5a <_isatty_r+0x1a>
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	b103      	cbz	r3, 8009a5a <_isatty_r+0x1a>
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}
 8009a5c:	24000334 	.word	0x24000334

08009a60 <_lseek_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4d07      	ldr	r5, [pc, #28]	; (8009a80 <_lseek_r+0x20>)
 8009a64:	4604      	mov	r4, r0
 8009a66:	4608      	mov	r0, r1
 8009a68:	4611      	mov	r1, r2
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	602a      	str	r2, [r5, #0]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	f7f7 fd34 	bl	80014dc <_lseek>
 8009a74:	1c43      	adds	r3, r0, #1
 8009a76:	d102      	bne.n	8009a7e <_lseek_r+0x1e>
 8009a78:	682b      	ldr	r3, [r5, #0]
 8009a7a:	b103      	cbz	r3, 8009a7e <_lseek_r+0x1e>
 8009a7c:	6023      	str	r3, [r4, #0]
 8009a7e:	bd38      	pop	{r3, r4, r5, pc}
 8009a80:	24000334 	.word	0x24000334

08009a84 <_read_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4d07      	ldr	r5, [pc, #28]	; (8009aa4 <_read_r+0x20>)
 8009a88:	4604      	mov	r4, r0
 8009a8a:	4608      	mov	r0, r1
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	2200      	movs	r2, #0
 8009a90:	602a      	str	r2, [r5, #0]
 8009a92:	461a      	mov	r2, r3
 8009a94:	f7f7 fcc2 	bl	800141c <_read>
 8009a98:	1c43      	adds	r3, r0, #1
 8009a9a:	d102      	bne.n	8009aa2 <_read_r+0x1e>
 8009a9c:	682b      	ldr	r3, [r5, #0]
 8009a9e:	b103      	cbz	r3, 8009aa2 <_read_r+0x1e>
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}
 8009aa4:	24000334 	.word	0x24000334

08009aa8 <_init>:
 8009aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aaa:	bf00      	nop
 8009aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aae:	bc08      	pop	{r3}
 8009ab0:	469e      	mov	lr, r3
 8009ab2:	4770      	bx	lr

08009ab4 <_fini>:
 8009ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab6:	bf00      	nop
 8009ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aba:	bc08      	pop	{r3}
 8009abc:	469e      	mov	lr, r3
 8009abe:	4770      	bx	lr
