
NUCLEO_H745_NHD_20x4_PARALLEL_LCD_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026e8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002980  08002980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029bc  080029bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080029bc  080029bc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029bc  080029bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029c0  080029c0  000129c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080029c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  24000010  080029d4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400007c  080029d4  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163a9  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025fe  00000000  00000000  000363e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  000389e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  000396b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000385fa  00000000  00000000  0003a2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e43c  00000000  00000000  0007289a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00179a05  00000000  00000000  00080cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fa6db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034fc  00000000  00000000  001fa730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002968 	.word	0x08002968

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08002968 	.word	0x08002968

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000412:	4b62      	ldr	r3, [pc, #392]	; (800059c <main+0x190>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d11b      	bne.n	8000456 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800041e:	f3bf 8f4f 	dsb	sy
}
 8000422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000424:	f3bf 8f6f 	isb	sy
}
 8000428:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800042a:	4b5c      	ldr	r3, [pc, #368]	; (800059c <main+0x190>)
 800042c:	2200      	movs	r2, #0
 800042e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000432:	f3bf 8f4f 	dsb	sy
}
 8000436:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000438:	f3bf 8f6f 	isb	sy
}
 800043c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800043e:	4b57      	ldr	r3, [pc, #348]	; (800059c <main+0x190>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a56      	ldr	r2, [pc, #344]	; (800059c <main+0x190>)
 8000444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000448:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800044a:	f3bf 8f4f 	dsb	sy
}
 800044e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000450:	f3bf 8f6f 	isb	sy
}
 8000454:	e000      	b.n	8000458 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000456:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000458:	4b50      	ldr	r3, [pc, #320]	; (800059c <main+0x190>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000460:	2b00      	cmp	r3, #0
 8000462:	d138      	bne.n	80004d6 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000464:	4b4d      	ldr	r3, [pc, #308]	; (800059c <main+0x190>)
 8000466:	2200      	movs	r2, #0
 8000468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800046c:	f3bf 8f4f 	dsb	sy
}
 8000470:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000472:	4b4a      	ldr	r3, [pc, #296]	; (800059c <main+0x190>)
 8000474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000478:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800047a:	693b      	ldr	r3, [r7, #16]
 800047c:	0b5b      	lsrs	r3, r3, #13
 800047e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000482:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000484:	693b      	ldr	r3, [r7, #16]
 8000486:	08db      	lsrs	r3, r3, #3
 8000488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800048c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	015a      	lsls	r2, r3, #5
 8000492:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000496:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000498:	68ba      	ldr	r2, [r7, #8]
 800049a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800049c:	493f      	ldr	r1, [pc, #252]	; (800059c <main+0x190>)
 800049e:	4313      	orrs	r3, r2
 80004a0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	1e5a      	subs	r2, r3, #1
 80004a8:	60ba      	str	r2, [r7, #8]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d1ef      	bne.n	800048e <main+0x82>
    } while(sets-- != 0U);
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	1e5a      	subs	r2, r3, #1
 80004b2:	60fa      	str	r2, [r7, #12]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d1e5      	bne.n	8000484 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80004b8:	f3bf 8f4f 	dsb	sy
}
 80004bc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004be:	4b37      	ldr	r3, [pc, #220]	; (800059c <main+0x190>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a36      	ldr	r2, [pc, #216]	; (800059c <main+0x190>)
 80004c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004ca:	f3bf 8f4f 	dsb	sy
}
 80004ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004d0:	f3bf 8f6f 	isb	sy
}
 80004d4:	e000      	b.n	80004d8 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004d6:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80004d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004dc:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80004de:	bf00      	nop
 80004e0:	4b2f      	ldr	r3, [pc, #188]	; (80005a0 <main+0x194>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d004      	beq.n	80004f6 <main+0xea>
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	1e5a      	subs	r2, r3, #1
 80004f0:	617a      	str	r2, [r7, #20]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	dcf4      	bgt.n	80004e0 <main+0xd4>
  if ( timeout < 0 )
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	da01      	bge.n	8000500 <main+0xf4>
  {
  Error_Handler();
 80004fc:	f000 f992 	bl	8000824 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fb52 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f856 	bl	80005b4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000508:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <main+0x194>)
 800050a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800050e:	4a24      	ldr	r2, [pc, #144]	; (80005a0 <main+0x194>)
 8000510:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000518:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <main+0x194>)
 800051a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800051e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000526:	2000      	movs	r0, #0
 8000528:	f000 feae 	bl	8001288 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800052c:	2100      	movs	r1, #0
 800052e:	2000      	movs	r0, #0
 8000530:	f000 fec4 	bl	80012bc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000538:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800053a:	bf00      	nop
 800053c:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <main+0x194>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000544:	2b00      	cmp	r3, #0
 8000546:	d104      	bne.n	8000552 <main+0x146>
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	1e5a      	subs	r2, r3, #1
 800054c:	617a      	str	r2, [r7, #20]
 800054e:	2b00      	cmp	r3, #0
 8000550:	dcf4      	bgt.n	800053c <main+0x130>
if ( timeout < 0 )
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	2b00      	cmp	r3, #0
 8000556:	da01      	bge.n	800055c <main+0x150>
{
Error_Handler();
 8000558:	f000 f964 	bl	8000824 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f8f8 	bl	8000750 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000560:	f000 f8a2 	bl	80006a8 <MX_TIM1_Init>
  nhd_LCD_Init();
 8000564:	f000 fa2a 	bl	80009bc <nhd_LCD_Init>
  /* USER CODE BEGIN 2 */

  lcd_send_string("HELLO ");
 8000568:	480e      	ldr	r0, [pc, #56]	; (80005a4 <main+0x198>)
 800056a:	f000 fa64 	bl	8000a36 <lcd_send_string>
  HAL_Delay(100);
 800056e:	2064      	movs	r0, #100	; 0x64
 8000570:	f000 fbac 	bl	8000ccc <HAL_Delay>
  lcd_send_string("WORLD ");
 8000574:	480c      	ldr	r0, [pc, #48]	; (80005a8 <main+0x19c>)
 8000576:	f000 fa5e 	bl	8000a36 <lcd_send_string>
  HAL_Delay(100);
 800057a:	2064      	movs	r0, #100	; 0x64
 800057c:	f000 fba6 	bl	8000ccc <HAL_Delay>
  lcd_send_string("FROM");
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <main+0x1a0>)
 8000582:	f000 fa58 	bl	8000a36 <lcd_send_string>
  HAL_Delay(100);
 8000586:	2064      	movs	r0, #100	; 0x64
 8000588:	f000 fba0 	bl	8000ccc <HAL_Delay>
  lcd_put_cur(1, 0);
 800058c:	2100      	movs	r1, #0
 800058e:	2001      	movs	r0, #1
 8000590:	f000 f9e2 	bl	8000958 <lcd_put_cur>
  lcd_send_string("KRISSSTIANN!!!!!!!");
 8000594:	4806      	ldr	r0, [pc, #24]	; (80005b0 <main+0x1a4>)
 8000596:	f000 fa4e 	bl	8000a36 <lcd_send_string>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059a:	e7fe      	b.n	800059a <main+0x18e>
 800059c:	e000ed00 	.word	0xe000ed00
 80005a0:	58024400 	.word	0x58024400
 80005a4:	08002980 	.word	0x08002980
 80005a8:	08002988 	.word	0x08002988
 80005ac:	08002990 	.word	0x08002990
 80005b0:	08002998 	.word	0x08002998

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b09c      	sub	sp, #112	; 0x70
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005be:	224c      	movs	r2, #76	; 0x4c
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 f9c8 	bl	8002958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2220      	movs	r2, #32
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 f9c2 	bl	8002958 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005d4:	2004      	movs	r0, #4
 80005d6:	f000 fe85 	bl	80012e4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005da:	2300      	movs	r3, #0
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	4b30      	ldr	r3, [pc, #192]	; (80006a0 <SystemClock_Config+0xec>)
 80005e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005e2:	4a2f      	ldr	r2, [pc, #188]	; (80006a0 <SystemClock_Config+0xec>)
 80005e4:	f023 0301 	bic.w	r3, r3, #1
 80005e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005ea:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <SystemClock_Config+0xec>)
 80005ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <SystemClock_Config+0xf0>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a2a      	ldr	r2, [pc, #168]	; (80006a4 <SystemClock_Config+0xf0>)
 80005fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <SystemClock_Config+0xf0>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800060c:	bf00      	nop
 800060e:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <SystemClock_Config+0xf0>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800061a:	d1f8      	bne.n	800060e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	2302      	movs	r3, #2
 800062c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800062e:	2305      	movs	r3, #5
 8000630:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000632:	23a0      	movs	r3, #160	; 0xa0
 8000634:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000636:	2302      	movs	r3, #2
 8000638:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800063a:	2302      	movs	r3, #2
 800063c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800063e:	2302      	movs	r3, #2
 8000640:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000642:	2308      	movs	r3, #8
 8000644:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000646:	2300      	movs	r3, #0
 8000648:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fea0 	bl	8001398 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800065e:	f000 f8e1 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	233f      	movs	r3, #63	; 0x3f
 8000664:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2303      	movs	r3, #3
 8000668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800066e:	2308      	movs	r3, #8
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000672:	2340      	movs	r3, #64	; 0x40
 8000674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000676:	2340      	movs	r3, #64	; 0x40
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800067a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800067e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000680:	2340      	movs	r3, #64	; 0x40
 8000682:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2102      	movs	r1, #2
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fa95 	bl	8001bb8 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000694:	f000 f8c6 	bl	8000824 <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3770      	adds	r7, #112	; 0x70
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	58000400 	.word	0x58000400
 80006a4:	58024800 	.word	0x58024800

080006a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_TIM1_Init+0xa0>)
 80006c8:	4a20      	ldr	r2, [pc, #128]	; (800074c <MX_TIM1_Init+0xa4>)
 80006ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <MX_TIM1_Init+0xa0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_TIM1_Init+0xa0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_TIM1_Init+0xa0>)
 80006da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_TIM1_Init+0xa0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_TIM1_Init+0xa0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_TIM1_Init+0xa0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006f2:	4815      	ldr	r0, [pc, #84]	; (8000748 <MX_TIM1_Init+0xa0>)
 80006f4:	f001 fd90 	bl	8002218 <HAL_TIM_Base_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80006fe:	f000 f891 	bl	8000824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	4619      	mov	r1, r3
 800070e:	480e      	ldr	r0, [pc, #56]	; (8000748 <MX_TIM1_Init+0xa0>)
 8000710:	f001 fe4a 	bl	80023a8 <HAL_TIM_ConfigClockSource>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800071a:	f000 f883 	bl	8000824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <MX_TIM1_Init+0xa0>)
 8000730:	f002 f866 	bl	8002800 <HAL_TIMEx_MasterConfigSynchronization>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800073a:	f000 f873 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	3720      	adds	r7, #32
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2400002c 	.word	0x2400002c
 800074c:	40010000 	.word	0x40010000

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <MX_GPIO_Init+0xc8>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076c:	4a2a      	ldr	r2, [pc, #168]	; (8000818 <MX_GPIO_Init+0xc8>)
 800076e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000776:	4b28      	ldr	r3, [pc, #160]	; (8000818 <MX_GPIO_Init+0xc8>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000784:	4b24      	ldr	r3, [pc, #144]	; (8000818 <MX_GPIO_Init+0xc8>)
 8000786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078a:	4a23      	ldr	r2, [pc, #140]	; (8000818 <MX_GPIO_Init+0xc8>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <MX_GPIO_Init+0xc8>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a2:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <MX_GPIO_Init+0xc8>)
 80007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <MX_GPIO_Init+0xc8>)
 80007aa:	f043 0308 	orr.w	r3, r3, #8
 80007ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_GPIO_Init+0xc8>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b8:	f003 0308 	and.w	r3, r3, #8
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c6:	4815      	ldr	r0, [pc, #84]	; (800081c <MX_GPIO_Init+0xcc>)
 80007c8:	f000 fd44 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80007cc:	2200      	movs	r2, #0
 80007ce:	21fe      	movs	r1, #254	; 0xfe
 80007d0:	4813      	ldr	r0, [pc, #76]	; (8000820 <MX_GPIO_Init+0xd0>)
 80007d2:	f000 fd3f 	bl	8001254 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	480b      	ldr	r0, [pc, #44]	; (800081c <MX_GPIO_Init+0xcc>)
 80007f0:	f000 fb80 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80007f4:	23fe      	movs	r3, #254	; 0xfe
 80007f6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_GPIO_Init+0xd0>)
 800080c:	f000 fb72 	bl	8000ef4 <HAL_GPIO_Init>

}
 8000810:	bf00      	nop
 8000812:	3720      	adds	r7, #32
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58024400 	.word	0x58024400
 800081c:	58020400 	.word	0x58020400
 8000820:	58020c00 	.word	0x58020c00

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <five_ns_delay>:
//define the timer handler below
#define timer htim1

extern TIM_HandleTypeDef timer;
void five_ns_delay (int us)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&timer, 0);	//clear timer
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <five_ns_delay+0x30>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2200      	movs	r2, #0
 800083e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&timer);	//start timer
 8000840:	4807      	ldr	r0, [pc, #28]	; (8000860 <five_ns_delay+0x30>)
 8000842:	f001 fd41 	bl	80022c8 <HAL_TIM_Base_Start_IT>
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000846:	bf00      	nop
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <five_ns_delay+0x30>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	d3f9      	bcc.n	8000848 <five_ns_delay+0x18>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2400002c 	.word	0x2400002c

08000864 <send_to_lcd>:

void send_to_lcd (char data, int rs)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  //rs = 1 for data, rs = 0 for command
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	461a      	mov	r2, r3
 8000876:	2102      	movs	r1, #2
 8000878:	4819      	ldr	r0, [pc, #100]	; (80008e0 <send_to_lcd+0x7c>)
 800087a:	f000 fceb 	bl	8001254 <HAL_GPIO_WritePin>

	// write the data to the respective pin
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	08db      	lsrs	r3, r3, #3
 8000882:	b2db      	uxtb	r3, r3
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	b2db      	uxtb	r3, r3
 800088a:	461a      	mov	r2, r3
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	4814      	ldr	r0, [pc, #80]	; (80008e0 <send_to_lcd+0x7c>)
 8000890:	f000 fce0 	bl	8001254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	089b      	lsrs	r3, r3, #2
 8000898:	b2db      	uxtb	r3, r3
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	461a      	mov	r2, r3
 80008a2:	2140      	movs	r1, #64	; 0x40
 80008a4:	480e      	ldr	r0, [pc, #56]	; (80008e0 <send_to_lcd+0x7c>)
 80008a6:	f000 fcd5 	bl	8001254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	2120      	movs	r1, #32
 80008ba:	4809      	ldr	r0, [pc, #36]	; (80008e0 <send_to_lcd+0x7c>)
 80008bc:	f000 fcca 	bl	8001254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	461a      	mov	r2, r3
 80008ca:	2110      	movs	r1, #16
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <send_to_lcd+0x7c>)
 80008ce:	f000 fcc1 	bl	8001254 <HAL_GPIO_WritePin>

	lcd_nibble();	//pulse LCD enable pin to initiate data transfer
 80008d2:	f000 f8c5 	bl	8000a60 <lcd_nibble>
	//HAL_Delay(1);  	//wait for 1 ms while the enable pin settles

    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	58020c00 	.word	0x58020c00

080008e4 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    //send upper nibble first
    datatosend = ((cmd>>4)&0x0f);
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	091b      	lsrs	r3, r3, #4
 80008f2:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ffb3 	bl	8000864 <send_to_lcd>

    //send lower nibble
    datatosend = ((cmd)&0x0f);
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	f003 030f 	and.w	r3, r3, #15
 8000904:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  //RS must be 0 while sending command
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ffaa 	bl	8000864 <send_to_lcd>

    HAL_Delay(2);
 8000910:	2002      	movs	r0, #2
 8000912:	f000 f9db 	bl	8000ccc <HAL_Delay>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <lcd_send_data>:

void lcd_send_data (char data)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b084      	sub	sp, #16
 8000922:	af00      	add	r7, sp, #0
 8000924:	4603      	mov	r3, r0
 8000926:	71fb      	strb	r3, [r7, #7]
	char datatosend;

    //send upper nibble first
    datatosend = ((data>>4)&0x0f);
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	091b      	lsrs	r3, r3, #4
 800092c:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	2101      	movs	r1, #1
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ff96 	bl	8000864 <send_to_lcd>

    //send lower nibble
    datatosend = ((data)&0x0f);
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f003 030f 	and.w	r3, r3, #15
 800093e:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,1);  //RS must be 1 while sending data
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	2101      	movs	r1, #1
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff8d 	bl	8000864 <send_to_lcd>

    HAL_Delay(2);
 800094a:	2002      	movs	r0, #2
 800094c:	f000 f9be 	bl	8000ccc <HAL_Delay>
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <lcd_put_cur>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_put_cur(int row, int col) //fix for 4x20 LCD !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b03      	cmp	r3, #3
 8000966:	d81f      	bhi.n	80009a8 <lcd_put_cur+0x50>
 8000968:	a201      	add	r2, pc, #4	; (adr r2, 8000970 <lcd_put_cur+0x18>)
 800096a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096e:	bf00      	nop
 8000970:	08000981 	.word	0x08000981
 8000974:	0800098b 	.word	0x0800098b
 8000978:	08000995 	.word	0x08000995
 800097c:	0800099f 	.word	0x0800099f
    switch (row)
    {
        case 0:
            col |= 0x80;
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000986:	603b      	str	r3, [r7, #0]
            break;
 8000988:	e00e      	b.n	80009a8 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000990:	603b      	str	r3, [r7, #0]
            break;
 8000992:	e009      	b.n	80009a8 <lcd_put_cur+0x50>
        case 2:
            col |= 0xC0;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800099a:	603b      	str	r3, [r7, #0]
            break;
 800099c:	e004      	b.n	80009a8 <lcd_put_cur+0x50>
        case 3:
            col |= 0xC0;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80009a4:	603b      	str	r3, [r7, #0]
            break;
 80009a6:	bf00      	nop
    }

    lcd_send_cmd (col);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff99 	bl	80008e4 <lcd_send_cmd>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop

080009bc <nhd_LCD_Init>:


void nhd_LCD_Init (void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	//4 bit initialization
	HAL_Delay(50);  //wait for >40ms
 80009c0:	2032      	movs	r0, #50	; 0x32
 80009c2:	f000 f983 	bl	8000ccc <HAL_Delay>
	lcd_send_cmd (0x30);
 80009c6:	2030      	movs	r0, #48	; 0x30
 80009c8:	f7ff ff8c 	bl	80008e4 <lcd_send_cmd>
	HAL_Delay(5);  //wait for >4.1ms
 80009cc:	2005      	movs	r0, #5
 80009ce:	f000 f97d 	bl	8000ccc <HAL_Delay>
	lcd_send_cmd (0x30);
 80009d2:	2030      	movs	r0, #48	; 0x30
 80009d4:	f7ff ff86 	bl	80008e4 <lcd_send_cmd>
	HAL_Delay(1);  //wait for >100us
 80009d8:	2001      	movs	r0, #1
 80009da:	f000 f977 	bl	8000ccc <HAL_Delay>
	lcd_send_cmd (0x30);
 80009de:	2030      	movs	r0, #48	; 0x30
 80009e0:	f7ff ff80 	bl	80008e4 <lcd_send_cmd>
	HAL_Delay(10);
 80009e4:	200a      	movs	r0, #10
 80009e6:	f000 f971 	bl	8000ccc <HAL_Delay>
	lcd_send_cmd (0x20);  //4bit mode
 80009ea:	2020      	movs	r0, #32
 80009ec:	f7ff ff7a 	bl	80008e4 <lcd_send_cmd>
	HAL_Delay(10);
 80009f0:	200a      	movs	r0, #10
 80009f2:	f000 f96b 	bl	8000ccc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	HAL_Delay(1);
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
	*/

	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80009f6:	2028      	movs	r0, #40	; 0x28
 80009f8:	f7ff ff74 	bl	80008e4 <lcd_send_cmd>
	HAL_Delay(1);
 80009fc:	2001      	movs	r0, #1
 80009fe:	f000 f965 	bl	8000ccc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000a02:	2008      	movs	r0, #8
 8000a04:	f7ff ff6e 	bl	80008e4 <lcd_send_cmd>
	HAL_Delay(1);
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f000 f95f 	bl	8000ccc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff ff68 	bl	80008e4 <lcd_send_cmd>
	HAL_Delay(1);
 8000a14:	2001      	movs	r0, #1
 8000a16:	f000 f959 	bl	8000ccc <HAL_Delay>
	HAL_Delay(1);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f000 f956 	bl	8000ccc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a20:	2006      	movs	r0, #6
 8000a22:	f7ff ff5f 	bl	80008e4 <lcd_send_cmd>
	HAL_Delay(1);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f000 f950 	bl	8000ccc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a2c:	200c      	movs	r0, #12
 8000a2e:	f7ff ff59 	bl	80008e4 <lcd_send_cmd>


}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000a3e:	e006      	b.n	8000a4e <lcd_send_string+0x18>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff68 	bl	800091e <lcd_send_data>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1f4      	bne.n	8000a40 <lcd_send_string+0xa>
}
 8000a56:	bf00      	nop
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <lcd_nibble>:

void lcd_nibble() {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2108      	movs	r1, #8
 8000a68:	4806      	ldr	r0, [pc, #24]	; (8000a84 <lcd_nibble+0x24>)
 8000a6a:	f000 fbf3 	bl	8001254 <HAL_GPIO_WritePin>
	five_ns_delay(65);								//325ns enable pulse width delay
 8000a6e:	2041      	movs	r0, #65	; 0x41
 8000a70:	f7ff fede 	bl	8000830 <five_ns_delay>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); 	//debugging LED
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2108      	movs	r1, #8
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <lcd_nibble+0x24>)
 8000a7a:	f000 fbeb 	bl	8001254 <HAL_GPIO_WritePin>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	58020c00 	.word	0x58020c00

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <HAL_MspInit+0x30>)
 8000a90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x30>)
 8000a96:	f043 0302 	orr.w	r3, r3, #2
 8000a9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x30>)
 8000aa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	58024400 	.word	0x58024400

08000abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <HAL_TIM_Base_MspInit+0x3c>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d10e      	bne.n	8000aec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <HAL_TIM_Base_MspInit+0x40>)
 8000ad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ad4:	4a09      	ldr	r2, [pc, #36]	; (8000afc <HAL_TIM_Base_MspInit+0x40>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <HAL_TIM_Base_MspInit+0x40>)
 8000ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	40010000 	.word	0x40010000
 8000afc:	58024400 	.word	0x58024400

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 f89e 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b58:	f7ff fbbe 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b5e:	490d      	ldr	r1, [pc, #52]	; (8000b94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b64:	e002      	b.n	8000b6c <LoopCopyDataInit>

08000b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6a:	3304      	adds	r3, #4

08000b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b70:	d3f9      	bcc.n	8000b66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b74:	4c0a      	ldr	r4, [pc, #40]	; (8000ba0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b78:	e001      	b.n	8000b7e <LoopFillZerobss>

08000b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7c:	3204      	adds	r2, #4

08000b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b80:	d3fb      	bcc.n	8000b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b82:	f001 fec5 	bl	8002910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b86:	f7ff fc41 	bl	800040c <main>
  bx  lr
 8000b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b8c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b94:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b98:	080029c4 	.word	0x080029c4
  ldr r2, =_sbss
 8000b9c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ba0:	2400007c 	.word	0x2400007c

08000ba4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC3_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bae:	2003      	movs	r0, #3
 8000bb0:	f000 f96e 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bb4:	f001 f9b6 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_Init+0x68>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	0a1b      	lsrs	r3, r3, #8
 8000bc0:	f003 030f 	and.w	r3, r3, #15
 8000bc4:	4913      	ldr	r1, [pc, #76]	; (8000c14 <HAL_Init+0x6c>)
 8000bc6:	5ccb      	ldrb	r3, [r1, r3]
 8000bc8:	f003 031f 	and.w	r3, r3, #31
 8000bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_Init+0x68>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <HAL_Init+0x6c>)
 8000bdc:	5cd3      	ldrb	r3, [r2, r3]
 8000bde:	f003 031f 	and.w	r3, r3, #31
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	fa22 f303 	lsr.w	r3, r2, r3
 8000be8:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <HAL_Init+0x70>)
 8000bea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bec:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <HAL_Init+0x74>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 f814 	bl	8000c20 <HAL_InitTick>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e002      	b.n	8000c08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c02:	f7ff ff41 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	58024400 	.word	0x58024400
 8000c14:	080029ac 	.word	0x080029ac
 8000c18:	24000004 	.word	0x24000004
 8000c1c:	24000000 	.word	0x24000000

08000c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_InitTick+0x60>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d101      	bne.n	8000c34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e021      	b.n	8000c78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <HAL_InitTick+0x64>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_InitTick+0x60>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f945 	bl	8000eda <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00e      	b.n	8000c78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d80a      	bhi.n	8000c76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 f91d 	bl	8000ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <HAL_InitTick+0x68>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2400000c 	.word	0x2400000c
 8000c84:	24000000 	.word	0x24000000
 8000c88:	24000008 	.word	0x24000008

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	2400000c 	.word	0x2400000c
 8000cb0:	24000078 	.word	0x24000078

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	24000078 	.word	0x24000078

08000ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd4:	f7ff ffee 	bl	8000cb4 <HAL_GetTick>
 8000cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce4:	d005      	beq.n	8000cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_Delay+0x44>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf2:	bf00      	nop
 8000cf4:	f7ff ffde 	bl	8000cb4 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d8f7      	bhi.n	8000cf4 <HAL_Delay+0x28>
  {
  }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2400000c 	.word	0x2400000c

08000d14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_GetREVID+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	0c1b      	lsrs	r3, r3, #16
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	5c001000 	.word	0x5c001000

08000d2c <__NVIC_SetPriorityGrouping>:
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <__NVIC_SetPriorityGrouping+0x40>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	4313      	orrs	r3, r2
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <__NVIC_SetPriorityGrouping+0x40>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00
 8000d70:	05fa0000 	.word	0x05fa0000

08000d74 <__NVIC_GetPriorityGrouping>:
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_SetPriority>:
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	; (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	; (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	; 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f7ff ff8e 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff47 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff5e 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff90 	bl	8000de4 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5f 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ffb2 	bl	8000e4c <SysTick_Config>
 8000ee8:	4603      	mov	r3, r0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f02:	4b89      	ldr	r3, [pc, #548]	; (8001128 <HAL_GPIO_Init+0x234>)
 8000f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f06:	e194      	b.n	8001232 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa01 f303 	lsl.w	r3, r1, r3
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 8186 	beq.w	800122c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d00b      	beq.n	8000f40 <HAL_GPIO_Init+0x4c>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d007      	beq.n	8000f40 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f34:	2b11      	cmp	r3, #17
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b12      	cmp	r3, #18
 8000f3e:	d130      	bne.n	8000fa2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f76:	2201      	movs	r2, #1
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	f003 0201 	and.w	r2, r3, #1
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0xee>
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b12      	cmp	r3, #18
 8000fe0:	d123      	bne.n	800102a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	08da      	lsrs	r2, r3, #3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3208      	adds	r2, #8
 8000fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	691a      	ldr	r2, [r3, #16]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	08da      	lsrs	r2, r3, #3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3208      	adds	r2, #8
 8001024:	69b9      	ldr	r1, [r7, #24]
 8001026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0203 	and.w	r2, r3, #3
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 80e0 	beq.w	800122c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106c:	4b2f      	ldr	r3, [pc, #188]	; (800112c <HAL_GPIO_Init+0x238>)
 800106e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001072:	4a2e      	ldr	r2, [pc, #184]	; (800112c <HAL_GPIO_Init+0x238>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <HAL_GPIO_Init+0x238>)
 800107e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108a:	4a29      	ldr	r2, [pc, #164]	; (8001130 <HAL_GPIO_Init+0x23c>)
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	3302      	adds	r3, #2
 8001092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a20      	ldr	r2, [pc, #128]	; (8001134 <HAL_GPIO_Init+0x240>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d052      	beq.n	800115c <HAL_GPIO_Init+0x268>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a1f      	ldr	r2, [pc, #124]	; (8001138 <HAL_GPIO_Init+0x244>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d031      	beq.n	8001122 <HAL_GPIO_Init+0x22e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a1e      	ldr	r2, [pc, #120]	; (800113c <HAL_GPIO_Init+0x248>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d02b      	beq.n	800111e <HAL_GPIO_Init+0x22a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a1d      	ldr	r2, [pc, #116]	; (8001140 <HAL_GPIO_Init+0x24c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d025      	beq.n	800111a <HAL_GPIO_Init+0x226>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <HAL_GPIO_Init+0x250>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d01f      	beq.n	8001116 <HAL_GPIO_Init+0x222>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <HAL_GPIO_Init+0x254>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d019      	beq.n	8001112 <HAL_GPIO_Init+0x21e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a1a      	ldr	r2, [pc, #104]	; (800114c <HAL_GPIO_Init+0x258>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d013      	beq.n	800110e <HAL_GPIO_Init+0x21a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a19      	ldr	r2, [pc, #100]	; (8001150 <HAL_GPIO_Init+0x25c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d00d      	beq.n	800110a <HAL_GPIO_Init+0x216>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a18      	ldr	r2, [pc, #96]	; (8001154 <HAL_GPIO_Init+0x260>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d007      	beq.n	8001106 <HAL_GPIO_Init+0x212>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a17      	ldr	r2, [pc, #92]	; (8001158 <HAL_GPIO_Init+0x264>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <HAL_GPIO_Init+0x20e>
 80010fe:	2309      	movs	r3, #9
 8001100:	e02d      	b.n	800115e <HAL_GPIO_Init+0x26a>
 8001102:	230a      	movs	r3, #10
 8001104:	e02b      	b.n	800115e <HAL_GPIO_Init+0x26a>
 8001106:	2308      	movs	r3, #8
 8001108:	e029      	b.n	800115e <HAL_GPIO_Init+0x26a>
 800110a:	2307      	movs	r3, #7
 800110c:	e027      	b.n	800115e <HAL_GPIO_Init+0x26a>
 800110e:	2306      	movs	r3, #6
 8001110:	e025      	b.n	800115e <HAL_GPIO_Init+0x26a>
 8001112:	2305      	movs	r3, #5
 8001114:	e023      	b.n	800115e <HAL_GPIO_Init+0x26a>
 8001116:	2304      	movs	r3, #4
 8001118:	e021      	b.n	800115e <HAL_GPIO_Init+0x26a>
 800111a:	2303      	movs	r3, #3
 800111c:	e01f      	b.n	800115e <HAL_GPIO_Init+0x26a>
 800111e:	2302      	movs	r3, #2
 8001120:	e01d      	b.n	800115e <HAL_GPIO_Init+0x26a>
 8001122:	2301      	movs	r3, #1
 8001124:	e01b      	b.n	800115e <HAL_GPIO_Init+0x26a>
 8001126:	bf00      	nop
 8001128:	58000080 	.word	0x58000080
 800112c:	58024400 	.word	0x58024400
 8001130:	58000400 	.word	0x58000400
 8001134:	58020000 	.word	0x58020000
 8001138:	58020400 	.word	0x58020400
 800113c:	58020800 	.word	0x58020800
 8001140:	58020c00 	.word	0x58020c00
 8001144:	58021000 	.word	0x58021000
 8001148:	58021400 	.word	0x58021400
 800114c:	58021800 	.word	0x58021800
 8001150:	58021c00 	.word	0x58021c00
 8001154:	58022000 	.word	0x58022000
 8001158:	58022400 	.word	0x58022400
 800115c:	2300      	movs	r3, #0
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	f002 0203 	and.w	r2, r2, #3
 8001164:	0092      	lsls	r2, r2, #2
 8001166:	4093      	lsls	r3, r2
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800116e:	4938      	ldr	r1, [pc, #224]	; (8001250 <HAL_GPIO_Init+0x35c>)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	3301      	adds	r3, #1
 8001230:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa22 f303 	lsr.w	r3, r2, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	f47f ae63 	bne.w	8000f08 <HAL_GPIO_Init+0x14>
  }
}
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	3724      	adds	r7, #36	; 0x24
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	58000400 	.word	0x58000400

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001290:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <HAL_HSEM_FastTake+0x2c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3320      	adds	r3, #32
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <HAL_HSEM_FastTake+0x30>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d101      	bne.n	80012a4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e000      	b.n	80012a6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	58026400 	.word	0x58026400
 80012b8:	80000300 	.word	0x80000300

080012bc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80012c6:	4906      	ldr	r1, [pc, #24]	; (80012e0 <HAL_HSEM_Release+0x24>)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	58026400 	.word	0x58026400

080012e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80012ec:	4b29      	ldr	r3, [pc, #164]	; (8001394 <HAL_PWREx_ConfigSupply+0xb0>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	2b06      	cmp	r3, #6
 80012f6:	d00a      	beq.n	800130e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80012f8:	4b26      	ldr	r3, [pc, #152]	; (8001394 <HAL_PWREx_ConfigSupply+0xb0>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	429a      	cmp	r2, r3
 8001304:	d001      	beq.n	800130a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e040      	b.n	800138c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e03e      	b.n	800138c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800130e:	4b21      	ldr	r3, [pc, #132]	; (8001394 <HAL_PWREx_ConfigSupply+0xb0>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001316:	491f      	ldr	r1, [pc, #124]	; (8001394 <HAL_PWREx_ConfigSupply+0xb0>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4313      	orrs	r3, r2
 800131c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800131e:	f7ff fcc9 	bl	8000cb4 <HAL_GetTick>
 8001322:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001324:	e009      	b.n	800133a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001326:	f7ff fcc5 	bl	8000cb4 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001334:	d901      	bls.n	800133a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e028      	b.n	800138c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_PWREx_ConfigSupply+0xb0>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001346:	d1ee      	bne.n	8001326 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b1e      	cmp	r3, #30
 800134c:	d008      	beq.n	8001360 <HAL_PWREx_ConfigSupply+0x7c>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b2e      	cmp	r3, #46	; 0x2e
 8001352:	d005      	beq.n	8001360 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b1d      	cmp	r3, #29
 8001358:	d002      	beq.n	8001360 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b2d      	cmp	r3, #45	; 0x2d
 800135e:	d114      	bne.n	800138a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001360:	f7ff fca8 	bl	8000cb4 <HAL_GetTick>
 8001364:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001366:	e009      	b.n	800137c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001368:	f7ff fca4 	bl	8000cb4 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001376:	d901      	bls.n	800137c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e007      	b.n	800138c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_PWREx_ConfigSupply+0xb0>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001388:	d1ee      	bne.n	8001368 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	58024800 	.word	0x58024800

08001398 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e3ff      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8087 	beq.w	80014c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013b8:	4b99      	ldr	r3, [pc, #612]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013c2:	4b97      	ldr	r3, [pc, #604]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 80013c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80013c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ca:	2b10      	cmp	r3, #16
 80013cc:	d007      	beq.n	80013de <HAL_RCC_OscConfig+0x46>
 80013ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d0:	2b18      	cmp	r3, #24
 80013d2:	d110      	bne.n	80013f6 <HAL_RCC_OscConfig+0x5e>
 80013d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d10b      	bne.n	80013f6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013de:	4b90      	ldr	r3, [pc, #576]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d06c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x12c>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d168      	bne.n	80014c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e3d9      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x76>
 8001400:	4b87      	ldr	r3, [pc, #540]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a86      	ldr	r2, [pc, #536]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 8001406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	e02e      	b.n	800146c <HAL_RCC_OscConfig+0xd4>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x98>
 8001416:	4b82      	ldr	r3, [pc, #520]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a81      	ldr	r2, [pc, #516]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 800141c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b7f      	ldr	r3, [pc, #508]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a7e      	ldr	r2, [pc, #504]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 8001428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e01d      	b.n	800146c <HAL_RCC_OscConfig+0xd4>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0xbc>
 800143a:	4b79      	ldr	r3, [pc, #484]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a78      	ldr	r2, [pc, #480]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b76      	ldr	r3, [pc, #472]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a75      	ldr	r2, [pc, #468]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e00b      	b.n	800146c <HAL_RCC_OscConfig+0xd4>
 8001454:	4b72      	ldr	r3, [pc, #456]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a71      	ldr	r2, [pc, #452]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 800145a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b6f      	ldr	r3, [pc, #444]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a6e      	ldr	r2, [pc, #440]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 8001466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fc1e 	bl	8000cb4 <HAL_GetTick>
 8001478:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fc1a 	bl	8000cb4 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e38d      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800148e:	4b64      	ldr	r3, [pc, #400]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0xe4>
 800149a:	e014      	b.n	80014c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fc0a 	bl	8000cb4 <HAL_GetTick>
 80014a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fc06 	bl	8000cb4 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e379      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014b6:	4b5a      	ldr	r3, [pc, #360]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x10c>
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80ae 	beq.w	8001630 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014d4:	4b52      	ldr	r3, [pc, #328]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014de:	4b50      	ldr	r3, [pc, #320]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <HAL_RCC_OscConfig+0x162>
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	2b18      	cmp	r3, #24
 80014ee:	d13a      	bne.n	8001566 <HAL_RCC_OscConfig+0x1ce>
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d135      	bne.n	8001566 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014fa:	4b49      	ldr	r3, [pc, #292]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <HAL_RCC_OscConfig+0x17a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e34b      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001512:	f7ff fbff 	bl	8000d14 <HAL_GetREVID>
 8001516:	4603      	mov	r3, r0
 8001518:	f241 0203 	movw	r2, #4099	; 0x1003
 800151c:	4293      	cmp	r3, r2
 800151e:	d817      	bhi.n	8001550 <HAL_RCC_OscConfig+0x1b8>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	2b40      	cmp	r3, #64	; 0x40
 8001526:	d108      	bne.n	800153a <HAL_RCC_OscConfig+0x1a2>
 8001528:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001530:	4a3b      	ldr	r2, [pc, #236]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 8001532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001536:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001538:	e07a      	b.n	8001630 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153a:	4b39      	ldr	r3, [pc, #228]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	031b      	lsls	r3, r3, #12
 8001548:	4935      	ldr	r1, [pc, #212]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 800154a:	4313      	orrs	r3, r2
 800154c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800154e:	e06f      	b.n	8001630 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b33      	ldr	r3, [pc, #204]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	061b      	lsls	r3, r3, #24
 800155e:	4930      	ldr	r1, [pc, #192]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001564:	e064      	b.n	8001630 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d045      	beq.n	80015fa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800156e:	4b2c      	ldr	r3, [pc, #176]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 0219 	bic.w	r2, r3, #25
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	4929      	ldr	r1, [pc, #164]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fb98 	bl	8000cb4 <HAL_GetTick>
 8001584:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001588:	f7ff fb94 	bl	8000cb4 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e307      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a6:	f7ff fbb5 	bl	8000d14 <HAL_GetREVID>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d817      	bhi.n	80015e4 <HAL_RCC_OscConfig+0x24c>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	2b40      	cmp	r3, #64	; 0x40
 80015ba:	d108      	bne.n	80015ce <HAL_RCC_OscConfig+0x236>
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80015c4:	4a16      	ldr	r2, [pc, #88]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 80015c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ca:	6053      	str	r3, [r2, #4]
 80015cc:	e030      	b.n	8001630 <HAL_RCC_OscConfig+0x298>
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	031b      	lsls	r3, r3, #12
 80015dc:	4910      	ldr	r1, [pc, #64]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
 80015e2:	e025      	b.n	8001630 <HAL_RCC_OscConfig+0x298>
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	061b      	lsls	r3, r3, #24
 80015f2:	490b      	ldr	r1, [pc, #44]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
 80015f8:	e01a      	b.n	8001630 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HAL_RCC_OscConfig+0x288>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001606:	f7ff fb55 	bl	8000cb4 <HAL_GetTick>
 800160a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800160c:	e00a      	b.n	8001624 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800160e:	f7ff fb51 	bl	8000cb4 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d903      	bls.n	8001624 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e2c4      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
 8001620:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001624:	4ba4      	ldr	r3, [pc, #656]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1ee      	bne.n	800160e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80a9 	beq.w	8001790 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800163e:	4b9e      	ldr	r3, [pc, #632]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001646:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001648:	4b9b      	ldr	r3, [pc, #620]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	2b08      	cmp	r3, #8
 8001652:	d007      	beq.n	8001664 <HAL_RCC_OscConfig+0x2cc>
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2b18      	cmp	r3, #24
 8001658:	d13a      	bne.n	80016d0 <HAL_RCC_OscConfig+0x338>
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d135      	bne.n	80016d0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001664:	4b94      	ldr	r3, [pc, #592]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_OscConfig+0x2e4>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	2b80      	cmp	r3, #128	; 0x80
 8001676:	d001      	beq.n	800167c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e296      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800167c:	f7ff fb4a 	bl	8000d14 <HAL_GetREVID>
 8001680:	4603      	mov	r3, r0
 8001682:	f241 0203 	movw	r2, #4099	; 0x1003
 8001686:	4293      	cmp	r3, r2
 8001688:	d817      	bhi.n	80016ba <HAL_RCC_OscConfig+0x322>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	2b20      	cmp	r3, #32
 8001690:	d108      	bne.n	80016a4 <HAL_RCC_OscConfig+0x30c>
 8001692:	4b89      	ldr	r3, [pc, #548]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800169a:	4a87      	ldr	r2, [pc, #540]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 800169c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016a0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016a2:	e075      	b.n	8001790 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016a4:	4b84      	ldr	r3, [pc, #528]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	069b      	lsls	r3, r3, #26
 80016b2:	4981      	ldr	r1, [pc, #516]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016b8:	e06a      	b.n	8001790 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016ba:	4b7f      	ldr	r3, [pc, #508]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	061b      	lsls	r3, r3, #24
 80016c8:	497b      	ldr	r1, [pc, #492]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016ce:	e05f      	b.n	8001790 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d042      	beq.n	800175e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016d8:	4b77      	ldr	r3, [pc, #476]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a76      	ldr	r2, [pc, #472]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 80016de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fae6 	bl	8000cb4 <HAL_GetTick>
 80016e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80016ec:	f7ff fae2 	bl	8000cb4 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e255      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016fe:	4b6e      	ldr	r3, [pc, #440]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800170a:	f7ff fb03 	bl	8000d14 <HAL_GetREVID>
 800170e:	4603      	mov	r3, r0
 8001710:	f241 0203 	movw	r2, #4099	; 0x1003
 8001714:	4293      	cmp	r3, r2
 8001716:	d817      	bhi.n	8001748 <HAL_RCC_OscConfig+0x3b0>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	2b20      	cmp	r3, #32
 800171e:	d108      	bne.n	8001732 <HAL_RCC_OscConfig+0x39a>
 8001720:	4b65      	ldr	r3, [pc, #404]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001728:	4a63      	ldr	r2, [pc, #396]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 800172a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800172e:	6053      	str	r3, [r2, #4]
 8001730:	e02e      	b.n	8001790 <HAL_RCC_OscConfig+0x3f8>
 8001732:	4b61      	ldr	r3, [pc, #388]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	069b      	lsls	r3, r3, #26
 8001740:	495d      	ldr	r1, [pc, #372]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]
 8001746:	e023      	b.n	8001790 <HAL_RCC_OscConfig+0x3f8>
 8001748:	4b5b      	ldr	r3, [pc, #364]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	061b      	lsls	r3, r3, #24
 8001756:	4958      	ldr	r1, [pc, #352]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001758:	4313      	orrs	r3, r2
 800175a:	60cb      	str	r3, [r1, #12]
 800175c:	e018      	b.n	8001790 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800175e:	4b56      	ldr	r3, [pc, #344]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a55      	ldr	r2, [pc, #340]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff faa3 	bl	8000cb4 <HAL_GetTick>
 800176e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001772:	f7ff fa9f 	bl	8000cb4 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e212      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001784:	4b4c      	ldr	r3, [pc, #304]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d036      	beq.n	800180a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d019      	beq.n	80017d8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a4:	4b44      	ldr	r3, [pc, #272]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 80017a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a8:	4a43      	ldr	r2, [pc, #268]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7ff fa80 	bl	8000cb4 <HAL_GetTick>
 80017b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b8:	f7ff fa7c 	bl	8000cb4 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e1ef      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017ca:	4b3b      	ldr	r3, [pc, #236]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 80017cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x420>
 80017d6:	e018      	b.n	800180a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d8:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 80017da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017dc:	4a36      	ldr	r2, [pc, #216]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e4:	f7ff fa66 	bl	8000cb4 <HAL_GetTick>
 80017e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ec:	f7ff fa62 	bl	8000cb4 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e1d5      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017fe:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0320 	and.w	r3, r3, #32
 8001812:	2b00      	cmp	r3, #0
 8001814:	d036      	beq.n	8001884 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d019      	beq.n	8001852 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800181e:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001828:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800182a:	f7ff fa43 	bl	8000cb4 <HAL_GetTick>
 800182e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001832:	f7ff fa3f 	bl	8000cb4 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e1b2      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001844:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x49a>
 8001850:	e018      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 8001858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800185c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800185e:	f7ff fa29 	bl	8000cb4 <HAL_GetTick>
 8001862:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001866:	f7ff fa25 	bl	8000cb4 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e198      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_RCC_OscConfig+0x520>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f0      	bne.n	8001866 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8085 	beq.w	800199c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_RCC_OscConfig+0x524>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_RCC_OscConfig+0x524>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800189e:	f7ff fa09 	bl	8000cb4 <HAL_GetTick>
 80018a2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018a4:	e00c      	b.n	80018c0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80018a6:	f7ff fa05 	bl	8000cb4 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b64      	cmp	r3, #100	; 0x64
 80018b2:	d905      	bls.n	80018c0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e178      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
 80018b8:	58024400 	.word	0x58024400
 80018bc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018c0:	4b96      	ldr	r3, [pc, #600]	; (8001b1c <HAL_RCC_OscConfig+0x784>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0ec      	beq.n	80018a6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x54a>
 80018d4:	4b92      	ldr	r3, [pc, #584]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d8:	4a91      	ldr	r2, [pc, #580]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6713      	str	r3, [r2, #112]	; 0x70
 80018e0:	e02d      	b.n	800193e <HAL_RCC_OscConfig+0x5a6>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x56c>
 80018ea:	4b8d      	ldr	r3, [pc, #564]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	4a8c      	ldr	r2, [pc, #560]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	6713      	str	r3, [r2, #112]	; 0x70
 80018f6:	4b8a      	ldr	r3, [pc, #552]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fa:	4a89      	ldr	r2, [pc, #548]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 80018fc:	f023 0304 	bic.w	r3, r3, #4
 8001900:	6713      	str	r3, [r2, #112]	; 0x70
 8001902:	e01c      	b.n	800193e <HAL_RCC_OscConfig+0x5a6>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b05      	cmp	r3, #5
 800190a:	d10c      	bne.n	8001926 <HAL_RCC_OscConfig+0x58e>
 800190c:	4b84      	ldr	r3, [pc, #528]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	4a83      	ldr	r2, [pc, #524]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	6713      	str	r3, [r2, #112]	; 0x70
 8001918:	4b81      	ldr	r3, [pc, #516]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191c:	4a80      	ldr	r2, [pc, #512]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6713      	str	r3, [r2, #112]	; 0x70
 8001924:	e00b      	b.n	800193e <HAL_RCC_OscConfig+0x5a6>
 8001926:	4b7e      	ldr	r3, [pc, #504]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	4a7d      	ldr	r2, [pc, #500]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	6713      	str	r3, [r2, #112]	; 0x70
 8001932:	4b7b      	ldr	r3, [pc, #492]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001936:	4a7a      	ldr	r2, [pc, #488]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001938:	f023 0304 	bic.w	r3, r3, #4
 800193c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d015      	beq.n	8001972 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff f9b5 	bl	8000cb4 <HAL_GetTick>
 800194a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800194c:	e00a      	b.n	8001964 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f7ff f9b1 	bl	8000cb4 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	f241 3288 	movw	r2, #5000	; 0x1388
 800195c:	4293      	cmp	r3, r2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e122      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001964:	4b6e      	ldr	r3, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0ee      	beq.n	800194e <HAL_RCC_OscConfig+0x5b6>
 8001970:	e014      	b.n	800199c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001972:	f7ff f99f 	bl	8000cb4 <HAL_GetTick>
 8001976:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7ff f99b 	bl	8000cb4 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f241 3288 	movw	r2, #5000	; 0x1388
 8001988:	4293      	cmp	r3, r2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e10c      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001990:	4b63      	ldr	r3, [pc, #396]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1ee      	bne.n	800197a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 8101 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019a6:	4b5e      	ldr	r3, [pc, #376]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019ae:	2b18      	cmp	r3, #24
 80019b0:	f000 80bc 	beq.w	8001b2c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	f040 8095 	bne.w	8001ae8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b58      	ldr	r3, [pc, #352]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a57      	ldr	r2, [pc, #348]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 80019c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ca:	f7ff f973 	bl	8000cb4 <HAL_GetTick>
 80019ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d2:	f7ff f96f 	bl	8000cb4 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e0e2      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019e4:	4b4e      	ldr	r3, [pc, #312]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f0:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 80019f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019f4:	4b4b      	ldr	r3, [pc, #300]	; (8001b24 <HAL_RCC_OscConfig+0x78c>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	430a      	orrs	r2, r1
 8001a04:	4946      	ldr	r1, [pc, #280]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	628b      	str	r3, [r1, #40]	; 0x28
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	025b      	lsls	r3, r3, #9
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a24:	3b01      	subs	r3, #1
 8001a26:	041b      	lsls	r3, r3, #16
 8001a28:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a32:	3b01      	subs	r3, #1
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a3a:	4939      	ldr	r1, [pc, #228]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001a40:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	4a36      	ldr	r2, [pc, #216]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a4c:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a50:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <HAL_RCC_OscConfig+0x790>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a58:	00d2      	lsls	r2, r2, #3
 8001a5a:	4931      	ldr	r1, [pc, #196]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a60:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	f023 020c 	bic.w	r2, r3, #12
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	492c      	ldr	r1, [pc, #176]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a72:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	f023 0202 	bic.w	r2, r3, #2
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	4928      	ldr	r1, [pc, #160]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a84:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	4a25      	ldr	r2, [pc, #148]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a90:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	4a22      	ldr	r2, [pc, #136]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a9c:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001aa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a19      	ldr	r2, [pc, #100]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f8f8 	bl	8000cb4 <HAL_GetTick>
 8001ac4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7ff f8f4 	bl	8000cb4 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e067      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x730>
 8001ae6:	e05f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0c      	ldr	r2, [pc, #48]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7ff f8de 	bl	8000cb4 <HAL_GetTick>
 8001af8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afc:	f7ff f8da 	bl	8000cb4 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e04d      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <HAL_RCC_OscConfig+0x788>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x764>
 8001b1a:	e045      	b.n	8001ba8 <HAL_RCC_OscConfig+0x810>
 8001b1c:	58024800 	.word	0x58024800
 8001b20:	58024400 	.word	0x58024400
 8001b24:	fffffc0c 	.word	0xfffffc0c
 8001b28:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_RCC_OscConfig+0x81c>)
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_RCC_OscConfig+0x81c>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d031      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	f003 0203 	and.w	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d12a      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	091b      	lsrs	r3, r3, #4
 8001b52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d122      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d11a      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	0a5b      	lsrs	r3, r3, #9
 8001b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d111      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	0c1b      	lsrs	r3, r3, #16
 8001b84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d108      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	0e1b      	lsrs	r3, r3, #24
 8001b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3730      	adds	r7, #48	; 0x30
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	58024400 	.word	0x58024400

08001bb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e19c      	b.n	8001f06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b8a      	ldr	r3, [pc, #552]	; (8001df8 <HAL_RCC_ClockConfig+0x240>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d910      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b87      	ldr	r3, [pc, #540]	; (8001df8 <HAL_RCC_ClockConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 020f 	bic.w	r2, r3, #15
 8001be2:	4985      	ldr	r1, [pc, #532]	; (8001df8 <HAL_RCC_ClockConfig+0x240>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b83      	ldr	r3, [pc, #524]	; (8001df8 <HAL_RCC_ClockConfig+0x240>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e184      	b.n	8001f06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d010      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	4b7b      	ldr	r3, [pc, #492]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d908      	bls.n	8001c2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c18:	4b78      	ldr	r3, [pc, #480]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	4975      	ldr	r1, [pc, #468]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d010      	beq.n	8001c58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	4b70      	ldr	r3, [pc, #448]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d908      	bls.n	8001c58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c46:	4b6d      	ldr	r3, [pc, #436]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	496a      	ldr	r1, [pc, #424]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d010      	beq.n	8001c86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699a      	ldr	r2, [r3, #24]
 8001c68:	4b64      	ldr	r3, [pc, #400]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d908      	bls.n	8001c86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c74:	4b61      	ldr	r3, [pc, #388]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	495e      	ldr	r1, [pc, #376]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0320 	and.w	r3, r3, #32
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d010      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69da      	ldr	r2, [r3, #28]
 8001c96:	4b59      	ldr	r3, [pc, #356]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d908      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ca2:	4b56      	ldr	r3, [pc, #344]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4953      	ldr	r1, [pc, #332]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d010      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	4b4d      	ldr	r3, [pc, #308]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d908      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd0:	4b4a      	ldr	r3, [pc, #296]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f023 020f 	bic.w	r2, r3, #15
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4947      	ldr	r1, [pc, #284]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d055      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001cee:	4b43      	ldr	r3, [pc, #268]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	4940      	ldr	r1, [pc, #256]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d08:	4b3c      	ldr	r3, [pc, #240]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d121      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0f6      	b.n	8001f06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d107      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d20:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d115      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0ea      	b.n	8001f06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d107      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d38:	4b30      	ldr	r3, [pc, #192]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d109      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0de      	b.n	8001f06 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d48:	4b2c      	ldr	r3, [pc, #176]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0d6      	b.n	8001f06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d58:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f023 0207 	bic.w	r2, r3, #7
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4925      	ldr	r1, [pc, #148]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6a:	f7fe ffa3 	bl	8000cb4 <HAL_GetTick>
 8001d6e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d72:	f7fe ff9f 	bl	8000cb4 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e0be      	b.n	8001f06 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d88:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d1eb      	bne.n	8001d72 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d010      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d208      	bcs.n	8001dc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f023 020f 	bic.w	r2, r3, #15
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	490e      	ldr	r1, [pc, #56]	; (8001dfc <HAL_RCC_ClockConfig+0x244>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_ClockConfig+0x240>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d214      	bcs.n	8001e00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_RCC_ClockConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 020f 	bic.w	r2, r3, #15
 8001dde:	4906      	ldr	r1, [pc, #24]	; (8001df8 <HAL_RCC_ClockConfig+0x240>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <HAL_RCC_ClockConfig+0x240>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e086      	b.n	8001f06 <HAL_RCC_ClockConfig+0x34e>
 8001df8:	52002000 	.word	0x52002000
 8001dfc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d010      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	4b3f      	ldr	r3, [pc, #252]	; (8001f10 <HAL_RCC_ClockConfig+0x358>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d208      	bcs.n	8001e2e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e1c:	4b3c      	ldr	r3, [pc, #240]	; (8001f10 <HAL_RCC_ClockConfig+0x358>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	4939      	ldr	r1, [pc, #228]	; (8001f10 <HAL_RCC_ClockConfig+0x358>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d010      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <HAL_RCC_ClockConfig+0x358>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d208      	bcs.n	8001e5c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e4a:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <HAL_RCC_ClockConfig+0x358>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	492e      	ldr	r1, [pc, #184]	; (8001f10 <HAL_RCC_ClockConfig+0x358>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d010      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699a      	ldr	r2, [r3, #24]
 8001e6c:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <HAL_RCC_ClockConfig+0x358>)
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d208      	bcs.n	8001e8a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e78:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <HAL_RCC_ClockConfig+0x358>)
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	4922      	ldr	r1, [pc, #136]	; (8001f10 <HAL_RCC_ClockConfig+0x358>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d010      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69da      	ldr	r2, [r3, #28]
 8001e9a:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_RCC_ClockConfig+0x358>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d208      	bcs.n	8001eb8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <HAL_RCC_ClockConfig+0x358>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	4917      	ldr	r1, [pc, #92]	; (8001f10 <HAL_RCC_ClockConfig+0x358>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001eb8:	f000 f834 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_RCC_ClockConfig+0x358>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	4912      	ldr	r1, [pc, #72]	; (8001f14 <HAL_RCC_ClockConfig+0x35c>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_RCC_ClockConfig+0x358>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <HAL_RCC_ClockConfig+0x35c>)
 8001ee0:	5cd3      	ldrb	r3, [r2, r3]
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eec:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x360>)
 8001eee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <HAL_RCC_ClockConfig+0x364>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_RCC_ClockConfig+0x368>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fe90 	bl	8000c20 <HAL_InitTick>
 8001f00:	4603      	mov	r3, r0
 8001f02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	58024400 	.word	0x58024400
 8001f14:	080029ac 	.word	0x080029ac
 8001f18:	24000004 	.word	0x24000004
 8001f1c:	24000000 	.word	0x24000000
 8001f20:	24000008 	.word	0x24000008

08001f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f2a:	4bb3      	ldr	r3, [pc, #716]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f32:	2b18      	cmp	r3, #24
 8001f34:	f200 8155 	bhi.w	80021e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8001f38:	a201      	add	r2, pc, #4	; (adr r2, 8001f40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3e:	bf00      	nop
 8001f40:	08001fa5 	.word	0x08001fa5
 8001f44:	080021e3 	.word	0x080021e3
 8001f48:	080021e3 	.word	0x080021e3
 8001f4c:	080021e3 	.word	0x080021e3
 8001f50:	080021e3 	.word	0x080021e3
 8001f54:	080021e3 	.word	0x080021e3
 8001f58:	080021e3 	.word	0x080021e3
 8001f5c:	080021e3 	.word	0x080021e3
 8001f60:	08001fcb 	.word	0x08001fcb
 8001f64:	080021e3 	.word	0x080021e3
 8001f68:	080021e3 	.word	0x080021e3
 8001f6c:	080021e3 	.word	0x080021e3
 8001f70:	080021e3 	.word	0x080021e3
 8001f74:	080021e3 	.word	0x080021e3
 8001f78:	080021e3 	.word	0x080021e3
 8001f7c:	080021e3 	.word	0x080021e3
 8001f80:	08001fd1 	.word	0x08001fd1
 8001f84:	080021e3 	.word	0x080021e3
 8001f88:	080021e3 	.word	0x080021e3
 8001f8c:	080021e3 	.word	0x080021e3
 8001f90:	080021e3 	.word	0x080021e3
 8001f94:	080021e3 	.word	0x080021e3
 8001f98:	080021e3 	.word	0x080021e3
 8001f9c:	080021e3 	.word	0x080021e3
 8001fa0:	08001fd7 	.word	0x08001fd7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fa4:	4b94      	ldr	r3, [pc, #592]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0320 	and.w	r3, r3, #32
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d009      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001fb0:	4b91      	ldr	r3, [pc, #580]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	08db      	lsrs	r3, r3, #3
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	4a90      	ldr	r2, [pc, #576]	; (80021fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001fc2:	e111      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001fc4:	4b8d      	ldr	r3, [pc, #564]	; (80021fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fc6:	61bb      	str	r3, [r7, #24]
    break;
 8001fc8:	e10e      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001fca:	4b8d      	ldr	r3, [pc, #564]	; (8002200 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001fcc:	61bb      	str	r3, [r7, #24]
    break;
 8001fce:	e10b      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001fd0:	4b8c      	ldr	r3, [pc, #560]	; (8002204 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001fd2:	61bb      	str	r3, [r7, #24]
    break;
 8001fd4:	e108      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001fd6:	4b88      	ldr	r3, [pc, #544]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001fe0:	4b85      	ldr	r3, [pc, #532]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001fec:	4b82      	ldr	r3, [pc, #520]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001ff6:	4b80      	ldr	r3, [pc, #512]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffa:	08db      	lsrs	r3, r3, #3
 8001ffc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80e1 	beq.w	80021dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2b02      	cmp	r3, #2
 800201e:	f000 8083 	beq.w	8002128 <HAL_RCC_GetSysClockFreq+0x204>
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b02      	cmp	r3, #2
 8002026:	f200 80a1 	bhi.w	800216c <HAL_RCC_GetSysClockFreq+0x248>
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0x114>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d056      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002036:	e099      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002038:	4b6f      	ldr	r3, [pc, #444]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b00      	cmp	r3, #0
 8002042:	d02d      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002044:	4b6c      	ldr	r3, [pc, #432]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	08db      	lsrs	r3, r3, #3
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	4a6b      	ldr	r2, [pc, #428]	; (80021fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
 8002054:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	ee07 3a90 	vmov	s15, r3
 800205c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800206a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800206e:	4b62      	ldr	r3, [pc, #392]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002076:	ee07 3a90 	vmov	s15, r3
 800207a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800207e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002082:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002208 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800208a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800208e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800209e:	e087      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800220c <HAL_RCC_GetSysClockFreq+0x2e8>
 80020ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020b2:	4b51      	ldr	r3, [pc, #324]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ba:	ee07 3a90 	vmov	s15, r3
 80020be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80020c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002208 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020e2:	e065      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002210 <HAL_RCC_GetSysClockFreq+0x2ec>
 80020f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020f6:	4b40      	ldr	r3, [pc, #256]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002106:	ed97 6a02 	vldr	s12, [r7, #8]
 800210a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002208 <HAL_RCC_GetSysClockFreq+0x2e4>
 800210e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800211a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800211e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002126:	e043      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002132:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002214 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800213a:	4b2f      	ldr	r3, [pc, #188]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800214a:	ed97 6a02 	vldr	s12, [r7, #8]
 800214e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002208 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800215a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800215e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800216a:	e021      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	ee07 3a90 	vmov	s15, r3
 8002172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002176:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002210 <HAL_RCC_GetSysClockFreq+0x2ec>
 800217a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800217e:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002186:	ee07 3a90 	vmov	s15, r3
 800218a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800218e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002192:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002208 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800219a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800219e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021ae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	0a5b      	lsrs	r3, r3, #9
 80021b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021ba:	3301      	adds	r3, #1
 80021bc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	ee07 3a90 	vmov	s15, r3
 80021c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80021cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021d4:	ee17 3a90 	vmov	r3, s15
 80021d8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80021da:	e005      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	61bb      	str	r3, [r7, #24]
    break;
 80021e0:	e002      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021e4:	61bb      	str	r3, [r7, #24]
    break;
 80021e6:	bf00      	nop
  }

  return sysclockfreq;
 80021e8:	69bb      	ldr	r3, [r7, #24]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	; 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	58024400 	.word	0x58024400
 80021fc:	03d09000 	.word	0x03d09000
 8002200:	003d0900 	.word	0x003d0900
 8002204:	017d7840 	.word	0x017d7840
 8002208:	46000000 	.word	0x46000000
 800220c:	4c742400 	.word	0x4c742400
 8002210:	4a742400 	.word	0x4a742400
 8002214:	4bbebc20 	.word	0x4bbebc20

08002218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e049      	b.n	80022be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d106      	bne.n	8002244 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7fe fc3c 	bl	8000abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3304      	adds	r3, #4
 8002254:	4619      	mov	r1, r3
 8002256:	4610      	mov	r0, r2
 8002258:	f000 f99a 	bl	8002590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d001      	beq.n	80022e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e04f      	b.n	8002380 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a23      	ldr	r2, [pc, #140]	; (800238c <HAL_TIM_Base_Start_IT+0xc4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d01d      	beq.n	800233e <HAL_TIM_Base_Start_IT+0x76>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230a:	d018      	beq.n	800233e <HAL_TIM_Base_Start_IT+0x76>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a1f      	ldr	r2, [pc, #124]	; (8002390 <HAL_TIM_Base_Start_IT+0xc8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <HAL_TIM_Base_Start_IT+0x76>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a1e      	ldr	r2, [pc, #120]	; (8002394 <HAL_TIM_Base_Start_IT+0xcc>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d00e      	beq.n	800233e <HAL_TIM_Base_Start_IT+0x76>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a1c      	ldr	r2, [pc, #112]	; (8002398 <HAL_TIM_Base_Start_IT+0xd0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d009      	beq.n	800233e <HAL_TIM_Base_Start_IT+0x76>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a1b      	ldr	r2, [pc, #108]	; (800239c <HAL_TIM_Base_Start_IT+0xd4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d004      	beq.n	800233e <HAL_TIM_Base_Start_IT+0x76>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d115      	bne.n	800236a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002346:	4013      	ands	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b06      	cmp	r3, #6
 800234e:	d015      	beq.n	800237c <HAL_TIM_Base_Start_IT+0xb4>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002356:	d011      	beq.n	800237c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002368:	e008      	b.n	800237c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0201 	orr.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e000      	b.n	800237e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	40010000 	.word	0x40010000
 8002390:	40000400 	.word	0x40000400
 8002394:	40000800 	.word	0x40000800
 8002398:	40000c00 	.word	0x40000c00
 800239c:	40010400 	.word	0x40010400
 80023a0:	40001800 	.word	0x40001800
 80023a4:	00010007 	.word	0x00010007

080023a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_TIM_ConfigClockSource+0x18>
 80023bc:	2302      	movs	r3, #2
 80023be:	e0db      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x1d0>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4b69      	ldr	r3, [pc, #420]	; (8002580 <HAL_TIM_ConfigClockSource+0x1d8>)
 80023dc:	4013      	ands	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a63      	ldr	r2, [pc, #396]	; (8002584 <HAL_TIM_ConfigClockSource+0x1dc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	f000 80a9 	beq.w	800254e <HAL_TIM_ConfigClockSource+0x1a6>
 80023fc:	4a61      	ldr	r2, [pc, #388]	; (8002584 <HAL_TIM_ConfigClockSource+0x1dc>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	f200 80ae 	bhi.w	8002560 <HAL_TIM_ConfigClockSource+0x1b8>
 8002404:	4a60      	ldr	r2, [pc, #384]	; (8002588 <HAL_TIM_ConfigClockSource+0x1e0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	f000 80a1 	beq.w	800254e <HAL_TIM_ConfigClockSource+0x1a6>
 800240c:	4a5e      	ldr	r2, [pc, #376]	; (8002588 <HAL_TIM_ConfigClockSource+0x1e0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	f200 80a6 	bhi.w	8002560 <HAL_TIM_ConfigClockSource+0x1b8>
 8002414:	4a5d      	ldr	r2, [pc, #372]	; (800258c <HAL_TIM_ConfigClockSource+0x1e4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	f000 8099 	beq.w	800254e <HAL_TIM_ConfigClockSource+0x1a6>
 800241c:	4a5b      	ldr	r2, [pc, #364]	; (800258c <HAL_TIM_ConfigClockSource+0x1e4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	f200 809e 	bhi.w	8002560 <HAL_TIM_ConfigClockSource+0x1b8>
 8002424:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002428:	f000 8091 	beq.w	800254e <HAL_TIM_ConfigClockSource+0x1a6>
 800242c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002430:	f200 8096 	bhi.w	8002560 <HAL_TIM_ConfigClockSource+0x1b8>
 8002434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002438:	f000 8089 	beq.w	800254e <HAL_TIM_ConfigClockSource+0x1a6>
 800243c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002440:	f200 808e 	bhi.w	8002560 <HAL_TIM_ConfigClockSource+0x1b8>
 8002444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002448:	d03e      	beq.n	80024c8 <HAL_TIM_ConfigClockSource+0x120>
 800244a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800244e:	f200 8087 	bhi.w	8002560 <HAL_TIM_ConfigClockSource+0x1b8>
 8002452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002456:	f000 8085 	beq.w	8002564 <HAL_TIM_ConfigClockSource+0x1bc>
 800245a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245e:	d87f      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x1b8>
 8002460:	2b70      	cmp	r3, #112	; 0x70
 8002462:	d01a      	beq.n	800249a <HAL_TIM_ConfigClockSource+0xf2>
 8002464:	2b70      	cmp	r3, #112	; 0x70
 8002466:	d87b      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x1b8>
 8002468:	2b60      	cmp	r3, #96	; 0x60
 800246a:	d050      	beq.n	800250e <HAL_TIM_ConfigClockSource+0x166>
 800246c:	2b60      	cmp	r3, #96	; 0x60
 800246e:	d877      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x1b8>
 8002470:	2b50      	cmp	r3, #80	; 0x50
 8002472:	d03c      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0x146>
 8002474:	2b50      	cmp	r3, #80	; 0x50
 8002476:	d873      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x1b8>
 8002478:	2b40      	cmp	r3, #64	; 0x40
 800247a:	d058      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x186>
 800247c:	2b40      	cmp	r3, #64	; 0x40
 800247e:	d86f      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x1b8>
 8002480:	2b30      	cmp	r3, #48	; 0x30
 8002482:	d064      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x1a6>
 8002484:	2b30      	cmp	r3, #48	; 0x30
 8002486:	d86b      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x1b8>
 8002488:	2b20      	cmp	r3, #32
 800248a:	d060      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x1a6>
 800248c:	2b20      	cmp	r3, #32
 800248e:	d867      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x1b8>
 8002490:	2b00      	cmp	r3, #0
 8002492:	d05c      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x1a6>
 8002494:	2b10      	cmp	r3, #16
 8002496:	d05a      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002498:	e062      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6899      	ldr	r1, [r3, #8]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f000 f989 	bl	80027c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	609a      	str	r2, [r3, #8]
      break;
 80024c6:	e04e      	b.n	8002566 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	6899      	ldr	r1, [r3, #8]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f000 f972 	bl	80027c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ea:	609a      	str	r2, [r3, #8]
      break;
 80024ec:	e03b      	b.n	8002566 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6859      	ldr	r1, [r3, #4]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f000 f8e2 	bl	80026c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2150      	movs	r1, #80	; 0x50
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f93c 	bl	8002784 <TIM_ITRx_SetConfig>
      break;
 800250c:	e02b      	b.n	8002566 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6859      	ldr	r1, [r3, #4]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	461a      	mov	r2, r3
 800251c:	f000 f901 	bl	8002722 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2160      	movs	r1, #96	; 0x60
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f92c 	bl	8002784 <TIM_ITRx_SetConfig>
      break;
 800252c:	e01b      	b.n	8002566 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6859      	ldr	r1, [r3, #4]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	461a      	mov	r2, r3
 800253c:	f000 f8c2 	bl	80026c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2140      	movs	r1, #64	; 0x40
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f91c 	bl	8002784 <TIM_ITRx_SetConfig>
      break;
 800254c:	e00b      	b.n	8002566 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	4610      	mov	r0, r2
 800255a:	f000 f913 	bl	8002784 <TIM_ITRx_SetConfig>
        break;
 800255e:	e002      	b.n	8002566 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8002560:	bf00      	nop
 8002562:	e000      	b.n	8002566 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8002564:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	ffceff88 	.word	0xffceff88
 8002584:	00100040 	.word	0x00100040
 8002588:	00100030 	.word	0x00100030
 800258c:	00100020 	.word	0x00100020

08002590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a40      	ldr	r2, [pc, #256]	; (80026a4 <TIM_Base_SetConfig+0x114>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d013      	beq.n	80025d0 <TIM_Base_SetConfig+0x40>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ae:	d00f      	beq.n	80025d0 <TIM_Base_SetConfig+0x40>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a3d      	ldr	r2, [pc, #244]	; (80026a8 <TIM_Base_SetConfig+0x118>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d00b      	beq.n	80025d0 <TIM_Base_SetConfig+0x40>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a3c      	ldr	r2, [pc, #240]	; (80026ac <TIM_Base_SetConfig+0x11c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d007      	beq.n	80025d0 <TIM_Base_SetConfig+0x40>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a3b      	ldr	r2, [pc, #236]	; (80026b0 <TIM_Base_SetConfig+0x120>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d003      	beq.n	80025d0 <TIM_Base_SetConfig+0x40>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a3a      	ldr	r2, [pc, #232]	; (80026b4 <TIM_Base_SetConfig+0x124>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d108      	bne.n	80025e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a2f      	ldr	r2, [pc, #188]	; (80026a4 <TIM_Base_SetConfig+0x114>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d01f      	beq.n	800262a <TIM_Base_SetConfig+0x9a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f0:	d01b      	beq.n	800262a <TIM_Base_SetConfig+0x9a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a2c      	ldr	r2, [pc, #176]	; (80026a8 <TIM_Base_SetConfig+0x118>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d017      	beq.n	800262a <TIM_Base_SetConfig+0x9a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a2b      	ldr	r2, [pc, #172]	; (80026ac <TIM_Base_SetConfig+0x11c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <TIM_Base_SetConfig+0x9a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a2a      	ldr	r2, [pc, #168]	; (80026b0 <TIM_Base_SetConfig+0x120>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00f      	beq.n	800262a <TIM_Base_SetConfig+0x9a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a29      	ldr	r2, [pc, #164]	; (80026b4 <TIM_Base_SetConfig+0x124>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00b      	beq.n	800262a <TIM_Base_SetConfig+0x9a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a28      	ldr	r2, [pc, #160]	; (80026b8 <TIM_Base_SetConfig+0x128>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <TIM_Base_SetConfig+0x9a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a27      	ldr	r2, [pc, #156]	; (80026bc <TIM_Base_SetConfig+0x12c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d003      	beq.n	800262a <TIM_Base_SetConfig+0x9a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a26      	ldr	r2, [pc, #152]	; (80026c0 <TIM_Base_SetConfig+0x130>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d108      	bne.n	800263c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a10      	ldr	r2, [pc, #64]	; (80026a4 <TIM_Base_SetConfig+0x114>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00f      	beq.n	8002688 <TIM_Base_SetConfig+0xf8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <TIM_Base_SetConfig+0x124>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00b      	beq.n	8002688 <TIM_Base_SetConfig+0xf8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a11      	ldr	r2, [pc, #68]	; (80026b8 <TIM_Base_SetConfig+0x128>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d007      	beq.n	8002688 <TIM_Base_SetConfig+0xf8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a10      	ldr	r2, [pc, #64]	; (80026bc <TIM_Base_SetConfig+0x12c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d003      	beq.n	8002688 <TIM_Base_SetConfig+0xf8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a0f      	ldr	r2, [pc, #60]	; (80026c0 <TIM_Base_SetConfig+0x130>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d103      	bne.n	8002690 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	615a      	str	r2, [r3, #20]
}
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40010000 	.word	0x40010000
 80026a8:	40000400 	.word	0x40000400
 80026ac:	40000800 	.word	0x40000800
 80026b0:	40000c00 	.word	0x40000c00
 80026b4:	40010400 	.word	0x40010400
 80026b8:	40014000 	.word	0x40014000
 80026bc:	40014400 	.word	0x40014400
 80026c0:	40014800 	.word	0x40014800

080026c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	f023 0201 	bic.w	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f023 030a 	bic.w	r3, r3, #10
 8002700:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	621a      	str	r2, [r3, #32]
}
 8002716:	bf00      	nop
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002722:	b480      	push	{r7}
 8002724:	b087      	sub	sp, #28
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f023 0210 	bic.w	r2, r3, #16
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800274c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	031b      	lsls	r3, r3, #12
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800275e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	621a      	str	r2, [r3, #32]
}
 8002776:	bf00      	nop
 8002778:	371c      	adds	r7, #28
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <TIM_ITRx_SetConfig+0x38>)
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f043 0307 	orr.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	609a      	str	r2, [r3, #8]
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	ffcfff8f 	.word	0xffcfff8f

080027c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	021a      	lsls	r2, r3, #8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	609a      	str	r2, [r3, #8]
}
 80027f4:	bf00      	nop
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002814:	2302      	movs	r3, #2
 8002816:	e068      	b.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2e      	ldr	r2, [pc, #184]	; (80028f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d004      	beq.n	800284c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a2d      	ldr	r2, [pc, #180]	; (80028fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d108      	bne.n	800285e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002852:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002864:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1e      	ldr	r2, [pc, #120]	; (80028f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d01d      	beq.n	80028be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288a:	d018      	beq.n	80028be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d013      	beq.n	80028be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00e      	beq.n	80028be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a18      	ldr	r2, [pc, #96]	; (8002908 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d009      	beq.n	80028be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a13      	ldr	r2, [pc, #76]	; (80028fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d004      	beq.n	80028be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d10c      	bne.n	80028d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40010000 	.word	0x40010000
 80028fc:	40010400 	.word	0x40010400
 8002900:	40000400 	.word	0x40000400
 8002904:	40000800 	.word	0x40000800
 8002908:	40000c00 	.word	0x40000c00
 800290c:	40001800 	.word	0x40001800

08002910 <__libc_init_array>:
 8002910:	b570      	push	{r4, r5, r6, lr}
 8002912:	4d0d      	ldr	r5, [pc, #52]	; (8002948 <__libc_init_array+0x38>)
 8002914:	4c0d      	ldr	r4, [pc, #52]	; (800294c <__libc_init_array+0x3c>)
 8002916:	1b64      	subs	r4, r4, r5
 8002918:	10a4      	asrs	r4, r4, #2
 800291a:	2600      	movs	r6, #0
 800291c:	42a6      	cmp	r6, r4
 800291e:	d109      	bne.n	8002934 <__libc_init_array+0x24>
 8002920:	4d0b      	ldr	r5, [pc, #44]	; (8002950 <__libc_init_array+0x40>)
 8002922:	4c0c      	ldr	r4, [pc, #48]	; (8002954 <__libc_init_array+0x44>)
 8002924:	f000 f820 	bl	8002968 <_init>
 8002928:	1b64      	subs	r4, r4, r5
 800292a:	10a4      	asrs	r4, r4, #2
 800292c:	2600      	movs	r6, #0
 800292e:	42a6      	cmp	r6, r4
 8002930:	d105      	bne.n	800293e <__libc_init_array+0x2e>
 8002932:	bd70      	pop	{r4, r5, r6, pc}
 8002934:	f855 3b04 	ldr.w	r3, [r5], #4
 8002938:	4798      	blx	r3
 800293a:	3601      	adds	r6, #1
 800293c:	e7ee      	b.n	800291c <__libc_init_array+0xc>
 800293e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002942:	4798      	blx	r3
 8002944:	3601      	adds	r6, #1
 8002946:	e7f2      	b.n	800292e <__libc_init_array+0x1e>
 8002948:	080029bc 	.word	0x080029bc
 800294c:	080029bc 	.word	0x080029bc
 8002950:	080029bc 	.word	0x080029bc
 8002954:	080029c0 	.word	0x080029c0

08002958 <memset>:
 8002958:	4402      	add	r2, r0
 800295a:	4603      	mov	r3, r0
 800295c:	4293      	cmp	r3, r2
 800295e:	d100      	bne.n	8002962 <memset+0xa>
 8002960:	4770      	bx	lr
 8002962:	f803 1b01 	strb.w	r1, [r3], #1
 8002966:	e7f9      	b.n	800295c <memset+0x4>

08002968 <_init>:
 8002968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296a:	bf00      	nop
 800296c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296e:	bc08      	pop	{r3}
 8002970:	469e      	mov	lr, r3
 8002972:	4770      	bx	lr

08002974 <_fini>:
 8002974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002976:	bf00      	nop
 8002978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800297a:	bc08      	pop	{r3}
 800297c:	469e      	mov	lr, r3
 800297e:	4770      	bx	lr
