
NUCLEO_H745_NHD_20x4_PARALLEL_LCD_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002728  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080029c0  080029c0  000129c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029fc  080029fc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080029fc  080029fc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029fc  080029fc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029fc  080029fc  000129fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a00  08002a00  00012a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08002a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  24000010  08002a14  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400007c  08002a14  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163a9  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025fe  00000000  00000000  000363e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  000389e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  000396b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000385fa  00000000  00000000  0003a2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e43f  00000000  00000000  0007289a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00179a05  00000000  00000000  00080cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fa6de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034fc  00000000  00000000  001fa734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080029a8 	.word	0x080029a8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080029a8 	.word	0x080029a8

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000412:	4b62      	ldr	r3, [pc, #392]	; (800059c <main+0x190>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d11b      	bne.n	8000456 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800041e:	f3bf 8f4f 	dsb	sy
}
 8000422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000424:	f3bf 8f6f 	isb	sy
}
 8000428:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800042a:	4b5c      	ldr	r3, [pc, #368]	; (800059c <main+0x190>)
 800042c:	2200      	movs	r2, #0
 800042e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000432:	f3bf 8f4f 	dsb	sy
}
 8000436:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000438:	f3bf 8f6f 	isb	sy
}
 800043c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800043e:	4b57      	ldr	r3, [pc, #348]	; (800059c <main+0x190>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a56      	ldr	r2, [pc, #344]	; (800059c <main+0x190>)
 8000444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000448:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800044a:	f3bf 8f4f 	dsb	sy
}
 800044e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000450:	f3bf 8f6f 	isb	sy
}
 8000454:	e000      	b.n	8000458 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000456:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000458:	4b50      	ldr	r3, [pc, #320]	; (800059c <main+0x190>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000460:	2b00      	cmp	r3, #0
 8000462:	d138      	bne.n	80004d6 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000464:	4b4d      	ldr	r3, [pc, #308]	; (800059c <main+0x190>)
 8000466:	2200      	movs	r2, #0
 8000468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800046c:	f3bf 8f4f 	dsb	sy
}
 8000470:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000472:	4b4a      	ldr	r3, [pc, #296]	; (800059c <main+0x190>)
 8000474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000478:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800047a:	693b      	ldr	r3, [r7, #16]
 800047c:	0b5b      	lsrs	r3, r3, #13
 800047e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000482:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000484:	693b      	ldr	r3, [r7, #16]
 8000486:	08db      	lsrs	r3, r3, #3
 8000488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800048c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	015a      	lsls	r2, r3, #5
 8000492:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000496:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000498:	68ba      	ldr	r2, [r7, #8]
 800049a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800049c:	493f      	ldr	r1, [pc, #252]	; (800059c <main+0x190>)
 800049e:	4313      	orrs	r3, r2
 80004a0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	1e5a      	subs	r2, r3, #1
 80004a8:	60ba      	str	r2, [r7, #8]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d1ef      	bne.n	800048e <main+0x82>
    } while(sets-- != 0U);
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	1e5a      	subs	r2, r3, #1
 80004b2:	60fa      	str	r2, [r7, #12]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d1e5      	bne.n	8000484 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80004b8:	f3bf 8f4f 	dsb	sy
}
 80004bc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004be:	4b37      	ldr	r3, [pc, #220]	; (800059c <main+0x190>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a36      	ldr	r2, [pc, #216]	; (800059c <main+0x190>)
 80004c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004ca:	f3bf 8f4f 	dsb	sy
}
 80004ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004d0:	f3bf 8f6f 	isb	sy
}
 80004d4:	e000      	b.n	80004d8 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004d6:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80004d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004dc:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80004de:	bf00      	nop
 80004e0:	4b2f      	ldr	r3, [pc, #188]	; (80005a0 <main+0x194>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d004      	beq.n	80004f6 <main+0xea>
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	1e5a      	subs	r2, r3, #1
 80004f0:	617a      	str	r2, [r7, #20]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	dcf4      	bgt.n	80004e0 <main+0xd4>
  if ( timeout < 0 )
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	da01      	bge.n	8000500 <main+0xf4>
  {
  Error_Handler();
 80004fc:	f000 f992 	bl	8000824 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fb58 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f856 	bl	80005b4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000508:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <main+0x194>)
 800050a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800050e:	4a24      	ldr	r2, [pc, #144]	; (80005a0 <main+0x194>)
 8000510:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000518:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <main+0x194>)
 800051a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800051e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000526:	2000      	movs	r0, #0
 8000528:	f000 fece 	bl	80012c8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800052c:	2100      	movs	r1, #0
 800052e:	2000      	movs	r0, #0
 8000530:	f000 fee4 	bl	80012fc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000538:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800053a:	bf00      	nop
 800053c:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <main+0x194>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000544:	2b00      	cmp	r3, #0
 8000546:	d104      	bne.n	8000552 <main+0x146>
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	1e5a      	subs	r2, r3, #1
 800054c:	617a      	str	r2, [r7, #20]
 800054e:	2b00      	cmp	r3, #0
 8000550:	dcf4      	bgt.n	800053c <main+0x130>
if ( timeout < 0 )
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	2b00      	cmp	r3, #0
 8000556:	da01      	bge.n	800055c <main+0x150>
{
Error_Handler();
 8000558:	f000 f964 	bl	8000824 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f8f8 	bl	8000750 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000560:	f000 f8a2 	bl	80006a8 <MX_TIM1_Init>
  nhd_LCD_Init();
 8000564:	f000 fa30 	bl	80009c8 <nhd_LCD_Init>
  /* USER CODE BEGIN 2 */

  lcd_send_string("HELLO ");
 8000568:	480e      	ldr	r0, [pc, #56]	; (80005a4 <main+0x198>)
 800056a:	f000 fa6a 	bl	8000a42 <lcd_send_string>
  HAL_Delay(100);
 800056e:	2064      	movs	r0, #100	; 0x64
 8000570:	f000 fbb2 	bl	8000cd8 <HAL_Delay>
  lcd_send_string("WORLD ");
 8000574:	480c      	ldr	r0, [pc, #48]	; (80005a8 <main+0x19c>)
 8000576:	f000 fa64 	bl	8000a42 <lcd_send_string>
  HAL_Delay(100);
 800057a:	2064      	movs	r0, #100	; 0x64
 800057c:	f000 fbac 	bl	8000cd8 <HAL_Delay>
  lcd_send_string("FROM");
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <main+0x1a0>)
 8000582:	f000 fa5e 	bl	8000a42 <lcd_send_string>
  HAL_Delay(100);
 8000586:	2064      	movs	r0, #100	; 0x64
 8000588:	f000 fba6 	bl	8000cd8 <HAL_Delay>
  lcd_put_cur(1, 0);
 800058c:	2100      	movs	r1, #0
 800058e:	2001      	movs	r0, #1
 8000590:	f000 f9e8 	bl	8000964 <lcd_put_cur>
  lcd_send_string("KRISSSTIANN!!!!!!!");
 8000594:	4806      	ldr	r0, [pc, #24]	; (80005b0 <main+0x1a4>)
 8000596:	f000 fa54 	bl	8000a42 <lcd_send_string>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059a:	e7fe      	b.n	800059a <main+0x18e>
 800059c:	e000ed00 	.word	0xe000ed00
 80005a0:	58024400 	.word	0x58024400
 80005a4:	080029c0 	.word	0x080029c0
 80005a8:	080029c8 	.word	0x080029c8
 80005ac:	080029d0 	.word	0x080029d0
 80005b0:	080029d8 	.word	0x080029d8

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b09c      	sub	sp, #112	; 0x70
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005be:	224c      	movs	r2, #76	; 0x4c
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 f9e8 	bl	8002998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2220      	movs	r2, #32
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 f9e2 	bl	8002998 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005d4:	2004      	movs	r0, #4
 80005d6:	f000 fea5 	bl	8001324 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005da:	2300      	movs	r3, #0
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	4b30      	ldr	r3, [pc, #192]	; (80006a0 <SystemClock_Config+0xec>)
 80005e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005e2:	4a2f      	ldr	r2, [pc, #188]	; (80006a0 <SystemClock_Config+0xec>)
 80005e4:	f023 0301 	bic.w	r3, r3, #1
 80005e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005ea:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <SystemClock_Config+0xec>)
 80005ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <SystemClock_Config+0xf0>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a2a      	ldr	r2, [pc, #168]	; (80006a4 <SystemClock_Config+0xf0>)
 80005fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <SystemClock_Config+0xf0>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800060c:	bf00      	nop
 800060e:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <SystemClock_Config+0xf0>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800061a:	d1f8      	bne.n	800060e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	2302      	movs	r3, #2
 800062c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800062e:	2305      	movs	r3, #5
 8000630:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000632:	23a0      	movs	r3, #160	; 0xa0
 8000634:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000636:	2302      	movs	r3, #2
 8000638:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800063a:	2302      	movs	r3, #2
 800063c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800063e:	2302      	movs	r3, #2
 8000640:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000642:	2308      	movs	r3, #8
 8000644:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000646:	2300      	movs	r3, #0
 8000648:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fec0 	bl	80013d8 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800065e:	f000 f8e1 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	233f      	movs	r3, #63	; 0x3f
 8000664:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2303      	movs	r3, #3
 8000668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800066e:	2308      	movs	r3, #8
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000672:	2340      	movs	r3, #64	; 0x40
 8000674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000676:	2340      	movs	r3, #64	; 0x40
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800067a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800067e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000680:	2340      	movs	r3, #64	; 0x40
 8000682:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2102      	movs	r1, #2
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fab5 	bl	8001bf8 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000694:	f000 f8c6 	bl	8000824 <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3770      	adds	r7, #112	; 0x70
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	58000400 	.word	0x58000400
 80006a4:	58024800 	.word	0x58024800

080006a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_TIM1_Init+0xa0>)
 80006c8:	4a20      	ldr	r2, [pc, #128]	; (800074c <MX_TIM1_Init+0xa4>)
 80006ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <MX_TIM1_Init+0xa0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_TIM1_Init+0xa0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_TIM1_Init+0xa0>)
 80006da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_TIM1_Init+0xa0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_TIM1_Init+0xa0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_TIM1_Init+0xa0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006f2:	4815      	ldr	r0, [pc, #84]	; (8000748 <MX_TIM1_Init+0xa0>)
 80006f4:	f001 fdb0 	bl	8002258 <HAL_TIM_Base_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80006fe:	f000 f891 	bl	8000824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	4619      	mov	r1, r3
 800070e:	480e      	ldr	r0, [pc, #56]	; (8000748 <MX_TIM1_Init+0xa0>)
 8000710:	f001 fe6a 	bl	80023e8 <HAL_TIM_ConfigClockSource>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800071a:	f000 f883 	bl	8000824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <MX_TIM1_Init+0xa0>)
 8000730:	f002 f886 	bl	8002840 <HAL_TIMEx_MasterConfigSynchronization>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800073a:	f000 f873 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	3720      	adds	r7, #32
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2400002c 	.word	0x2400002c
 800074c:	40010000 	.word	0x40010000

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <MX_GPIO_Init+0xc8>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076c:	4a2a      	ldr	r2, [pc, #168]	; (8000818 <MX_GPIO_Init+0xc8>)
 800076e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000776:	4b28      	ldr	r3, [pc, #160]	; (8000818 <MX_GPIO_Init+0xc8>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000784:	4b24      	ldr	r3, [pc, #144]	; (8000818 <MX_GPIO_Init+0xc8>)
 8000786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078a:	4a23      	ldr	r2, [pc, #140]	; (8000818 <MX_GPIO_Init+0xc8>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <MX_GPIO_Init+0xc8>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a2:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <MX_GPIO_Init+0xc8>)
 80007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <MX_GPIO_Init+0xc8>)
 80007aa:	f043 0308 	orr.w	r3, r3, #8
 80007ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_GPIO_Init+0xc8>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b8:	f003 0308 	and.w	r3, r3, #8
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c6:	4815      	ldr	r0, [pc, #84]	; (800081c <MX_GPIO_Init+0xcc>)
 80007c8:	f000 fd4a 	bl	8001260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80007cc:	2200      	movs	r2, #0
 80007ce:	21fe      	movs	r1, #254	; 0xfe
 80007d0:	4813      	ldr	r0, [pc, #76]	; (8000820 <MX_GPIO_Init+0xd0>)
 80007d2:	f000 fd45 	bl	8001260 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	480b      	ldr	r0, [pc, #44]	; (800081c <MX_GPIO_Init+0xcc>)
 80007f0:	f000 fb86 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80007f4:	23fe      	movs	r3, #254	; 0xfe
 80007f6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_GPIO_Init+0xd0>)
 800080c:	f000 fb78 	bl	8000f00 <HAL_GPIO_Init>

}
 8000810:	bf00      	nop
 8000812:	3720      	adds	r7, #32
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58024400 	.word	0x58024400
 800081c:	58020400 	.word	0x58020400
 8000820:	58020c00 	.word	0x58020c00

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <five_ns_delay>:
//define the timer handler below
#define timer htim1

extern TIM_HandleTypeDef timer;
void five_ns_delay (int us)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&timer, 0);	//clear timer
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <five_ns_delay+0x38>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2200      	movs	r2, #0
 800083e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&timer);	//start timer
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <five_ns_delay+0x38>)
 8000842:	f001 fd61 	bl	8002308 <HAL_TIM_Base_Start_IT>
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000846:	bf00      	nop
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <five_ns_delay+0x38>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	d3f9      	bcc.n	8000848 <five_ns_delay+0x18>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
 8000854:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <five_ns_delay+0x3c>)
 800085a:	f000 fd1a 	bl	8001292 <HAL_GPIO_TogglePin>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2400002c 	.word	0x2400002c
 800086c:	58020400 	.word	0x58020400

08000870 <send_to_lcd>:

void send_to_lcd (char data, int rs)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  //rs = 1 for data, rs = 0 for command
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	461a      	mov	r2, r3
 8000882:	2102      	movs	r1, #2
 8000884:	4819      	ldr	r0, [pc, #100]	; (80008ec <send_to_lcd+0x7c>)
 8000886:	f000 fceb 	bl	8001260 <HAL_GPIO_WritePin>

	// write the data to the respective pin
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	08db      	lsrs	r3, r3, #3
 800088e:	b2db      	uxtb	r3, r3
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	b2db      	uxtb	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	4814      	ldr	r0, [pc, #80]	; (80008ec <send_to_lcd+0x7c>)
 800089c:	f000 fce0 	bl	8001260 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	089b      	lsrs	r3, r3, #2
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	2140      	movs	r1, #64	; 0x40
 80008b0:	480e      	ldr	r0, [pc, #56]	; (80008ec <send_to_lcd+0x7c>)
 80008b2:	f000 fcd5 	bl	8001260 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	2120      	movs	r1, #32
 80008c6:	4809      	ldr	r0, [pc, #36]	; (80008ec <send_to_lcd+0x7c>)
 80008c8:	f000 fcca 	bl	8001260 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	461a      	mov	r2, r3
 80008d6:	2110      	movs	r1, #16
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <send_to_lcd+0x7c>)
 80008da:	f000 fcc1 	bl	8001260 <HAL_GPIO_WritePin>

	lcd_nibble();	//pulse LCD enable pin to initiate data transfer
 80008de:	f000 f8c5 	bl	8000a6c <lcd_nibble>
	//HAL_Delay(1);  	//wait for 1 ms while the enable pin settles

    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	58020c00 	.word	0x58020c00

080008f0 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    //send upper nibble first
    datatosend = ((cmd>>4)&0x0f);
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	091b      	lsrs	r3, r3, #4
 80008fe:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ffb3 	bl	8000870 <send_to_lcd>

    //send lower nibble
    datatosend = ((cmd)&0x0f);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	f003 030f 	and.w	r3, r3, #15
 8000910:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  //RS must be 0 while sending command
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ffaa 	bl	8000870 <send_to_lcd>

    HAL_Delay(2);
 800091c:	2002      	movs	r0, #2
 800091e:	f000 f9db 	bl	8000cd8 <HAL_Delay>
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <lcd_send_data>:

void lcd_send_data (char data)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b084      	sub	sp, #16
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	71fb      	strb	r3, [r7, #7]
	char datatosend;

    //send upper nibble first
    datatosend = ((data>>4)&0x0f);
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	091b      	lsrs	r3, r3, #4
 8000938:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	2101      	movs	r1, #1
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ff96 	bl	8000870 <send_to_lcd>

    //send lower nibble
    datatosend = ((data)&0x0f);
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	f003 030f 	and.w	r3, r3, #15
 800094a:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,1);  //RS must be 1 while sending data
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	2101      	movs	r1, #1
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff8d 	bl	8000870 <send_to_lcd>

    HAL_Delay(2);
 8000956:	2002      	movs	r0, #2
 8000958:	f000 f9be 	bl	8000cd8 <HAL_Delay>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <lcd_put_cur>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_put_cur(int row, int col) //fix for 4x20 LCD !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b03      	cmp	r3, #3
 8000972:	d81f      	bhi.n	80009b4 <lcd_put_cur+0x50>
 8000974:	a201      	add	r2, pc, #4	; (adr r2, 800097c <lcd_put_cur+0x18>)
 8000976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097a:	bf00      	nop
 800097c:	0800098d 	.word	0x0800098d
 8000980:	08000997 	.word	0x08000997
 8000984:	080009a1 	.word	0x080009a1
 8000988:	080009ab 	.word	0x080009ab
    switch (row)
    {
        case 0:
            col |= 0x80;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000992:	603b      	str	r3, [r7, #0]
            break;
 8000994:	e00e      	b.n	80009b4 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800099c:	603b      	str	r3, [r7, #0]
            break;
 800099e:	e009      	b.n	80009b4 <lcd_put_cur+0x50>
        case 2:
            col |= 0xC0;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80009a6:	603b      	str	r3, [r7, #0]
            break;
 80009a8:	e004      	b.n	80009b4 <lcd_put_cur+0x50>
        case 3:
            col |= 0xC0;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80009b0:	603b      	str	r3, [r7, #0]
            break;
 80009b2:	bf00      	nop
    }

    lcd_send_cmd (col);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff99 	bl	80008f0 <lcd_send_cmd>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop

080009c8 <nhd_LCD_Init>:


void nhd_LCD_Init (void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	//4 bit initialization
	HAL_Delay(50);  //wait for >40ms
 80009cc:	2032      	movs	r0, #50	; 0x32
 80009ce:	f000 f983 	bl	8000cd8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80009d2:	2030      	movs	r0, #48	; 0x30
 80009d4:	f7ff ff8c 	bl	80008f0 <lcd_send_cmd>
	HAL_Delay(5);  //wait for >4.1ms
 80009d8:	2005      	movs	r0, #5
 80009da:	f000 f97d 	bl	8000cd8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80009de:	2030      	movs	r0, #48	; 0x30
 80009e0:	f7ff ff86 	bl	80008f0 <lcd_send_cmd>
	HAL_Delay(1);  //wait for >100us
 80009e4:	2001      	movs	r0, #1
 80009e6:	f000 f977 	bl	8000cd8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80009ea:	2030      	movs	r0, #48	; 0x30
 80009ec:	f7ff ff80 	bl	80008f0 <lcd_send_cmd>
	HAL_Delay(10);
 80009f0:	200a      	movs	r0, #10
 80009f2:	f000 f971 	bl	8000cd8 <HAL_Delay>
	lcd_send_cmd (0x20);  //4bit mode
 80009f6:	2020      	movs	r0, #32
 80009f8:	f7ff ff7a 	bl	80008f0 <lcd_send_cmd>
	HAL_Delay(10);
 80009fc:	200a      	movs	r0, #10
 80009fe:	f000 f96b 	bl	8000cd8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	HAL_Delay(1);
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
	*/

	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000a02:	2028      	movs	r0, #40	; 0x28
 8000a04:	f7ff ff74 	bl	80008f0 <lcd_send_cmd>
	HAL_Delay(1);
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f000 f965 	bl	8000cd8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000a0e:	2008      	movs	r0, #8
 8000a10:	f7ff ff6e 	bl	80008f0 <lcd_send_cmd>
	HAL_Delay(1);
 8000a14:	2001      	movs	r0, #1
 8000a16:	f000 f95f 	bl	8000cd8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f7ff ff68 	bl	80008f0 <lcd_send_cmd>
	HAL_Delay(1);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f000 f959 	bl	8000cd8 <HAL_Delay>
	HAL_Delay(1);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f000 f956 	bl	8000cd8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a2c:	2006      	movs	r0, #6
 8000a2e:	f7ff ff5f 	bl	80008f0 <lcd_send_cmd>
	HAL_Delay(1);
 8000a32:	2001      	movs	r0, #1
 8000a34:	f000 f950 	bl	8000cd8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a38:	200c      	movs	r0, #12
 8000a3a:	f7ff ff59 	bl	80008f0 <lcd_send_cmd>


}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000a4a:	e006      	b.n	8000a5a <lcd_send_string+0x18>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff68 	bl	800092a <lcd_send_data>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1f4      	bne.n	8000a4c <lcd_send_string+0xa>
}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <lcd_nibble>:

void lcd_nibble() {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2108      	movs	r1, #8
 8000a74:	4806      	ldr	r0, [pc, #24]	; (8000a90 <lcd_nibble+0x24>)
 8000a76:	f000 fbf3 	bl	8001260 <HAL_GPIO_WritePin>
	five_ns_delay(65);								//325ns enable pulse width delay
 8000a7a:	2041      	movs	r0, #65	; 0x41
 8000a7c:	f7ff fed8 	bl	8000830 <five_ns_delay>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2108      	movs	r1, #8
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <lcd_nibble+0x24>)
 8000a86:	f000 fbeb 	bl	8001260 <HAL_GPIO_WritePin>
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	58020c00 	.word	0x58020c00

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_MspInit+0x30>)
 8000a9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aa0:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_MspInit+0x30>)
 8000aa2:	f043 0302 	orr.w	r3, r3, #2
 8000aa6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x30>)
 8000aac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	58024400 	.word	0x58024400

08000ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <HAL_TIM_Base_MspInit+0x3c>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d10e      	bne.n	8000af8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_TIM_Base_MspInit+0x40>)
 8000adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ae0:	4a09      	ldr	r2, [pc, #36]	; (8000b08 <HAL_TIM_Base_MspInit+0x40>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <HAL_TIM_Base_MspInit+0x40>)
 8000aec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	40010000 	.word	0x40010000
 8000b08:	58024400 	.word	0x58024400

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <NMI_Handler+0x4>

08000b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <MemManage_Handler+0x4>

08000b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b58:	f000 f89e 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b64:	f7ff fbb8 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b68:	480c      	ldr	r0, [pc, #48]	; (8000b9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b6a:	490d      	ldr	r1, [pc, #52]	; (8000ba0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ba4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b80:	4c0a      	ldr	r4, [pc, #40]	; (8000bac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f001 fedf 	bl	8002950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fc3b 	bl	800040c <main>
  bx  lr
 8000b96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b98:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ba0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ba4:	08002a04 	.word	0x08002a04
  ldr r2, =_sbss
 8000ba8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000bac:	2400007c 	.word	0x2400007c

08000bb0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC3_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bba:	2003      	movs	r0, #3
 8000bbc:	f000 f96e 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bc0:	f001 f9d0 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_Init+0x68>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	0a1b      	lsrs	r3, r3, #8
 8000bcc:	f003 030f 	and.w	r3, r3, #15
 8000bd0:	4913      	ldr	r1, [pc, #76]	; (8000c20 <HAL_Init+0x6c>)
 8000bd2:	5ccb      	ldrb	r3, [r1, r3]
 8000bd4:	f003 031f 	and.w	r3, r3, #31
 8000bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bdc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_Init+0x68>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <HAL_Init+0x6c>)
 8000be8:	5cd3      	ldrb	r3, [r2, r3]
 8000bea:	f003 031f 	and.w	r3, r3, #31
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf4:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <HAL_Init+0x70>)
 8000bf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bf8:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <HAL_Init+0x74>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f000 f814 	bl	8000c2c <HAL_InitTick>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e002      	b.n	8000c14 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0e:	f7ff ff41 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	080029ec 	.word	0x080029ec
 8000c24:	24000004 	.word	0x24000004
 8000c28:	24000000 	.word	0x24000000

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_InitTick+0x60>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e021      	b.n	8000c84 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <HAL_InitTick+0x64>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_InitTick+0x60>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f945 	bl	8000ee6 <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f91d 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x68>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	2400000c 	.word	0x2400000c
 8000c90:	24000000 	.word	0x24000000
 8000c94:	24000008 	.word	0x24000008

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	2400000c 	.word	0x2400000c
 8000cbc:	24000078 	.word	0x24000078

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	24000078 	.word	0x24000078

08000cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff ffee 	bl	8000cc0 <HAL_GetTick>
 8000ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf0:	d005      	beq.n	8000cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_Delay+0x44>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cfe:	bf00      	nop
 8000d00:	f7ff ffde 	bl	8000cc0 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8f7      	bhi.n	8000d00 <HAL_Delay+0x28>
  {
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2400000c 	.word	0x2400000c

08000d20 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetREVID+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	0c1b      	lsrs	r3, r3, #16
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	5c001000 	.word	0x5c001000

08000d38 <__NVIC_SetPriorityGrouping>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <__NVIC_SetPriorityGrouping+0x40>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	4313      	orrs	r3, r2
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <__NVIC_SetPriorityGrouping+0x40>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00
 8000d7c:	05fa0000 	.word	0x05fa0000

08000d80 <__NVIC_GetPriorityGrouping>:
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_SetPriority>:
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff8e 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff47 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec0:	f7ff ff5e 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000ec4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff ff90 	bl	8000df0 <NVIC_EncodePriority>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5f 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ffb2 	bl	8000e58 <SysTick_Config>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f0e:	4b89      	ldr	r3, [pc, #548]	; (8001134 <HAL_GPIO_Init+0x234>)
 8000f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f12:	e194      	b.n	800123e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	2101      	movs	r1, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 8186 	beq.w	8001238 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d00b      	beq.n	8000f4c <HAL_GPIO_Init+0x4c>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d007      	beq.n	8000f4c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f40:	2b11      	cmp	r3, #17
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b12      	cmp	r3, #18
 8000f4a:	d130      	bne.n	8000fae <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f82:	2201      	movs	r2, #1
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	f003 0201 	and.w	r2, r3, #1
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0xee>
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b12      	cmp	r3, #18
 8000fec:	d123      	bne.n	8001036 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	08da      	lsrs	r2, r3, #3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3208      	adds	r2, #8
 8000ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	220f      	movs	r2, #15
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	691a      	ldr	r2, [r3, #16]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3208      	adds	r2, #8
 8001030:	69b9      	ldr	r1, [r7, #24]
 8001032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0203 	and.w	r2, r3, #3
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 80e0 	beq.w	8001238 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001078:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <HAL_GPIO_Init+0x238>)
 800107a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800107e:	4a2e      	ldr	r2, [pc, #184]	; (8001138 <HAL_GPIO_Init+0x238>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001088:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <HAL_GPIO_Init+0x238>)
 800108a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001096:	4a29      	ldr	r2, [pc, #164]	; (800113c <HAL_GPIO_Init+0x23c>)
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3302      	adds	r3, #2
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a20      	ldr	r2, [pc, #128]	; (8001140 <HAL_GPIO_Init+0x240>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d052      	beq.n	8001168 <HAL_GPIO_Init+0x268>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <HAL_GPIO_Init+0x244>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d031      	beq.n	800112e <HAL_GPIO_Init+0x22e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a1e      	ldr	r2, [pc, #120]	; (8001148 <HAL_GPIO_Init+0x248>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d02b      	beq.n	800112a <HAL_GPIO_Init+0x22a>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a1d      	ldr	r2, [pc, #116]	; (800114c <HAL_GPIO_Init+0x24c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x226>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <HAL_GPIO_Init+0x250>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x222>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <HAL_GPIO_Init+0x254>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x21e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a1a      	ldr	r2, [pc, #104]	; (8001158 <HAL_GPIO_Init+0x258>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x21a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a19      	ldr	r2, [pc, #100]	; (800115c <HAL_GPIO_Init+0x25c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x216>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a18      	ldr	r2, [pc, #96]	; (8001160 <HAL_GPIO_Init+0x260>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x212>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a17      	ldr	r2, [pc, #92]	; (8001164 <HAL_GPIO_Init+0x264>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x20e>
 800110a:	2309      	movs	r3, #9
 800110c:	e02d      	b.n	800116a <HAL_GPIO_Init+0x26a>
 800110e:	230a      	movs	r3, #10
 8001110:	e02b      	b.n	800116a <HAL_GPIO_Init+0x26a>
 8001112:	2308      	movs	r3, #8
 8001114:	e029      	b.n	800116a <HAL_GPIO_Init+0x26a>
 8001116:	2307      	movs	r3, #7
 8001118:	e027      	b.n	800116a <HAL_GPIO_Init+0x26a>
 800111a:	2306      	movs	r3, #6
 800111c:	e025      	b.n	800116a <HAL_GPIO_Init+0x26a>
 800111e:	2305      	movs	r3, #5
 8001120:	e023      	b.n	800116a <HAL_GPIO_Init+0x26a>
 8001122:	2304      	movs	r3, #4
 8001124:	e021      	b.n	800116a <HAL_GPIO_Init+0x26a>
 8001126:	2303      	movs	r3, #3
 8001128:	e01f      	b.n	800116a <HAL_GPIO_Init+0x26a>
 800112a:	2302      	movs	r3, #2
 800112c:	e01d      	b.n	800116a <HAL_GPIO_Init+0x26a>
 800112e:	2301      	movs	r3, #1
 8001130:	e01b      	b.n	800116a <HAL_GPIO_Init+0x26a>
 8001132:	bf00      	nop
 8001134:	58000080 	.word	0x58000080
 8001138:	58024400 	.word	0x58024400
 800113c:	58000400 	.word	0x58000400
 8001140:	58020000 	.word	0x58020000
 8001144:	58020400 	.word	0x58020400
 8001148:	58020800 	.word	0x58020800
 800114c:	58020c00 	.word	0x58020c00
 8001150:	58021000 	.word	0x58021000
 8001154:	58021400 	.word	0x58021400
 8001158:	58021800 	.word	0x58021800
 800115c:	58021c00 	.word	0x58021c00
 8001160:	58022000 	.word	0x58022000
 8001164:	58022400 	.word	0x58022400
 8001168:	2300      	movs	r3, #0
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	f002 0203 	and.w	r2, r2, #3
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	4093      	lsls	r3, r2
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800117a:	4938      	ldr	r1, [pc, #224]	; (800125c <HAL_GPIO_Init+0x35c>)
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800120a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001230:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	3301      	adds	r3, #1
 800123c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa22 f303 	lsr.w	r3, r2, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	f47f ae63 	bne.w	8000f14 <HAL_GPIO_Init+0x14>
  }
}
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	3724      	adds	r7, #36	; 0x24
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	58000400 	.word	0x58000400

08001260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
 800126c:	4613      	mov	r3, r2
 800126e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800127c:	e003      	b.n	8001286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	041a      	lsls	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	619a      	str	r2, [r3, #24]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001292:	b480      	push	{r7}
 8001294:	b085      	sub	sp, #20
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	460b      	mov	r3, r1
 800129c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012a4:	887a      	ldrh	r2, [r7, #2]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4013      	ands	r3, r2
 80012aa:	041a      	lsls	r2, r3, #16
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	887b      	ldrh	r3, [r7, #2]
 80012b2:	400b      	ands	r3, r1
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	619a      	str	r2, [r3, #24]
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80012d0:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <HAL_HSEM_FastTake+0x2c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3320      	adds	r3, #32
 80012d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012da:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_HSEM_FastTake+0x30>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d101      	bne.n	80012e4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e000      	b.n	80012e6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	58026400 	.word	0x58026400
 80012f8:	80000300 	.word	0x80000300

080012fc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001306:	4906      	ldr	r1, [pc, #24]	; (8001320 <HAL_HSEM_Release+0x24>)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	58026400 	.word	0x58026400

08001324 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800132c:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	2b06      	cmp	r3, #6
 8001336:	d00a      	beq.n	800134e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001338:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	429a      	cmp	r2, r3
 8001344:	d001      	beq.n	800134a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e040      	b.n	80013cc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e03e      	b.n	80013cc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800134e:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001356:	491f      	ldr	r1, [pc, #124]	; (80013d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4313      	orrs	r3, r2
 800135c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800135e:	f7ff fcaf 	bl	8000cc0 <HAL_GetTick>
 8001362:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001364:	e009      	b.n	800137a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001366:	f7ff fcab 	bl	8000cc0 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001374:	d901      	bls.n	800137a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e028      	b.n	80013cc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001386:	d1ee      	bne.n	8001366 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b1e      	cmp	r3, #30
 800138c:	d008      	beq.n	80013a0 <HAL_PWREx_ConfigSupply+0x7c>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b2e      	cmp	r3, #46	; 0x2e
 8001392:	d005      	beq.n	80013a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b1d      	cmp	r3, #29
 8001398:	d002      	beq.n	80013a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b2d      	cmp	r3, #45	; 0x2d
 800139e:	d114      	bne.n	80013ca <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80013a0:	f7ff fc8e 	bl	8000cc0 <HAL_GetTick>
 80013a4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013a6:	e009      	b.n	80013bc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013a8:	f7ff fc8a 	bl	8000cc0 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013b6:	d901      	bls.n	80013bc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e007      	b.n	80013cc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_PWREx_ConfigSupply+0xb0>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c8:	d1ee      	bne.n	80013a8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	58024800 	.word	0x58024800

080013d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08c      	sub	sp, #48	; 0x30
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e3ff      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8087 	beq.w	8001506 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f8:	4b99      	ldr	r3, [pc, #612]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001402:	4b97      	ldr	r3, [pc, #604]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140a:	2b10      	cmp	r3, #16
 800140c:	d007      	beq.n	800141e <HAL_RCC_OscConfig+0x46>
 800140e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001410:	2b18      	cmp	r3, #24
 8001412:	d110      	bne.n	8001436 <HAL_RCC_OscConfig+0x5e>
 8001414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d10b      	bne.n	8001436 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141e:	4b90      	ldr	r3, [pc, #576]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d06c      	beq.n	8001504 <HAL_RCC_OscConfig+0x12c>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d168      	bne.n	8001504 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e3d9      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143e:	d106      	bne.n	800144e <HAL_RCC_OscConfig+0x76>
 8001440:	4b87      	ldr	r3, [pc, #540]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a86      	ldr	r2, [pc, #536]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e02e      	b.n	80014ac <HAL_RCC_OscConfig+0xd4>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10c      	bne.n	8001470 <HAL_RCC_OscConfig+0x98>
 8001456:	4b82      	ldr	r3, [pc, #520]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a81      	ldr	r2, [pc, #516]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 800145c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b7f      	ldr	r3, [pc, #508]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a7e      	ldr	r2, [pc, #504]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e01d      	b.n	80014ac <HAL_RCC_OscConfig+0xd4>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0xbc>
 800147a:	4b79      	ldr	r3, [pc, #484]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a78      	ldr	r2, [pc, #480]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b76      	ldr	r3, [pc, #472]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a75      	ldr	r2, [pc, #468]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e00b      	b.n	80014ac <HAL_RCC_OscConfig+0xd4>
 8001494:	4b72      	ldr	r3, [pc, #456]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a71      	ldr	r2, [pc, #452]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 800149a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b6f      	ldr	r3, [pc, #444]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a6e      	ldr	r2, [pc, #440]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 80014a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff fc04 	bl	8000cc0 <HAL_GetTick>
 80014b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014bc:	f7ff fc00 	bl	8000cc0 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	; 0x64
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e38d      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014ce:	4b64      	ldr	r3, [pc, #400]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0xe4>
 80014da:	e014      	b.n	8001506 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014dc:	f7ff fbf0 	bl	8000cc0 <HAL_GetTick>
 80014e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fbec 	bl	8000cc0 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	; 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e379      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014f6:	4b5a      	ldr	r3, [pc, #360]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x10c>
 8001502:	e000      	b.n	8001506 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 80ae 	beq.w	8001670 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001514:	4b52      	ldr	r3, [pc, #328]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800151c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800151e:	4b50      	ldr	r3, [pc, #320]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d007      	beq.n	800153a <HAL_RCC_OscConfig+0x162>
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	2b18      	cmp	r3, #24
 800152e:	d13a      	bne.n	80015a6 <HAL_RCC_OscConfig+0x1ce>
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d135      	bne.n	80015a6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800153a:	4b49      	ldr	r3, [pc, #292]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <HAL_RCC_OscConfig+0x17a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e34b      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001552:	f7ff fbe5 	bl	8000d20 <HAL_GetREVID>
 8001556:	4603      	mov	r3, r0
 8001558:	f241 0203 	movw	r2, #4099	; 0x1003
 800155c:	4293      	cmp	r3, r2
 800155e:	d817      	bhi.n	8001590 <HAL_RCC_OscConfig+0x1b8>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	2b40      	cmp	r3, #64	; 0x40
 8001566:	d108      	bne.n	800157a <HAL_RCC_OscConfig+0x1a2>
 8001568:	4b3d      	ldr	r3, [pc, #244]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001570:	4a3b      	ldr	r2, [pc, #236]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001576:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001578:	e07a      	b.n	8001670 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157a:	4b39      	ldr	r3, [pc, #228]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	031b      	lsls	r3, r3, #12
 8001588:	4935      	ldr	r1, [pc, #212]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 800158a:	4313      	orrs	r3, r2
 800158c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800158e:	e06f      	b.n	8001670 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001590:	4b33      	ldr	r3, [pc, #204]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	061b      	lsls	r3, r3, #24
 800159e:	4930      	ldr	r1, [pc, #192]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a4:	e064      	b.n	8001670 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d045      	beq.n	800163a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015ae:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 0219 	bic.w	r2, r3, #25
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	4929      	ldr	r1, [pc, #164]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fb7e 	bl	8000cc0 <HAL_GetTick>
 80015c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c8:	f7ff fb7a 	bl	8000cc0 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e307      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e6:	f7ff fb9b 	bl	8000d20 <HAL_GetREVID>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d817      	bhi.n	8001624 <HAL_RCC_OscConfig+0x24c>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	2b40      	cmp	r3, #64	; 0x40
 80015fa:	d108      	bne.n	800160e <HAL_RCC_OscConfig+0x236>
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001604:	4a16      	ldr	r2, [pc, #88]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160a:	6053      	str	r3, [r2, #4]
 800160c:	e030      	b.n	8001670 <HAL_RCC_OscConfig+0x298>
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	031b      	lsls	r3, r3, #12
 800161c:	4910      	ldr	r1, [pc, #64]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 800161e:	4313      	orrs	r3, r2
 8001620:	604b      	str	r3, [r1, #4]
 8001622:	e025      	b.n	8001670 <HAL_RCC_OscConfig+0x298>
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	061b      	lsls	r3, r3, #24
 8001632:	490b      	ldr	r1, [pc, #44]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
 8001638:	e01a      	b.n	8001670 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a08      	ldr	r2, [pc, #32]	; (8001660 <HAL_RCC_OscConfig+0x288>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001646:	f7ff fb3b 	bl	8000cc0 <HAL_GetTick>
 800164a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164e:	f7ff fb37 	bl	8000cc0 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d903      	bls.n	8001664 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e2c4      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
 8001660:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001664:	4ba4      	ldr	r3, [pc, #656]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1ee      	bne.n	800164e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80a9 	beq.w	80017d0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800167e:	4b9e      	ldr	r3, [pc, #632]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001686:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001688:	4b9b      	ldr	r3, [pc, #620]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	2b08      	cmp	r3, #8
 8001692:	d007      	beq.n	80016a4 <HAL_RCC_OscConfig+0x2cc>
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2b18      	cmp	r3, #24
 8001698:	d13a      	bne.n	8001710 <HAL_RCC_OscConfig+0x338>
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d135      	bne.n	8001710 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016a4:	4b94      	ldr	r3, [pc, #592]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_OscConfig+0x2e4>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	2b80      	cmp	r3, #128	; 0x80
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e296      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016bc:	f7ff fb30 	bl	8000d20 <HAL_GetREVID>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d817      	bhi.n	80016fa <HAL_RCC_OscConfig+0x322>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	d108      	bne.n	80016e4 <HAL_RCC_OscConfig+0x30c>
 80016d2:	4b89      	ldr	r3, [pc, #548]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80016da:	4a87      	ldr	r2, [pc, #540]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 80016dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016e0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016e2:	e075      	b.n	80017d0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016e4:	4b84      	ldr	r3, [pc, #528]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	069b      	lsls	r3, r3, #26
 80016f2:	4981      	ldr	r1, [pc, #516]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016f8:	e06a      	b.n	80017d0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016fa:	4b7f      	ldr	r3, [pc, #508]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	061b      	lsls	r3, r3, #24
 8001708:	497b      	ldr	r1, [pc, #492]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 800170a:	4313      	orrs	r3, r2
 800170c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800170e:	e05f      	b.n	80017d0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d042      	beq.n	800179e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001718:	4b77      	ldr	r3, [pc, #476]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a76      	ldr	r2, [pc, #472]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 800171e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001724:	f7ff facc 	bl	8000cc0 <HAL_GetTick>
 8001728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800172c:	f7ff fac8 	bl	8000cc0 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e255      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800173e:	4b6e      	ldr	r3, [pc, #440]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800174a:	f7ff fae9 	bl	8000d20 <HAL_GetREVID>
 800174e:	4603      	mov	r3, r0
 8001750:	f241 0203 	movw	r2, #4099	; 0x1003
 8001754:	4293      	cmp	r3, r2
 8001756:	d817      	bhi.n	8001788 <HAL_RCC_OscConfig+0x3b0>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	2b20      	cmp	r3, #32
 800175e:	d108      	bne.n	8001772 <HAL_RCC_OscConfig+0x39a>
 8001760:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001768:	4a63      	ldr	r2, [pc, #396]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 800176a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800176e:	6053      	str	r3, [r2, #4]
 8001770:	e02e      	b.n	80017d0 <HAL_RCC_OscConfig+0x3f8>
 8001772:	4b61      	ldr	r3, [pc, #388]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	069b      	lsls	r3, r3, #26
 8001780:	495d      	ldr	r1, [pc, #372]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 8001782:	4313      	orrs	r3, r2
 8001784:	604b      	str	r3, [r1, #4]
 8001786:	e023      	b.n	80017d0 <HAL_RCC_OscConfig+0x3f8>
 8001788:	4b5b      	ldr	r3, [pc, #364]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	061b      	lsls	r3, r3, #24
 8001796:	4958      	ldr	r1, [pc, #352]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 8001798:	4313      	orrs	r3, r2
 800179a:	60cb      	str	r3, [r1, #12]
 800179c:	e018      	b.n	80017d0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800179e:	4b56      	ldr	r3, [pc, #344]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a55      	ldr	r2, [pc, #340]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 80017a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017aa:	f7ff fa89 	bl	8000cc0 <HAL_GetTick>
 80017ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80017b2:	f7ff fa85 	bl	8000cc0 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e212      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017c4:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f0      	bne.n	80017b2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d036      	beq.n	800184a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d019      	beq.n	8001818 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e4:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 80017e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e8:	4a43      	ldr	r2, [pc, #268]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7ff fa66 	bl	8000cc0 <HAL_GetTick>
 80017f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff fa62 	bl	8000cc0 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1ef      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800180a:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 800180c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x420>
 8001816:	e018      	b.n	800184a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001818:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 800181a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800181c:	4a36      	ldr	r2, [pc, #216]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 800181e:	f023 0301 	bic.w	r3, r3, #1
 8001822:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff fa4c 	bl	8000cc0 <HAL_GetTick>
 8001828:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800182c:	f7ff fa48 	bl	8000cc0 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e1d5      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800183e:	4b2e      	ldr	r3, [pc, #184]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 8001840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0320 	and.w	r3, r3, #32
 8001852:	2b00      	cmp	r3, #0
 8001854:	d036      	beq.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d019      	beq.n	8001892 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800185e:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a25      	ldr	r2, [pc, #148]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 8001864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001868:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800186a:	f7ff fa29 	bl	8000cc0 <HAL_GetTick>
 800186e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001872:	f7ff fa25 	bl	8000cc0 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e1b2      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x49a>
 8001890:	e018      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 8001898:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800189c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800189e:	f7ff fa0f 	bl	8000cc0 <HAL_GetTick>
 80018a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80018a6:	f7ff fa0b 	bl	8000cc0 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e198      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_RCC_OscConfig+0x520>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f0      	bne.n	80018a6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 8085 	beq.w	80019dc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_RCC_OscConfig+0x524>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a09      	ldr	r2, [pc, #36]	; (80018fc <HAL_RCC_OscConfig+0x524>)
 80018d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018de:	f7ff f9ef 	bl	8000cc0 <HAL_GetTick>
 80018e2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018e4:	e00c      	b.n	8001900 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80018e6:	f7ff f9eb 	bl	8000cc0 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b64      	cmp	r3, #100	; 0x64
 80018f2:	d905      	bls.n	8001900 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e178      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
 80018f8:	58024400 	.word	0x58024400
 80018fc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001900:	4b96      	ldr	r3, [pc, #600]	; (8001b5c <HAL_RCC_OscConfig+0x784>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0ec      	beq.n	80018e6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d106      	bne.n	8001922 <HAL_RCC_OscConfig+0x54a>
 8001914:	4b92      	ldr	r3, [pc, #584]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001918:	4a91      	ldr	r2, [pc, #580]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6713      	str	r3, [r2, #112]	; 0x70
 8001920:	e02d      	b.n	800197e <HAL_RCC_OscConfig+0x5a6>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0x56c>
 800192a:	4b8d      	ldr	r3, [pc, #564]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192e:	4a8c      	ldr	r2, [pc, #560]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	6713      	str	r3, [r2, #112]	; 0x70
 8001936:	4b8a      	ldr	r3, [pc, #552]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193a:	4a89      	ldr	r2, [pc, #548]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 800193c:	f023 0304 	bic.w	r3, r3, #4
 8001940:	6713      	str	r3, [r2, #112]	; 0x70
 8001942:	e01c      	b.n	800197e <HAL_RCC_OscConfig+0x5a6>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b05      	cmp	r3, #5
 800194a:	d10c      	bne.n	8001966 <HAL_RCC_OscConfig+0x58e>
 800194c:	4b84      	ldr	r3, [pc, #528]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001950:	4a83      	ldr	r2, [pc, #524]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001952:	f043 0304 	orr.w	r3, r3, #4
 8001956:	6713      	str	r3, [r2, #112]	; 0x70
 8001958:	4b81      	ldr	r3, [pc, #516]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195c:	4a80      	ldr	r2, [pc, #512]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6713      	str	r3, [r2, #112]	; 0x70
 8001964:	e00b      	b.n	800197e <HAL_RCC_OscConfig+0x5a6>
 8001966:	4b7e      	ldr	r3, [pc, #504]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196a:	4a7d      	ldr	r2, [pc, #500]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6713      	str	r3, [r2, #112]	; 0x70
 8001972:	4b7b      	ldr	r3, [pc, #492]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001976:	4a7a      	ldr	r2, [pc, #488]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001978:	f023 0304 	bic.w	r3, r3, #4
 800197c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d015      	beq.n	80019b2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001986:	f7ff f99b 	bl	8000cc0 <HAL_GetTick>
 800198a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff f997 	bl	8000cc0 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	; 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e122      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019a4:	4b6e      	ldr	r3, [pc, #440]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0ee      	beq.n	800198e <HAL_RCC_OscConfig+0x5b6>
 80019b0:	e014      	b.n	80019dc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b2:	f7ff f985 	bl	8000cc0 <HAL_GetTick>
 80019b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ba:	f7ff f981 	bl	8000cc0 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e10c      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019d0:	4b63      	ldr	r3, [pc, #396]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 80019d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1ee      	bne.n	80019ba <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 8101 	beq.w	8001be8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019e6:	4b5e      	ldr	r3, [pc, #376]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019ee:	2b18      	cmp	r3, #24
 80019f0:	f000 80bc 	beq.w	8001b6c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	f040 8095 	bne.w	8001b28 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fe:	4b58      	ldr	r3, [pc, #352]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a57      	ldr	r2, [pc, #348]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001a04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f959 	bl	8000cc0 <HAL_GetTick>
 8001a0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff f955 	bl	8000cc0 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e0e2      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a24:	4b4e      	ldr	r3, [pc, #312]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a30:	4b4b      	ldr	r3, [pc, #300]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001a32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a34:	4b4b      	ldr	r3, [pc, #300]	; (8001b64 <HAL_RCC_OscConfig+0x78c>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	430a      	orrs	r2, r1
 8001a44:	4946      	ldr	r1, [pc, #280]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	628b      	str	r3, [r1, #40]	; 0x28
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	025b      	lsls	r3, r3, #9
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a64:	3b01      	subs	r3, #1
 8001a66:	041b      	lsls	r3, r3, #16
 8001a68:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a72:	3b01      	subs	r3, #1
 8001a74:	061b      	lsls	r3, r3, #24
 8001a76:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a7a:	4939      	ldr	r1, [pc, #228]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001a80:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	4a36      	ldr	r2, [pc, #216]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001a86:	f023 0301 	bic.w	r3, r3, #1
 8001a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a8c:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a90:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <HAL_RCC_OscConfig+0x790>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a98:	00d2      	lsls	r2, r2, #3
 8001a9a:	4931      	ldr	r1, [pc, #196]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001aa0:	4b2f      	ldr	r3, [pc, #188]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	f023 020c 	bic.w	r2, r3, #12
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	492c      	ldr	r1, [pc, #176]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	f023 0202 	bic.w	r2, r3, #2
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4928      	ldr	r1, [pc, #160]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ac4:	4b26      	ldr	r3, [pc, #152]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	4a25      	ldr	r2, [pc, #148]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ad0:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	4a22      	ldr	r2, [pc, #136]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001adc:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001ae2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af4:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a19      	ldr	r2, [pc, #100]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff f8de 	bl	8000cc0 <HAL_GetTick>
 8001b04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff f8da 	bl	8000cc0 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e067      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x730>
 8001b26:	e05f      	b.n	8001be8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff f8c4 	bl	8000cc0 <HAL_GetTick>
 8001b38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7ff f8c0 	bl	8000cc0 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e04d      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <HAL_RCC_OscConfig+0x788>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x764>
 8001b5a:	e045      	b.n	8001be8 <HAL_RCC_OscConfig+0x810>
 8001b5c:	58024800 	.word	0x58024800
 8001b60:	58024400 	.word	0x58024400
 8001b64:	fffffc0c 	.word	0xfffffc0c
 8001b68:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b6c:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_RCC_OscConfig+0x81c>)
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_RCC_OscConfig+0x81c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d031      	beq.n	8001be4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	f003 0203 	and.w	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d12a      	bne.n	8001be4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d122      	bne.n	8001be4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d11a      	bne.n	8001be4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	0a5b      	lsrs	r3, r3, #9
 8001bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d111      	bne.n	8001be4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	0c1b      	lsrs	r3, r3, #16
 8001bc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bcc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d108      	bne.n	8001be4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	0e1b      	lsrs	r3, r3, #24
 8001bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bde:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3730      	adds	r7, #48	; 0x30
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	58024400 	.word	0x58024400

08001bf8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e19c      	b.n	8001f46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b8a      	ldr	r3, [pc, #552]	; (8001e38 <HAL_RCC_ClockConfig+0x240>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d910      	bls.n	8001c3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b87      	ldr	r3, [pc, #540]	; (8001e38 <HAL_RCC_ClockConfig+0x240>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 020f 	bic.w	r2, r3, #15
 8001c22:	4985      	ldr	r1, [pc, #532]	; (8001e38 <HAL_RCC_ClockConfig+0x240>)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b83      	ldr	r3, [pc, #524]	; (8001e38 <HAL_RCC_ClockConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e184      	b.n	8001f46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d010      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	4b7b      	ldr	r3, [pc, #492]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d908      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c58:	4b78      	ldr	r3, [pc, #480]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	4975      	ldr	r1, [pc, #468]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d010      	beq.n	8001c98 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	4b70      	ldr	r3, [pc, #448]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d908      	bls.n	8001c98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c86:	4b6d      	ldr	r3, [pc, #436]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	496a      	ldr	r1, [pc, #424]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d010      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699a      	ldr	r2, [r3, #24]
 8001ca8:	4b64      	ldr	r3, [pc, #400]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d908      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cb4:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	495e      	ldr	r1, [pc, #376]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d010      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69da      	ldr	r2, [r3, #28]
 8001cd6:	4b59      	ldr	r3, [pc, #356]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d908      	bls.n	8001cf4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ce2:	4b56      	ldr	r3, [pc, #344]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	4953      	ldr	r1, [pc, #332]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d010      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	4b4d      	ldr	r3, [pc, #308]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d908      	bls.n	8001d22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d10:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f023 020f 	bic.w	r2, r3, #15
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4947      	ldr	r1, [pc, #284]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d055      	beq.n	8001dda <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d2e:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	4940      	ldr	r1, [pc, #256]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d48:	4b3c      	ldr	r3, [pc, #240]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d121      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0f6      	b.n	8001f46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d60:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d115      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0ea      	b.n	8001f46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d107      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d78:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d109      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0de      	b.n	8001f46 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d88:	4b2c      	ldr	r3, [pc, #176]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0d6      	b.n	8001f46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d98:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	f023 0207 	bic.w	r2, r3, #7
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4925      	ldr	r1, [pc, #148]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001daa:	f7fe ff89 	bl	8000cc0 <HAL_GetTick>
 8001dae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db2:	f7fe ff85 	bl	8000cc0 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e0be      	b.n	8001f46 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d1eb      	bne.n	8001db2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d010      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d208      	bcs.n	8001e08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f023 020f 	bic.w	r2, r3, #15
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	490e      	ldr	r1, [pc, #56]	; (8001e3c <HAL_RCC_ClockConfig+0x244>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_ClockConfig+0x240>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d214      	bcs.n	8001e40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_RCC_ClockConfig+0x240>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 020f 	bic.w	r2, r3, #15
 8001e1e:	4906      	ldr	r1, [pc, #24]	; (8001e38 <HAL_RCC_ClockConfig+0x240>)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <HAL_RCC_ClockConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e086      	b.n	8001f46 <HAL_RCC_ClockConfig+0x34e>
 8001e38:	52002000 	.word	0x52002000
 8001e3c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d010      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	4b3f      	ldr	r3, [pc, #252]	; (8001f50 <HAL_RCC_ClockConfig+0x358>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d208      	bcs.n	8001e6e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e5c:	4b3c      	ldr	r3, [pc, #240]	; (8001f50 <HAL_RCC_ClockConfig+0x358>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	4939      	ldr	r1, [pc, #228]	; (8001f50 <HAL_RCC_ClockConfig+0x358>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d010      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	4b34      	ldr	r3, [pc, #208]	; (8001f50 <HAL_RCC_ClockConfig+0x358>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d208      	bcs.n	8001e9c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e8a:	4b31      	ldr	r3, [pc, #196]	; (8001f50 <HAL_RCC_ClockConfig+0x358>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	492e      	ldr	r1, [pc, #184]	; (8001f50 <HAL_RCC_ClockConfig+0x358>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d010      	beq.n	8001eca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699a      	ldr	r2, [r3, #24]
 8001eac:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <HAL_RCC_ClockConfig+0x358>)
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d208      	bcs.n	8001eca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001eb8:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <HAL_RCC_ClockConfig+0x358>)
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4922      	ldr	r1, [pc, #136]	; (8001f50 <HAL_RCC_ClockConfig+0x358>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d010      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69da      	ldr	r2, [r3, #28]
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_RCC_ClockConfig+0x358>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d208      	bcs.n	8001ef8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_RCC_ClockConfig+0x358>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	4917      	ldr	r1, [pc, #92]	; (8001f50 <HAL_RCC_ClockConfig+0x358>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ef8:	f000 f834 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <HAL_RCC_ClockConfig+0x358>)
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	4912      	ldr	r1, [pc, #72]	; (8001f54 <HAL_RCC_ClockConfig+0x35c>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
 8001f14:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <HAL_RCC_ClockConfig+0x358>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <HAL_RCC_ClockConfig+0x35c>)
 8001f20:	5cd3      	ldrb	r3, [r2, r3]
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <HAL_RCC_ClockConfig+0x360>)
 8001f2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_RCC_ClockConfig+0x364>)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_RCC_ClockConfig+0x368>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fe76 	bl	8000c2c <HAL_InitTick>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	58024400 	.word	0x58024400
 8001f54:	080029ec 	.word	0x080029ec
 8001f58:	24000004 	.word	0x24000004
 8001f5c:	24000000 	.word	0x24000000
 8001f60:	24000008 	.word	0x24000008

08001f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	; 0x24
 8001f68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f6a:	4bb3      	ldr	r3, [pc, #716]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f72:	2b18      	cmp	r3, #24
 8001f74:	f200 8155 	bhi.w	8002222 <HAL_RCC_GetSysClockFreq+0x2be>
 8001f78:	a201      	add	r2, pc, #4	; (adr r2, 8001f80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7e:	bf00      	nop
 8001f80:	08001fe5 	.word	0x08001fe5
 8001f84:	08002223 	.word	0x08002223
 8001f88:	08002223 	.word	0x08002223
 8001f8c:	08002223 	.word	0x08002223
 8001f90:	08002223 	.word	0x08002223
 8001f94:	08002223 	.word	0x08002223
 8001f98:	08002223 	.word	0x08002223
 8001f9c:	08002223 	.word	0x08002223
 8001fa0:	0800200b 	.word	0x0800200b
 8001fa4:	08002223 	.word	0x08002223
 8001fa8:	08002223 	.word	0x08002223
 8001fac:	08002223 	.word	0x08002223
 8001fb0:	08002223 	.word	0x08002223
 8001fb4:	08002223 	.word	0x08002223
 8001fb8:	08002223 	.word	0x08002223
 8001fbc:	08002223 	.word	0x08002223
 8001fc0:	08002011 	.word	0x08002011
 8001fc4:	08002223 	.word	0x08002223
 8001fc8:	08002223 	.word	0x08002223
 8001fcc:	08002223 	.word	0x08002223
 8001fd0:	08002223 	.word	0x08002223
 8001fd4:	08002223 	.word	0x08002223
 8001fd8:	08002223 	.word	0x08002223
 8001fdc:	08002223 	.word	0x08002223
 8001fe0:	08002017 	.word	0x08002017
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fe4:	4b94      	ldr	r3, [pc, #592]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d009      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ff0:	4b91      	ldr	r3, [pc, #580]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	08db      	lsrs	r3, r3, #3
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	4a90      	ldr	r2, [pc, #576]	; (800223c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8002000:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002002:	e111      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002004:	4b8d      	ldr	r3, [pc, #564]	; (800223c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002006:	61bb      	str	r3, [r7, #24]
    break;
 8002008:	e10e      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800200a:	4b8d      	ldr	r3, [pc, #564]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800200c:	61bb      	str	r3, [r7, #24]
    break;
 800200e:	e10b      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002010:	4b8c      	ldr	r3, [pc, #560]	; (8002244 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002012:	61bb      	str	r3, [r7, #24]
    break;
 8002014:	e108      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002016:	4b88      	ldr	r3, [pc, #544]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002020:	4b85      	ldr	r3, [pc, #532]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800202a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800202c:	4b82      	ldr	r3, [pc, #520]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002036:	4b80      	ldr	r3, [pc, #512]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203a:	08db      	lsrs	r3, r3, #3
 800203c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800204e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80e1 	beq.w	800221c <HAL_RCC_GetSysClockFreq+0x2b8>
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b02      	cmp	r3, #2
 800205e:	f000 8083 	beq.w	8002168 <HAL_RCC_GetSysClockFreq+0x204>
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b02      	cmp	r3, #2
 8002066:	f200 80a1 	bhi.w	80021ac <HAL_RCC_GetSysClockFreq+0x248>
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x114>
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d056      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002076:	e099      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002078:	4b6f      	ldr	r3, [pc, #444]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	2b00      	cmp	r3, #0
 8002082:	d02d      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002084:	4b6c      	ldr	r3, [pc, #432]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	08db      	lsrs	r3, r3, #3
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	4a6b      	ldr	r2, [pc, #428]	; (800223c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
 8002094:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ae:	4b62      	ldr	r3, [pc, #392]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020be:	ed97 6a02 	vldr	s12, [r7, #8]
 80020c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002248 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80020de:	e087      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800224c <HAL_RCC_GetSysClockFreq+0x2e8>
 80020ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020f2:	4b51      	ldr	r3, [pc, #324]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020fa:	ee07 3a90 	vmov	s15, r3
 80020fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002102:	ed97 6a02 	vldr	s12, [r7, #8]
 8002106:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002248 <HAL_RCC_GetSysClockFreq+0x2e4>
 800210a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800210e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800211a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002122:	e065      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	ee07 3a90 	vmov	s15, r3
 800212a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800212e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002250 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002136:	4b40      	ldr	r3, [pc, #256]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002146:	ed97 6a02 	vldr	s12, [r7, #8]
 800214a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002248 <HAL_RCC_GetSysClockFreq+0x2e4>
 800214e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800215a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800215e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002166:	e043      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002172:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002254 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800217a:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002182:	ee07 3a90 	vmov	s15, r3
 8002186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800218a:	ed97 6a02 	vldr	s12, [r7, #8]
 800218e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002248 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800219a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800219e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021aa:	e021      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002250 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c6:	ee07 3a90 	vmov	s15, r3
 80021ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80021d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002248 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021ee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80021f0:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	0a5b      	lsrs	r3, r3, #9
 80021f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021fa:	3301      	adds	r3, #1
 80021fc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	ee07 3a90 	vmov	s15, r3
 8002204:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002208:	edd7 6a07 	vldr	s13, [r7, #28]
 800220c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002214:	ee17 3a90 	vmov	r3, s15
 8002218:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800221a:	e005      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	61bb      	str	r3, [r7, #24]
    break;
 8002220:	e002      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002222:	4b07      	ldr	r3, [pc, #28]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002224:	61bb      	str	r3, [r7, #24]
    break;
 8002226:	bf00      	nop
  }

  return sysclockfreq;
 8002228:	69bb      	ldr	r3, [r7, #24]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3724      	adds	r7, #36	; 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	58024400 	.word	0x58024400
 800223c:	03d09000 	.word	0x03d09000
 8002240:	003d0900 	.word	0x003d0900
 8002244:	017d7840 	.word	0x017d7840
 8002248:	46000000 	.word	0x46000000
 800224c:	4c742400 	.word	0x4c742400
 8002250:	4a742400 	.word	0x4a742400
 8002254:	4bbebc20 	.word	0x4bbebc20

08002258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e049      	b.n	80022fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fc22 	bl	8000ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3304      	adds	r3, #4
 8002294:	4619      	mov	r1, r3
 8002296:	4610      	mov	r0, r2
 8002298:	f000 f99a 	bl	80025d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d001      	beq.n	8002320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e04f      	b.n	80023c0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a23      	ldr	r2, [pc, #140]	; (80023cc <HAL_TIM_Base_Start_IT+0xc4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d01d      	beq.n	800237e <HAL_TIM_Base_Start_IT+0x76>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234a:	d018      	beq.n	800237e <HAL_TIM_Base_Start_IT+0x76>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1f      	ldr	r2, [pc, #124]	; (80023d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d013      	beq.n	800237e <HAL_TIM_Base_Start_IT+0x76>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a1e      	ldr	r2, [pc, #120]	; (80023d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d00e      	beq.n	800237e <HAL_TIM_Base_Start_IT+0x76>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a1c      	ldr	r2, [pc, #112]	; (80023d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d009      	beq.n	800237e <HAL_TIM_Base_Start_IT+0x76>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <HAL_TIM_Base_Start_IT+0xd4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d004      	beq.n	800237e <HAL_TIM_Base_Start_IT+0x76>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a19      	ldr	r2, [pc, #100]	; (80023e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d115      	bne.n	80023aa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002386:	4013      	ands	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b06      	cmp	r3, #6
 800238e:	d015      	beq.n	80023bc <HAL_TIM_Base_Start_IT+0xb4>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002396:	d011      	beq.n	80023bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a8:	e008      	b.n	80023bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	e000      	b.n	80023be <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	40010000 	.word	0x40010000
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800
 80023d8:	40000c00 	.word	0x40000c00
 80023dc:	40010400 	.word	0x40010400
 80023e0:	40001800 	.word	0x40001800
 80023e4:	00010007 	.word	0x00010007

080023e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_TIM_ConfigClockSource+0x18>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e0db      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x1d0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4b69      	ldr	r3, [pc, #420]	; (80025c0 <HAL_TIM_ConfigClockSource+0x1d8>)
 800241c:	4013      	ands	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002426:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a63      	ldr	r2, [pc, #396]	; (80025c4 <HAL_TIM_ConfigClockSource+0x1dc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	f000 80a9 	beq.w	800258e <HAL_TIM_ConfigClockSource+0x1a6>
 800243c:	4a61      	ldr	r2, [pc, #388]	; (80025c4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800243e:	4293      	cmp	r3, r2
 8002440:	f200 80ae 	bhi.w	80025a0 <HAL_TIM_ConfigClockSource+0x1b8>
 8002444:	4a60      	ldr	r2, [pc, #384]	; (80025c8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	f000 80a1 	beq.w	800258e <HAL_TIM_ConfigClockSource+0x1a6>
 800244c:	4a5e      	ldr	r2, [pc, #376]	; (80025c8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	f200 80a6 	bhi.w	80025a0 <HAL_TIM_ConfigClockSource+0x1b8>
 8002454:	4a5d      	ldr	r2, [pc, #372]	; (80025cc <HAL_TIM_ConfigClockSource+0x1e4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	f000 8099 	beq.w	800258e <HAL_TIM_ConfigClockSource+0x1a6>
 800245c:	4a5b      	ldr	r2, [pc, #364]	; (80025cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	f200 809e 	bhi.w	80025a0 <HAL_TIM_ConfigClockSource+0x1b8>
 8002464:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002468:	f000 8091 	beq.w	800258e <HAL_TIM_ConfigClockSource+0x1a6>
 800246c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002470:	f200 8096 	bhi.w	80025a0 <HAL_TIM_ConfigClockSource+0x1b8>
 8002474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002478:	f000 8089 	beq.w	800258e <HAL_TIM_ConfigClockSource+0x1a6>
 800247c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002480:	f200 808e 	bhi.w	80025a0 <HAL_TIM_ConfigClockSource+0x1b8>
 8002484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002488:	d03e      	beq.n	8002508 <HAL_TIM_ConfigClockSource+0x120>
 800248a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800248e:	f200 8087 	bhi.w	80025a0 <HAL_TIM_ConfigClockSource+0x1b8>
 8002492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002496:	f000 8085 	beq.w	80025a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800249a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800249e:	d87f      	bhi.n	80025a0 <HAL_TIM_ConfigClockSource+0x1b8>
 80024a0:	2b70      	cmp	r3, #112	; 0x70
 80024a2:	d01a      	beq.n	80024da <HAL_TIM_ConfigClockSource+0xf2>
 80024a4:	2b70      	cmp	r3, #112	; 0x70
 80024a6:	d87b      	bhi.n	80025a0 <HAL_TIM_ConfigClockSource+0x1b8>
 80024a8:	2b60      	cmp	r3, #96	; 0x60
 80024aa:	d050      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x166>
 80024ac:	2b60      	cmp	r3, #96	; 0x60
 80024ae:	d877      	bhi.n	80025a0 <HAL_TIM_ConfigClockSource+0x1b8>
 80024b0:	2b50      	cmp	r3, #80	; 0x50
 80024b2:	d03c      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x146>
 80024b4:	2b50      	cmp	r3, #80	; 0x50
 80024b6:	d873      	bhi.n	80025a0 <HAL_TIM_ConfigClockSource+0x1b8>
 80024b8:	2b40      	cmp	r3, #64	; 0x40
 80024ba:	d058      	beq.n	800256e <HAL_TIM_ConfigClockSource+0x186>
 80024bc:	2b40      	cmp	r3, #64	; 0x40
 80024be:	d86f      	bhi.n	80025a0 <HAL_TIM_ConfigClockSource+0x1b8>
 80024c0:	2b30      	cmp	r3, #48	; 0x30
 80024c2:	d064      	beq.n	800258e <HAL_TIM_ConfigClockSource+0x1a6>
 80024c4:	2b30      	cmp	r3, #48	; 0x30
 80024c6:	d86b      	bhi.n	80025a0 <HAL_TIM_ConfigClockSource+0x1b8>
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d060      	beq.n	800258e <HAL_TIM_ConfigClockSource+0x1a6>
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d867      	bhi.n	80025a0 <HAL_TIM_ConfigClockSource+0x1b8>
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d05c      	beq.n	800258e <HAL_TIM_ConfigClockSource+0x1a6>
 80024d4:	2b10      	cmp	r3, #16
 80024d6:	d05a      	beq.n	800258e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80024d8:	e062      	b.n	80025a0 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6899      	ldr	r1, [r3, #8]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f000 f989 	bl	8002800 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	609a      	str	r2, [r3, #8]
      break;
 8002506:	e04e      	b.n	80025a6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6899      	ldr	r1, [r3, #8]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f000 f972 	bl	8002800 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800252a:	609a      	str	r2, [r3, #8]
      break;
 800252c:	e03b      	b.n	80025a6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6859      	ldr	r1, [r3, #4]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	461a      	mov	r2, r3
 800253c:	f000 f8e2 	bl	8002704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2150      	movs	r1, #80	; 0x50
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f93c 	bl	80027c4 <TIM_ITRx_SetConfig>
      break;
 800254c:	e02b      	b.n	80025a6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	6859      	ldr	r1, [r3, #4]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	461a      	mov	r2, r3
 800255c:	f000 f901 	bl	8002762 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2160      	movs	r1, #96	; 0x60
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f92c 	bl	80027c4 <TIM_ITRx_SetConfig>
      break;
 800256c:	e01b      	b.n	80025a6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6859      	ldr	r1, [r3, #4]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	461a      	mov	r2, r3
 800257c:	f000 f8c2 	bl	8002704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2140      	movs	r1, #64	; 0x40
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f91c 	bl	80027c4 <TIM_ITRx_SetConfig>
      break;
 800258c:	e00b      	b.n	80025a6 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4619      	mov	r1, r3
 8002598:	4610      	mov	r0, r2
 800259a:	f000 f913 	bl	80027c4 <TIM_ITRx_SetConfig>
        break;
 800259e:	e002      	b.n	80025a6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80025a0:	bf00      	nop
 80025a2:	e000      	b.n	80025a6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80025a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	ffceff88 	.word	0xffceff88
 80025c4:	00100040 	.word	0x00100040
 80025c8:	00100030 	.word	0x00100030
 80025cc:	00100020 	.word	0x00100020

080025d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a40      	ldr	r2, [pc, #256]	; (80026e4 <TIM_Base_SetConfig+0x114>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d013      	beq.n	8002610 <TIM_Base_SetConfig+0x40>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ee:	d00f      	beq.n	8002610 <TIM_Base_SetConfig+0x40>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a3d      	ldr	r2, [pc, #244]	; (80026e8 <TIM_Base_SetConfig+0x118>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00b      	beq.n	8002610 <TIM_Base_SetConfig+0x40>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a3c      	ldr	r2, [pc, #240]	; (80026ec <TIM_Base_SetConfig+0x11c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d007      	beq.n	8002610 <TIM_Base_SetConfig+0x40>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a3b      	ldr	r2, [pc, #236]	; (80026f0 <TIM_Base_SetConfig+0x120>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d003      	beq.n	8002610 <TIM_Base_SetConfig+0x40>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a3a      	ldr	r2, [pc, #232]	; (80026f4 <TIM_Base_SetConfig+0x124>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d108      	bne.n	8002622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a2f      	ldr	r2, [pc, #188]	; (80026e4 <TIM_Base_SetConfig+0x114>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01f      	beq.n	800266a <TIM_Base_SetConfig+0x9a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002630:	d01b      	beq.n	800266a <TIM_Base_SetConfig+0x9a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a2c      	ldr	r2, [pc, #176]	; (80026e8 <TIM_Base_SetConfig+0x118>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d017      	beq.n	800266a <TIM_Base_SetConfig+0x9a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a2b      	ldr	r2, [pc, #172]	; (80026ec <TIM_Base_SetConfig+0x11c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d013      	beq.n	800266a <TIM_Base_SetConfig+0x9a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a2a      	ldr	r2, [pc, #168]	; (80026f0 <TIM_Base_SetConfig+0x120>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00f      	beq.n	800266a <TIM_Base_SetConfig+0x9a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a29      	ldr	r2, [pc, #164]	; (80026f4 <TIM_Base_SetConfig+0x124>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00b      	beq.n	800266a <TIM_Base_SetConfig+0x9a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a28      	ldr	r2, [pc, #160]	; (80026f8 <TIM_Base_SetConfig+0x128>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <TIM_Base_SetConfig+0x9a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a27      	ldr	r2, [pc, #156]	; (80026fc <TIM_Base_SetConfig+0x12c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d003      	beq.n	800266a <TIM_Base_SetConfig+0x9a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a26      	ldr	r2, [pc, #152]	; (8002700 <TIM_Base_SetConfig+0x130>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d108      	bne.n	800267c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a10      	ldr	r2, [pc, #64]	; (80026e4 <TIM_Base_SetConfig+0x114>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00f      	beq.n	80026c8 <TIM_Base_SetConfig+0xf8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <TIM_Base_SetConfig+0x124>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00b      	beq.n	80026c8 <TIM_Base_SetConfig+0xf8>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a11      	ldr	r2, [pc, #68]	; (80026f8 <TIM_Base_SetConfig+0x128>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d007      	beq.n	80026c8 <TIM_Base_SetConfig+0xf8>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a10      	ldr	r2, [pc, #64]	; (80026fc <TIM_Base_SetConfig+0x12c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d003      	beq.n	80026c8 <TIM_Base_SetConfig+0xf8>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a0f      	ldr	r2, [pc, #60]	; (8002700 <TIM_Base_SetConfig+0x130>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d103      	bne.n	80026d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	615a      	str	r2, [r3, #20]
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40010000 	.word	0x40010000
 80026e8:	40000400 	.word	0x40000400
 80026ec:	40000800 	.word	0x40000800
 80026f0:	40000c00 	.word	0x40000c00
 80026f4:	40010400 	.word	0x40010400
 80026f8:	40014000 	.word	0x40014000
 80026fc:	40014400 	.word	0x40014400
 8002700:	40014800 	.word	0x40014800

08002704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	f023 0201 	bic.w	r2, r3, #1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800272e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f023 030a 	bic.w	r3, r3, #10
 8002740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	621a      	str	r2, [r3, #32]
}
 8002756:	bf00      	nop
 8002758:	371c      	adds	r7, #28
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002762:	b480      	push	{r7}
 8002764:	b087      	sub	sp, #28
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	f023 0210 	bic.w	r2, r3, #16
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800278c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	031b      	lsls	r3, r3, #12
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	4313      	orrs	r3, r2
 8002796:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800279e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	621a      	str	r2, [r3, #32]
}
 80027b6:	bf00      	nop
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <TIM_ITRx_SetConfig+0x38>)
 80027d8:	4013      	ands	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f043 0307 	orr.w	r3, r3, #7
 80027e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	609a      	str	r2, [r3, #8]
}
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	ffcfff8f 	.word	0xffcfff8f

08002800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800281a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	021a      	lsls	r2, r3, #8
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	431a      	orrs	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4313      	orrs	r3, r2
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	609a      	str	r2, [r3, #8]
}
 8002834:	bf00      	nop
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002854:	2302      	movs	r3, #2
 8002856:	e068      	b.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a2e      	ldr	r2, [pc, #184]	; (8002938 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d004      	beq.n	800288c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a2d      	ldr	r2, [pc, #180]	; (800293c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d108      	bne.n	800289e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002892:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1e      	ldr	r2, [pc, #120]	; (8002938 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01d      	beq.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ca:	d018      	beq.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1b      	ldr	r2, [pc, #108]	; (8002940 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00e      	beq.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a18      	ldr	r2, [pc, #96]	; (8002948 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d009      	beq.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a13      	ldr	r2, [pc, #76]	; (800293c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d004      	beq.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a14      	ldr	r2, [pc, #80]	; (800294c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d10c      	bne.n	8002918 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	4313      	orrs	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40010000 	.word	0x40010000
 800293c:	40010400 	.word	0x40010400
 8002940:	40000400 	.word	0x40000400
 8002944:	40000800 	.word	0x40000800
 8002948:	40000c00 	.word	0x40000c00
 800294c:	40001800 	.word	0x40001800

08002950 <__libc_init_array>:
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	4d0d      	ldr	r5, [pc, #52]	; (8002988 <__libc_init_array+0x38>)
 8002954:	4c0d      	ldr	r4, [pc, #52]	; (800298c <__libc_init_array+0x3c>)
 8002956:	1b64      	subs	r4, r4, r5
 8002958:	10a4      	asrs	r4, r4, #2
 800295a:	2600      	movs	r6, #0
 800295c:	42a6      	cmp	r6, r4
 800295e:	d109      	bne.n	8002974 <__libc_init_array+0x24>
 8002960:	4d0b      	ldr	r5, [pc, #44]	; (8002990 <__libc_init_array+0x40>)
 8002962:	4c0c      	ldr	r4, [pc, #48]	; (8002994 <__libc_init_array+0x44>)
 8002964:	f000 f820 	bl	80029a8 <_init>
 8002968:	1b64      	subs	r4, r4, r5
 800296a:	10a4      	asrs	r4, r4, #2
 800296c:	2600      	movs	r6, #0
 800296e:	42a6      	cmp	r6, r4
 8002970:	d105      	bne.n	800297e <__libc_init_array+0x2e>
 8002972:	bd70      	pop	{r4, r5, r6, pc}
 8002974:	f855 3b04 	ldr.w	r3, [r5], #4
 8002978:	4798      	blx	r3
 800297a:	3601      	adds	r6, #1
 800297c:	e7ee      	b.n	800295c <__libc_init_array+0xc>
 800297e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002982:	4798      	blx	r3
 8002984:	3601      	adds	r6, #1
 8002986:	e7f2      	b.n	800296e <__libc_init_array+0x1e>
 8002988:	080029fc 	.word	0x080029fc
 800298c:	080029fc 	.word	0x080029fc
 8002990:	080029fc 	.word	0x080029fc
 8002994:	08002a00 	.word	0x08002a00

08002998 <memset>:
 8002998:	4402      	add	r2, r0
 800299a:	4603      	mov	r3, r0
 800299c:	4293      	cmp	r3, r2
 800299e:	d100      	bne.n	80029a2 <memset+0xa>
 80029a0:	4770      	bx	lr
 80029a2:	f803 1b01 	strb.w	r1, [r3], #1
 80029a6:	e7f9      	b.n	800299c <memset+0x4>

080029a8 <_init>:
 80029a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029aa:	bf00      	nop
 80029ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ae:	bc08      	pop	{r3}
 80029b0:	469e      	mov	lr, r3
 80029b2:	4770      	bx	lr

080029b4 <_fini>:
 80029b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b6:	bf00      	nop
 80029b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ba:	bc08      	pop	{r3}
 80029bc:	469e      	mov	lr, r3
 80029be:	4770      	bx	lr
