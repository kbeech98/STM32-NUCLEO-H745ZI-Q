
NUCLEO_H745_DHT11_SERIAL_TEMP_SENSOR_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002704  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800299c  0800299c  0001299c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b4  080029b4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080029b4  080029b4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029b4  080029b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029b4  080029b4  000129b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029b8  080029b8  000129b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080029bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  24000010  080029cc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400007c  080029cc  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163a9  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025fe  00000000  00000000  000363e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  000389e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  000396b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000385fa  00000000  00000000  0003a2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e45d  00000000  00000000  0007289a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00179a23  00000000  00000000  00080cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fa71a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034fc  00000000  00000000  001fa770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002984 	.word	0x08002984

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08002984 	.word	0x08002984

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000412:	4b5e      	ldr	r3, [pc, #376]	; (800058c <main+0x180>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d11b      	bne.n	8000456 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800041e:	f3bf 8f4f 	dsb	sy
}
 8000422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000424:	f3bf 8f6f 	isb	sy
}
 8000428:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800042a:	4b58      	ldr	r3, [pc, #352]	; (800058c <main+0x180>)
 800042c:	2200      	movs	r2, #0
 800042e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000432:	f3bf 8f4f 	dsb	sy
}
 8000436:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000438:	f3bf 8f6f 	isb	sy
}
 800043c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800043e:	4b53      	ldr	r3, [pc, #332]	; (800058c <main+0x180>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a52      	ldr	r2, [pc, #328]	; (800058c <main+0x180>)
 8000444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000448:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800044a:	f3bf 8f4f 	dsb	sy
}
 800044e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000450:	f3bf 8f6f 	isb	sy
}
 8000454:	e000      	b.n	8000458 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000456:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000458:	4b4c      	ldr	r3, [pc, #304]	; (800058c <main+0x180>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000460:	2b00      	cmp	r3, #0
 8000462:	d138      	bne.n	80004d6 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000464:	4b49      	ldr	r3, [pc, #292]	; (800058c <main+0x180>)
 8000466:	2200      	movs	r2, #0
 8000468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800046c:	f3bf 8f4f 	dsb	sy
}
 8000470:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000472:	4b46      	ldr	r3, [pc, #280]	; (800058c <main+0x180>)
 8000474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000478:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800047a:	693b      	ldr	r3, [r7, #16]
 800047c:	0b5b      	lsrs	r3, r3, #13
 800047e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000482:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000484:	693b      	ldr	r3, [r7, #16]
 8000486:	08db      	lsrs	r3, r3, #3
 8000488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800048c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	015a      	lsls	r2, r3, #5
 8000492:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000496:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000498:	68ba      	ldr	r2, [r7, #8]
 800049a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800049c:	493b      	ldr	r1, [pc, #236]	; (800058c <main+0x180>)
 800049e:	4313      	orrs	r3, r2
 80004a0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	1e5a      	subs	r2, r3, #1
 80004a8:	60ba      	str	r2, [r7, #8]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d1ef      	bne.n	800048e <main+0x82>
    } while(sets-- != 0U);
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	1e5a      	subs	r2, r3, #1
 80004b2:	60fa      	str	r2, [r7, #12]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d1e5      	bne.n	8000484 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80004b8:	f3bf 8f4f 	dsb	sy
}
 80004bc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004be:	4b33      	ldr	r3, [pc, #204]	; (800058c <main+0x180>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a32      	ldr	r2, [pc, #200]	; (800058c <main+0x180>)
 80004c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004ca:	f3bf 8f4f 	dsb	sy
}
 80004ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004d0:	f3bf 8f6f 	isb	sy
}
 80004d4:	e000      	b.n	80004d8 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004d6:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80004d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004dc:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80004de:	bf00      	nop
 80004e0:	4b2b      	ldr	r3, [pc, #172]	; (8000590 <main+0x184>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d004      	beq.n	80004f6 <main+0xea>
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	1e5a      	subs	r2, r3, #1
 80004f0:	617a      	str	r2, [r7, #20]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	dcf4      	bgt.n	80004e0 <main+0xd4>
  if ( timeout < 0 )
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	da01      	bge.n	8000500 <main+0xf4>
  {
  Error_Handler();
 80004fc:	f000 f986 	bl	800080c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fb46 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f84a 	bl	800059c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000508:	4b21      	ldr	r3, [pc, #132]	; (8000590 <main+0x184>)
 800050a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800050e:	4a20      	ldr	r2, [pc, #128]	; (8000590 <main+0x184>)
 8000510:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000518:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <main+0x184>)
 800051a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800051e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000526:	2000      	movs	r0, #0
 8000528:	f000 febc 	bl	80012a4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800052c:	2100      	movs	r1, #0
 800052e:	2000      	movs	r0, #0
 8000530:	f000 fed2 	bl	80012d8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000538:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800053a:	bf00      	nop
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <main+0x184>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000544:	2b00      	cmp	r3, #0
 8000546:	d104      	bne.n	8000552 <main+0x146>
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	1e5a      	subs	r2, r3, #1
 800054c:	617a      	str	r2, [r7, #20]
 800054e:	2b00      	cmp	r3, #0
 8000550:	dcf4      	bgt.n	800053c <main+0x130>
if ( timeout < 0 )
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	2b00      	cmp	r3, #0
 8000556:	da01      	bge.n	800055c <main+0x150>
{
Error_Handler();
 8000558:	f000 f958 	bl	800080c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f8ec 	bl	8000738 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000560:	f000 f896 	bl	8000690 <MX_TIM1_Init>
  nhd_LCD_Init();
 8000564:	f000 fa1e 	bl	80009a4 <nhd_LCD_Init>
  /* USER CODE BEGIN 2 */

  lcd_put_cur(1,1);
 8000568:	2101      	movs	r1, #1
 800056a:	2001      	movs	r0, #1
 800056c:	f000 f9e8 	bl	8000940 <lcd_put_cur>
  lcd_send_string("hiiiii");
 8000570:	4808      	ldr	r0, [pc, #32]	; (8000594 <main+0x188>)
 8000572:	f000 fa54 	bl	8000a1e <lcd_send_string>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800057a:	4807      	ldr	r0, [pc, #28]	; (8000598 <main+0x18c>)
 800057c:	f000 fe77 	bl	800126e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000580:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000584:	f000 fb96 	bl	8000cb4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000588:	e7f5      	b.n	8000576 <main+0x16a>
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00
 8000590:	58024400 	.word	0x58024400
 8000594:	0800299c 	.word	0x0800299c
 8000598:	58020400 	.word	0x58020400

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b09c      	sub	sp, #112	; 0x70
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a6:	224c      	movs	r2, #76	; 0x4c
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 f9e2 	bl	8002974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2220      	movs	r2, #32
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 f9dc 	bl	8002974 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005bc:	2004      	movs	r0, #4
 80005be:	f000 fe9f 	bl	8001300 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c2:	2300      	movs	r3, #0
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	4b30      	ldr	r3, [pc, #192]	; (8000688 <SystemClock_Config+0xec>)
 80005c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ca:	4a2f      	ldr	r2, [pc, #188]	; (8000688 <SystemClock_Config+0xec>)
 80005cc:	f023 0301 	bic.w	r3, r3, #1
 80005d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005d2:	4b2d      	ldr	r3, [pc, #180]	; (8000688 <SystemClock_Config+0xec>)
 80005d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	4b2b      	ldr	r3, [pc, #172]	; (800068c <SystemClock_Config+0xf0>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a2a      	ldr	r2, [pc, #168]	; (800068c <SystemClock_Config+0xf0>)
 80005e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemClock_Config+0xf0>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005f4:	bf00      	nop
 80005f6:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xf0>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000602:	d1f8      	bne.n	80005f6 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	2302      	movs	r3, #2
 8000614:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000616:	2305      	movs	r3, #5
 8000618:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800061a:	23a0      	movs	r3, #160	; 0xa0
 800061c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000626:	2302      	movs	r3, #2
 8000628:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800062a:	2308      	movs	r3, #8
 800062c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800062e:	2300      	movs	r3, #0
 8000630:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800063a:	4618      	mov	r0, r3
 800063c:	f000 feba 	bl	80013b4 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000646:	f000 f8e1 	bl	800080c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	233f      	movs	r3, #63	; 0x3f
 800064c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2303      	movs	r3, #3
 8000650:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000656:	2308      	movs	r3, #8
 8000658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800065a:	2340      	movs	r3, #64	; 0x40
 800065c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800065e:	2340      	movs	r3, #64	; 0x40
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000666:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000668:	2340      	movs	r3, #64	; 0x40
 800066a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2102      	movs	r1, #2
 8000670:	4618      	mov	r0, r3
 8000672:	f001 faaf 	bl	8001bd4 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800067c:	f000 f8c6 	bl	800080c <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3770      	adds	r7, #112	; 0x70
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	58000400 	.word	0x58000400
 800068c:	58024800 	.word	0x58024800

08000690 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006ae:	4b20      	ldr	r3, [pc, #128]	; (8000730 <MX_TIM1_Init+0xa0>)
 80006b0:	4a20      	ldr	r2, [pc, #128]	; (8000734 <MX_TIM1_Init+0xa4>)
 80006b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_TIM1_Init+0xa0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <MX_TIM1_Init+0xa0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_TIM1_Init+0xa0>)
 80006c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c8:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_TIM1_Init+0xa0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_TIM1_Init+0xa0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_TIM1_Init+0xa0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006da:	4815      	ldr	r0, [pc, #84]	; (8000730 <MX_TIM1_Init+0xa0>)
 80006dc:	f001 fdaa 	bl	8002234 <HAL_TIM_Base_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80006e6:	f000 f891 	bl	800080c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <MX_TIM1_Init+0xa0>)
 80006f8:	f001 fe64 	bl	80023c4 <HAL_TIM_ConfigClockSource>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000702:	f000 f883 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <MX_TIM1_Init+0xa0>)
 8000718:	f002 f880 	bl	800281c <HAL_TIMEx_MasterConfigSynchronization>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000722:	f000 f873 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	3720      	adds	r7, #32
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2400002c 	.word	0x2400002c
 8000734:	40010000 	.word	0x40010000

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <MX_GPIO_Init+0xc8>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	4a2a      	ldr	r2, [pc, #168]	; (8000800 <MX_GPIO_Init+0xc8>)
 8000756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800075e:	4b28      	ldr	r3, [pc, #160]	; (8000800 <MX_GPIO_Init+0xc8>)
 8000760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <MX_GPIO_Init+0xc8>)
 800076e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000772:	4a23      	ldr	r2, [pc, #140]	; (8000800 <MX_GPIO_Init+0xc8>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800077c:	4b20      	ldr	r3, [pc, #128]	; (8000800 <MX_GPIO_Init+0xc8>)
 800077e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_GPIO_Init+0xc8>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000790:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <MX_GPIO_Init+0xc8>)
 8000792:	f043 0308 	orr.w	r3, r3, #8
 8000796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_GPIO_Init+0xc8>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a0:	f003 0308 	and.w	r3, r3, #8
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ae:	4815      	ldr	r0, [pc, #84]	; (8000804 <MX_GPIO_Init+0xcc>)
 80007b0:	f000 fd44 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80007b4:	2200      	movs	r2, #0
 80007b6:	21fe      	movs	r1, #254	; 0xfe
 80007b8:	4813      	ldr	r0, [pc, #76]	; (8000808 <MX_GPIO_Init+0xd0>)
 80007ba:	f000 fd3f 	bl	800123c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	480b      	ldr	r0, [pc, #44]	; (8000804 <MX_GPIO_Init+0xcc>)
 80007d8:	f000 fb80 	bl	8000edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80007dc:	23fe      	movs	r3, #254	; 0xfe
 80007de:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	4619      	mov	r1, r3
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_GPIO_Init+0xd0>)
 80007f4:	f000 fb72 	bl	8000edc <HAL_GPIO_Init>

}
 80007f8:	bf00      	nop
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	58024400 	.word	0x58024400
 8000804:	58020400 	.word	0x58020400
 8000808:	58020c00 	.word	0x58020c00

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>
	...

08000818 <five_ns_delay>:
//define the timer handler below
#define timer htim1

extern TIM_HandleTypeDef timer;
void five_ns_delay (int us)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&timer, 0);	//clear timer
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <five_ns_delay+0x30>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&timer);	//start timer
 8000828:	4807      	ldr	r0, [pc, #28]	; (8000848 <five_ns_delay+0x30>)
 800082a:	f001 fd5b 	bl	80022e4 <HAL_TIM_Base_Start_IT>
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800082e:	bf00      	nop
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <five_ns_delay+0x30>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	429a      	cmp	r2, r3
 800083a:	d3f9      	bcc.n	8000830 <five_ns_delay+0x18>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
}
 800083c:	bf00      	nop
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2400002c 	.word	0x2400002c

0800084c <send_to_lcd>:

void send_to_lcd (char data, int rs)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  //rs = 1 for data, rs = 0 for command
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	461a      	mov	r2, r3
 800085e:	2102      	movs	r1, #2
 8000860:	4819      	ldr	r0, [pc, #100]	; (80008c8 <send_to_lcd+0x7c>)
 8000862:	f000 fceb 	bl	800123c <HAL_GPIO_WritePin>

	// write the data to the respective pin
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	08db      	lsrs	r3, r3, #3
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	461a      	mov	r2, r3
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	4814      	ldr	r0, [pc, #80]	; (80008c8 <send_to_lcd+0x7c>)
 8000878:	f000 fce0 	bl	800123c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	089b      	lsrs	r3, r3, #2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	b2db      	uxtb	r3, r3
 8000888:	461a      	mov	r2, r3
 800088a:	2140      	movs	r1, #64	; 0x40
 800088c:	480e      	ldr	r0, [pc, #56]	; (80008c8 <send_to_lcd+0x7c>)
 800088e:	f000 fcd5 	bl	800123c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	b2db      	uxtb	r3, r3
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	b2db      	uxtb	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	2120      	movs	r1, #32
 80008a2:	4809      	ldr	r0, [pc, #36]	; (80008c8 <send_to_lcd+0x7c>)
 80008a4:	f000 fcca 	bl	800123c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	461a      	mov	r2, r3
 80008b2:	2110      	movs	r1, #16
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <send_to_lcd+0x7c>)
 80008b6:	f000 fcc1 	bl	800123c <HAL_GPIO_WritePin>

	lcd_nibble();	//pulse LCD enable pin to initiate data transfer
 80008ba:	f000 f8c5 	bl	8000a48 <lcd_nibble>
	//HAL_Delay(1);  	//wait for 1 ms while the enable pin settles

    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	58020c00 	.word	0x58020c00

080008cc <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    //send upper nibble first
    datatosend = ((cmd>>4)&0x0f);
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	091b      	lsrs	r3, r3, #4
 80008da:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ffb3 	bl	800084c <send_to_lcd>

    //send lower nibble
    datatosend = ((cmd)&0x0f);
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f003 030f 	and.w	r3, r3, #15
 80008ec:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  //RS must be 0 while sending command
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ffaa 	bl	800084c <send_to_lcd>

    HAL_Delay(2);
 80008f8:	2002      	movs	r0, #2
 80008fa:	f000 f9db 	bl	8000cb4 <HAL_Delay>
}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	71fb      	strb	r3, [r7, #7]
	char datatosend;

    //send upper nibble first
    datatosend = ((data>>4)&0x0f);
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	091b      	lsrs	r3, r3, #4
 8000914:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	2101      	movs	r1, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ff96 	bl	800084c <send_to_lcd>

    //send lower nibble
    datatosend = ((data)&0x0f);
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	f003 030f 	and.w	r3, r3, #15
 8000926:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,1);  //RS must be 1 while sending data
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	2101      	movs	r1, #1
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff8d 	bl	800084c <send_to_lcd>

    HAL_Delay(2);
 8000932:	2002      	movs	r0, #2
 8000934:	f000 f9be 	bl	8000cb4 <HAL_Delay>
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <lcd_put_cur>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_put_cur(int row, int col) //fix for 4x20 LCD !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b03      	cmp	r3, #3
 800094e:	d81f      	bhi.n	8000990 <lcd_put_cur+0x50>
 8000950:	a201      	add	r2, pc, #4	; (adr r2, 8000958 <lcd_put_cur+0x18>)
 8000952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000956:	bf00      	nop
 8000958:	08000969 	.word	0x08000969
 800095c:	08000973 	.word	0x08000973
 8000960:	0800097d 	.word	0x0800097d
 8000964:	08000987 	.word	0x08000987
    switch (row)
    {
        case 0:
            col |= 0x80;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096e:	603b      	str	r3, [r7, #0]
            break;
 8000970:	e00e      	b.n	8000990 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000978:	603b      	str	r3, [r7, #0]
            break;
 800097a:	e009      	b.n	8000990 <lcd_put_cur+0x50>
        case 2:
            col |= 0x40;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000982:	603b      	str	r3, [r7, #0]
            break;
 8000984:	e004      	b.n	8000990 <lcd_put_cur+0x50>
        case 3:
            col |= 0xF0;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800098c:	603b      	str	r3, [r7, #0]
            break;
 800098e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff99 	bl	80008cc <lcd_send_cmd>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop

080009a4 <nhd_LCD_Init>:


void nhd_LCD_Init (void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	//4 bit initialization
	HAL_Delay(50);  //wait for >40ms
 80009a8:	2032      	movs	r0, #50	; 0x32
 80009aa:	f000 f983 	bl	8000cb4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80009ae:	2030      	movs	r0, #48	; 0x30
 80009b0:	f7ff ff8c 	bl	80008cc <lcd_send_cmd>
	HAL_Delay(5);  //wait for >4.1ms
 80009b4:	2005      	movs	r0, #5
 80009b6:	f000 f97d 	bl	8000cb4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80009ba:	2030      	movs	r0, #48	; 0x30
 80009bc:	f7ff ff86 	bl	80008cc <lcd_send_cmd>
	HAL_Delay(1);  //wait for >100us
 80009c0:	2001      	movs	r0, #1
 80009c2:	f000 f977 	bl	8000cb4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80009c6:	2030      	movs	r0, #48	; 0x30
 80009c8:	f7ff ff80 	bl	80008cc <lcd_send_cmd>
	HAL_Delay(10);
 80009cc:	200a      	movs	r0, #10
 80009ce:	f000 f971 	bl	8000cb4 <HAL_Delay>
	lcd_send_cmd (0x20);  //4bit mode
 80009d2:	2020      	movs	r0, #32
 80009d4:	f7ff ff7a 	bl	80008cc <lcd_send_cmd>
	HAL_Delay(10);
 80009d8:	200a      	movs	r0, #10
 80009da:	f000 f96b 	bl	8000cb4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	HAL_Delay(1);
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
	*/

	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80009de:	2028      	movs	r0, #40	; 0x28
 80009e0:	f7ff ff74 	bl	80008cc <lcd_send_cmd>
	HAL_Delay(1);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f000 f965 	bl	8000cb4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80009ea:	2008      	movs	r0, #8
 80009ec:	f7ff ff6e 	bl	80008cc <lcd_send_cmd>
	HAL_Delay(1);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f000 f95f 	bl	8000cb4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80009f6:	2001      	movs	r0, #1
 80009f8:	f7ff ff68 	bl	80008cc <lcd_send_cmd>
	HAL_Delay(1);
 80009fc:	2001      	movs	r0, #1
 80009fe:	f000 f959 	bl	8000cb4 <HAL_Delay>
	HAL_Delay(1);
 8000a02:	2001      	movs	r0, #1
 8000a04:	f000 f956 	bl	8000cb4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a08:	2006      	movs	r0, #6
 8000a0a:	f7ff ff5f 	bl	80008cc <lcd_send_cmd>
	HAL_Delay(1);
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f000 f950 	bl	8000cb4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a14:	200c      	movs	r0, #12
 8000a16:	f7ff ff59 	bl	80008cc <lcd_send_cmd>


}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000a26:	e006      	b.n	8000a36 <lcd_send_string+0x18>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	607a      	str	r2, [r7, #4]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff68 	bl	8000906 <lcd_send_data>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d1f4      	bne.n	8000a28 <lcd_send_string+0xa>
}
 8000a3e:	bf00      	nop
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <lcd_nibble>:

void lcd_nibble() {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2108      	movs	r1, #8
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <lcd_nibble+0x24>)
 8000a52:	f000 fbf3 	bl	800123c <HAL_GPIO_WritePin>
	five_ns_delay(65);								//325ns enable pulse width delay
 8000a56:	2041      	movs	r0, #65	; 0x41
 8000a58:	f7ff fede 	bl	8000818 <five_ns_delay>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); 	//debugging LED
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2108      	movs	r1, #8
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <lcd_nibble+0x24>)
 8000a62:	f000 fbeb 	bl	800123c <HAL_GPIO_WritePin>
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	58020c00 	.word	0x58020c00

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_MspInit+0x30>)
 8000a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a7c:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_MspInit+0x30>)
 8000a7e:	f043 0302 	orr.w	r3, r3, #2
 8000a82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_MspInit+0x30>)
 8000a88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	58024400 	.word	0x58024400

08000aa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d10e      	bne.n	8000ad4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_TIM_Base_MspInit+0x40>)
 8000ab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000abc:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <HAL_TIM_Base_MspInit+0x40>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <HAL_TIM_Base_MspInit+0x40>)
 8000ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	40010000 	.word	0x40010000
 8000ae4:	58024400 	.word	0x58024400

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f000 f89e 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b40:	f7ff fbca 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b46:	490d      	ldr	r1, [pc, #52]	; (8000b7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	; (8000b88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f001 fedf 	bl	800292c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6e:	f7ff fc4d 	bl	800040c <main>
  bx  lr
 8000b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b7c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b80:	080029bc 	.word	0x080029bc
  ldr r2, =_sbss
 8000b84:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b88:	2400007c 	.word	0x2400007c

08000b8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC3_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b96:	2003      	movs	r0, #3
 8000b98:	f000 f96e 	bl	8000e78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b9c:	f001 f9d0 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_Init+0x68>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	0a1b      	lsrs	r3, r3, #8
 8000ba8:	f003 030f 	and.w	r3, r3, #15
 8000bac:	4913      	ldr	r1, [pc, #76]	; (8000bfc <HAL_Init+0x6c>)
 8000bae:	5ccb      	ldrb	r3, [r1, r3]
 8000bb0:	f003 031f 	and.w	r3, r3, #31
 8000bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_Init+0x68>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <HAL_Init+0x6c>)
 8000bc4:	5cd3      	ldrb	r3, [r2, r3]
 8000bc6:	f003 031f 	and.w	r3, r3, #31
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd0:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <HAL_Init+0x70>)
 8000bd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bd4:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <HAL_Init+0x74>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f000 f814 	bl	8000c08 <HAL_InitTick>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e002      	b.n	8000bf0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bea:	f7ff ff41 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	58024400 	.word	0x58024400
 8000bfc:	080029a4 	.word	0x080029a4
 8000c00:	24000004 	.word	0x24000004
 8000c04:	24000000 	.word	0x24000000

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_InitTick+0x60>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e021      	b.n	8000c60 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <HAL_InitTick+0x64>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_InitTick+0x60>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f945 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00e      	b.n	8000c60 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d80a      	bhi.n	8000c5e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f000 f91d 	bl	8000e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <HAL_InitTick+0x68>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	2400000c 	.word	0x2400000c
 8000c6c:	24000000 	.word	0x24000000
 8000c70:	24000008 	.word	0x24000008

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	2400000c 	.word	0x2400000c
 8000c98:	24000078 	.word	0x24000078

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	24000078 	.word	0x24000078

08000cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cbc:	f7ff ffee 	bl	8000c9c <HAL_GetTick>
 8000cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ccc:	d005      	beq.n	8000cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_Delay+0x44>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cda:	bf00      	nop
 8000cdc:	f7ff ffde 	bl	8000c9c <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d8f7      	bhi.n	8000cdc <HAL_Delay+0x28>
  {
  }
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2400000c 	.word	0x2400000c

08000cfc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetREVID+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	0c1b      	lsrs	r3, r3, #16
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	5c001000 	.word	0x5c001000

08000d14 <__NVIC_SetPriorityGrouping>:
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <__NVIC_SetPriorityGrouping+0x40>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <__NVIC_SetPriorityGrouping+0x40>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00
 8000d58:	05fa0000 	.word	0x05fa0000

08000d5c <__NVIC_GetPriorityGrouping>:
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_SetPriority>:
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e44:	d301      	bcc.n	8000e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00f      	b.n	8000e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <SysTick_Config+0x40>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e52:	210f      	movs	r1, #15
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f7ff ff8e 	bl	8000d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <SysTick_Config+0x40>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <SysTick_Config+0x40>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff47 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9c:	f7ff ff5e 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	f7ff ff90 	bl	8000dcc <NVIC_EncodePriority>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff5f 	bl	8000d78 <__NVIC_SetPriority>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffb2 	bl	8000e34 <SysTick_Config>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000eea:	4b89      	ldr	r3, [pc, #548]	; (8001110 <HAL_GPIO_Init+0x234>)
 8000eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000eee:	e194      	b.n	800121a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 8186 	beq.w	8001214 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d00b      	beq.n	8000f28 <HAL_GPIO_Init+0x4c>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d007      	beq.n	8000f28 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f1c:	2b11      	cmp	r3, #17
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b12      	cmp	r3, #18
 8000f26:	d130      	bne.n	8000f8a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68da      	ldr	r2, [r3, #12]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5e:	2201      	movs	r2, #1
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	f003 0201 	and.w	r2, r3, #1
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0xee>
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b12      	cmp	r3, #18
 8000fc8:	d123      	bne.n	8001012 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	691a      	ldr	r2, [r3, #16]
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	08da      	lsrs	r2, r3, #3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3208      	adds	r2, #8
 800100c:	69b9      	ldr	r1, [r7, #24]
 800100e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0203 	and.w	r2, r3, #3
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 80e0 	beq.w	8001214 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001054:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <HAL_GPIO_Init+0x238>)
 8001056:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800105a:	4a2e      	ldr	r2, [pc, #184]	; (8001114 <HAL_GPIO_Init+0x238>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001064:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <HAL_GPIO_Init+0x238>)
 8001066:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001072:	4a29      	ldr	r2, [pc, #164]	; (8001118 <HAL_GPIO_Init+0x23c>)
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	3302      	adds	r3, #2
 800107a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	220f      	movs	r2, #15
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a20      	ldr	r2, [pc, #128]	; (800111c <HAL_GPIO_Init+0x240>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d052      	beq.n	8001144 <HAL_GPIO_Init+0x268>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a1f      	ldr	r2, [pc, #124]	; (8001120 <HAL_GPIO_Init+0x244>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d031      	beq.n	800110a <HAL_GPIO_Init+0x22e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <HAL_GPIO_Init+0x248>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d02b      	beq.n	8001106 <HAL_GPIO_Init+0x22a>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a1d      	ldr	r2, [pc, #116]	; (8001128 <HAL_GPIO_Init+0x24c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d025      	beq.n	8001102 <HAL_GPIO_Init+0x226>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a1c      	ldr	r2, [pc, #112]	; (800112c <HAL_GPIO_Init+0x250>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d01f      	beq.n	80010fe <HAL_GPIO_Init+0x222>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <HAL_GPIO_Init+0x254>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d019      	beq.n	80010fa <HAL_GPIO_Init+0x21e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a1a      	ldr	r2, [pc, #104]	; (8001134 <HAL_GPIO_Init+0x258>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d013      	beq.n	80010f6 <HAL_GPIO_Init+0x21a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a19      	ldr	r2, [pc, #100]	; (8001138 <HAL_GPIO_Init+0x25c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d00d      	beq.n	80010f2 <HAL_GPIO_Init+0x216>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a18      	ldr	r2, [pc, #96]	; (800113c <HAL_GPIO_Init+0x260>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d007      	beq.n	80010ee <HAL_GPIO_Init+0x212>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a17      	ldr	r2, [pc, #92]	; (8001140 <HAL_GPIO_Init+0x264>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d101      	bne.n	80010ea <HAL_GPIO_Init+0x20e>
 80010e6:	2309      	movs	r3, #9
 80010e8:	e02d      	b.n	8001146 <HAL_GPIO_Init+0x26a>
 80010ea:	230a      	movs	r3, #10
 80010ec:	e02b      	b.n	8001146 <HAL_GPIO_Init+0x26a>
 80010ee:	2308      	movs	r3, #8
 80010f0:	e029      	b.n	8001146 <HAL_GPIO_Init+0x26a>
 80010f2:	2307      	movs	r3, #7
 80010f4:	e027      	b.n	8001146 <HAL_GPIO_Init+0x26a>
 80010f6:	2306      	movs	r3, #6
 80010f8:	e025      	b.n	8001146 <HAL_GPIO_Init+0x26a>
 80010fa:	2305      	movs	r3, #5
 80010fc:	e023      	b.n	8001146 <HAL_GPIO_Init+0x26a>
 80010fe:	2304      	movs	r3, #4
 8001100:	e021      	b.n	8001146 <HAL_GPIO_Init+0x26a>
 8001102:	2303      	movs	r3, #3
 8001104:	e01f      	b.n	8001146 <HAL_GPIO_Init+0x26a>
 8001106:	2302      	movs	r3, #2
 8001108:	e01d      	b.n	8001146 <HAL_GPIO_Init+0x26a>
 800110a:	2301      	movs	r3, #1
 800110c:	e01b      	b.n	8001146 <HAL_GPIO_Init+0x26a>
 800110e:	bf00      	nop
 8001110:	58000080 	.word	0x58000080
 8001114:	58024400 	.word	0x58024400
 8001118:	58000400 	.word	0x58000400
 800111c:	58020000 	.word	0x58020000
 8001120:	58020400 	.word	0x58020400
 8001124:	58020800 	.word	0x58020800
 8001128:	58020c00 	.word	0x58020c00
 800112c:	58021000 	.word	0x58021000
 8001130:	58021400 	.word	0x58021400
 8001134:	58021800 	.word	0x58021800
 8001138:	58021c00 	.word	0x58021c00
 800113c:	58022000 	.word	0x58022000
 8001140:	58022400 	.word	0x58022400
 8001144:	2300      	movs	r3, #0
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	f002 0203 	and.w	r2, r2, #3
 800114c:	0092      	lsls	r2, r2, #2
 800114e:	4093      	lsls	r3, r2
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001156:	4938      	ldr	r1, [pc, #224]	; (8001238 <HAL_GPIO_Init+0x35c>)
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800120c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	3301      	adds	r3, #1
 8001218:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa22 f303 	lsr.w	r3, r2, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	f47f ae63 	bne.w	8000ef0 <HAL_GPIO_Init+0x14>
  }
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	3724      	adds	r7, #36	; 0x24
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	58000400 	.word	0x58000400

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001280:	887a      	ldrh	r2, [r7, #2]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4013      	ands	r3, r2
 8001286:	041a      	lsls	r2, r3, #16
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43d9      	mvns	r1, r3
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	400b      	ands	r3, r1
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	619a      	str	r2, [r3, #24]
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80012ac:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <HAL_HSEM_FastTake+0x2c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3320      	adds	r3, #32
 80012b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b6:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <HAL_HSEM_FastTake+0x30>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d101      	bne.n	80012c0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	e000      	b.n	80012c2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	58026400 	.word	0x58026400
 80012d4:	80000300 	.word	0x80000300

080012d8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80012e2:	4906      	ldr	r1, [pc, #24]	; (80012fc <HAL_HSEM_Release+0x24>)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	58026400 	.word	0x58026400

08001300 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001308:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	2b06      	cmp	r3, #6
 8001312:	d00a      	beq.n	800132a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001314:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	d001      	beq.n	8001326 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e040      	b.n	80013a8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e03e      	b.n	80013a8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001332:	491f      	ldr	r1, [pc, #124]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4313      	orrs	r3, r2
 8001338:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800133a:	f7ff fcaf 	bl	8000c9c <HAL_GetTick>
 800133e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001340:	e009      	b.n	8001356 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001342:	f7ff fcab 	bl	8000c9c <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001350:	d901      	bls.n	8001356 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e028      	b.n	80013a8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800135e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001362:	d1ee      	bne.n	8001342 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b1e      	cmp	r3, #30
 8001368:	d008      	beq.n	800137c <HAL_PWREx_ConfigSupply+0x7c>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b2e      	cmp	r3, #46	; 0x2e
 800136e:	d005      	beq.n	800137c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b1d      	cmp	r3, #29
 8001374:	d002      	beq.n	800137c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b2d      	cmp	r3, #45	; 0x2d
 800137a:	d114      	bne.n	80013a6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800137c:	f7ff fc8e 	bl	8000c9c <HAL_GetTick>
 8001380:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001382:	e009      	b.n	8001398 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001384:	f7ff fc8a 	bl	8000c9c <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001392:	d901      	bls.n	8001398 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e007      	b.n	80013a8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a4:	d1ee      	bne.n	8001384 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	58024800 	.word	0x58024800

080013b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	; 0x30
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e3ff      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 8087 	beq.w	80014e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013d4:	4b99      	ldr	r3, [pc, #612]	; (800163c <HAL_RCC_OscConfig+0x288>)
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013de:	4b97      	ldr	r3, [pc, #604]	; (800163c <HAL_RCC_OscConfig+0x288>)
 80013e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80013e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e6:	2b10      	cmp	r3, #16
 80013e8:	d007      	beq.n	80013fa <HAL_RCC_OscConfig+0x46>
 80013ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ec:	2b18      	cmp	r3, #24
 80013ee:	d110      	bne.n	8001412 <HAL_RCC_OscConfig+0x5e>
 80013f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d10b      	bne.n	8001412 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fa:	4b90      	ldr	r3, [pc, #576]	; (800163c <HAL_RCC_OscConfig+0x288>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d06c      	beq.n	80014e0 <HAL_RCC_OscConfig+0x12c>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d168      	bne.n	80014e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e3d9      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141a:	d106      	bne.n	800142a <HAL_RCC_OscConfig+0x76>
 800141c:	4b87      	ldr	r3, [pc, #540]	; (800163c <HAL_RCC_OscConfig+0x288>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a86      	ldr	r2, [pc, #536]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	e02e      	b.n	8001488 <HAL_RCC_OscConfig+0xd4>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x98>
 8001432:	4b82      	ldr	r3, [pc, #520]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a81      	ldr	r2, [pc, #516]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b7f      	ldr	r3, [pc, #508]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a7e      	ldr	r2, [pc, #504]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001444:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e01d      	b.n	8001488 <HAL_RCC_OscConfig+0xd4>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001454:	d10c      	bne.n	8001470 <HAL_RCC_OscConfig+0xbc>
 8001456:	4b79      	ldr	r3, [pc, #484]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a78      	ldr	r2, [pc, #480]	; (800163c <HAL_RCC_OscConfig+0x288>)
 800145c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b76      	ldr	r3, [pc, #472]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a75      	ldr	r2, [pc, #468]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e00b      	b.n	8001488 <HAL_RCC_OscConfig+0xd4>
 8001470:	4b72      	ldr	r3, [pc, #456]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a71      	ldr	r2, [pc, #452]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b6f      	ldr	r3, [pc, #444]	; (800163c <HAL_RCC_OscConfig+0x288>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a6e      	ldr	r2, [pc, #440]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d013      	beq.n	80014b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fc04 	bl	8000c9c <HAL_GetTick>
 8001494:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fc00 	bl	8000c9c <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e38d      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014aa:	4b64      	ldr	r3, [pc, #400]	; (800163c <HAL_RCC_OscConfig+0x288>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0xe4>
 80014b6:	e014      	b.n	80014e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff fbf0 	bl	8000c9c <HAL_GetTick>
 80014bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff fbec 	bl	8000c9c <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	; 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e379      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014d2:	4b5a      	ldr	r3, [pc, #360]	; (800163c <HAL_RCC_OscConfig+0x288>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x10c>
 80014de:	e000      	b.n	80014e2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 80ae 	beq.w	800164c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f0:	4b52      	ldr	r3, [pc, #328]	; (800163c <HAL_RCC_OscConfig+0x288>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014fa:	4b50      	ldr	r3, [pc, #320]	; (800163c <HAL_RCC_OscConfig+0x288>)
 80014fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <HAL_RCC_OscConfig+0x162>
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	2b18      	cmp	r3, #24
 800150a:	d13a      	bne.n	8001582 <HAL_RCC_OscConfig+0x1ce>
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d135      	bne.n	8001582 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001516:	4b49      	ldr	r3, [pc, #292]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	2b00      	cmp	r3, #0
 8001520:	d005      	beq.n	800152e <HAL_RCC_OscConfig+0x17a>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e34b      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152e:	f7ff fbe5 	bl	8000cfc <HAL_GetREVID>
 8001532:	4603      	mov	r3, r0
 8001534:	f241 0203 	movw	r2, #4099	; 0x1003
 8001538:	4293      	cmp	r3, r2
 800153a:	d817      	bhi.n	800156c <HAL_RCC_OscConfig+0x1b8>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	2b40      	cmp	r3, #64	; 0x40
 8001542:	d108      	bne.n	8001556 <HAL_RCC_OscConfig+0x1a2>
 8001544:	4b3d      	ldr	r3, [pc, #244]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800154c:	4a3b      	ldr	r2, [pc, #236]	; (800163c <HAL_RCC_OscConfig+0x288>)
 800154e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001552:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001554:	e07a      	b.n	800164c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b39      	ldr	r3, [pc, #228]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	031b      	lsls	r3, r3, #12
 8001564:	4935      	ldr	r1, [pc, #212]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001566:	4313      	orrs	r3, r2
 8001568:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800156a:	e06f      	b.n	800164c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b33      	ldr	r3, [pc, #204]	; (800163c <HAL_RCC_OscConfig+0x288>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	061b      	lsls	r3, r3, #24
 800157a:	4930      	ldr	r1, [pc, #192]	; (800163c <HAL_RCC_OscConfig+0x288>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001580:	e064      	b.n	800164c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d045      	beq.n	8001616 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800158a:	4b2c      	ldr	r3, [pc, #176]	; (800163c <HAL_RCC_OscConfig+0x288>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 0219 	bic.w	r2, r3, #25
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	4929      	ldr	r1, [pc, #164]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001598:	4313      	orrs	r3, r2
 800159a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff fb7e 	bl	8000c9c <HAL_GetTick>
 80015a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a4:	f7ff fb7a 	bl	8000c9c <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e307      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <HAL_RCC_OscConfig+0x288>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	f7ff fb9b 	bl	8000cfc <HAL_GetREVID>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d817      	bhi.n	8001600 <HAL_RCC_OscConfig+0x24c>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	2b40      	cmp	r3, #64	; 0x40
 80015d6:	d108      	bne.n	80015ea <HAL_RCC_OscConfig+0x236>
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_RCC_OscConfig+0x288>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80015e0:	4a16      	ldr	r2, [pc, #88]	; (800163c <HAL_RCC_OscConfig+0x288>)
 80015e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e6:	6053      	str	r3, [r2, #4]
 80015e8:	e030      	b.n	800164c <HAL_RCC_OscConfig+0x298>
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_RCC_OscConfig+0x288>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	031b      	lsls	r3, r3, #12
 80015f8:	4910      	ldr	r1, [pc, #64]	; (800163c <HAL_RCC_OscConfig+0x288>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
 80015fe:	e025      	b.n	800164c <HAL_RCC_OscConfig+0x298>
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	061b      	lsls	r3, r3, #24
 800160e:	490b      	ldr	r1, [pc, #44]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
 8001614:	e01a      	b.n	800164c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_RCC_OscConfig+0x288>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_RCC_OscConfig+0x288>)
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001622:	f7ff fb3b 	bl	8000c9c <HAL_GetTick>
 8001626:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff fb37 	bl	8000c9c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d903      	bls.n	8001640 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e2c4      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
 800163c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001640:	4ba4      	ldr	r3, [pc, #656]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1ee      	bne.n	800162a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0310 	and.w	r3, r3, #16
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80a9 	beq.w	80017ac <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165a:	4b9e      	ldr	r3, [pc, #632]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001662:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001664:	4b9b      	ldr	r3, [pc, #620]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001668:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2b08      	cmp	r3, #8
 800166e:	d007      	beq.n	8001680 <HAL_RCC_OscConfig+0x2cc>
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2b18      	cmp	r3, #24
 8001674:	d13a      	bne.n	80016ec <HAL_RCC_OscConfig+0x338>
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b01      	cmp	r3, #1
 800167e:	d135      	bne.n	80016ec <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001680:	4b94      	ldr	r3, [pc, #592]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_OscConfig+0x2e4>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	2b80      	cmp	r3, #128	; 0x80
 8001692:	d001      	beq.n	8001698 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e296      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001698:	f7ff fb30 	bl	8000cfc <HAL_GetREVID>
 800169c:	4603      	mov	r3, r0
 800169e:	f241 0203 	movw	r2, #4099	; 0x1003
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d817      	bhi.n	80016d6 <HAL_RCC_OscConfig+0x322>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	2b20      	cmp	r3, #32
 80016ac:	d108      	bne.n	80016c0 <HAL_RCC_OscConfig+0x30c>
 80016ae:	4b89      	ldr	r3, [pc, #548]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80016b6:	4a87      	ldr	r2, [pc, #540]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 80016b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016bc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016be:	e075      	b.n	80017ac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016c0:	4b84      	ldr	r3, [pc, #528]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	069b      	lsls	r3, r3, #26
 80016ce:	4981      	ldr	r1, [pc, #516]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016d4:	e06a      	b.n	80017ac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016d6:	4b7f      	ldr	r3, [pc, #508]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	061b      	lsls	r3, r3, #24
 80016e4:	497b      	ldr	r1, [pc, #492]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016ea:	e05f      	b.n	80017ac <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d042      	beq.n	800177a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016f4:	4b77      	ldr	r3, [pc, #476]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a76      	ldr	r2, [pc, #472]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 80016fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff facc 	bl	8000c9c <HAL_GetTick>
 8001704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001708:	f7ff fac8 	bl	8000c9c <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e255      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800171a:	4b6e      	ldr	r3, [pc, #440]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001726:	f7ff fae9 	bl	8000cfc <HAL_GetREVID>
 800172a:	4603      	mov	r3, r0
 800172c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001730:	4293      	cmp	r3, r2
 8001732:	d817      	bhi.n	8001764 <HAL_RCC_OscConfig+0x3b0>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	2b20      	cmp	r3, #32
 800173a:	d108      	bne.n	800174e <HAL_RCC_OscConfig+0x39a>
 800173c:	4b65      	ldr	r3, [pc, #404]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001744:	4a63      	ldr	r2, [pc, #396]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 8001746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800174a:	6053      	str	r3, [r2, #4]
 800174c:	e02e      	b.n	80017ac <HAL_RCC_OscConfig+0x3f8>
 800174e:	4b61      	ldr	r3, [pc, #388]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	069b      	lsls	r3, r3, #26
 800175c:	495d      	ldr	r1, [pc, #372]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]
 8001762:	e023      	b.n	80017ac <HAL_RCC_OscConfig+0x3f8>
 8001764:	4b5b      	ldr	r3, [pc, #364]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	4958      	ldr	r1, [pc, #352]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 8001774:	4313      	orrs	r3, r2
 8001776:	60cb      	str	r3, [r1, #12]
 8001778:	e018      	b.n	80017ac <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800177a:	4b56      	ldr	r3, [pc, #344]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a55      	ldr	r2, [pc, #340]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 8001780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff fa89 	bl	8000c9c <HAL_GetTick>
 800178a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800178e:	f7ff fa85 	bl	8000c9c <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e212      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017a0:	4b4c      	ldr	r3, [pc, #304]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f0      	bne.n	800178e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d036      	beq.n	8001826 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d019      	beq.n	80017f4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c0:	4b44      	ldr	r3, [pc, #272]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 80017c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c4:	4a43      	ldr	r2, [pc, #268]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff fa66 	bl	8000c9c <HAL_GetTick>
 80017d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff fa62 	bl	8000c9c <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e1ef      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017e6:	4b3b      	ldr	r3, [pc, #236]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 80017e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x420>
 80017f2:	e018      	b.n	8001826 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f4:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 80017f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f8:	4a36      	ldr	r2, [pc, #216]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 80017fa:	f023 0301 	bic.w	r3, r3, #1
 80017fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001800:	f7ff fa4c 	bl	8000c9c <HAL_GetTick>
 8001804:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001808:	f7ff fa48 	bl	8000c9c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e1d5      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800181a:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 800181c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0320 	and.w	r3, r3, #32
 800182e:	2b00      	cmp	r3, #0
 8001830:	d036      	beq.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d019      	beq.n	800186e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800183a:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a25      	ldr	r2, [pc, #148]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 8001840:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001844:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001846:	f7ff fa29 	bl	8000c9c <HAL_GetTick>
 800184a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800184e:	f7ff fa25 	bl	8000c9c <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e1b2      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x49a>
 800186c:	e018      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a18      	ldr	r2, [pc, #96]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 8001874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001878:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800187a:	f7ff fa0f 	bl	8000c9c <HAL_GetTick>
 800187e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001882:	f7ff fa0b 	bl	8000c9c <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e198      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_RCC_OscConfig+0x520>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f0      	bne.n	8001882 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 8085 	beq.w	80019b8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_RCC_OscConfig+0x524>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <HAL_RCC_OscConfig+0x524>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018ba:	f7ff f9ef 	bl	8000c9c <HAL_GetTick>
 80018be:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018c0:	e00c      	b.n	80018dc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80018c2:	f7ff f9eb 	bl	8000c9c <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b64      	cmp	r3, #100	; 0x64
 80018ce:	d905      	bls.n	80018dc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e178      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
 80018d4:	58024400 	.word	0x58024400
 80018d8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018dc:	4b96      	ldr	r3, [pc, #600]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0ec      	beq.n	80018c2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x54a>
 80018f0:	4b92      	ldr	r3, [pc, #584]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f4:	4a91      	ldr	r2, [pc, #580]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6713      	str	r3, [r2, #112]	; 0x70
 80018fc:	e02d      	b.n	800195a <HAL_RCC_OscConfig+0x5a6>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x56c>
 8001906:	4b8d      	ldr	r3, [pc, #564]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190a:	4a8c      	ldr	r2, [pc, #560]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	6713      	str	r3, [r2, #112]	; 0x70
 8001912:	4b8a      	ldr	r3, [pc, #552]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	4a89      	ldr	r2, [pc, #548]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001918:	f023 0304 	bic.w	r3, r3, #4
 800191c:	6713      	str	r3, [r2, #112]	; 0x70
 800191e:	e01c      	b.n	800195a <HAL_RCC_OscConfig+0x5a6>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b05      	cmp	r3, #5
 8001926:	d10c      	bne.n	8001942 <HAL_RCC_OscConfig+0x58e>
 8001928:	4b84      	ldr	r3, [pc, #528]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192c:	4a83      	ldr	r2, [pc, #524]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 800192e:	f043 0304 	orr.w	r3, r3, #4
 8001932:	6713      	str	r3, [r2, #112]	; 0x70
 8001934:	4b81      	ldr	r3, [pc, #516]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001938:	4a80      	ldr	r2, [pc, #512]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6713      	str	r3, [r2, #112]	; 0x70
 8001940:	e00b      	b.n	800195a <HAL_RCC_OscConfig+0x5a6>
 8001942:	4b7e      	ldr	r3, [pc, #504]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	4a7d      	ldr	r2, [pc, #500]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	6713      	str	r3, [r2, #112]	; 0x70
 800194e:	4b7b      	ldr	r3, [pc, #492]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001952:	4a7a      	ldr	r2, [pc, #488]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001954:	f023 0304 	bic.w	r3, r3, #4
 8001958:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d015      	beq.n	800198e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001962:	f7ff f99b 	bl	8000c9c <HAL_GetTick>
 8001966:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001968:	e00a      	b.n	8001980 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800196a:	f7ff f997 	bl	8000c9c <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f241 3288 	movw	r2, #5000	; 0x1388
 8001978:	4293      	cmp	r3, r2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e122      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001980:	4b6e      	ldr	r3, [pc, #440]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0ee      	beq.n	800196a <HAL_RCC_OscConfig+0x5b6>
 800198c:	e014      	b.n	80019b8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198e:	f7ff f985 	bl	8000c9c <HAL_GetTick>
 8001992:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001994:	e00a      	b.n	80019ac <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001996:	f7ff f981 	bl	8000c9c <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e10c      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019ac:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1ee      	bne.n	8001996 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 8101 	beq.w	8001bc4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019c2:	4b5e      	ldr	r3, [pc, #376]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019ca:	2b18      	cmp	r3, #24
 80019cc:	f000 80bc 	beq.w	8001b48 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	f040 8095 	bne.w	8001b04 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019da:	4b58      	ldr	r3, [pc, #352]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a57      	ldr	r2, [pc, #348]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 80019e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff f959 	bl	8000c9c <HAL_GetTick>
 80019ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ee:	f7ff f955 	bl	8000c9c <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e0e2      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a00:	4b4e      	ldr	r3, [pc, #312]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a0c:	4b4b      	ldr	r3, [pc, #300]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001a0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a10:	4b4b      	ldr	r3, [pc, #300]	; (8001b40 <HAL_RCC_OscConfig+0x78c>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	4946      	ldr	r1, [pc, #280]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	628b      	str	r3, [r1, #40]	; 0x28
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a34:	3b01      	subs	r3, #1
 8001a36:	025b      	lsls	r3, r3, #9
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a40:	3b01      	subs	r3, #1
 8001a42:	041b      	lsls	r3, r3, #16
 8001a44:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	061b      	lsls	r3, r3, #24
 8001a52:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a56:	4939      	ldr	r1, [pc, #228]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001a5c:	4b37      	ldr	r3, [pc, #220]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	4a36      	ldr	r2, [pc, #216]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001a62:	f023 0301 	bic.w	r3, r3, #1
 8001a66:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a68:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a6c:	4b35      	ldr	r3, [pc, #212]	; (8001b44 <HAL_RCC_OscConfig+0x790>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a74:	00d2      	lsls	r2, r2, #3
 8001a76:	4931      	ldr	r1, [pc, #196]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	f023 020c 	bic.w	r2, r3, #12
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	492c      	ldr	r1, [pc, #176]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	f023 0202 	bic.w	r2, r3, #2
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4928      	ldr	r1, [pc, #160]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001aa0:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	4a25      	ldr	r2, [pc, #148]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	4a22      	ldr	r2, [pc, #136]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ab8:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001abe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a19      	ldr	r2, [pc, #100]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff f8de 	bl	8000c9c <HAL_GetTick>
 8001ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff f8da 	bl	8000c9c <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e067      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x730>
 8001b02:	e05f      	b.n	8001bc4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7ff f8c4 	bl	8000c9c <HAL_GetTick>
 8001b14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff f8c0 	bl	8000c9c <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e04d      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x764>
 8001b36:	e045      	b.n	8001bc4 <HAL_RCC_OscConfig+0x810>
 8001b38:	58024800 	.word	0x58024800
 8001b3c:	58024400 	.word	0x58024400
 8001b40:	fffffc0c 	.word	0xfffffc0c
 8001b44:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b48:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <HAL_RCC_OscConfig+0x81c>)
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <HAL_RCC_OscConfig+0x81c>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d031      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f003 0203 	and.w	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d12a      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d122      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d11a      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	0a5b      	lsrs	r3, r3, #9
 8001b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b96:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d111      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	0c1b      	lsrs	r3, r3, #16
 8001ba0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d108      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	0e1b      	lsrs	r3, r3, #24
 8001bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3730      	adds	r7, #48	; 0x30
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	58024400 	.word	0x58024400

08001bd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e19c      	b.n	8001f22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001be8:	4b8a      	ldr	r3, [pc, #552]	; (8001e14 <HAL_RCC_ClockConfig+0x240>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d910      	bls.n	8001c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b87      	ldr	r3, [pc, #540]	; (8001e14 <HAL_RCC_ClockConfig+0x240>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 020f 	bic.w	r2, r3, #15
 8001bfe:	4985      	ldr	r1, [pc, #532]	; (8001e14 <HAL_RCC_ClockConfig+0x240>)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b83      	ldr	r3, [pc, #524]	; (8001e14 <HAL_RCC_ClockConfig+0x240>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e184      	b.n	8001f22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d010      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	4b7b      	ldr	r3, [pc, #492]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d908      	bls.n	8001c46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c34:	4b78      	ldr	r3, [pc, #480]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4975      	ldr	r1, [pc, #468]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d010      	beq.n	8001c74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	4b70      	ldr	r3, [pc, #448]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d908      	bls.n	8001c74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c62:	4b6d      	ldr	r3, [pc, #436]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	496a      	ldr	r1, [pc, #424]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d010      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699a      	ldr	r2, [r3, #24]
 8001c84:	4b64      	ldr	r3, [pc, #400]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d908      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c90:	4b61      	ldr	r3, [pc, #388]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	495e      	ldr	r1, [pc, #376]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d010      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69da      	ldr	r2, [r3, #28]
 8001cb2:	4b59      	ldr	r3, [pc, #356]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d908      	bls.n	8001cd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001cbe:	4b56      	ldr	r3, [pc, #344]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	4953      	ldr	r1, [pc, #332]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d010      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	4b4d      	ldr	r3, [pc, #308]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d908      	bls.n	8001cfe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cec:	4b4a      	ldr	r3, [pc, #296]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f023 020f 	bic.w	r2, r3, #15
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4947      	ldr	r1, [pc, #284]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d055      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d0a:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	4940      	ldr	r1, [pc, #256]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d107      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d24:	4b3c      	ldr	r3, [pc, #240]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d121      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0f6      	b.n	8001f22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d107      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d3c:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d115      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0ea      	b.n	8001f22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d54:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0de      	b.n	8001f22 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d64:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0d6      	b.n	8001f22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d74:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	f023 0207 	bic.w	r2, r3, #7
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4925      	ldr	r1, [pc, #148]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d86:	f7fe ff89 	bl	8000c9c <HAL_GetTick>
 8001d8a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8e:	f7fe ff85 	bl	8000c9c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e0be      	b.n	8001f22 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da4:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d1eb      	bne.n	8001d8e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d010      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d208      	bcs.n	8001de4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f023 020f 	bic.w	r2, r3, #15
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	490e      	ldr	r1, [pc, #56]	; (8001e18 <HAL_RCC_ClockConfig+0x244>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_RCC_ClockConfig+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d214      	bcs.n	8001e1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <HAL_RCC_ClockConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 020f 	bic.w	r2, r3, #15
 8001dfa:	4906      	ldr	r1, [pc, #24]	; (8001e14 <HAL_RCC_ClockConfig+0x240>)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <HAL_RCC_ClockConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e086      	b.n	8001f22 <HAL_RCC_ClockConfig+0x34e>
 8001e14:	52002000 	.word	0x52002000
 8001e18:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d010      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	4b3f      	ldr	r3, [pc, #252]	; (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d208      	bcs.n	8001e4a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e38:	4b3c      	ldr	r3, [pc, #240]	; (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	4939      	ldr	r1, [pc, #228]	; (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d010      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d208      	bcs.n	8001e78 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e66:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	492e      	ldr	r1, [pc, #184]	; (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0310 	and.w	r3, r3, #16
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d010      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699a      	ldr	r2, [r3, #24]
 8001e88:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d208      	bcs.n	8001ea6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e94:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4922      	ldr	r1, [pc, #136]	; (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d010      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69da      	ldr	r2, [r3, #28]
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d208      	bcs.n	8001ed4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4917      	ldr	r1, [pc, #92]	; (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ed4:	f000 f834 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	4912      	ldr	r1, [pc, #72]	; (8001f30 <HAL_RCC_ClockConfig+0x35c>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_RCC_ClockConfig+0x358>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <HAL_RCC_ClockConfig+0x35c>)
 8001efc:	5cd3      	ldrb	r3, [r2, r3]
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
 8001f08:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <HAL_RCC_ClockConfig+0x360>)
 8001f0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <HAL_RCC_ClockConfig+0x364>)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_RCC_ClockConfig+0x368>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fe76 	bl	8000c08 <HAL_InitTick>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	58024400 	.word	0x58024400
 8001f30:	080029a4 	.word	0x080029a4
 8001f34:	24000004 	.word	0x24000004
 8001f38:	24000000 	.word	0x24000000
 8001f3c:	24000008 	.word	0x24000008

08001f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f46:	4bb3      	ldr	r3, [pc, #716]	; (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f4e:	2b18      	cmp	r3, #24
 8001f50:	f200 8155 	bhi.w	80021fe <HAL_RCC_GetSysClockFreq+0x2be>
 8001f54:	a201      	add	r2, pc, #4	; (adr r2, 8001f5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5a:	bf00      	nop
 8001f5c:	08001fc1 	.word	0x08001fc1
 8001f60:	080021ff 	.word	0x080021ff
 8001f64:	080021ff 	.word	0x080021ff
 8001f68:	080021ff 	.word	0x080021ff
 8001f6c:	080021ff 	.word	0x080021ff
 8001f70:	080021ff 	.word	0x080021ff
 8001f74:	080021ff 	.word	0x080021ff
 8001f78:	080021ff 	.word	0x080021ff
 8001f7c:	08001fe7 	.word	0x08001fe7
 8001f80:	080021ff 	.word	0x080021ff
 8001f84:	080021ff 	.word	0x080021ff
 8001f88:	080021ff 	.word	0x080021ff
 8001f8c:	080021ff 	.word	0x080021ff
 8001f90:	080021ff 	.word	0x080021ff
 8001f94:	080021ff 	.word	0x080021ff
 8001f98:	080021ff 	.word	0x080021ff
 8001f9c:	08001fed 	.word	0x08001fed
 8001fa0:	080021ff 	.word	0x080021ff
 8001fa4:	080021ff 	.word	0x080021ff
 8001fa8:	080021ff 	.word	0x080021ff
 8001fac:	080021ff 	.word	0x080021ff
 8001fb0:	080021ff 	.word	0x080021ff
 8001fb4:	080021ff 	.word	0x080021ff
 8001fb8:	080021ff 	.word	0x080021ff
 8001fbc:	08001ff3 	.word	0x08001ff3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fc0:	4b94      	ldr	r3, [pc, #592]	; (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d009      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001fcc:	4b91      	ldr	r3, [pc, #580]	; (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	08db      	lsrs	r3, r3, #3
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	4a90      	ldr	r2, [pc, #576]	; (8002218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001fde:	e111      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001fe0:	4b8d      	ldr	r3, [pc, #564]	; (8002218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fe2:	61bb      	str	r3, [r7, #24]
    break;
 8001fe4:	e10e      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001fe6:	4b8d      	ldr	r3, [pc, #564]	; (800221c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001fe8:	61bb      	str	r3, [r7, #24]
    break;
 8001fea:	e10b      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001fec:	4b8c      	ldr	r3, [pc, #560]	; (8002220 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001fee:	61bb      	str	r3, [r7, #24]
    break;
 8001ff0:	e108      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001ff2:	4b88      	ldr	r3, [pc, #544]	; (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001ffc:	4b85      	ldr	r3, [pc, #532]	; (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002006:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002008:	4b82      	ldr	r3, [pc, #520]	; (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002012:	4b80      	ldr	r3, [pc, #512]	; (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002016:	08db      	lsrs	r3, r3, #3
 8002018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	ee07 3a90 	vmov	s15, r3
 8002026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80e1 	beq.w	80021f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b02      	cmp	r3, #2
 800203a:	f000 8083 	beq.w	8002144 <HAL_RCC_GetSysClockFreq+0x204>
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2b02      	cmp	r3, #2
 8002042:	f200 80a1 	bhi.w	8002188 <HAL_RCC_GetSysClockFreq+0x248>
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0x114>
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d056      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002052:	e099      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002054:	4b6f      	ldr	r3, [pc, #444]	; (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b00      	cmp	r3, #0
 800205e:	d02d      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002060:	4b6c      	ldr	r3, [pc, #432]	; (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	08db      	lsrs	r3, r3, #3
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	4a6b      	ldr	r2, [pc, #428]	; (8002218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
 8002070:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	ee07 3a90 	vmov	s15, r3
 8002082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800208a:	4b62      	ldr	r3, [pc, #392]	; (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800209a:	ed97 6a02 	vldr	s12, [r7, #8]
 800209e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80020ba:	e087      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002228 <HAL_RCC_GetSysClockFreq+0x2e8>
 80020ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ce:	4b51      	ldr	r3, [pc, #324]	; (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020de:	ed97 6a02 	vldr	s12, [r7, #8]
 80020e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020fe:	e065      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800210a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800222c <HAL_RCC_GetSysClockFreq+0x2ec>
 800210e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002112:	4b40      	ldr	r3, [pc, #256]	; (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002122:	ed97 6a02 	vldr	s12, [r7, #8]
 8002126:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002224 <HAL_RCC_GetSysClockFreq+0x2e4>
 800212a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800212e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800213a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002142:	e043      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800214e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002230 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002156:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002166:	ed97 6a02 	vldr	s12, [r7, #8]
 800216a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002224 <HAL_RCC_GetSysClockFreq+0x2e4>
 800216e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800217a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800217e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002186:	e021      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002192:	eddf 6a26 	vldr	s13, [pc, #152]	; 800222c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021ca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	0a5b      	lsrs	r3, r3, #9
 80021d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021d6:	3301      	adds	r3, #1
 80021d8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	ee07 3a90 	vmov	s15, r3
 80021e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80021e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021f0:	ee17 3a90 	vmov	r3, s15
 80021f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80021f6:	e005      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61bb      	str	r3, [r7, #24]
    break;
 80021fc:	e002      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002200:	61bb      	str	r3, [r7, #24]
    break;
 8002202:	bf00      	nop
  }

  return sysclockfreq;
 8002204:	69bb      	ldr	r3, [r7, #24]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3724      	adds	r7, #36	; 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	58024400 	.word	0x58024400
 8002218:	03d09000 	.word	0x03d09000
 800221c:	003d0900 	.word	0x003d0900
 8002220:	017d7840 	.word	0x017d7840
 8002224:	46000000 	.word	0x46000000
 8002228:	4c742400 	.word	0x4c742400
 800222c:	4a742400 	.word	0x4a742400
 8002230:	4bbebc20 	.word	0x4bbebc20

08002234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e049      	b.n	80022da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe fc22 	bl	8000aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3304      	adds	r3, #4
 8002270:	4619      	mov	r1, r3
 8002272:	4610      	mov	r0, r2
 8002274:	f000 f99a 	bl	80025ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d001      	beq.n	80022fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e04f      	b.n	800239c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a23      	ldr	r2, [pc, #140]	; (80023a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d01d      	beq.n	800235a <HAL_TIM_Base_Start_IT+0x76>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002326:	d018      	beq.n	800235a <HAL_TIM_Base_Start_IT+0x76>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1f      	ldr	r2, [pc, #124]	; (80023ac <HAL_TIM_Base_Start_IT+0xc8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d013      	beq.n	800235a <HAL_TIM_Base_Start_IT+0x76>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00e      	beq.n	800235a <HAL_TIM_Base_Start_IT+0x76>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d009      	beq.n	800235a <HAL_TIM_Base_Start_IT+0x76>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d004      	beq.n	800235a <HAL_TIM_Base_Start_IT+0x76>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a19      	ldr	r2, [pc, #100]	; (80023bc <HAL_TIM_Base_Start_IT+0xd8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d115      	bne.n	8002386 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002362:	4013      	ands	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2b06      	cmp	r3, #6
 800236a:	d015      	beq.n	8002398 <HAL_TIM_Base_Start_IT+0xb4>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002372:	d011      	beq.n	8002398 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002384:	e008      	b.n	8002398 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0201 	orr.w	r2, r2, #1
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	e000      	b.n	800239a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002398:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40000400 	.word	0x40000400
 80023b0:	40000800 	.word	0x40000800
 80023b4:	40000c00 	.word	0x40000c00
 80023b8:	40010400 	.word	0x40010400
 80023bc:	40001800 	.word	0x40001800
 80023c0:	00010007 	.word	0x00010007

080023c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_TIM_ConfigClockSource+0x18>
 80023d8:	2302      	movs	r3, #2
 80023da:	e0db      	b.n	8002594 <HAL_TIM_ConfigClockSource+0x1d0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4b69      	ldr	r3, [pc, #420]	; (800259c <HAL_TIM_ConfigClockSource+0x1d8>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002402:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a63      	ldr	r2, [pc, #396]	; (80025a0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8002412:	4293      	cmp	r3, r2
 8002414:	f000 80a9 	beq.w	800256a <HAL_TIM_ConfigClockSource+0x1a6>
 8002418:	4a61      	ldr	r2, [pc, #388]	; (80025a0 <HAL_TIM_ConfigClockSource+0x1dc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	f200 80ae 	bhi.w	800257c <HAL_TIM_ConfigClockSource+0x1b8>
 8002420:	4a60      	ldr	r2, [pc, #384]	; (80025a4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	f000 80a1 	beq.w	800256a <HAL_TIM_ConfigClockSource+0x1a6>
 8002428:	4a5e      	ldr	r2, [pc, #376]	; (80025a4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	f200 80a6 	bhi.w	800257c <HAL_TIM_ConfigClockSource+0x1b8>
 8002430:	4a5d      	ldr	r2, [pc, #372]	; (80025a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	f000 8099 	beq.w	800256a <HAL_TIM_ConfigClockSource+0x1a6>
 8002438:	4a5b      	ldr	r2, [pc, #364]	; (80025a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	f200 809e 	bhi.w	800257c <HAL_TIM_ConfigClockSource+0x1b8>
 8002440:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002444:	f000 8091 	beq.w	800256a <HAL_TIM_ConfigClockSource+0x1a6>
 8002448:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800244c:	f200 8096 	bhi.w	800257c <HAL_TIM_ConfigClockSource+0x1b8>
 8002450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002454:	f000 8089 	beq.w	800256a <HAL_TIM_ConfigClockSource+0x1a6>
 8002458:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800245c:	f200 808e 	bhi.w	800257c <HAL_TIM_ConfigClockSource+0x1b8>
 8002460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002464:	d03e      	beq.n	80024e4 <HAL_TIM_ConfigClockSource+0x120>
 8002466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800246a:	f200 8087 	bhi.w	800257c <HAL_TIM_ConfigClockSource+0x1b8>
 800246e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002472:	f000 8085 	beq.w	8002580 <HAL_TIM_ConfigClockSource+0x1bc>
 8002476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247a:	d87f      	bhi.n	800257c <HAL_TIM_ConfigClockSource+0x1b8>
 800247c:	2b70      	cmp	r3, #112	; 0x70
 800247e:	d01a      	beq.n	80024b6 <HAL_TIM_ConfigClockSource+0xf2>
 8002480:	2b70      	cmp	r3, #112	; 0x70
 8002482:	d87b      	bhi.n	800257c <HAL_TIM_ConfigClockSource+0x1b8>
 8002484:	2b60      	cmp	r3, #96	; 0x60
 8002486:	d050      	beq.n	800252a <HAL_TIM_ConfigClockSource+0x166>
 8002488:	2b60      	cmp	r3, #96	; 0x60
 800248a:	d877      	bhi.n	800257c <HAL_TIM_ConfigClockSource+0x1b8>
 800248c:	2b50      	cmp	r3, #80	; 0x50
 800248e:	d03c      	beq.n	800250a <HAL_TIM_ConfigClockSource+0x146>
 8002490:	2b50      	cmp	r3, #80	; 0x50
 8002492:	d873      	bhi.n	800257c <HAL_TIM_ConfigClockSource+0x1b8>
 8002494:	2b40      	cmp	r3, #64	; 0x40
 8002496:	d058      	beq.n	800254a <HAL_TIM_ConfigClockSource+0x186>
 8002498:	2b40      	cmp	r3, #64	; 0x40
 800249a:	d86f      	bhi.n	800257c <HAL_TIM_ConfigClockSource+0x1b8>
 800249c:	2b30      	cmp	r3, #48	; 0x30
 800249e:	d064      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x1a6>
 80024a0:	2b30      	cmp	r3, #48	; 0x30
 80024a2:	d86b      	bhi.n	800257c <HAL_TIM_ConfigClockSource+0x1b8>
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d060      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x1a6>
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d867      	bhi.n	800257c <HAL_TIM_ConfigClockSource+0x1b8>
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d05c      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x1a6>
 80024b0:	2b10      	cmp	r3, #16
 80024b2:	d05a      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80024b4:	e062      	b.n	800257c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6899      	ldr	r1, [r3, #8]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f000 f989 	bl	80027dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	609a      	str	r2, [r3, #8]
      break;
 80024e2:	e04e      	b.n	8002582 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6899      	ldr	r1, [r3, #8]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f000 f972 	bl	80027dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002506:	609a      	str	r2, [r3, #8]
      break;
 8002508:	e03b      	b.n	8002582 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6859      	ldr	r1, [r3, #4]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	461a      	mov	r2, r3
 8002518:	f000 f8e2 	bl	80026e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2150      	movs	r1, #80	; 0x50
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f93c 	bl	80027a0 <TIM_ITRx_SetConfig>
      break;
 8002528:	e02b      	b.n	8002582 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6859      	ldr	r1, [r3, #4]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	461a      	mov	r2, r3
 8002538:	f000 f901 	bl	800273e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2160      	movs	r1, #96	; 0x60
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f92c 	bl	80027a0 <TIM_ITRx_SetConfig>
      break;
 8002548:	e01b      	b.n	8002582 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	461a      	mov	r2, r3
 8002558:	f000 f8c2 	bl	80026e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2140      	movs	r1, #64	; 0x40
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f91c 	bl	80027a0 <TIM_ITRx_SetConfig>
      break;
 8002568:	e00b      	b.n	8002582 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f000 f913 	bl	80027a0 <TIM_ITRx_SetConfig>
        break;
 800257a:	e002      	b.n	8002582 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800257c:	bf00      	nop
 800257e:	e000      	b.n	8002582 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8002580:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	ffceff88 	.word	0xffceff88
 80025a0:	00100040 	.word	0x00100040
 80025a4:	00100030 	.word	0x00100030
 80025a8:	00100020 	.word	0x00100020

080025ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a40      	ldr	r2, [pc, #256]	; (80026c0 <TIM_Base_SetConfig+0x114>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d013      	beq.n	80025ec <TIM_Base_SetConfig+0x40>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ca:	d00f      	beq.n	80025ec <TIM_Base_SetConfig+0x40>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a3d      	ldr	r2, [pc, #244]	; (80026c4 <TIM_Base_SetConfig+0x118>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00b      	beq.n	80025ec <TIM_Base_SetConfig+0x40>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a3c      	ldr	r2, [pc, #240]	; (80026c8 <TIM_Base_SetConfig+0x11c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d007      	beq.n	80025ec <TIM_Base_SetConfig+0x40>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a3b      	ldr	r2, [pc, #236]	; (80026cc <TIM_Base_SetConfig+0x120>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d003      	beq.n	80025ec <TIM_Base_SetConfig+0x40>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a3a      	ldr	r2, [pc, #232]	; (80026d0 <TIM_Base_SetConfig+0x124>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d108      	bne.n	80025fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a2f      	ldr	r2, [pc, #188]	; (80026c0 <TIM_Base_SetConfig+0x114>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01f      	beq.n	8002646 <TIM_Base_SetConfig+0x9a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260c:	d01b      	beq.n	8002646 <TIM_Base_SetConfig+0x9a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a2c      	ldr	r2, [pc, #176]	; (80026c4 <TIM_Base_SetConfig+0x118>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d017      	beq.n	8002646 <TIM_Base_SetConfig+0x9a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a2b      	ldr	r2, [pc, #172]	; (80026c8 <TIM_Base_SetConfig+0x11c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <TIM_Base_SetConfig+0x9a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a2a      	ldr	r2, [pc, #168]	; (80026cc <TIM_Base_SetConfig+0x120>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00f      	beq.n	8002646 <TIM_Base_SetConfig+0x9a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a29      	ldr	r2, [pc, #164]	; (80026d0 <TIM_Base_SetConfig+0x124>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00b      	beq.n	8002646 <TIM_Base_SetConfig+0x9a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a28      	ldr	r2, [pc, #160]	; (80026d4 <TIM_Base_SetConfig+0x128>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <TIM_Base_SetConfig+0x9a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a27      	ldr	r2, [pc, #156]	; (80026d8 <TIM_Base_SetConfig+0x12c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d003      	beq.n	8002646 <TIM_Base_SetConfig+0x9a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a26      	ldr	r2, [pc, #152]	; (80026dc <TIM_Base_SetConfig+0x130>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d108      	bne.n	8002658 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a10      	ldr	r2, [pc, #64]	; (80026c0 <TIM_Base_SetConfig+0x114>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00f      	beq.n	80026a4 <TIM_Base_SetConfig+0xf8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <TIM_Base_SetConfig+0x124>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d00b      	beq.n	80026a4 <TIM_Base_SetConfig+0xf8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a11      	ldr	r2, [pc, #68]	; (80026d4 <TIM_Base_SetConfig+0x128>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d007      	beq.n	80026a4 <TIM_Base_SetConfig+0xf8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a10      	ldr	r2, [pc, #64]	; (80026d8 <TIM_Base_SetConfig+0x12c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d003      	beq.n	80026a4 <TIM_Base_SetConfig+0xf8>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a0f      	ldr	r2, [pc, #60]	; (80026dc <TIM_Base_SetConfig+0x130>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d103      	bne.n	80026ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	615a      	str	r2, [r3, #20]
}
 80026b2:	bf00      	nop
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40010000 	.word	0x40010000
 80026c4:	40000400 	.word	0x40000400
 80026c8:	40000800 	.word	0x40000800
 80026cc:	40000c00 	.word	0x40000c00
 80026d0:	40010400 	.word	0x40010400
 80026d4:	40014000 	.word	0x40014000
 80026d8:	40014400 	.word	0x40014400
 80026dc:	40014800 	.word	0x40014800

080026e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	f023 0201 	bic.w	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800270a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f023 030a 	bic.w	r3, r3, #10
 800271c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	621a      	str	r2, [r3, #32]
}
 8002732:	bf00      	nop
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800273e:	b480      	push	{r7}
 8002740:	b087      	sub	sp, #28
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f023 0210 	bic.w	r2, r3, #16
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002768:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	031b      	lsls	r3, r3, #12
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800277a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	621a      	str	r2, [r3, #32]
}
 8002792:	bf00      	nop
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <TIM_ITRx_SetConfig+0x38>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	f043 0307 	orr.w	r3, r3, #7
 80027c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	609a      	str	r2, [r3, #8]
}
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	ffcfff8f 	.word	0xffcfff8f

080027dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	021a      	lsls	r2, r3, #8
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	431a      	orrs	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4313      	orrs	r3, r2
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	609a      	str	r2, [r3, #8]
}
 8002810:	bf00      	nop
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002830:	2302      	movs	r3, #2
 8002832:	e068      	b.n	8002906 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a2e      	ldr	r2, [pc, #184]	; (8002914 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d004      	beq.n	8002868 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2d      	ldr	r2, [pc, #180]	; (8002918 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d108      	bne.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800286e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002880:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a1e      	ldr	r2, [pc, #120]	; (8002914 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01d      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a6:	d018      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1b      	ldr	r2, [pc, #108]	; (800291c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00e      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a18      	ldr	r2, [pc, #96]	; (8002924 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d009      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a13      	ldr	r2, [pc, #76]	; (8002918 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d004      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a14      	ldr	r2, [pc, #80]	; (8002928 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d10c      	bne.n	80028f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40010000 	.word	0x40010000
 8002918:	40010400 	.word	0x40010400
 800291c:	40000400 	.word	0x40000400
 8002920:	40000800 	.word	0x40000800
 8002924:	40000c00 	.word	0x40000c00
 8002928:	40001800 	.word	0x40001800

0800292c <__libc_init_array>:
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	4d0d      	ldr	r5, [pc, #52]	; (8002964 <__libc_init_array+0x38>)
 8002930:	4c0d      	ldr	r4, [pc, #52]	; (8002968 <__libc_init_array+0x3c>)
 8002932:	1b64      	subs	r4, r4, r5
 8002934:	10a4      	asrs	r4, r4, #2
 8002936:	2600      	movs	r6, #0
 8002938:	42a6      	cmp	r6, r4
 800293a:	d109      	bne.n	8002950 <__libc_init_array+0x24>
 800293c:	4d0b      	ldr	r5, [pc, #44]	; (800296c <__libc_init_array+0x40>)
 800293e:	4c0c      	ldr	r4, [pc, #48]	; (8002970 <__libc_init_array+0x44>)
 8002940:	f000 f820 	bl	8002984 <_init>
 8002944:	1b64      	subs	r4, r4, r5
 8002946:	10a4      	asrs	r4, r4, #2
 8002948:	2600      	movs	r6, #0
 800294a:	42a6      	cmp	r6, r4
 800294c:	d105      	bne.n	800295a <__libc_init_array+0x2e>
 800294e:	bd70      	pop	{r4, r5, r6, pc}
 8002950:	f855 3b04 	ldr.w	r3, [r5], #4
 8002954:	4798      	blx	r3
 8002956:	3601      	adds	r6, #1
 8002958:	e7ee      	b.n	8002938 <__libc_init_array+0xc>
 800295a:	f855 3b04 	ldr.w	r3, [r5], #4
 800295e:	4798      	blx	r3
 8002960:	3601      	adds	r6, #1
 8002962:	e7f2      	b.n	800294a <__libc_init_array+0x1e>
 8002964:	080029b4 	.word	0x080029b4
 8002968:	080029b4 	.word	0x080029b4
 800296c:	080029b4 	.word	0x080029b4
 8002970:	080029b8 	.word	0x080029b8

08002974 <memset>:
 8002974:	4402      	add	r2, r0
 8002976:	4603      	mov	r3, r0
 8002978:	4293      	cmp	r3, r2
 800297a:	d100      	bne.n	800297e <memset+0xa>
 800297c:	4770      	bx	lr
 800297e:	f803 1b01 	strb.w	r1, [r3], #1
 8002982:	e7f9      	b.n	8002978 <memset+0x4>

08002984 <_init>:
 8002984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002986:	bf00      	nop
 8002988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800298a:	bc08      	pop	{r3}
 800298c:	469e      	mov	lr, r3
 800298e:	4770      	bx	lr

08002990 <_fini>:
 8002990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002992:	bf00      	nop
 8002994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002996:	bc08      	pop	{r3}
 8002998:	469e      	mov	lr, r3
 800299a:	4770      	bx	lr
