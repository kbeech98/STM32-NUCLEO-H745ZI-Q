
NUCLEO_H745_DHT11_SERIAL_TEMP_SENSOR_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a20  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08005cc0  08005cc0  00015cc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060d4  080060d4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080060d4  080060d4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060d4  080060d4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060d4  080060d4  000160d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060d8  080060d8  000160d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  080060dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  240001e0  080062bc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240002d0  080062bc  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193d6  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d63  00000000  00000000  000395e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0003c348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  0003d150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039ec2  00000000  00000000  0003de50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd9a  00000000  00000000  00077d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017c25b  00000000  00000000  00087aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00203d07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000490c  00000000  00000000  00203d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005ca8 	.word	0x08005ca8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	08005ca8 	.word	0x08005ca8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b3f      	ldr	r3, [pc, #252]	; (8000494 <SystemInit+0x104>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800039a:	4a3e      	ldr	r2, [pc, #248]	; (8000494 <SystemInit+0x104>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b3b      	ldr	r3, [pc, #236]	; (8000494 <SystemInit+0x104>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a3a      	ldr	r2, [pc, #232]	; (8000494 <SystemInit+0x104>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b39      	ldr	r3, [pc, #228]	; (8000498 <SystemInit+0x108>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b36      	ldr	r3, [pc, #216]	; (8000498 <SystemInit+0x108>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a34      	ldr	r2, [pc, #208]	; (8000498 <SystemInit+0x108>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b33      	ldr	r3, [pc, #204]	; (800049c <SystemInit+0x10c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a32      	ldr	r2, [pc, #200]	; (800049c <SystemInit+0x10c>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b30      	ldr	r3, [pc, #192]	; (800049c <SystemInit+0x10c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b2f      	ldr	r3, [pc, #188]	; (800049c <SystemInit+0x10c>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	492e      	ldr	r1, [pc, #184]	; (800049c <SystemInit+0x10c>)
 80003e4:	4b2e      	ldr	r3, [pc, #184]	; (80004a0 <SystemInit+0x110>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b2b      	ldr	r3, [pc, #172]	; (8000498 <SystemInit+0x108>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b28      	ldr	r3, [pc, #160]	; (8000498 <SystemInit+0x108>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a26      	ldr	r2, [pc, #152]	; (8000498 <SystemInit+0x108>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b25      	ldr	r3, [pc, #148]	; (800049c <SystemInit+0x10c>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b23      	ldr	r3, [pc, #140]	; (800049c <SystemInit+0x10c>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b22      	ldr	r3, [pc, #136]	; (800049c <SystemInit+0x10c>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b20      	ldr	r3, [pc, #128]	; (800049c <SystemInit+0x10c>)
 800041a:	4a22      	ldr	r2, [pc, #136]	; (80004a4 <SystemInit+0x114>)
 800041c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b1f      	ldr	r3, [pc, #124]	; (800049c <SystemInit+0x10c>)
 8000420:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <SystemInit+0x118>)
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b1d      	ldr	r3, [pc, #116]	; (800049c <SystemInit+0x10c>)
 8000426:	4a21      	ldr	r2, [pc, #132]	; (80004ac <SystemInit+0x11c>)
 8000428:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b1c      	ldr	r3, [pc, #112]	; (800049c <SystemInit+0x10c>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b1a      	ldr	r3, [pc, #104]	; (800049c <SystemInit+0x10c>)
 8000432:	4a1e      	ldr	r2, [pc, #120]	; (80004ac <SystemInit+0x11c>)
 8000434:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <SystemInit+0x10c>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b17      	ldr	r3, [pc, #92]	; (800049c <SystemInit+0x10c>)
 800043e:	4a1b      	ldr	r2, [pc, #108]	; (80004ac <SystemInit+0x11c>)
 8000440:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b16      	ldr	r3, [pc, #88]	; (800049c <SystemInit+0x10c>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <SystemInit+0x10c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a13      	ldr	r2, [pc, #76]	; (800049c <SystemInit+0x10c>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b11      	ldr	r3, [pc, #68]	; (800049c <SystemInit+0x10c>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <SystemInit+0x120>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800045e:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <SystemInit+0x120>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000464:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <SystemInit+0x124>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <SystemInit+0x128>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <SystemInit+0x12c>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <SystemInit+0x130>)
 800047c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000480:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <SystemInit+0x104>)
 8000484:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000488:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	e000ed00 	.word	0xe000ed00
 8000498:	52002000 	.word	0x52002000
 800049c:	58024400 	.word	0x58024400
 80004a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80004a4:	02020200 	.word	0x02020200
 80004a8:	01ff0000 	.word	0x01ff0000
 80004ac:	01010280 	.word	0x01010280
 80004b0:	580000c0 	.word	0x580000c0
 80004b4:	5c001000 	.word	0x5c001000
 80004b8:	ffff0000 	.word	0xffff0000
 80004bc:	51008108 	.word	0x51008108
 80004c0:	52004000 	.word	0x52004000

080004c4 <two_half_us_delay>:
//define the timer handler below
#define timer2 htim2

extern TIM_HandleTypeDef timer2;
void two_half_us_delay (uint16_t us)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer2, 0);		//clear timer
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <two_half_us_delay+0x30>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2200      	movs	r2, #0
 80004d4:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&timer2);			//start timer
 80004d6:	4807      	ldr	r0, [pc, #28]	; (80004f4 <two_half_us_delay+0x30>)
 80004d8:	f002 fa8c 	bl	80029f4 <HAL_TIM_Base_Start_IT>
	while (__HAL_TIM_GET_COUNTER(&timer2) < us);
 80004dc:	bf00      	nop
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <two_half_us_delay+0x30>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	d3f9      	bcc.n	80004de <two_half_us_delay+0x1a>
}
 80004ea:	bf00      	nop
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	24000270 	.word	0x24000270

080004f8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000514:	887b      	ldrh	r3, [r7, #2]
 8000516:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4619      	mov	r1, r3
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f001 f848 	bl	80015bc <HAL_GPIO_Init>
}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000550:	887b      	ldrh	r3, [r7, #2]
 8000552:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	4619      	mov	r1, r3
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f001 f82a 	bl	80015bc <HAL_GPIO_Init>
}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <DHT11_Start>:

void DHT11_Start (void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  		// set the pin as output
 8000574:	2101      	movs	r1, #1
 8000576:	480a      	ldr	r0, [pc, #40]	; (80005a0 <DHT11_Start+0x30>)
 8000578:	f7ff ffdc 	bl	8000534 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 800057c:	2200      	movs	r2, #0
 800057e:	2101      	movs	r1, #1
 8000580:	4807      	ldr	r0, [pc, #28]	; (80005a0 <DHT11_Start+0x30>)
 8000582:	f001 f9e3 	bl	800194c <HAL_GPIO_WritePin>
	two_half_us_delay(6667);   								// wait for 18ms
 8000586:	f641 200b 	movw	r0, #6667	; 0x1a0b
 800058a:	f7ff ff9b 	bl	80004c4 <two_half_us_delay>
	//HAL_Delay(2000);
    //HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
	//two_half_us_delay(13);   								// wait for 30us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    		// set as input
 800058e:	2101      	movs	r1, #1
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <DHT11_Start+0x30>)
 8000592:	f7ff ffb1 	bl	80004f8 <Set_Pin_Input>
	two_half_us_delay(11);   								// wait for 30us
 8000596:	200b      	movs	r0, #11
 8000598:	f7ff ff94 	bl	80004c4 <two_half_us_delay>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	58020c00 	.word	0x58020c00

080005a4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	71bb      	strb	r3, [r7, #6]
 80005ae:	e037      	b.n	8000620 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   	// wait for the pin to go high
 80005b0:	bf00      	nop
 80005b2:	2101      	movs	r1, #1
 80005b4:	481e      	ldr	r0, [pc, #120]	; (8000630 <DHT11_Read+0x8c>)
 80005b6:	f001 f9b1 	bl	800191c <HAL_GPIO_ReadPin>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0f8      	beq.n	80005b2 <DHT11_Read+0xe>
		two_half_us_delay(14);   										// wait for 40 us
 80005c0:	200e      	movs	r0, #14
 80005c2:	f7ff ff7f 	bl	80004c4 <two_half_us_delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   		// if the pin is low
 80005c6:	2101      	movs	r1, #1
 80005c8:	4819      	ldr	r0, [pc, #100]	; (8000630 <DHT11_Read+0x8c>)
 80005ca:	f001 f9a7 	bl	800191c <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d10e      	bne.n	80005f2 <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   									// write 0
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	f1c3 0307 	rsb	r3, r3, #7
 80005da:	2201      	movs	r2, #1
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	43db      	mvns	r3, r3
 80005e4:	b25a      	sxtb	r2, r3
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	4013      	ands	r3, r2
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	e00b      	b.n	800060a <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  									// if the pin is high, write 1
 80005f2:	79bb      	ldrb	r3, [r7, #6]
 80005f4:	f1c3 0307 	rsb	r3, r3, #7
 80005f8:	2201      	movs	r2, #1
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	b25a      	sxtb	r2, r3
 8000600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000604:	4313      	orrs	r3, r2
 8000606:	b25b      	sxtb	r3, r3
 8000608:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  	// wait for the pin to go low
 800060a:	bf00      	nop
 800060c:	2101      	movs	r1, #1
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <DHT11_Read+0x8c>)
 8000610:	f001 f984 	bl	800191c <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f8      	bne.n	800060c <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	3301      	adds	r3, #1
 800061e:	71bb      	strb	r3, [r7, #6]
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	2b07      	cmp	r3, #7
 8000624:	d9c4      	bls.n	80005b0 <DHT11_Read+0xc>
	}
	return i;
 8000626:	79fb      	ldrb	r3, [r7, #7]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	58020c00 	.word	0x58020c00

08000634 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	71fb      	strb	r3, [r7, #7]
	two_half_us_delay(14);
 800063e:	200e      	movs	r0, #14
 8000640:	f7ff ff40 	bl	80004c4 <two_half_us_delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000644:	2101      	movs	r1, #1
 8000646:	4813      	ldr	r0, [pc, #76]	; (8000694 <DHT11_Check_Response+0x60>)
 8000648:	f001 f968 	bl	800191c <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d113      	bne.n	800067a <DHT11_Check_Response+0x46>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //Debugging LED
 8000652:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000656:	4810      	ldr	r0, [pc, #64]	; (8000698 <DHT11_Check_Response+0x64>)
 8000658:	f001 f991 	bl	800197e <HAL_GPIO_TogglePin>
		two_half_us_delay(30);
 800065c:	201e      	movs	r0, #30
 800065e:	f7ff ff31 	bl	80004c4 <two_half_us_delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000662:	2101      	movs	r1, #1
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <DHT11_Check_Response+0x60>)
 8000666:	f001 f959 	bl	800191c <HAL_GPIO_ReadPin>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d002      	beq.n	8000676 <DHT11_Check_Response+0x42>
 8000670:	2301      	movs	r3, #1
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	e001      	b.n	800067a <DHT11_Check_Response+0x46>
		else Response = -1; // 255
 8000676:	23ff      	movs	r3, #255	; 0xff
 8000678:	71fb      	strb	r3, [r7, #7]
	}
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 800067a:	bf00      	nop
 800067c:	2101      	movs	r1, #1
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <DHT11_Check_Response+0x60>)
 8000680:	f001 f94c 	bl	800191c <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f8      	bne.n	800067c <DHT11_Check_Response+0x48>

	return Response;
 800068a:	79fb      	ldrb	r3, [r7, #7]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	58020c00 	.word	0x58020c00
 8000698:	58020400 	.word	0x58020400

0800069c <poll_DHT11>:

void poll_DHT11(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	DHT11_Start();
 80006a0:	f7ff ff66 	bl	8000570 <DHT11_Start>
	Presence = DHT11_Check_Response();
 80006a4:	f7ff ffc6 	bl	8000634 <DHT11_Check_Response>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <poll_DHT11+0x8c>)
 80006ae:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
	Rh_byte1 = DHT11_Read ();
 80006b0:	f7ff ff78 	bl	80005a4 <DHT11_Read>
 80006b4:	4603      	mov	r3, r0
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <poll_DHT11+0x90>)
 80006ba:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read ();
 80006bc:	f7ff ff72 	bl	80005a4 <DHT11_Read>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <poll_DHT11+0x94>)
 80006c6:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read ();
 80006c8:	f7ff ff6c 	bl	80005a4 <DHT11_Read>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <poll_DHT11+0x98>)
 80006d2:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read ();
 80006d4:	f7ff ff66 	bl	80005a4 <DHT11_Read>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <poll_DHT11+0x9c>)
 80006de:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 80006e0:	f7ff ff60 	bl	80005a4 <DHT11_Read>
 80006e4:	4603      	mov	r3, r0
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <poll_DHT11+0xa0>)
 80006ea:	801a      	strh	r2, [r3, #0]

	TEMP = Temp_byte1;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <poll_DHT11+0x98>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <poll_DHT11+0xa4>)
 80006f4:	801a      	strh	r2, [r3, #0]
	RH = Rh_byte1;
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <poll_DHT11+0x90>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <poll_DHT11+0xa8>)
 80006fe:	801a      	strh	r2, [r3, #0]

	Temperature = (float) TEMP;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <poll_DHT11+0xa4>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <poll_DHT11+0xac>)
 800070e:	edc3 7a00 	vstr	s15, [r3]
	Humidity = (float) RH;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <poll_DHT11+0xa8>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <poll_DHT11+0xb0>)
 8000720:	edc3 7a00 	vstr	s15, [r3]
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	240001fc 	.word	0x240001fc
 800072c:	24000210 	.word	0x24000210
 8000730:	24000217 	.word	0x24000217
 8000734:	24000216 	.word	0x24000216
 8000738:	24000220 	.word	0x24000220
 800073c:	24000218 	.word	0x24000218
 8000740:	24000214 	.word	0x24000214
 8000744:	24000212 	.word	0x24000212
 8000748:	2400020c 	.word	0x2400020c
 800074c:	2400021c 	.word	0x2400021c

08000750 <Display_Temp>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Display_Temp (float Temp)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
 8000756:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[20] = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
	lcd_clear();
 800076c:	f000 fb72 	bl	8000e54 <lcd_clear>
	lcd_put_cur(0, 0);
 8000770:	2100      	movs	r1, #0
 8000772:	2000      	movs	r0, #0
 8000774:	f000 fb78 	bl	8000e68 <lcd_put_cur>

	sprintf (str, "TEMP:- %.2f ", Temp);
 8000778:	edd7 7a01 	vldr	s15, [r7, #4]
 800077c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000780:	f107 000c 	add.w	r0, r7, #12
 8000784:	ec53 2b17 	vmov	r2, r3, d7
 8000788:	4907      	ldr	r1, [pc, #28]	; (80007a8 <Display_Temp+0x58>)
 800078a:	f003 f8cb 	bl	8003924 <siprintf>
	lcd_send_string(str);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fbd7 	bl	8000f46 <lcd_send_string>
	lcd_send_data('C');
 8000798:	2043      	movs	r0, #67	; 0x43
 800079a:	f000 fb3e 	bl	8000e1a <lcd_send_data>
}
 800079e:	bf00      	nop
 80007a0:	3720      	adds	r7, #32
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	08005cc0 	.word	0x08005cc0

080007ac <Display_Rh>:

void Display_Rh (float Rh)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[20] = {0};
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
	lcd_clear();
 80007c8:	f000 fb44 	bl	8000e54 <lcd_clear>
	lcd_put_cur(1, 0);
 80007cc:	2100      	movs	r1, #0
 80007ce:	2001      	movs	r0, #1
 80007d0:	f000 fb4a 	bl	8000e68 <lcd_put_cur>

	sprintf (str, "RH:- %.2f ", Rh);
 80007d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80007d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007dc:	f107 000c 	add.w	r0, r7, #12
 80007e0:	ec53 2b17 	vmov	r2, r3, d7
 80007e4:	4907      	ldr	r1, [pc, #28]	; (8000804 <Display_Rh+0x58>)
 80007e6:	f003 f89d 	bl	8003924 <siprintf>
	lcd_send_string(str);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fba9 	bl	8000f46 <lcd_send_string>
	lcd_send_data('%');
 80007f4:	2025      	movs	r0, #37	; 0x25
 80007f6:	f000 fb10 	bl	8000e1a <lcd_send_data>
}
 80007fa:	bf00      	nop
 80007fc:	3720      	adds	r7, #32
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	08005cd0 	.word	0x08005cd0

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800080e:	4b69      	ldr	r3, [pc, #420]	; (80009b4 <main+0x1ac>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000816:	2b00      	cmp	r3, #0
 8000818:	d11b      	bne.n	8000852 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800081a:	f3bf 8f4f 	dsb	sy
}
 800081e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000820:	f3bf 8f6f 	isb	sy
}
 8000824:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000826:	4b63      	ldr	r3, [pc, #396]	; (80009b4 <main+0x1ac>)
 8000828:	2200      	movs	r2, #0
 800082a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800082e:	f3bf 8f4f 	dsb	sy
}
 8000832:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000834:	f3bf 8f6f 	isb	sy
}
 8000838:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800083a:	4b5e      	ldr	r3, [pc, #376]	; (80009b4 <main+0x1ac>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	4a5d      	ldr	r2, [pc, #372]	; (80009b4 <main+0x1ac>)
 8000840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000844:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000846:	f3bf 8f4f 	dsb	sy
}
 800084a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800084c:	f3bf 8f6f 	isb	sy
}
 8000850:	e000      	b.n	8000854 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000852:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000854:	4b57      	ldr	r3, [pc, #348]	; (80009b4 <main+0x1ac>)
 8000856:	695b      	ldr	r3, [r3, #20]
 8000858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800085c:	2b00      	cmp	r3, #0
 800085e:	d138      	bne.n	80008d2 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000860:	4b54      	ldr	r3, [pc, #336]	; (80009b4 <main+0x1ac>)
 8000862:	2200      	movs	r2, #0
 8000864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000868:	f3bf 8f4f 	dsb	sy
}
 800086c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800086e:	4b51      	ldr	r3, [pc, #324]	; (80009b4 <main+0x1ac>)
 8000870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000874:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	0b5b      	lsrs	r3, r3, #13
 800087a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800087e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000888:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	015a      	lsls	r2, r3, #5
 800088e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000892:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000898:	4946      	ldr	r1, [pc, #280]	; (80009b4 <main+0x1ac>)
 800089a:	4313      	orrs	r3, r2
 800089c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	1e5a      	subs	r2, r3, #1
 80008a4:	60ba      	str	r2, [r7, #8]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1ef      	bne.n	800088a <main+0x82>
    } while(sets-- != 0U);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	60fa      	str	r2, [r7, #12]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1e5      	bne.n	8000880 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80008b4:	f3bf 8f4f 	dsb	sy
}
 80008b8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008ba:	4b3e      	ldr	r3, [pc, #248]	; (80009b4 <main+0x1ac>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	4a3d      	ldr	r2, [pc, #244]	; (80009b4 <main+0x1ac>)
 80008c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008c4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008c6:	f3bf 8f4f 	dsb	sy
}
 80008ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008cc:	f3bf 8f6f 	isb	sy
}
 80008d0:	e000      	b.n	80008d4 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008d2:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008d8:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008da:	bf00      	nop
 80008dc:	4b36      	ldr	r3, [pc, #216]	; (80009b8 <main+0x1b0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d004      	beq.n	80008f2 <main+0xea>
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	1e5a      	subs	r2, r3, #1
 80008ec:	617a      	str	r2, [r7, #20]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	dcf4      	bgt.n	80008dc <main+0xd4>
  if ( timeout < 0 )
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	da01      	bge.n	80008fc <main+0xf4>
  {
  Error_Handler();
 80008f8:	f000 fa12 	bl	8000d20 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fc:	f000 fcb8 	bl	8001270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000900:	f000 f864 	bl	80009cc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000904:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <main+0x1b0>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090a:	4a2b      	ldr	r2, [pc, #172]	; (80009b8 <main+0x1b0>)
 800090c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000914:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <main+0x1b0>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000922:	2000      	movs	r0, #0
 8000924:	f001 f846 	bl	80019b4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000928:	2100      	movs	r1, #0
 800092a:	2000      	movs	r0, #0
 800092c:	f001 f85c 	bl	80019e8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000934:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000936:	bf00      	nop
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <main+0x1b0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000940:	2b00      	cmp	r3, #0
 8000942:	d104      	bne.n	800094e <main+0x146>
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	1e5a      	subs	r2, r3, #1
 8000948:	617a      	str	r2, [r7, #20]
 800094a:	2b00      	cmp	r3, #0
 800094c:	dcf4      	bgt.n	8000938 <main+0x130>
if ( timeout < 0 )
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	2b00      	cmp	r3, #0
 8000952:	da01      	bge.n	8000958 <main+0x150>
{
Error_Handler();
 8000954:	f000 f9e4 	bl	8000d20 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000958:	f000 f954 	bl	8000c04 <MX_GPIO_Init>
  MX_TIM1_Init();
 800095c:	f000 f8b0 	bl	8000ac0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000960:	f000 f902 	bl	8000b68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  nhd_LCD_Init();
 8000964:	f000 fab2 	bl	8000ecc <nhd_LCD_Init>
  lcd_put_cur(0,1);
 8000968:	2101      	movs	r1, #1
 800096a:	2000      	movs	r0, #0
 800096c:	f000 fa7c 	bl	8000e68 <lcd_put_cur>
  lcd_send_string("hiiiii");
 8000970:	4812      	ldr	r0, [pc, #72]	; (80009bc <main+0x1b4>)
 8000972:	f000 fae8 	bl	8000f46 <lcd_send_string>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   	// pull the pin high
 8000976:	2201      	movs	r2, #1
 8000978:	2101      	movs	r1, #1
 800097a:	4811      	ldr	r0, [pc, #68]	; (80009c0 <main+0x1b8>)
 800097c:	f000 ffe6 	bl	800194c <HAL_GPIO_WritePin>
	  HAL_Delay(3000);									//wait 3 seconds
 8000980:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000984:	f000 fd06 	bl	8001394 <HAL_Delay>
	  poll_DHT11();
 8000988:	f7ff fe88 	bl	800069c <poll_DHT11>
	  	  Display_Temp(Temperature);
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <main+0x1bc>)
 800098e:	edd3 7a00 	vldr	s15, [r3]
 8000992:	eeb0 0a67 	vmov.f32	s0, s15
 8000996:	f7ff fedb 	bl	8000750 <Display_Temp>
		  Display_Rh(Humidity);
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <main+0x1c0>)
 800099c:	edd3 7a00 	vldr	s15, [r3]
 80009a0:	eeb0 0a67 	vmov.f32	s0, s15
 80009a4:	f7ff ff02 	bl	80007ac <Display_Rh>
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
	  HAL_Delay(3000);
 80009a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009ac:	f000 fcf2 	bl	8001394 <HAL_Delay>
	  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   	// pull the pin high
 80009b0:	e7e1      	b.n	8000976 <main+0x16e>
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00
 80009b8:	58024400 	.word	0x58024400
 80009bc:	08005cdc 	.word	0x08005cdc
 80009c0:	58020c00 	.word	0x58020c00
 80009c4:	2400020c 	.word	0x2400020c
 80009c8:	2400021c 	.word	0x2400021c

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b09c      	sub	sp, #112	; 0x70
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	224c      	movs	r2, #76	; 0x4c
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 fb58 	bl	8003090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2220      	movs	r2, #32
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 fb52 	bl	8003090 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009ec:	2004      	movs	r0, #4
 80009ee:	f001 f80f 	bl	8001a10 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <SystemClock_Config+0xec>)
 80009f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fa:	4a2f      	ldr	r2, [pc, #188]	; (8000ab8 <SystemClock_Config+0xec>)
 80009fc:	f023 0301 	bic.w	r3, r3, #1
 8000a00:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <SystemClock_Config+0xec>)
 8000a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <SystemClock_Config+0xf0>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a2a      	ldr	r2, [pc, #168]	; (8000abc <SystemClock_Config+0xf0>)
 8000a12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <SystemClock_Config+0xf0>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a24:	bf00      	nop
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <SystemClock_Config+0xf0>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a32:	d1f8      	bne.n	8000a26 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a34:	2301      	movs	r3, #1
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	2302      	movs	r3, #2
 8000a44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000a46:	2305      	movs	r3, #5
 8000a48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a4a:	23a0      	movs	r3, #160	; 0xa0
 8000a4c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 f82a 	bl	8001ac4 <HAL_RCC_OscConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a76:	f000 f953 	bl	8000d20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7a:	233f      	movs	r3, #63	; 0x3f
 8000a7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a86:	2308      	movs	r3, #8
 8000a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a8a:	2340      	movs	r3, #64	; 0x40
 8000a8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a8e:	2340      	movs	r3, #64	; 0x40
 8000a90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a98:	2340      	movs	r3, #64	; 0x40
 8000a9a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 fc1f 	bl	80022e4 <HAL_RCC_ClockConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000aac:	f000 f938 	bl	8000d20 <Error_Handler>
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	3770      	adds	r7, #112	; 0x70
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	58000400 	.word	0x58000400
 8000abc:	58024800 	.word	0x58024800

08000ac0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <MX_TIM1_Init+0xa0>)
 8000ae0:	4a20      	ldr	r2, [pc, #128]	; (8000b64 <MX_TIM1_Init+0xa4>)
 8000ae2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <MX_TIM1_Init+0xa0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_TIM1_Init+0xa0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_TIM1_Init+0xa0>)
 8000af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <MX_TIM1_Init+0xa0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_TIM1_Init+0xa0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_TIM1_Init+0xa0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b0a:	4815      	ldr	r0, [pc, #84]	; (8000b60 <MX_TIM1_Init+0xa0>)
 8000b0c:	f001 ff1a 	bl	8002944 <HAL_TIM_Base_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b16:	f000 f903 	bl	8000d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	4619      	mov	r1, r3
 8000b26:	480e      	ldr	r0, [pc, #56]	; (8000b60 <MX_TIM1_Init+0xa0>)
 8000b28:	f001 ffd4 	bl	8002ad4 <HAL_TIM_ConfigClockSource>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b32:	f000 f8f5 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_TIM1_Init+0xa0>)
 8000b48:	f002 f9f0 	bl	8002f2c <HAL_TIMEx_MasterConfigSynchronization>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b52:	f000 f8e5 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	3720      	adds	r7, #32
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	24000224 	.word	0x24000224
 8000b64:	40010000 	.word	0x40010000

08000b68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b90:	22a9      	movs	r2, #169	; 0xa9
 8000b92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967296-1;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bae:	4814      	ldr	r0, [pc, #80]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000bb0:	f001 fec8 	bl	8002944 <HAL_TIM_Base_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bba:	f000 f8b1 	bl	8000d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000bcc:	f001 ff82 	bl	8002ad4 <HAL_TIM_ConfigClockSource>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bd6:	f000 f8a3 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000be8:	f002 f9a0 	bl	8002f2c <HAL_TIMEx_MasterConfigSynchronization>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bf2:	f000 f895 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	3720      	adds	r7, #32
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	24000270 	.word	0x24000270

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1a:	4b3d      	ldr	r3, [pc, #244]	; (8000d10 <MX_GPIO_Init+0x10c>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	4a3b      	ldr	r2, [pc, #236]	; (8000d10 <MX_GPIO_Init+0x10c>)
 8000c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2a:	4b39      	ldr	r3, [pc, #228]	; (8000d10 <MX_GPIO_Init+0x10c>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c38:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <MX_GPIO_Init+0x10c>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	4a34      	ldr	r2, [pc, #208]	; (8000d10 <MX_GPIO_Init+0x10c>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c48:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <MX_GPIO_Init+0x10c>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <MX_GPIO_Init+0x10c>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	4a2c      	ldr	r2, [pc, #176]	; (8000d10 <MX_GPIO_Init+0x10c>)
 8000c5e:	f043 0308 	orr.w	r3, r3, #8
 8000c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c66:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <MX_GPIO_Init+0x10c>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6c:	f003 0308 	and.w	r3, r3, #8
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c74:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <MX_GPIO_Init+0x10c>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	4a25      	ldr	r2, [pc, #148]	; (8000d10 <MX_GPIO_Init+0x10c>)
 8000c7c:	f043 0310 	orr.w	r3, r3, #16
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <MX_GPIO_Init+0x10c>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	f003 0310 	and.w	r3, r3, #16
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c98:	481e      	ldr	r0, [pc, #120]	; (8000d14 <MX_GPIO_Init+0x110>)
 8000c9a:	f000 fe57 	bl	800194c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	21ff      	movs	r1, #255	; 0xff
 8000ca2:	481d      	ldr	r0, [pc, #116]	; (8000d18 <MX_GPIO_Init+0x114>)
 8000ca4:	f000 fe52 	bl	800194c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2101      	movs	r1, #1
 8000cac:	481b      	ldr	r0, [pc, #108]	; (8000d1c <MX_GPIO_Init+0x118>)
 8000cae:	f000 fe4d 	bl	800194c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000cb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4812      	ldr	r0, [pc, #72]	; (8000d14 <MX_GPIO_Init+0x110>)
 8000ccc:	f000 fc76 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cd0:	23ff      	movs	r3, #255	; 0xff
 8000cd2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480c      	ldr	r0, [pc, #48]	; (8000d18 <MX_GPIO_Init+0x114>)
 8000ce8:	f000 fc68 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cec:	2301      	movs	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	4806      	ldr	r0, [pc, #24]	; (8000d1c <MX_GPIO_Init+0x118>)
 8000d04:	f000 fc5a 	bl	80015bc <HAL_GPIO_Init>

}
 8000d08:	bf00      	nop
 8000d0a:	3728      	adds	r7, #40	; 0x28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	58024400 	.word	0x58024400
 8000d14:	58020400 	.word	0x58020400
 8000d18:	58020c00 	.word	0x58020c00
 8000d1c:	58021000 	.word	0x58021000

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <Error_Handler+0x8>
	...

08000d2c <five_ns_delay>:
//define the timer handler below
#define timer htim1

extern TIM_HandleTypeDef timer;
void five_ns_delay (int ns)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&timer, 0);	//clear timer
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <five_ns_delay+0x30>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&timer);	//start timer
 8000d3c:	4807      	ldr	r0, [pc, #28]	; (8000d5c <five_ns_delay+0x30>)
 8000d3e:	f001 fe59 	bl	80029f4 <HAL_TIM_Base_Start_IT>
	while (__HAL_TIM_GET_COUNTER(&timer) < ns);
 8000d42:	bf00      	nop
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <five_ns_delay+0x30>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d3f9      	bcc.n	8000d44 <five_ns_delay+0x18>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	24000224 	.word	0x24000224

08000d60 <send_to_lcd>:

void send_to_lcd (char data, int rs)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  //rs = 1 for data, rs = 0 for command
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	461a      	mov	r2, r3
 8000d72:	2102      	movs	r1, #2
 8000d74:	4819      	ldr	r0, [pc, #100]	; (8000ddc <send_to_lcd+0x7c>)
 8000d76:	f000 fde9 	bl	800194c <HAL_GPIO_WritePin>

	// write the data to the respective pin
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	08db      	lsrs	r3, r3, #3
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	461a      	mov	r2, r3
 8000d88:	2180      	movs	r1, #128	; 0x80
 8000d8a:	4814      	ldr	r0, [pc, #80]	; (8000ddc <send_to_lcd+0x7c>)
 8000d8c:	f000 fdde 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	2140      	movs	r1, #64	; 0x40
 8000da0:	480e      	ldr	r0, [pc, #56]	; (8000ddc <send_to_lcd+0x7c>)
 8000da2:	f000 fdd3 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	085b      	lsrs	r3, r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	2120      	movs	r1, #32
 8000db6:	4809      	ldr	r0, [pc, #36]	; (8000ddc <send_to_lcd+0x7c>)
 8000db8:	f000 fdc8 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	2110      	movs	r1, #16
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <send_to_lcd+0x7c>)
 8000dca:	f000 fdbf 	bl	800194c <HAL_GPIO_WritePin>

	lcd_nibble();	//pulse LCD enable pin to initiate data transfer
 8000dce:	f000 f8cf 	bl	8000f70 <lcd_nibble>
	//HAL_Delay(1);  	//wait for 1 ms while the enable pin settles

    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //debugging LED
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	58020c00 	.word	0x58020c00

08000de0 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    //send upper nibble first
    datatosend = ((cmd>>4)&0x0f);
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	091b      	lsrs	r3, r3, #4
 8000dee:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ffb3 	bl	8000d60 <send_to_lcd>

    //send lower nibble
    datatosend = ((cmd)&0x0f);
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 030f 	and.w	r3, r3, #15
 8000e00:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  //RS must be 0 while sending command
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ffaa 	bl	8000d60 <send_to_lcd>

    HAL_Delay(2);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f000 fac1 	bl	8001394 <HAL_Delay>
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <lcd_send_data>:

void lcd_send_data (char data)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	71fb      	strb	r3, [r7, #7]
	char datatosend;

    //send upper nibble first
    datatosend = ((data>>4)&0x0f);
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff96 	bl	8000d60 <send_to_lcd>

    //send lower nibble
    datatosend = ((data)&0x0f);
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,1);  //RS must be 1 while sending data
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff8d 	bl	8000d60 <send_to_lcd>

    HAL_Delay(2);
 8000e46:	2002      	movs	r0, #2
 8000e48:	f000 faa4 	bl	8001394 <HAL_Delay>
}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <lcd_clear>:

void lcd_clear (void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f7ff ffc1 	bl	8000de0 <lcd_send_cmd>
	HAL_Delay(2);
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f000 fa98 	bl	8001394 <HAL_Delay>
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <lcd_put_cur>:

void lcd_put_cur(int row, int col) //fix for 4x20 LCD !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d81f      	bhi.n	8000eb8 <lcd_put_cur+0x50>
 8000e78:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <lcd_put_cur+0x18>)
 8000e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7e:	bf00      	nop
 8000e80:	08000e91 	.word	0x08000e91
 8000e84:	08000e9b 	.word	0x08000e9b
 8000e88:	08000ea5 	.word	0x08000ea5
 8000e8c:	08000eaf 	.word	0x08000eaf
    switch (row)
    {
        case 0:
            col |= 0x80;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e96:	603b      	str	r3, [r7, #0]
            break;
 8000e98:	e00e      	b.n	8000eb8 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000ea0:	603b      	str	r3, [r7, #0]
            break;
 8000ea2:	e009      	b.n	8000eb8 <lcd_put_cur+0x50>
        case 2:
            col |= 0x40;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eaa:	603b      	str	r3, [r7, #0]
            break;
 8000eac:	e004      	b.n	8000eb8 <lcd_put_cur+0x50>
        case 3:
            col |= 0xF0;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000eb4:	603b      	str	r3, [r7, #0]
            break;
 8000eb6:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff8f 	bl	8000de0 <lcd_send_cmd>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop

08000ecc <nhd_LCD_Init>:


void nhd_LCD_Init (void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	//4 bit initialization
	HAL_Delay(50);  //wait for >40ms
 8000ed0:	2032      	movs	r0, #50	; 0x32
 8000ed2:	f000 fa5f 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ed6:	2030      	movs	r0, #48	; 0x30
 8000ed8:	f7ff ff82 	bl	8000de0 <lcd_send_cmd>
	HAL_Delay(5);  //wait for >4.1ms
 8000edc:	2005      	movs	r0, #5
 8000ede:	f000 fa59 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ee2:	2030      	movs	r0, #48	; 0x30
 8000ee4:	f7ff ff7c 	bl	8000de0 <lcd_send_cmd>
	HAL_Delay(1);  //wait for >100us
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f000 fa53 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000eee:	2030      	movs	r0, #48	; 0x30
 8000ef0:	f7ff ff76 	bl	8000de0 <lcd_send_cmd>
	HAL_Delay(10);
 8000ef4:	200a      	movs	r0, #10
 8000ef6:	f000 fa4d 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x20);  //4bit mode
 8000efa:	2020      	movs	r0, #32
 8000efc:	f7ff ff70 	bl	8000de0 <lcd_send_cmd>
	HAL_Delay(10);
 8000f00:	200a      	movs	r0, #10
 8000f02:	f000 fa47 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	HAL_Delay(1);
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
	*/

	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000f06:	2028      	movs	r0, #40	; 0x28
 8000f08:	f7ff ff6a 	bl	8000de0 <lcd_send_cmd>
	HAL_Delay(1);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f000 fa41 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000f12:	2008      	movs	r0, #8
 8000f14:	f7ff ff64 	bl	8000de0 <lcd_send_cmd>
	HAL_Delay(1);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f000 fa3b 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f7ff ff5e 	bl	8000de0 <lcd_send_cmd>
	HAL_Delay(1);
 8000f24:	2001      	movs	r0, #1
 8000f26:	f000 fa35 	bl	8001394 <HAL_Delay>
	HAL_Delay(1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f000 fa32 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000f30:	2006      	movs	r0, #6
 8000f32:	f7ff ff55 	bl	8000de0 <lcd_send_cmd>
	HAL_Delay(1);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 fa2c 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000f3c:	200c      	movs	r0, #12
 8000f3e:	f7ff ff4f 	bl	8000de0 <lcd_send_cmd>


}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000f4e:	e006      	b.n	8000f5e <lcd_send_string+0x18>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5e 	bl	8000e1a <lcd_send_data>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f4      	bne.n	8000f50 <lcd_send_string+0xa>
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <lcd_nibble>:

void lcd_nibble() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2108      	movs	r1, #8
 8000f78:	4806      	ldr	r0, [pc, #24]	; (8000f94 <lcd_nibble+0x24>)
 8000f7a:	f000 fce7 	bl	800194c <HAL_GPIO_WritePin>
	five_ns_delay(65);								//325ns enable pulse width delay
 8000f7e:	2041      	movs	r0, #65	; 0x41
 8000f80:	f7ff fed4 	bl	8000d2c <five_ns_delay>
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); 	//debugging LED
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2108      	movs	r1, #8
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <lcd_nibble+0x24>)
 8000f8a:	f000 fcdf 	bl	800194c <HAL_GPIO_WritePin>
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	58020c00 	.word	0x58020c00

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_MspInit+0x30>)
 8000fa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fa4:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_MspInit+0x30>)
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_MspInit+0x30>)
 8000fb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	58024400 	.word	0x58024400

08000fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a16      	ldr	r2, [pc, #88]	; (8001034 <HAL_TIM_Base_MspInit+0x68>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d10f      	bne.n	8000ffe <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_TIM_Base_MspInit+0x6c>)
 8000fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fe4:	4a14      	ldr	r2, [pc, #80]	; (8001038 <HAL_TIM_Base_MspInit+0x6c>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_TIM_Base_MspInit+0x6c>)
 8000ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ffc:	e013      	b.n	8001026 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001006:	d10e      	bne.n	8001026 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_TIM_Base_MspInit+0x6c>)
 800100a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_TIM_Base_MspInit+0x6c>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <HAL_TIM_Base_MspInit+0x6c>)
 800101a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40010000 	.word	0x40010000
 8001038:	58024400 	.word	0x58024400

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <NMI_Handler+0x4>

08001042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <HardFault_Handler+0x4>

08001048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <MemManage_Handler+0x4>

0800104e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <UsageFault_Handler+0x4>

0800105a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001088:	f000 f964 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
	return 1;
 8001094:	2301      	movs	r3, #1
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_kill>:

int _kill(int pid, int sig)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010aa:	f001 ffc7 	bl	800303c <__errno>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2216      	movs	r2, #22
 80010b2:	601a      	str	r2, [r3, #0]
	return -1;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <_exit>:

void _exit (int status)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ffe7 	bl	80010a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010d2:	e7fe      	b.n	80010d2 <_exit+0x12>

080010d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	e00a      	b.n	80010fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010e6:	f3af 8000 	nop.w
 80010ea:	4601      	mov	r1, r0
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	60ba      	str	r2, [r7, #8]
 80010f2:	b2ca      	uxtb	r2, r1
 80010f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	3301      	adds	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	dbf0      	blt.n	80010e6 <_read+0x12>
	}

return len;
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	e009      	b.n	8001134 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	60ba      	str	r2, [r7, #8]
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3301      	adds	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	429a      	cmp	r2, r3
 800113a:	dbf1      	blt.n	8001120 <_write+0x12>
	}
	return len;
 800113c:	687b      	ldr	r3, [r7, #4]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <_close>:

int _close(int file)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	return -1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800116e:	605a      	str	r2, [r3, #4]
	return 0;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <_isatty>:

int _isatty(int file)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
	return 1;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
	return 0;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <_sbrk+0x5c>)
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <_sbrk+0x60>)
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <_sbrk+0x64>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <_sbrk+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d207      	bcs.n	80011f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e0:	f001 ff2c 	bl	800303c <__errno>
 80011e4:	4603      	mov	r3, r0
 80011e6:	220c      	movs	r2, #12
 80011e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	e009      	b.n	8001204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <_sbrk+0x64>)
 8001200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	24080000 	.word	0x24080000
 8001210:	00000400 	.word	0x00000400
 8001214:	24000200 	.word	0x24000200
 8001218:	240002d0 	.word	0x240002d0

0800121c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800121c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001254 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001220:	f7ff f8b6 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001226:	490d      	ldr	r1, [pc, #52]	; (800125c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800122c:	e002      	b.n	8001234 <LoopCopyDataInit>

0800122e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001232:	3304      	adds	r3, #4

08001234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001238:	d3f9      	bcc.n	800122e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800123c:	4c0a      	ldr	r4, [pc, #40]	; (8001268 <LoopFillZerobss+0x22>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001240:	e001      	b.n	8001246 <LoopFillZerobss>

08001242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001244:	3204      	adds	r2, #4

08001246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001248:	d3fb      	bcc.n	8001242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800124a:	f001 fefd 	bl	8003048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124e:	f7ff fadb 	bl	8000808 <main>
  bx  lr
 8001252:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001254:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001258:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800125c:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001260:	080060dc 	.word	0x080060dc
  ldr r2, =_sbss
 8001264:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001268:	240002d0 	.word	0x240002d0

0800126c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC3_IRQHandler>
	...

08001270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001276:	2003      	movs	r0, #3
 8001278:	f000 f96e 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800127c:	f001 f9e8 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 8001280:	4602      	mov	r2, r0
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_Init+0x68>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	0a1b      	lsrs	r3, r3, #8
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	4913      	ldr	r1, [pc, #76]	; (80012dc <HAL_Init+0x6c>)
 800128e:	5ccb      	ldrb	r3, [r1, r3]
 8001290:	f003 031f 	and.w	r3, r3, #31
 8001294:	fa22 f303 	lsr.w	r3, r2, r3
 8001298:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <HAL_Init+0x68>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <HAL_Init+0x6c>)
 80012a4:	5cd3      	ldrb	r3, [r2, r3]
 80012a6:	f003 031f 	and.w	r3, r3, #31
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <HAL_Init+0x70>)
 80012b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012b4:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <HAL_Init+0x74>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ba:	2000      	movs	r0, #0
 80012bc:	f000 f814 	bl	80012e8 <HAL_InitTick>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e002      	b.n	80012d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012ca:	f7ff fe65 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	58024400 	.word	0x58024400
 80012dc:	08005ce4 	.word	0x08005ce4
 80012e0:	24000004 	.word	0x24000004
 80012e4:	24000000 	.word	0x24000000

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_InitTick+0x60>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e021      	b.n	8001340 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_InitTick+0x64>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_InitTick+0x60>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f945 	bl	80015a2 <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f000 f91d 	bl	800156e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <HAL_InitTick+0x68>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	2400000c 	.word	0x2400000c
 800134c:	24000000 	.word	0x24000000
 8001350:	24000008 	.word	0x24000008

08001354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	2400000c 	.word	0x2400000c
 8001378:	240002bc 	.word	0x240002bc

0800137c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	240002bc 	.word	0x240002bc

08001394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff ffee 	bl	800137c <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ba:	bf00      	nop
 80013bc:	f7ff ffde 	bl	800137c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2400000c 	.word	0x2400000c

080013dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <HAL_GetREVID+0x14>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	0c1b      	lsrs	r3, r3, #16
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	5c001000 	.word	0x5c001000

080013f4 <__NVIC_SetPriorityGrouping>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <__NVIC_SetPriorityGrouping+0x40>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	4313      	orrs	r3, r2
 8001420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001422:	4a04      	ldr	r2, [pc, #16]	; (8001434 <__NVIC_SetPriorityGrouping+0x40>)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	60d3      	str	r3, [r2, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00
 8001438:	05fa0000 	.word	0x05fa0000

0800143c <__NVIC_GetPriorityGrouping>:
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_SetPriority>:
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001464:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db0a      	blt.n	8001482 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	490c      	ldr	r1, [pc, #48]	; (80014a4 <__NVIC_SetPriority+0x4c>)
 8001472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	440b      	add	r3, r1
 800147c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001480:	e00a      	b.n	8001498 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4908      	ldr	r1, [pc, #32]	; (80014a8 <__NVIC_SetPriority+0x50>)
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	3b04      	subs	r3, #4
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	440b      	add	r3, r1
 8001496:	761a      	strb	r2, [r3, #24]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <NVIC_EncodePriority>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f1c3 0307 	rsb	r3, r3, #7
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	bf28      	it	cs
 80014ca:	2304      	movcs	r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d902      	bls.n	80014dc <NVIC_EncodePriority+0x30>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3b03      	subs	r3, #3
 80014da:	e000      	b.n	80014de <NVIC_EncodePriority+0x32>
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43d9      	mvns	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	4313      	orrs	r3, r2
}
 8001506:	4618      	mov	r0, r3
 8001508:	3724      	adds	r7, #36	; 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001524:	d301      	bcc.n	800152a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001526:	2301      	movs	r3, #1
 8001528:	e00f      	b.n	800154a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <SysTick_Config+0x40>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001532:	210f      	movs	r1, #15
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f7ff ff8e 	bl	8001458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SysTick_Config+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <SysTick_Config+0x40>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010

08001558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff47 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800157c:	f7ff ff5e 	bl	800143c <__NVIC_GetPriorityGrouping>
 8001580:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	6978      	ldr	r0, [r7, #20]
 8001588:	f7ff ff90 	bl	80014ac <NVIC_EncodePriority>
 800158c:	4602      	mov	r2, r0
 800158e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff5f 	bl	8001458 <__NVIC_SetPriority>
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ffb2 	bl	8001514 <SysTick_Config>
 80015b0:	4603      	mov	r3, r0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80015ca:	4b89      	ldr	r3, [pc, #548]	; (80017f0 <HAL_GPIO_Init+0x234>)
 80015cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015ce:	e194      	b.n	80018fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2101      	movs	r1, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8186 	beq.w	80018f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d00b      	beq.n	8001608 <HAL_GPIO_Init+0x4c>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d007      	beq.n	8001608 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015fc:	2b11      	cmp	r3, #17
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b12      	cmp	r3, #18
 8001606:	d130      	bne.n	800166a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800163e:	2201      	movs	r2, #1
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	f003 0201 	and.w	r2, r3, #1
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	2203      	movs	r2, #3
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0xee>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b12      	cmp	r3, #18
 80016a8:	d123      	bne.n	80016f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	08da      	lsrs	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3208      	adds	r2, #8
 80016b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	220f      	movs	r2, #15
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	08da      	lsrs	r2, r3, #3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3208      	adds	r2, #8
 80016ec:	69b9      	ldr	r1, [r7, #24]
 80016ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	2203      	movs	r2, #3
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0203 	and.w	r2, r3, #3
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 80e0 	beq.w	80018f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001734:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <HAL_GPIO_Init+0x238>)
 8001736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800173a:	4a2e      	ldr	r2, [pc, #184]	; (80017f4 <HAL_GPIO_Init+0x238>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001744:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <HAL_GPIO_Init+0x238>)
 8001746:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001752:	4a29      	ldr	r2, [pc, #164]	; (80017f8 <HAL_GPIO_Init+0x23c>)
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	089b      	lsrs	r3, r3, #2
 8001758:	3302      	adds	r3, #2
 800175a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	220f      	movs	r2, #15
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a20      	ldr	r2, [pc, #128]	; (80017fc <HAL_GPIO_Init+0x240>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d052      	beq.n	8001824 <HAL_GPIO_Init+0x268>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a1f      	ldr	r2, [pc, #124]	; (8001800 <HAL_GPIO_Init+0x244>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d031      	beq.n	80017ea <HAL_GPIO_Init+0x22e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <HAL_GPIO_Init+0x248>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d02b      	beq.n	80017e6 <HAL_GPIO_Init+0x22a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <HAL_GPIO_Init+0x24c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d025      	beq.n	80017e2 <HAL_GPIO_Init+0x226>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a1c      	ldr	r2, [pc, #112]	; (800180c <HAL_GPIO_Init+0x250>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d01f      	beq.n	80017de <HAL_GPIO_Init+0x222>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <HAL_GPIO_Init+0x254>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d019      	beq.n	80017da <HAL_GPIO_Init+0x21e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a1a      	ldr	r2, [pc, #104]	; (8001814 <HAL_GPIO_Init+0x258>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d013      	beq.n	80017d6 <HAL_GPIO_Init+0x21a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a19      	ldr	r2, [pc, #100]	; (8001818 <HAL_GPIO_Init+0x25c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d00d      	beq.n	80017d2 <HAL_GPIO_Init+0x216>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a18      	ldr	r2, [pc, #96]	; (800181c <HAL_GPIO_Init+0x260>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d007      	beq.n	80017ce <HAL_GPIO_Init+0x212>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a17      	ldr	r2, [pc, #92]	; (8001820 <HAL_GPIO_Init+0x264>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d101      	bne.n	80017ca <HAL_GPIO_Init+0x20e>
 80017c6:	2309      	movs	r3, #9
 80017c8:	e02d      	b.n	8001826 <HAL_GPIO_Init+0x26a>
 80017ca:	230a      	movs	r3, #10
 80017cc:	e02b      	b.n	8001826 <HAL_GPIO_Init+0x26a>
 80017ce:	2308      	movs	r3, #8
 80017d0:	e029      	b.n	8001826 <HAL_GPIO_Init+0x26a>
 80017d2:	2307      	movs	r3, #7
 80017d4:	e027      	b.n	8001826 <HAL_GPIO_Init+0x26a>
 80017d6:	2306      	movs	r3, #6
 80017d8:	e025      	b.n	8001826 <HAL_GPIO_Init+0x26a>
 80017da:	2305      	movs	r3, #5
 80017dc:	e023      	b.n	8001826 <HAL_GPIO_Init+0x26a>
 80017de:	2304      	movs	r3, #4
 80017e0:	e021      	b.n	8001826 <HAL_GPIO_Init+0x26a>
 80017e2:	2303      	movs	r3, #3
 80017e4:	e01f      	b.n	8001826 <HAL_GPIO_Init+0x26a>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e01d      	b.n	8001826 <HAL_GPIO_Init+0x26a>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e01b      	b.n	8001826 <HAL_GPIO_Init+0x26a>
 80017ee:	bf00      	nop
 80017f0:	58000080 	.word	0x58000080
 80017f4:	58024400 	.word	0x58024400
 80017f8:	58000400 	.word	0x58000400
 80017fc:	58020000 	.word	0x58020000
 8001800:	58020400 	.word	0x58020400
 8001804:	58020800 	.word	0x58020800
 8001808:	58020c00 	.word	0x58020c00
 800180c:	58021000 	.word	0x58021000
 8001810:	58021400 	.word	0x58021400
 8001814:	58021800 	.word	0x58021800
 8001818:	58021c00 	.word	0x58021c00
 800181c:	58022000 	.word	0x58022000
 8001820:	58022400 	.word	0x58022400
 8001824:	2300      	movs	r3, #0
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	f002 0203 	and.w	r2, r2, #3
 800182c:	0092      	lsls	r2, r2, #2
 800182e:	4093      	lsls	r3, r2
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001836:	4938      	ldr	r1, [pc, #224]	; (8001918 <HAL_GPIO_Init+0x35c>)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	3301      	adds	r3, #1
 80018f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	f47f ae63 	bne.w	80015d0 <HAL_GPIO_Init+0x14>
  }
}
 800190a:	bf00      	nop
 800190c:	bf00      	nop
 800190e:	3724      	adds	r7, #36	; 0x24
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	58000400 	.word	0x58000400

0800191c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e001      	b.n	800193e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
 8001958:	4613      	mov	r3, r2
 800195a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800195c:	787b      	ldrb	r3, [r7, #1]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001962:	887a      	ldrh	r2, [r7, #2]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001968:	e003      	b.n	8001972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800196a:	887b      	ldrh	r3, [r7, #2]
 800196c:	041a      	lsls	r2, r3, #16
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	619a      	str	r2, [r3, #24]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800197e:	b480      	push	{r7}
 8001980:	b085      	sub	sp, #20
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001990:	887a      	ldrh	r2, [r7, #2]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4013      	ands	r3, r2
 8001996:	041a      	lsls	r2, r3, #16
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	43d9      	mvns	r1, r3
 800199c:	887b      	ldrh	r3, [r7, #2]
 800199e:	400b      	ands	r3, r1
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	619a      	str	r2, [r3, #24]
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80019bc:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <HAL_HSEM_FastTake+0x2c>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3320      	adds	r3, #32
 80019c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c6:	4a07      	ldr	r2, [pc, #28]	; (80019e4 <HAL_HSEM_FastTake+0x30>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d101      	bne.n	80019d0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e000      	b.n	80019d2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	58026400 	.word	0x58026400
 80019e4:	80000300 	.word	0x80000300

080019e8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80019f2:	4906      	ldr	r1, [pc, #24]	; (8001a0c <HAL_HSEM_Release+0x24>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	58026400 	.word	0x58026400

08001a10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001a18:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	2b06      	cmp	r3, #6
 8001a22:	d00a      	beq.n	8001a3a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a24:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d001      	beq.n	8001a36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e040      	b.n	8001ab8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e03e      	b.n	8001ab8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001a42:	491f      	ldr	r1, [pc, #124]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a4a:	f7ff fc97 	bl	800137c <HAL_GetTick>
 8001a4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a50:	e009      	b.n	8001a66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a52:	f7ff fc93 	bl	800137c <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a60:	d901      	bls.n	8001a66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e028      	b.n	8001ab8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a72:	d1ee      	bne.n	8001a52 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b1e      	cmp	r3, #30
 8001a78:	d008      	beq.n	8001a8c <HAL_PWREx_ConfigSupply+0x7c>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8001a7e:	d005      	beq.n	8001a8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b1d      	cmp	r3, #29
 8001a84:	d002      	beq.n	8001a8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b2d      	cmp	r3, #45	; 0x2d
 8001a8a:	d114      	bne.n	8001ab6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001a8c:	f7ff fc76 	bl	800137c <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a92:	e009      	b.n	8001aa8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a94:	f7ff fc72 	bl	800137c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aa2:	d901      	bls.n	8001aa8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e007      	b.n	8001ab8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab4:	d1ee      	bne.n	8001a94 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	58024800 	.word	0x58024800

08001ac4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08c      	sub	sp, #48	; 0x30
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e3ff      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8087 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ae4:	4b99      	ldr	r3, [pc, #612]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001aee:	4b97      	ldr	r3, [pc, #604]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af6:	2b10      	cmp	r3, #16
 8001af8:	d007      	beq.n	8001b0a <HAL_RCC_OscConfig+0x46>
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	2b18      	cmp	r3, #24
 8001afe:	d110      	bne.n	8001b22 <HAL_RCC_OscConfig+0x5e>
 8001b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d10b      	bne.n	8001b22 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0a:	4b90      	ldr	r3, [pc, #576]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d06c      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x12c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d168      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e3d9      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x76>
 8001b2c:	4b87      	ldr	r3, [pc, #540]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a86      	ldr	r2, [pc, #536]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	e02e      	b.n	8001b98 <HAL_RCC_OscConfig+0xd4>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x98>
 8001b42:	4b82      	ldr	r3, [pc, #520]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a81      	ldr	r2, [pc, #516]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	4b7f      	ldr	r3, [pc, #508]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a7e      	ldr	r2, [pc, #504]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e01d      	b.n	8001b98 <HAL_RCC_OscConfig+0xd4>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0xbc>
 8001b66:	4b79      	ldr	r3, [pc, #484]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a78      	ldr	r2, [pc, #480]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b76      	ldr	r3, [pc, #472]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a75      	ldr	r2, [pc, #468]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e00b      	b.n	8001b98 <HAL_RCC_OscConfig+0xd4>
 8001b80:	4b72      	ldr	r3, [pc, #456]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a71      	ldr	r2, [pc, #452]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a6e      	ldr	r2, [pc, #440]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d013      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fbec 	bl	800137c <HAL_GetTick>
 8001ba4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fbe8 	bl	800137c <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e38d      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bba:	4b64      	ldr	r3, [pc, #400]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0xe4>
 8001bc6:	e014      	b.n	8001bf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fbd8 	bl	800137c <HAL_GetTick>
 8001bcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fbd4 	bl	800137c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e379      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001be2:	4b5a      	ldr	r3, [pc, #360]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x10c>
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 80ae 	beq.w	8001d5c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c00:	4b52      	ldr	r3, [pc, #328]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c08:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c0a:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d007      	beq.n	8001c26 <HAL_RCC_OscConfig+0x162>
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	2b18      	cmp	r3, #24
 8001c1a:	d13a      	bne.n	8001c92 <HAL_RCC_OscConfig+0x1ce>
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d135      	bne.n	8001c92 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c26:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x17a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e34b      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	f7ff fbcd 	bl	80013dc <HAL_GetREVID>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d817      	bhi.n	8001c7c <HAL_RCC_OscConfig+0x1b8>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	2b40      	cmp	r3, #64	; 0x40
 8001c52:	d108      	bne.n	8001c66 <HAL_RCC_OscConfig+0x1a2>
 8001c54:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c5c:	4a3b      	ldr	r2, [pc, #236]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c62:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c64:	e07a      	b.n	8001d5c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	031b      	lsls	r3, r3, #12
 8001c74:	4935      	ldr	r1, [pc, #212]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c7a:	e06f      	b.n	8001d5c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b33      	ldr	r3, [pc, #204]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	4930      	ldr	r1, [pc, #192]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c90:	e064      	b.n	8001d5c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d045      	beq.n	8001d26 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c9a:	4b2c      	ldr	r3, [pc, #176]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 0219 	bic.w	r2, r3, #25
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	4929      	ldr	r1, [pc, #164]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7ff fb66 	bl	800137c <HAL_GetTick>
 8001cb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fb62 	bl	800137c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e307      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cc6:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd2:	f7ff fb83 	bl	80013dc <HAL_GetREVID>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f241 0203 	movw	r2, #4099	; 0x1003
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d817      	bhi.n	8001d10 <HAL_RCC_OscConfig+0x24c>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	2b40      	cmp	r3, #64	; 0x40
 8001ce6:	d108      	bne.n	8001cfa <HAL_RCC_OscConfig+0x236>
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001cf0:	4a16      	ldr	r2, [pc, #88]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf6:	6053      	str	r3, [r2, #4]
 8001cf8:	e030      	b.n	8001d5c <HAL_RCC_OscConfig+0x298>
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	031b      	lsls	r3, r3, #12
 8001d08:	4910      	ldr	r1, [pc, #64]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
 8001d0e:	e025      	b.n	8001d5c <HAL_RCC_OscConfig+0x298>
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	061b      	lsls	r3, r3, #24
 8001d1e:	490b      	ldr	r1, [pc, #44]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
 8001d24:	e01a      	b.n	8001d5c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a08      	ldr	r2, [pc, #32]	; (8001d4c <HAL_RCC_OscConfig+0x288>)
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d32:	f7ff fb23 	bl	800137c <HAL_GetTick>
 8001d36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d38:	e00a      	b.n	8001d50 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d3a:	f7ff fb1f 	bl	800137c <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d903      	bls.n	8001d50 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e2c4      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
 8001d4c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d50:	4ba4      	ldr	r3, [pc, #656]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1ee      	bne.n	8001d3a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80a9 	beq.w	8001ebc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d6a:	4b9e      	ldr	r3, [pc, #632]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d72:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d74:	4b9b      	ldr	r3, [pc, #620]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d78:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d007      	beq.n	8001d90 <HAL_RCC_OscConfig+0x2cc>
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2b18      	cmp	r3, #24
 8001d84:	d13a      	bne.n	8001dfc <HAL_RCC_OscConfig+0x338>
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d135      	bne.n	8001dfc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d90:	4b94      	ldr	r3, [pc, #592]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_OscConfig+0x2e4>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	2b80      	cmp	r3, #128	; 0x80
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e296      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001da8:	f7ff fb18 	bl	80013dc <HAL_GetREVID>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f241 0203 	movw	r2, #4099	; 0x1003
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d817      	bhi.n	8001de6 <HAL_RCC_OscConfig+0x322>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	d108      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x30c>
 8001dbe:	4b89      	ldr	r3, [pc, #548]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001dc6:	4a87      	ldr	r2, [pc, #540]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001dc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001dcc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dce:	e075      	b.n	8001ebc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dd0:	4b84      	ldr	r3, [pc, #528]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	069b      	lsls	r3, r3, #26
 8001dde:	4981      	ldr	r1, [pc, #516]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001de4:	e06a      	b.n	8001ebc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001de6:	4b7f      	ldr	r3, [pc, #508]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	061b      	lsls	r3, r3, #24
 8001df4:	497b      	ldr	r1, [pc, #492]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dfa:	e05f      	b.n	8001ebc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d042      	beq.n	8001e8a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e04:	4b77      	ldr	r3, [pc, #476]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a76      	ldr	r2, [pc, #472]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff fab4 	bl	800137c <HAL_GetTick>
 8001e14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e18:	f7ff fab0 	bl	800137c <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e255      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e2a:	4b6e      	ldr	r3, [pc, #440]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e36:	f7ff fad1 	bl	80013dc <HAL_GetREVID>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d817      	bhi.n	8001e74 <HAL_RCC_OscConfig+0x3b0>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	d108      	bne.n	8001e5e <HAL_RCC_OscConfig+0x39a>
 8001e4c:	4b65      	ldr	r3, [pc, #404]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001e54:	4a63      	ldr	r2, [pc, #396]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001e56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e5a:	6053      	str	r3, [r2, #4]
 8001e5c:	e02e      	b.n	8001ebc <HAL_RCC_OscConfig+0x3f8>
 8001e5e:	4b61      	ldr	r3, [pc, #388]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	069b      	lsls	r3, r3, #26
 8001e6c:	495d      	ldr	r1, [pc, #372]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
 8001e72:	e023      	b.n	8001ebc <HAL_RCC_OscConfig+0x3f8>
 8001e74:	4b5b      	ldr	r3, [pc, #364]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	061b      	lsls	r3, r3, #24
 8001e82:	4958      	ldr	r1, [pc, #352]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	60cb      	str	r3, [r1, #12]
 8001e88:	e018      	b.n	8001ebc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e8a:	4b56      	ldr	r3, [pc, #344]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a55      	ldr	r2, [pc, #340]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7ff fa71 	bl	800137c <HAL_GetTick>
 8001e9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e9e:	f7ff fa6d 	bl	800137c <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e212      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001eb0:	4b4c      	ldr	r3, [pc, #304]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f0      	bne.n	8001e9e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d036      	beq.n	8001f36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d019      	beq.n	8001f04 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed0:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed4:	4a43      	ldr	r2, [pc, #268]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001edc:	f7ff fa4e 	bl	800137c <HAL_GetTick>
 8001ee0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fa4a 	bl	800137c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e1ef      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x420>
 8001f02:	e018      	b.n	8001f36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f04:	4b37      	ldr	r3, [pc, #220]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f08:	4a36      	ldr	r2, [pc, #216]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001f0a:	f023 0301 	bic.w	r3, r3, #1
 8001f0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f10:	f7ff fa34 	bl	800137c <HAL_GetTick>
 8001f14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f18:	f7ff fa30 	bl	800137c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e1d5      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f2a:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d036      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d019      	beq.n	8001f7e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a25      	ldr	r2, [pc, #148]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001f50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f56:	f7ff fa11 	bl	800137c <HAL_GetTick>
 8001f5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f5e:	f7ff fa0d 	bl	800137c <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e1b2      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f70:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x49a>
 8001f7c:	e018      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a18      	ldr	r2, [pc, #96]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001f84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f8a:	f7ff f9f7 	bl	800137c <HAL_GetTick>
 8001f8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f92:	f7ff f9f3 	bl	800137c <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e198      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_RCC_OscConfig+0x520>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f0      	bne.n	8001f92 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8085 	beq.w	80020c8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_RCC_OscConfig+0x524>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <HAL_RCC_OscConfig+0x524>)
 8001fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fca:	f7ff f9d7 	bl	800137c <HAL_GetTick>
 8001fce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fd0:	e00c      	b.n	8001fec <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001fd2:	f7ff f9d3 	bl	800137c <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b64      	cmp	r3, #100	; 0x64
 8001fde:	d905      	bls.n	8001fec <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e178      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
 8001fe4:	58024400 	.word	0x58024400
 8001fe8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fec:	4b96      	ldr	r3, [pc, #600]	; (8002248 <HAL_RCC_OscConfig+0x784>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0ec      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d106      	bne.n	800200e <HAL_RCC_OscConfig+0x54a>
 8002000:	4b92      	ldr	r3, [pc, #584]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	4a91      	ldr	r2, [pc, #580]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6713      	str	r3, [r2, #112]	; 0x70
 800200c:	e02d      	b.n	800206a <HAL_RCC_OscConfig+0x5a6>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0x56c>
 8002016:	4b8d      	ldr	r3, [pc, #564]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	4a8c      	ldr	r2, [pc, #560]	; (800224c <HAL_RCC_OscConfig+0x788>)
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	6713      	str	r3, [r2, #112]	; 0x70
 8002022:	4b8a      	ldr	r3, [pc, #552]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	4a89      	ldr	r2, [pc, #548]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002028:	f023 0304 	bic.w	r3, r3, #4
 800202c:	6713      	str	r3, [r2, #112]	; 0x70
 800202e:	e01c      	b.n	800206a <HAL_RCC_OscConfig+0x5a6>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b05      	cmp	r3, #5
 8002036:	d10c      	bne.n	8002052 <HAL_RCC_OscConfig+0x58e>
 8002038:	4b84      	ldr	r3, [pc, #528]	; (800224c <HAL_RCC_OscConfig+0x788>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203c:	4a83      	ldr	r2, [pc, #524]	; (800224c <HAL_RCC_OscConfig+0x788>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6713      	str	r3, [r2, #112]	; 0x70
 8002044:	4b81      	ldr	r3, [pc, #516]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	4a80      	ldr	r2, [pc, #512]	; (800224c <HAL_RCC_OscConfig+0x788>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6713      	str	r3, [r2, #112]	; 0x70
 8002050:	e00b      	b.n	800206a <HAL_RCC_OscConfig+0x5a6>
 8002052:	4b7e      	ldr	r3, [pc, #504]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	4a7d      	ldr	r2, [pc, #500]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	6713      	str	r3, [r2, #112]	; 0x70
 800205e:	4b7b      	ldr	r3, [pc, #492]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	4a7a      	ldr	r2, [pc, #488]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d015      	beq.n	800209e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7ff f983 	bl	800137c <HAL_GetTick>
 8002076:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7ff f97f 	bl	800137c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e122      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002090:	4b6e      	ldr	r3, [pc, #440]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0ee      	beq.n	800207a <HAL_RCC_OscConfig+0x5b6>
 800209c:	e014      	b.n	80020c8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209e:	f7ff f96d 	bl	800137c <HAL_GetTick>
 80020a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7ff f969 	bl	800137c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e10c      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020bc:	4b63      	ldr	r3, [pc, #396]	; (800224c <HAL_RCC_OscConfig+0x788>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1ee      	bne.n	80020a6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 8101 	beq.w	80022d4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80020d2:	4b5e      	ldr	r3, [pc, #376]	; (800224c <HAL_RCC_OscConfig+0x788>)
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020da:	2b18      	cmp	r3, #24
 80020dc:	f000 80bc 	beq.w	8002258 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	f040 8095 	bne.w	8002214 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ea:	4b58      	ldr	r3, [pc, #352]	; (800224c <HAL_RCC_OscConfig+0x788>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a57      	ldr	r2, [pc, #348]	; (800224c <HAL_RCC_OscConfig+0x788>)
 80020f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f6:	f7ff f941 	bl	800137c <HAL_GetTick>
 80020fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fe:	f7ff f93d 	bl	800137c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e0e2      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002110:	4b4e      	ldr	r3, [pc, #312]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f0      	bne.n	80020fe <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800211c:	4b4b      	ldr	r3, [pc, #300]	; (800224c <HAL_RCC_OscConfig+0x788>)
 800211e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002120:	4b4b      	ldr	r3, [pc, #300]	; (8002250 <HAL_RCC_OscConfig+0x78c>)
 8002122:	4013      	ands	r3, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800212c:	0112      	lsls	r2, r2, #4
 800212e:	430a      	orrs	r2, r1
 8002130:	4946      	ldr	r1, [pc, #280]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002132:	4313      	orrs	r3, r2
 8002134:	628b      	str	r3, [r1, #40]	; 0x28
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	3b01      	subs	r3, #1
 800213c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002144:	3b01      	subs	r3, #1
 8002146:	025b      	lsls	r3, r3, #9
 8002148:	b29b      	uxth	r3, r3
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002150:	3b01      	subs	r3, #1
 8002152:	041b      	lsls	r3, r3, #16
 8002154:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215e:	3b01      	subs	r3, #1
 8002160:	061b      	lsls	r3, r3, #24
 8002162:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002166:	4939      	ldr	r1, [pc, #228]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002168:	4313      	orrs	r3, r2
 800216a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800216c:	4b37      	ldr	r3, [pc, #220]	; (800224c <HAL_RCC_OscConfig+0x788>)
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	4a36      	ldr	r2, [pc, #216]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002172:	f023 0301 	bic.w	r3, r3, #1
 8002176:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002178:	4b34      	ldr	r3, [pc, #208]	; (800224c <HAL_RCC_OscConfig+0x788>)
 800217a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217c:	4b35      	ldr	r3, [pc, #212]	; (8002254 <HAL_RCC_OscConfig+0x790>)
 800217e:	4013      	ands	r3, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002184:	00d2      	lsls	r2, r2, #3
 8002186:	4931      	ldr	r1, [pc, #196]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002188:	4313      	orrs	r3, r2
 800218a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800218c:	4b2f      	ldr	r3, [pc, #188]	; (800224c <HAL_RCC_OscConfig+0x788>)
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	f023 020c 	bic.w	r2, r3, #12
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	492c      	ldr	r1, [pc, #176]	; (800224c <HAL_RCC_OscConfig+0x788>)
 800219a:	4313      	orrs	r3, r2
 800219c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800219e:	4b2b      	ldr	r3, [pc, #172]	; (800224c <HAL_RCC_OscConfig+0x788>)
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	f023 0202 	bic.w	r2, r3, #2
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	4928      	ldr	r1, [pc, #160]	; (800224c <HAL_RCC_OscConfig+0x788>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80021b0:	4b26      	ldr	r3, [pc, #152]	; (800224c <HAL_RCC_OscConfig+0x788>)
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	4a25      	ldr	r2, [pc, #148]	; (800224c <HAL_RCC_OscConfig+0x788>)
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021bc:	4b23      	ldr	r3, [pc, #140]	; (800224c <HAL_RCC_OscConfig+0x788>)
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	4a22      	ldr	r2, [pc, #136]	; (800224c <HAL_RCC_OscConfig+0x788>)
 80021c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80021c8:	4b20      	ldr	r3, [pc, #128]	; (800224c <HAL_RCC_OscConfig+0x788>)
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	4a1f      	ldr	r2, [pc, #124]	; (800224c <HAL_RCC_OscConfig+0x788>)
 80021ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80021d4:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_RCC_OscConfig+0x788>)
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	4a1c      	ldr	r2, [pc, #112]	; (800224c <HAL_RCC_OscConfig+0x788>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e0:	4b1a      	ldr	r3, [pc, #104]	; (800224c <HAL_RCC_OscConfig+0x788>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a19      	ldr	r2, [pc, #100]	; (800224c <HAL_RCC_OscConfig+0x788>)
 80021e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7ff f8c6 	bl	800137c <HAL_GetTick>
 80021f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f4:	f7ff f8c2 	bl	800137c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e067      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x730>
 8002212:	e05f      	b.n	80022d4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002214:	4b0d      	ldr	r3, [pc, #52]	; (800224c <HAL_RCC_OscConfig+0x788>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0c      	ldr	r2, [pc, #48]	; (800224c <HAL_RCC_OscConfig+0x788>)
 800221a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800221e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7ff f8ac 	bl	800137c <HAL_GetTick>
 8002224:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002228:	f7ff f8a8 	bl	800137c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e04d      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <HAL_RCC_OscConfig+0x788>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x764>
 8002246:	e045      	b.n	80022d4 <HAL_RCC_OscConfig+0x810>
 8002248:	58024800 	.word	0x58024800
 800224c:	58024400 	.word	0x58024400
 8002250:	fffffc0c 	.word	0xfffffc0c
 8002254:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002258:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <HAL_RCC_OscConfig+0x81c>)
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <HAL_RCC_OscConfig+0x81c>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	2b01      	cmp	r3, #1
 800226a:	d031      	beq.n	80022d0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	f003 0203 	and.w	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d12a      	bne.n	80022d0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d122      	bne.n	80022d0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d11a      	bne.n	80022d0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	0a5b      	lsrs	r3, r3, #9
 800229e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d111      	bne.n	80022d0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	0c1b      	lsrs	r3, r3, #16
 80022b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d108      	bne.n	80022d0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	0e1b      	lsrs	r3, r3, #24
 80022c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3730      	adds	r7, #48	; 0x30
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	58024400 	.word	0x58024400

080022e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e19c      	b.n	8002632 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f8:	4b8a      	ldr	r3, [pc, #552]	; (8002524 <HAL_RCC_ClockConfig+0x240>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d910      	bls.n	8002328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b87      	ldr	r3, [pc, #540]	; (8002524 <HAL_RCC_ClockConfig+0x240>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 020f 	bic.w	r2, r3, #15
 800230e:	4985      	ldr	r1, [pc, #532]	; (8002524 <HAL_RCC_ClockConfig+0x240>)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b83      	ldr	r3, [pc, #524]	; (8002524 <HAL_RCC_ClockConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e184      	b.n	8002632 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d010      	beq.n	8002356 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	4b7b      	ldr	r3, [pc, #492]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002340:	429a      	cmp	r2, r3
 8002342:	d908      	bls.n	8002356 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002344:	4b78      	ldr	r3, [pc, #480]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	4975      	ldr	r1, [pc, #468]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002352:	4313      	orrs	r3, r2
 8002354:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d010      	beq.n	8002384 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	4b70      	ldr	r3, [pc, #448]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800236e:	429a      	cmp	r2, r3
 8002370:	d908      	bls.n	8002384 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002372:	4b6d      	ldr	r3, [pc, #436]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	496a      	ldr	r1, [pc, #424]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002380:	4313      	orrs	r3, r2
 8002382:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b00      	cmp	r3, #0
 800238e:	d010      	beq.n	80023b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699a      	ldr	r2, [r3, #24]
 8002394:	4b64      	ldr	r3, [pc, #400]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800239c:	429a      	cmp	r2, r3
 800239e:	d908      	bls.n	80023b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023a0:	4b61      	ldr	r3, [pc, #388]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	495e      	ldr	r1, [pc, #376]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d010      	beq.n	80023e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69da      	ldr	r2, [r3, #28]
 80023c2:	4b59      	ldr	r3, [pc, #356]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d908      	bls.n	80023e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80023ce:	4b56      	ldr	r3, [pc, #344]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4953      	ldr	r1, [pc, #332]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d010      	beq.n	800240e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	4b4d      	ldr	r3, [pc, #308]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d908      	bls.n	800240e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fc:	4b4a      	ldr	r3, [pc, #296]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f023 020f 	bic.w	r2, r3, #15
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4947      	ldr	r1, [pc, #284]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 800240a:	4313      	orrs	r3, r2
 800240c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d055      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800241a:	4b43      	ldr	r3, [pc, #268]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	4940      	ldr	r1, [pc, #256]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002428:	4313      	orrs	r3, r2
 800242a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d107      	bne.n	8002444 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002434:	4b3c      	ldr	r3, [pc, #240]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d121      	bne.n	8002484 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0f6      	b.n	8002632 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d107      	bne.n	800245c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800244c:	4b36      	ldr	r3, [pc, #216]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d115      	bne.n	8002484 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0ea      	b.n	8002632 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d107      	bne.n	8002474 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002464:	4b30      	ldr	r3, [pc, #192]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d109      	bne.n	8002484 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0de      	b.n	8002632 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002474:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0d6      	b.n	8002632 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002484:	4b28      	ldr	r3, [pc, #160]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f023 0207 	bic.w	r2, r3, #7
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4925      	ldr	r1, [pc, #148]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002492:	4313      	orrs	r3, r2
 8002494:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7fe ff71 	bl	800137c <HAL_GetTick>
 800249a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800249e:	f7fe ff6d 	bl	800137c <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e0be      	b.n	8002632 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b4:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d1eb      	bne.n	800249e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d010      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	4b14      	ldr	r3, [pc, #80]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	429a      	cmp	r2, r3
 80024e0:	d208      	bcs.n	80024f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f023 020f 	bic.w	r2, r3, #15
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	490e      	ldr	r1, [pc, #56]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_ClockConfig+0x240>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d214      	bcs.n	800252c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <HAL_RCC_ClockConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 020f 	bic.w	r2, r3, #15
 800250a:	4906      	ldr	r1, [pc, #24]	; (8002524 <HAL_RCC_ClockConfig+0x240>)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b04      	ldr	r3, [pc, #16]	; (8002524 <HAL_RCC_ClockConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e086      	b.n	8002632 <HAL_RCC_ClockConfig+0x34e>
 8002524:	52002000 	.word	0x52002000
 8002528:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d010      	beq.n	800255a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	4b3f      	ldr	r3, [pc, #252]	; (800263c <HAL_RCC_ClockConfig+0x358>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002544:	429a      	cmp	r2, r3
 8002546:	d208      	bcs.n	800255a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002548:	4b3c      	ldr	r3, [pc, #240]	; (800263c <HAL_RCC_ClockConfig+0x358>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	4939      	ldr	r1, [pc, #228]	; (800263c <HAL_RCC_ClockConfig+0x358>)
 8002556:	4313      	orrs	r3, r2
 8002558:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d010      	beq.n	8002588 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	4b34      	ldr	r3, [pc, #208]	; (800263c <HAL_RCC_ClockConfig+0x358>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002572:	429a      	cmp	r2, r3
 8002574:	d208      	bcs.n	8002588 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002576:	4b31      	ldr	r3, [pc, #196]	; (800263c <HAL_RCC_ClockConfig+0x358>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	492e      	ldr	r1, [pc, #184]	; (800263c <HAL_RCC_ClockConfig+0x358>)
 8002584:	4313      	orrs	r3, r2
 8002586:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	d010      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699a      	ldr	r2, [r3, #24]
 8002598:	4b28      	ldr	r3, [pc, #160]	; (800263c <HAL_RCC_ClockConfig+0x358>)
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d208      	bcs.n	80025b6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025a4:	4b25      	ldr	r3, [pc, #148]	; (800263c <HAL_RCC_ClockConfig+0x358>)
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	4922      	ldr	r1, [pc, #136]	; (800263c <HAL_RCC_ClockConfig+0x358>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0320 	and.w	r3, r3, #32
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d010      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69da      	ldr	r2, [r3, #28]
 80025c6:	4b1d      	ldr	r3, [pc, #116]	; (800263c <HAL_RCC_ClockConfig+0x358>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d208      	bcs.n	80025e4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80025d2:	4b1a      	ldr	r3, [pc, #104]	; (800263c <HAL_RCC_ClockConfig+0x358>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	4917      	ldr	r1, [pc, #92]	; (800263c <HAL_RCC_ClockConfig+0x358>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025e4:	f000 f834 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b14      	ldr	r3, [pc, #80]	; (800263c <HAL_RCC_ClockConfig+0x358>)
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	4912      	ldr	r1, [pc, #72]	; (8002640 <HAL_RCC_ClockConfig+0x35c>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002600:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <HAL_RCC_ClockConfig+0x358>)
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <HAL_RCC_ClockConfig+0x35c>)
 800260c:	5cd3      	ldrb	r3, [r2, r3]
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
 8002618:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <HAL_RCC_ClockConfig+0x360>)
 800261a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800261c:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <HAL_RCC_ClockConfig+0x364>)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_RCC_ClockConfig+0x368>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fe5e 	bl	80012e8 <HAL_InitTick>
 800262c:	4603      	mov	r3, r0
 800262e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002630:	7bfb      	ldrb	r3, [r7, #15]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	58024400 	.word	0x58024400
 8002640:	08005ce4 	.word	0x08005ce4
 8002644:	24000004 	.word	0x24000004
 8002648:	24000000 	.word	0x24000000
 800264c:	24000008 	.word	0x24000008

08002650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002656:	4bb3      	ldr	r3, [pc, #716]	; (8002924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800265e:	2b18      	cmp	r3, #24
 8002660:	f200 8155 	bhi.w	800290e <HAL_RCC_GetSysClockFreq+0x2be>
 8002664:	a201      	add	r2, pc, #4	; (adr r2, 800266c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266a:	bf00      	nop
 800266c:	080026d1 	.word	0x080026d1
 8002670:	0800290f 	.word	0x0800290f
 8002674:	0800290f 	.word	0x0800290f
 8002678:	0800290f 	.word	0x0800290f
 800267c:	0800290f 	.word	0x0800290f
 8002680:	0800290f 	.word	0x0800290f
 8002684:	0800290f 	.word	0x0800290f
 8002688:	0800290f 	.word	0x0800290f
 800268c:	080026f7 	.word	0x080026f7
 8002690:	0800290f 	.word	0x0800290f
 8002694:	0800290f 	.word	0x0800290f
 8002698:	0800290f 	.word	0x0800290f
 800269c:	0800290f 	.word	0x0800290f
 80026a0:	0800290f 	.word	0x0800290f
 80026a4:	0800290f 	.word	0x0800290f
 80026a8:	0800290f 	.word	0x0800290f
 80026ac:	080026fd 	.word	0x080026fd
 80026b0:	0800290f 	.word	0x0800290f
 80026b4:	0800290f 	.word	0x0800290f
 80026b8:	0800290f 	.word	0x0800290f
 80026bc:	0800290f 	.word	0x0800290f
 80026c0:	0800290f 	.word	0x0800290f
 80026c4:	0800290f 	.word	0x0800290f
 80026c8:	0800290f 	.word	0x0800290f
 80026cc:	08002703 	.word	0x08002703
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026d0:	4b94      	ldr	r3, [pc, #592]	; (8002924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d009      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80026dc:	4b91      	ldr	r3, [pc, #580]	; (8002924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	08db      	lsrs	r3, r3, #3
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	4a90      	ldr	r2, [pc, #576]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80026ee:	e111      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026f0:	4b8d      	ldr	r3, [pc, #564]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026f2:	61bb      	str	r3, [r7, #24]
    break;
 80026f4:	e10e      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80026f6:	4b8d      	ldr	r3, [pc, #564]	; (800292c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026f8:	61bb      	str	r3, [r7, #24]
    break;
 80026fa:	e10b      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80026fc:	4b8c      	ldr	r3, [pc, #560]	; (8002930 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80026fe:	61bb      	str	r3, [r7, #24]
    break;
 8002700:	e108      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002702:	4b88      	ldr	r3, [pc, #544]	; (8002924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800270c:	4b85      	ldr	r3, [pc, #532]	; (8002924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002716:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002718:	4b82      	ldr	r3, [pc, #520]	; (8002924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002722:	4b80      	ldr	r3, [pc, #512]	; (8002924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002726:	08db      	lsrs	r3, r3, #3
 8002728:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800273a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80e1 	beq.w	8002908 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b02      	cmp	r3, #2
 800274a:	f000 8083 	beq.w	8002854 <HAL_RCC_GetSysClockFreq+0x204>
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b02      	cmp	r3, #2
 8002752:	f200 80a1 	bhi.w	8002898 <HAL_RCC_GetSysClockFreq+0x248>
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x114>
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d056      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002762:	e099      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002764:	4b6f      	ldr	r3, [pc, #444]	; (8002924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d02d      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002770:	4b6c      	ldr	r3, [pc, #432]	; (8002924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	08db      	lsrs	r3, r3, #3
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	4a6b      	ldr	r2, [pc, #428]	; (8002928 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
 8002780:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	ee07 3a90 	vmov	s15, r3
 8002788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800279a:	4b62      	ldr	r3, [pc, #392]	; (8002924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002934 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80027ca:	e087      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	ee07 3a90 	vmov	s15, r3
 80027d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027d6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002938 <HAL_RCC_GetSysClockFreq+0x2e8>
 80027da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027de:	4b51      	ldr	r3, [pc, #324]	; (8002924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80027f2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002934 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800280e:	e065      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	ee07 3a90 	vmov	s15, r3
 8002816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800281a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800293c <HAL_RCC_GetSysClockFreq+0x2ec>
 800281e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002822:	4b40      	ldr	r3, [pc, #256]	; (8002924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002832:	ed97 6a02 	vldr	s12, [r7, #8]
 8002836:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002934 <HAL_RCC_GetSysClockFreq+0x2e4>
 800283a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800283e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800284a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800284e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002852:	e043      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	ee07 3a90 	vmov	s15, r3
 800285a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800285e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002940 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002866:	4b2f      	ldr	r3, [pc, #188]	; (8002924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800286e:	ee07 3a90 	vmov	s15, r3
 8002872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002876:	ed97 6a02 	vldr	s12, [r7, #8]
 800287a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002934 <HAL_RCC_GetSysClockFreq+0x2e4>
 800287e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800288a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800288e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002896:	e021      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800293c <HAL_RCC_GetSysClockFreq+0x2ec>
 80028a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b2:	ee07 3a90 	vmov	s15, r3
 80028b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80028be:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002934 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028da:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	0a5b      	lsrs	r3, r3, #9
 80028e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028e6:	3301      	adds	r3, #1
 80028e8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	ee07 3a90 	vmov	s15, r3
 80028f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80028f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002900:	ee17 3a90 	vmov	r3, s15
 8002904:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002906:	e005      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	61bb      	str	r3, [r7, #24]
    break;
 800290c:	e002      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002910:	61bb      	str	r3, [r7, #24]
    break;
 8002912:	bf00      	nop
  }

  return sysclockfreq;
 8002914:	69bb      	ldr	r3, [r7, #24]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3724      	adds	r7, #36	; 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	58024400 	.word	0x58024400
 8002928:	03d09000 	.word	0x03d09000
 800292c:	003d0900 	.word	0x003d0900
 8002930:	017d7840 	.word	0x017d7840
 8002934:	46000000 	.word	0x46000000
 8002938:	4c742400 	.word	0x4c742400
 800293c:	4a742400 	.word	0x4a742400
 8002940:	4bbebc20 	.word	0x4bbebc20

08002944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e049      	b.n	80029ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fe fb2e 	bl	8000fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3304      	adds	r3, #4
 8002980:	4619      	mov	r1, r3
 8002982:	4610      	mov	r0, r2
 8002984:	f000 f99a 	bl	8002cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d001      	beq.n	8002a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e04f      	b.n	8002aac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a23      	ldr	r2, [pc, #140]	; (8002ab8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01d      	beq.n	8002a6a <HAL_TIM_Base_Start_IT+0x76>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a36:	d018      	beq.n	8002a6a <HAL_TIM_Base_Start_IT+0x76>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1f      	ldr	r2, [pc, #124]	; (8002abc <HAL_TIM_Base_Start_IT+0xc8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_TIM_Base_Start_IT+0x76>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1e      	ldr	r2, [pc, #120]	; (8002ac0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00e      	beq.n	8002a6a <HAL_TIM_Base_Start_IT+0x76>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d009      	beq.n	8002a6a <HAL_TIM_Base_Start_IT+0x76>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d004      	beq.n	8002a6a <HAL_TIM_Base_Start_IT+0x76>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a19      	ldr	r2, [pc, #100]	; (8002acc <HAL_TIM_Base_Start_IT+0xd8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d115      	bne.n	8002a96 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b06      	cmp	r3, #6
 8002a7a:	d015      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0xb4>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a82:	d011      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a94:	e008      	b.n	8002aa8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	e000      	b.n	8002aaa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	40010000 	.word	0x40010000
 8002abc:	40000400 	.word	0x40000400
 8002ac0:	40000800 	.word	0x40000800
 8002ac4:	40000c00 	.word	0x40000c00
 8002ac8:	40010400 	.word	0x40010400
 8002acc:	40001800 	.word	0x40001800
 8002ad0:	00010007 	.word	0x00010007

08002ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_TIM_ConfigClockSource+0x18>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e0db      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x1d0>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4b69      	ldr	r3, [pc, #420]	; (8002cac <HAL_TIM_ConfigClockSource+0x1d8>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a63      	ldr	r2, [pc, #396]	; (8002cb0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	f000 80a9 	beq.w	8002c7a <HAL_TIM_ConfigClockSource+0x1a6>
 8002b28:	4a61      	ldr	r2, [pc, #388]	; (8002cb0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	f200 80ae 	bhi.w	8002c8c <HAL_TIM_ConfigClockSource+0x1b8>
 8002b30:	4a60      	ldr	r2, [pc, #384]	; (8002cb4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	f000 80a1 	beq.w	8002c7a <HAL_TIM_ConfigClockSource+0x1a6>
 8002b38:	4a5e      	ldr	r2, [pc, #376]	; (8002cb4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	f200 80a6 	bhi.w	8002c8c <HAL_TIM_ConfigClockSource+0x1b8>
 8002b40:	4a5d      	ldr	r2, [pc, #372]	; (8002cb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	f000 8099 	beq.w	8002c7a <HAL_TIM_ConfigClockSource+0x1a6>
 8002b48:	4a5b      	ldr	r2, [pc, #364]	; (8002cb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	f200 809e 	bhi.w	8002c8c <HAL_TIM_ConfigClockSource+0x1b8>
 8002b50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002b54:	f000 8091 	beq.w	8002c7a <HAL_TIM_ConfigClockSource+0x1a6>
 8002b58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002b5c:	f200 8096 	bhi.w	8002c8c <HAL_TIM_ConfigClockSource+0x1b8>
 8002b60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b64:	f000 8089 	beq.w	8002c7a <HAL_TIM_ConfigClockSource+0x1a6>
 8002b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b6c:	f200 808e 	bhi.w	8002c8c <HAL_TIM_ConfigClockSource+0x1b8>
 8002b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b74:	d03e      	beq.n	8002bf4 <HAL_TIM_ConfigClockSource+0x120>
 8002b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7a:	f200 8087 	bhi.w	8002c8c <HAL_TIM_ConfigClockSource+0x1b8>
 8002b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b82:	f000 8085 	beq.w	8002c90 <HAL_TIM_ConfigClockSource+0x1bc>
 8002b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8a:	d87f      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x1b8>
 8002b8c:	2b70      	cmp	r3, #112	; 0x70
 8002b8e:	d01a      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0xf2>
 8002b90:	2b70      	cmp	r3, #112	; 0x70
 8002b92:	d87b      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x1b8>
 8002b94:	2b60      	cmp	r3, #96	; 0x60
 8002b96:	d050      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x166>
 8002b98:	2b60      	cmp	r3, #96	; 0x60
 8002b9a:	d877      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x1b8>
 8002b9c:	2b50      	cmp	r3, #80	; 0x50
 8002b9e:	d03c      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x146>
 8002ba0:	2b50      	cmp	r3, #80	; 0x50
 8002ba2:	d873      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x1b8>
 8002ba4:	2b40      	cmp	r3, #64	; 0x40
 8002ba6:	d058      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x186>
 8002ba8:	2b40      	cmp	r3, #64	; 0x40
 8002baa:	d86f      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x1b8>
 8002bac:	2b30      	cmp	r3, #48	; 0x30
 8002bae:	d064      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0x1a6>
 8002bb0:	2b30      	cmp	r3, #48	; 0x30
 8002bb2:	d86b      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x1b8>
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d060      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0x1a6>
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d867      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x1b8>
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d05c      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0x1a6>
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d05a      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002bc4:	e062      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6899      	ldr	r1, [r3, #8]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f000 f989 	bl	8002eec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002be8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	609a      	str	r2, [r3, #8]
      break;
 8002bf2:	e04e      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6899      	ldr	r1, [r3, #8]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f000 f972 	bl	8002eec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c16:	609a      	str	r2, [r3, #8]
      break;
 8002c18:	e03b      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6859      	ldr	r1, [r3, #4]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f000 f8e2 	bl	8002df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2150      	movs	r1, #80	; 0x50
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 f93c 	bl	8002eb0 <TIM_ITRx_SetConfig>
      break;
 8002c38:	e02b      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6859      	ldr	r1, [r3, #4]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f000 f901 	bl	8002e4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2160      	movs	r1, #96	; 0x60
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f92c 	bl	8002eb0 <TIM_ITRx_SetConfig>
      break;
 8002c58:	e01b      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6859      	ldr	r1, [r3, #4]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	461a      	mov	r2, r3
 8002c68:	f000 f8c2 	bl	8002df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2140      	movs	r1, #64	; 0x40
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f91c 	bl	8002eb0 <TIM_ITRx_SetConfig>
      break;
 8002c78:	e00b      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4619      	mov	r1, r3
 8002c84:	4610      	mov	r0, r2
 8002c86:	f000 f913 	bl	8002eb0 <TIM_ITRx_SetConfig>
        break;
 8002c8a:	e002      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8002c8c:	bf00      	nop
 8002c8e:	e000      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8002c90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	ffceff88 	.word	0xffceff88
 8002cb0:	00100040 	.word	0x00100040
 8002cb4:	00100030 	.word	0x00100030
 8002cb8:	00100020 	.word	0x00100020

08002cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a40      	ldr	r2, [pc, #256]	; (8002dd0 <TIM_Base_SetConfig+0x114>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d013      	beq.n	8002cfc <TIM_Base_SetConfig+0x40>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cda:	d00f      	beq.n	8002cfc <TIM_Base_SetConfig+0x40>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a3d      	ldr	r2, [pc, #244]	; (8002dd4 <TIM_Base_SetConfig+0x118>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00b      	beq.n	8002cfc <TIM_Base_SetConfig+0x40>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a3c      	ldr	r2, [pc, #240]	; (8002dd8 <TIM_Base_SetConfig+0x11c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d007      	beq.n	8002cfc <TIM_Base_SetConfig+0x40>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a3b      	ldr	r2, [pc, #236]	; (8002ddc <TIM_Base_SetConfig+0x120>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d003      	beq.n	8002cfc <TIM_Base_SetConfig+0x40>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a3a      	ldr	r2, [pc, #232]	; (8002de0 <TIM_Base_SetConfig+0x124>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d108      	bne.n	8002d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a2f      	ldr	r2, [pc, #188]	; (8002dd0 <TIM_Base_SetConfig+0x114>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d01f      	beq.n	8002d56 <TIM_Base_SetConfig+0x9a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1c:	d01b      	beq.n	8002d56 <TIM_Base_SetConfig+0x9a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a2c      	ldr	r2, [pc, #176]	; (8002dd4 <TIM_Base_SetConfig+0x118>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d017      	beq.n	8002d56 <TIM_Base_SetConfig+0x9a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2b      	ldr	r2, [pc, #172]	; (8002dd8 <TIM_Base_SetConfig+0x11c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <TIM_Base_SetConfig+0x9a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a2a      	ldr	r2, [pc, #168]	; (8002ddc <TIM_Base_SetConfig+0x120>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00f      	beq.n	8002d56 <TIM_Base_SetConfig+0x9a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a29      	ldr	r2, [pc, #164]	; (8002de0 <TIM_Base_SetConfig+0x124>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00b      	beq.n	8002d56 <TIM_Base_SetConfig+0x9a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a28      	ldr	r2, [pc, #160]	; (8002de4 <TIM_Base_SetConfig+0x128>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d007      	beq.n	8002d56 <TIM_Base_SetConfig+0x9a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a27      	ldr	r2, [pc, #156]	; (8002de8 <TIM_Base_SetConfig+0x12c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d003      	beq.n	8002d56 <TIM_Base_SetConfig+0x9a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a26      	ldr	r2, [pc, #152]	; (8002dec <TIM_Base_SetConfig+0x130>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d108      	bne.n	8002d68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a10      	ldr	r2, [pc, #64]	; (8002dd0 <TIM_Base_SetConfig+0x114>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00f      	beq.n	8002db4 <TIM_Base_SetConfig+0xf8>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <TIM_Base_SetConfig+0x124>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00b      	beq.n	8002db4 <TIM_Base_SetConfig+0xf8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a11      	ldr	r2, [pc, #68]	; (8002de4 <TIM_Base_SetConfig+0x128>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d007      	beq.n	8002db4 <TIM_Base_SetConfig+0xf8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <TIM_Base_SetConfig+0x12c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d003      	beq.n	8002db4 <TIM_Base_SetConfig+0xf8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a0f      	ldr	r2, [pc, #60]	; (8002dec <TIM_Base_SetConfig+0x130>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d103      	bne.n	8002dbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	615a      	str	r2, [r3, #20]
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40000800 	.word	0x40000800
 8002ddc:	40000c00 	.word	0x40000c00
 8002de0:	40010400 	.word	0x40010400
 8002de4:	40014000 	.word	0x40014000
 8002de8:	40014400 	.word	0x40014400
 8002dec:	40014800 	.word	0x40014800

08002df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f023 0201 	bic.w	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f023 030a 	bic.w	r3, r3, #10
 8002e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	621a      	str	r2, [r3, #32]
}
 8002e42:	bf00      	nop
 8002e44:	371c      	adds	r7, #28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b087      	sub	sp, #28
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	f023 0210 	bic.w	r2, r3, #16
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	031b      	lsls	r3, r3, #12
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <TIM_ITRx_SetConfig+0x38>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f043 0307 	orr.w	r3, r3, #7
 8002ed2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	609a      	str	r2, [r3, #8]
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	ffcfff8f 	.word	0xffcfff8f

08002eec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	021a      	lsls	r2, r3, #8
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	609a      	str	r2, [r3, #8]
}
 8002f20:	bf00      	nop
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e068      	b.n	8003016 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a2e      	ldr	r2, [pc, #184]	; (8003024 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a2d      	ldr	r2, [pc, #180]	; (8003028 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d108      	bne.n	8002f8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1e      	ldr	r2, [pc, #120]	; (8003024 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d01d      	beq.n	8002fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb6:	d018      	beq.n	8002fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1b      	ldr	r2, [pc, #108]	; (800302c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1a      	ldr	r2, [pc, #104]	; (8003030 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00e      	beq.n	8002fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a18      	ldr	r2, [pc, #96]	; (8003034 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d009      	beq.n	8002fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a13      	ldr	r2, [pc, #76]	; (8003028 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d004      	beq.n	8002fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a14      	ldr	r2, [pc, #80]	; (8003038 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d10c      	bne.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40010000 	.word	0x40010000
 8003028:	40010400 	.word	0x40010400
 800302c:	40000400 	.word	0x40000400
 8003030:	40000800 	.word	0x40000800
 8003034:	40000c00 	.word	0x40000c00
 8003038:	40001800 	.word	0x40001800

0800303c <__errno>:
 800303c:	4b01      	ldr	r3, [pc, #4]	; (8003044 <__errno+0x8>)
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	24000010 	.word	0x24000010

08003048 <__libc_init_array>:
 8003048:	b570      	push	{r4, r5, r6, lr}
 800304a:	4d0d      	ldr	r5, [pc, #52]	; (8003080 <__libc_init_array+0x38>)
 800304c:	4c0d      	ldr	r4, [pc, #52]	; (8003084 <__libc_init_array+0x3c>)
 800304e:	1b64      	subs	r4, r4, r5
 8003050:	10a4      	asrs	r4, r4, #2
 8003052:	2600      	movs	r6, #0
 8003054:	42a6      	cmp	r6, r4
 8003056:	d109      	bne.n	800306c <__libc_init_array+0x24>
 8003058:	4d0b      	ldr	r5, [pc, #44]	; (8003088 <__libc_init_array+0x40>)
 800305a:	4c0c      	ldr	r4, [pc, #48]	; (800308c <__libc_init_array+0x44>)
 800305c:	f002 fe24 	bl	8005ca8 <_init>
 8003060:	1b64      	subs	r4, r4, r5
 8003062:	10a4      	asrs	r4, r4, #2
 8003064:	2600      	movs	r6, #0
 8003066:	42a6      	cmp	r6, r4
 8003068:	d105      	bne.n	8003076 <__libc_init_array+0x2e>
 800306a:	bd70      	pop	{r4, r5, r6, pc}
 800306c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003070:	4798      	blx	r3
 8003072:	3601      	adds	r6, #1
 8003074:	e7ee      	b.n	8003054 <__libc_init_array+0xc>
 8003076:	f855 3b04 	ldr.w	r3, [r5], #4
 800307a:	4798      	blx	r3
 800307c:	3601      	adds	r6, #1
 800307e:	e7f2      	b.n	8003066 <__libc_init_array+0x1e>
 8003080:	080060d4 	.word	0x080060d4
 8003084:	080060d4 	.word	0x080060d4
 8003088:	080060d4 	.word	0x080060d4
 800308c:	080060d8 	.word	0x080060d8

08003090 <memset>:
 8003090:	4402      	add	r2, r0
 8003092:	4603      	mov	r3, r0
 8003094:	4293      	cmp	r3, r2
 8003096:	d100      	bne.n	800309a <memset+0xa>
 8003098:	4770      	bx	lr
 800309a:	f803 1b01 	strb.w	r1, [r3], #1
 800309e:	e7f9      	b.n	8003094 <memset+0x4>

080030a0 <__cvt>:
 80030a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a2:	ed2d 8b02 	vpush	{d8}
 80030a6:	eeb0 8b40 	vmov.f64	d8, d0
 80030aa:	b085      	sub	sp, #20
 80030ac:	4617      	mov	r7, r2
 80030ae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80030b0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80030b2:	ee18 2a90 	vmov	r2, s17
 80030b6:	f025 0520 	bic.w	r5, r5, #32
 80030ba:	2a00      	cmp	r2, #0
 80030bc:	bfb6      	itet	lt
 80030be:	222d      	movlt	r2, #45	; 0x2d
 80030c0:	2200      	movge	r2, #0
 80030c2:	eeb1 8b40 	vneglt.f64	d8, d0
 80030c6:	2d46      	cmp	r5, #70	; 0x46
 80030c8:	460c      	mov	r4, r1
 80030ca:	701a      	strb	r2, [r3, #0]
 80030cc:	d004      	beq.n	80030d8 <__cvt+0x38>
 80030ce:	2d45      	cmp	r5, #69	; 0x45
 80030d0:	d100      	bne.n	80030d4 <__cvt+0x34>
 80030d2:	3401      	adds	r4, #1
 80030d4:	2102      	movs	r1, #2
 80030d6:	e000      	b.n	80030da <__cvt+0x3a>
 80030d8:	2103      	movs	r1, #3
 80030da:	ab03      	add	r3, sp, #12
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	ab02      	add	r3, sp, #8
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	4622      	mov	r2, r4
 80030e4:	4633      	mov	r3, r6
 80030e6:	eeb0 0b48 	vmov.f64	d0, d8
 80030ea:	f000 fcc9 	bl	8003a80 <_dtoa_r>
 80030ee:	2d47      	cmp	r5, #71	; 0x47
 80030f0:	d109      	bne.n	8003106 <__cvt+0x66>
 80030f2:	07fb      	lsls	r3, r7, #31
 80030f4:	d407      	bmi.n	8003106 <__cvt+0x66>
 80030f6:	9b03      	ldr	r3, [sp, #12]
 80030f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80030fa:	1a1b      	subs	r3, r3, r0
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	b005      	add	sp, #20
 8003100:	ecbd 8b02 	vpop	{d8}
 8003104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003106:	2d46      	cmp	r5, #70	; 0x46
 8003108:	eb00 0204 	add.w	r2, r0, r4
 800310c:	d10c      	bne.n	8003128 <__cvt+0x88>
 800310e:	7803      	ldrb	r3, [r0, #0]
 8003110:	2b30      	cmp	r3, #48	; 0x30
 8003112:	d107      	bne.n	8003124 <__cvt+0x84>
 8003114:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311c:	bf1c      	itt	ne
 800311e:	f1c4 0401 	rsbne	r4, r4, #1
 8003122:	6034      	strne	r4, [r6, #0]
 8003124:	6833      	ldr	r3, [r6, #0]
 8003126:	441a      	add	r2, r3
 8003128:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800312c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003130:	bf08      	it	eq
 8003132:	9203      	streq	r2, [sp, #12]
 8003134:	2130      	movs	r1, #48	; 0x30
 8003136:	9b03      	ldr	r3, [sp, #12]
 8003138:	4293      	cmp	r3, r2
 800313a:	d2dc      	bcs.n	80030f6 <__cvt+0x56>
 800313c:	1c5c      	adds	r4, r3, #1
 800313e:	9403      	str	r4, [sp, #12]
 8003140:	7019      	strb	r1, [r3, #0]
 8003142:	e7f8      	b.n	8003136 <__cvt+0x96>

08003144 <__exponent>:
 8003144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003146:	4603      	mov	r3, r0
 8003148:	2900      	cmp	r1, #0
 800314a:	bfb8      	it	lt
 800314c:	4249      	neglt	r1, r1
 800314e:	f803 2b02 	strb.w	r2, [r3], #2
 8003152:	bfb4      	ite	lt
 8003154:	222d      	movlt	r2, #45	; 0x2d
 8003156:	222b      	movge	r2, #43	; 0x2b
 8003158:	2909      	cmp	r1, #9
 800315a:	7042      	strb	r2, [r0, #1]
 800315c:	dd2a      	ble.n	80031b4 <__exponent+0x70>
 800315e:	f10d 0407 	add.w	r4, sp, #7
 8003162:	46a4      	mov	ip, r4
 8003164:	270a      	movs	r7, #10
 8003166:	46a6      	mov	lr, r4
 8003168:	460a      	mov	r2, r1
 800316a:	fb91 f6f7 	sdiv	r6, r1, r7
 800316e:	fb07 1516 	mls	r5, r7, r6, r1
 8003172:	3530      	adds	r5, #48	; 0x30
 8003174:	2a63      	cmp	r2, #99	; 0x63
 8003176:	f104 34ff 	add.w	r4, r4, #4294967295
 800317a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800317e:	4631      	mov	r1, r6
 8003180:	dcf1      	bgt.n	8003166 <__exponent+0x22>
 8003182:	3130      	adds	r1, #48	; 0x30
 8003184:	f1ae 0502 	sub.w	r5, lr, #2
 8003188:	f804 1c01 	strb.w	r1, [r4, #-1]
 800318c:	1c44      	adds	r4, r0, #1
 800318e:	4629      	mov	r1, r5
 8003190:	4561      	cmp	r1, ip
 8003192:	d30a      	bcc.n	80031aa <__exponent+0x66>
 8003194:	f10d 0209 	add.w	r2, sp, #9
 8003198:	eba2 020e 	sub.w	r2, r2, lr
 800319c:	4565      	cmp	r5, ip
 800319e:	bf88      	it	hi
 80031a0:	2200      	movhi	r2, #0
 80031a2:	4413      	add	r3, r2
 80031a4:	1a18      	subs	r0, r3, r0
 80031a6:	b003      	add	sp, #12
 80031a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80031b2:	e7ed      	b.n	8003190 <__exponent+0x4c>
 80031b4:	2330      	movs	r3, #48	; 0x30
 80031b6:	3130      	adds	r1, #48	; 0x30
 80031b8:	7083      	strb	r3, [r0, #2]
 80031ba:	70c1      	strb	r1, [r0, #3]
 80031bc:	1d03      	adds	r3, r0, #4
 80031be:	e7f1      	b.n	80031a4 <__exponent+0x60>

080031c0 <_printf_float>:
 80031c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c4:	b08b      	sub	sp, #44	; 0x2c
 80031c6:	460c      	mov	r4, r1
 80031c8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80031cc:	4616      	mov	r6, r2
 80031ce:	461f      	mov	r7, r3
 80031d0:	4605      	mov	r5, r0
 80031d2:	f001 f9d7 	bl	8004584 <_localeconv_r>
 80031d6:	f8d0 b000 	ldr.w	fp, [r0]
 80031da:	4658      	mov	r0, fp
 80031dc:	f7fd f880 	bl	80002e0 <strlen>
 80031e0:	2300      	movs	r3, #0
 80031e2:	9308      	str	r3, [sp, #32]
 80031e4:	f8d8 3000 	ldr.w	r3, [r8]
 80031e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80031ec:	6822      	ldr	r2, [r4, #0]
 80031ee:	3307      	adds	r3, #7
 80031f0:	f023 0307 	bic.w	r3, r3, #7
 80031f4:	f103 0108 	add.w	r1, r3, #8
 80031f8:	f8c8 1000 	str.w	r1, [r8]
 80031fc:	4682      	mov	sl, r0
 80031fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003202:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8003206:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8003468 <_printf_float+0x2a8>
 800320a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800320e:	eeb0 6bc0 	vabs.f64	d6, d0
 8003212:	eeb4 6b47 	vcmp.f64	d6, d7
 8003216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321a:	dd24      	ble.n	8003266 <_printf_float+0xa6>
 800321c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8003220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003224:	d502      	bpl.n	800322c <_printf_float+0x6c>
 8003226:	232d      	movs	r3, #45	; 0x2d
 8003228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800322c:	4b90      	ldr	r3, [pc, #576]	; (8003470 <_printf_float+0x2b0>)
 800322e:	4891      	ldr	r0, [pc, #580]	; (8003474 <_printf_float+0x2b4>)
 8003230:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003234:	bf94      	ite	ls
 8003236:	4698      	movls	r8, r3
 8003238:	4680      	movhi	r8, r0
 800323a:	2303      	movs	r3, #3
 800323c:	6123      	str	r3, [r4, #16]
 800323e:	f022 0204 	bic.w	r2, r2, #4
 8003242:	2300      	movs	r3, #0
 8003244:	6022      	str	r2, [r4, #0]
 8003246:	9304      	str	r3, [sp, #16]
 8003248:	9700      	str	r7, [sp, #0]
 800324a:	4633      	mov	r3, r6
 800324c:	aa09      	add	r2, sp, #36	; 0x24
 800324e:	4621      	mov	r1, r4
 8003250:	4628      	mov	r0, r5
 8003252:	f000 f9d3 	bl	80035fc <_printf_common>
 8003256:	3001      	adds	r0, #1
 8003258:	f040 808a 	bne.w	8003370 <_printf_float+0x1b0>
 800325c:	f04f 30ff 	mov.w	r0, #4294967295
 8003260:	b00b      	add	sp, #44	; 0x2c
 8003262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003266:	eeb4 0b40 	vcmp.f64	d0, d0
 800326a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326e:	d709      	bvc.n	8003284 <_printf_float+0xc4>
 8003270:	ee10 3a90 	vmov	r3, s1
 8003274:	2b00      	cmp	r3, #0
 8003276:	bfbc      	itt	lt
 8003278:	232d      	movlt	r3, #45	; 0x2d
 800327a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800327e:	487e      	ldr	r0, [pc, #504]	; (8003478 <_printf_float+0x2b8>)
 8003280:	4b7e      	ldr	r3, [pc, #504]	; (800347c <_printf_float+0x2bc>)
 8003282:	e7d5      	b.n	8003230 <_printf_float+0x70>
 8003284:	6863      	ldr	r3, [r4, #4]
 8003286:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800328a:	9104      	str	r1, [sp, #16]
 800328c:	1c59      	adds	r1, r3, #1
 800328e:	d13c      	bne.n	800330a <_printf_float+0x14a>
 8003290:	2306      	movs	r3, #6
 8003292:	6063      	str	r3, [r4, #4]
 8003294:	2300      	movs	r3, #0
 8003296:	9303      	str	r3, [sp, #12]
 8003298:	ab08      	add	r3, sp, #32
 800329a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800329e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032a2:	ab07      	add	r3, sp, #28
 80032a4:	6861      	ldr	r1, [r4, #4]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	6022      	str	r2, [r4, #0]
 80032aa:	f10d 031b 	add.w	r3, sp, #27
 80032ae:	4628      	mov	r0, r5
 80032b0:	f7ff fef6 	bl	80030a0 <__cvt>
 80032b4:	9b04      	ldr	r3, [sp, #16]
 80032b6:	9907      	ldr	r1, [sp, #28]
 80032b8:	2b47      	cmp	r3, #71	; 0x47
 80032ba:	4680      	mov	r8, r0
 80032bc:	d108      	bne.n	80032d0 <_printf_float+0x110>
 80032be:	1cc8      	adds	r0, r1, #3
 80032c0:	db02      	blt.n	80032c8 <_printf_float+0x108>
 80032c2:	6863      	ldr	r3, [r4, #4]
 80032c4:	4299      	cmp	r1, r3
 80032c6:	dd41      	ble.n	800334c <_printf_float+0x18c>
 80032c8:	f1a9 0902 	sub.w	r9, r9, #2
 80032cc:	fa5f f989 	uxtb.w	r9, r9
 80032d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80032d4:	d820      	bhi.n	8003318 <_printf_float+0x158>
 80032d6:	3901      	subs	r1, #1
 80032d8:	464a      	mov	r2, r9
 80032da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80032de:	9107      	str	r1, [sp, #28]
 80032e0:	f7ff ff30 	bl	8003144 <__exponent>
 80032e4:	9a08      	ldr	r2, [sp, #32]
 80032e6:	9004      	str	r0, [sp, #16]
 80032e8:	1813      	adds	r3, r2, r0
 80032ea:	2a01      	cmp	r2, #1
 80032ec:	6123      	str	r3, [r4, #16]
 80032ee:	dc02      	bgt.n	80032f6 <_printf_float+0x136>
 80032f0:	6822      	ldr	r2, [r4, #0]
 80032f2:	07d2      	lsls	r2, r2, #31
 80032f4:	d501      	bpl.n	80032fa <_printf_float+0x13a>
 80032f6:	3301      	adds	r3, #1
 80032f8:	6123      	str	r3, [r4, #16]
 80032fa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0a2      	beq.n	8003248 <_printf_float+0x88>
 8003302:	232d      	movs	r3, #45	; 0x2d
 8003304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003308:	e79e      	b.n	8003248 <_printf_float+0x88>
 800330a:	9904      	ldr	r1, [sp, #16]
 800330c:	2947      	cmp	r1, #71	; 0x47
 800330e:	d1c1      	bne.n	8003294 <_printf_float+0xd4>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1bf      	bne.n	8003294 <_printf_float+0xd4>
 8003314:	2301      	movs	r3, #1
 8003316:	e7bc      	b.n	8003292 <_printf_float+0xd2>
 8003318:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800331c:	d118      	bne.n	8003350 <_printf_float+0x190>
 800331e:	2900      	cmp	r1, #0
 8003320:	6863      	ldr	r3, [r4, #4]
 8003322:	dd0b      	ble.n	800333c <_printf_float+0x17c>
 8003324:	6121      	str	r1, [r4, #16]
 8003326:	b913      	cbnz	r3, 800332e <_printf_float+0x16e>
 8003328:	6822      	ldr	r2, [r4, #0]
 800332a:	07d0      	lsls	r0, r2, #31
 800332c:	d502      	bpl.n	8003334 <_printf_float+0x174>
 800332e:	3301      	adds	r3, #1
 8003330:	440b      	add	r3, r1
 8003332:	6123      	str	r3, [r4, #16]
 8003334:	2300      	movs	r3, #0
 8003336:	65a1      	str	r1, [r4, #88]	; 0x58
 8003338:	9304      	str	r3, [sp, #16]
 800333a:	e7de      	b.n	80032fa <_printf_float+0x13a>
 800333c:	b913      	cbnz	r3, 8003344 <_printf_float+0x184>
 800333e:	6822      	ldr	r2, [r4, #0]
 8003340:	07d2      	lsls	r2, r2, #31
 8003342:	d501      	bpl.n	8003348 <_printf_float+0x188>
 8003344:	3302      	adds	r3, #2
 8003346:	e7f4      	b.n	8003332 <_printf_float+0x172>
 8003348:	2301      	movs	r3, #1
 800334a:	e7f2      	b.n	8003332 <_printf_float+0x172>
 800334c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003350:	9b08      	ldr	r3, [sp, #32]
 8003352:	4299      	cmp	r1, r3
 8003354:	db05      	blt.n	8003362 <_printf_float+0x1a2>
 8003356:	6823      	ldr	r3, [r4, #0]
 8003358:	6121      	str	r1, [r4, #16]
 800335a:	07d8      	lsls	r0, r3, #31
 800335c:	d5ea      	bpl.n	8003334 <_printf_float+0x174>
 800335e:	1c4b      	adds	r3, r1, #1
 8003360:	e7e7      	b.n	8003332 <_printf_float+0x172>
 8003362:	2900      	cmp	r1, #0
 8003364:	bfd4      	ite	le
 8003366:	f1c1 0202 	rsble	r2, r1, #2
 800336a:	2201      	movgt	r2, #1
 800336c:	4413      	add	r3, r2
 800336e:	e7e0      	b.n	8003332 <_printf_float+0x172>
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	055a      	lsls	r2, r3, #21
 8003374:	d407      	bmi.n	8003386 <_printf_float+0x1c6>
 8003376:	6923      	ldr	r3, [r4, #16]
 8003378:	4642      	mov	r2, r8
 800337a:	4631      	mov	r1, r6
 800337c:	4628      	mov	r0, r5
 800337e:	47b8      	blx	r7
 8003380:	3001      	adds	r0, #1
 8003382:	d12a      	bne.n	80033da <_printf_float+0x21a>
 8003384:	e76a      	b.n	800325c <_printf_float+0x9c>
 8003386:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800338a:	f240 80e2 	bls.w	8003552 <_printf_float+0x392>
 800338e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8003392:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339a:	d133      	bne.n	8003404 <_printf_float+0x244>
 800339c:	4a38      	ldr	r2, [pc, #224]	; (8003480 <_printf_float+0x2c0>)
 800339e:	2301      	movs	r3, #1
 80033a0:	4631      	mov	r1, r6
 80033a2:	4628      	mov	r0, r5
 80033a4:	47b8      	blx	r7
 80033a6:	3001      	adds	r0, #1
 80033a8:	f43f af58 	beq.w	800325c <_printf_float+0x9c>
 80033ac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	db02      	blt.n	80033ba <_printf_float+0x1fa>
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	07d8      	lsls	r0, r3, #31
 80033b8:	d50f      	bpl.n	80033da <_printf_float+0x21a>
 80033ba:	4653      	mov	r3, sl
 80033bc:	465a      	mov	r2, fp
 80033be:	4631      	mov	r1, r6
 80033c0:	4628      	mov	r0, r5
 80033c2:	47b8      	blx	r7
 80033c4:	3001      	adds	r0, #1
 80033c6:	f43f af49 	beq.w	800325c <_printf_float+0x9c>
 80033ca:	f04f 0800 	mov.w	r8, #0
 80033ce:	f104 091a 	add.w	r9, r4, #26
 80033d2:	9b08      	ldr	r3, [sp, #32]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	4543      	cmp	r3, r8
 80033d8:	dc09      	bgt.n	80033ee <_printf_float+0x22e>
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	079b      	lsls	r3, r3, #30
 80033de:	f100 8108 	bmi.w	80035f2 <_printf_float+0x432>
 80033e2:	68e0      	ldr	r0, [r4, #12]
 80033e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033e6:	4298      	cmp	r0, r3
 80033e8:	bfb8      	it	lt
 80033ea:	4618      	movlt	r0, r3
 80033ec:	e738      	b.n	8003260 <_printf_float+0xa0>
 80033ee:	2301      	movs	r3, #1
 80033f0:	464a      	mov	r2, r9
 80033f2:	4631      	mov	r1, r6
 80033f4:	4628      	mov	r0, r5
 80033f6:	47b8      	blx	r7
 80033f8:	3001      	adds	r0, #1
 80033fa:	f43f af2f 	beq.w	800325c <_printf_float+0x9c>
 80033fe:	f108 0801 	add.w	r8, r8, #1
 8003402:	e7e6      	b.n	80033d2 <_printf_float+0x212>
 8003404:	9b07      	ldr	r3, [sp, #28]
 8003406:	2b00      	cmp	r3, #0
 8003408:	dc3c      	bgt.n	8003484 <_printf_float+0x2c4>
 800340a:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <_printf_float+0x2c0>)
 800340c:	2301      	movs	r3, #1
 800340e:	4631      	mov	r1, r6
 8003410:	4628      	mov	r0, r5
 8003412:	47b8      	blx	r7
 8003414:	3001      	adds	r0, #1
 8003416:	f43f af21 	beq.w	800325c <_printf_float+0x9c>
 800341a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800341e:	4313      	orrs	r3, r2
 8003420:	d102      	bne.n	8003428 <_printf_float+0x268>
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	07d9      	lsls	r1, r3, #31
 8003426:	d5d8      	bpl.n	80033da <_printf_float+0x21a>
 8003428:	4653      	mov	r3, sl
 800342a:	465a      	mov	r2, fp
 800342c:	4631      	mov	r1, r6
 800342e:	4628      	mov	r0, r5
 8003430:	47b8      	blx	r7
 8003432:	3001      	adds	r0, #1
 8003434:	f43f af12 	beq.w	800325c <_printf_float+0x9c>
 8003438:	f04f 0900 	mov.w	r9, #0
 800343c:	f104 0a1a 	add.w	sl, r4, #26
 8003440:	9b07      	ldr	r3, [sp, #28]
 8003442:	425b      	negs	r3, r3
 8003444:	454b      	cmp	r3, r9
 8003446:	dc01      	bgt.n	800344c <_printf_float+0x28c>
 8003448:	9b08      	ldr	r3, [sp, #32]
 800344a:	e795      	b.n	8003378 <_printf_float+0x1b8>
 800344c:	2301      	movs	r3, #1
 800344e:	4652      	mov	r2, sl
 8003450:	4631      	mov	r1, r6
 8003452:	4628      	mov	r0, r5
 8003454:	47b8      	blx	r7
 8003456:	3001      	adds	r0, #1
 8003458:	f43f af00 	beq.w	800325c <_printf_float+0x9c>
 800345c:	f109 0901 	add.w	r9, r9, #1
 8003460:	e7ee      	b.n	8003440 <_printf_float+0x280>
 8003462:	bf00      	nop
 8003464:	f3af 8000 	nop.w
 8003468:	ffffffff 	.word	0xffffffff
 800346c:	7fefffff 	.word	0x7fefffff
 8003470:	08005cf8 	.word	0x08005cf8
 8003474:	08005cfc 	.word	0x08005cfc
 8003478:	08005d04 	.word	0x08005d04
 800347c:	08005d00 	.word	0x08005d00
 8003480:	08005d08 	.word	0x08005d08
 8003484:	9a08      	ldr	r2, [sp, #32]
 8003486:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003488:	429a      	cmp	r2, r3
 800348a:	bfa8      	it	ge
 800348c:	461a      	movge	r2, r3
 800348e:	2a00      	cmp	r2, #0
 8003490:	4691      	mov	r9, r2
 8003492:	dc38      	bgt.n	8003506 <_printf_float+0x346>
 8003494:	2300      	movs	r3, #0
 8003496:	9305      	str	r3, [sp, #20]
 8003498:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800349c:	f104 021a 	add.w	r2, r4, #26
 80034a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034a2:	9905      	ldr	r1, [sp, #20]
 80034a4:	9304      	str	r3, [sp, #16]
 80034a6:	eba3 0309 	sub.w	r3, r3, r9
 80034aa:	428b      	cmp	r3, r1
 80034ac:	dc33      	bgt.n	8003516 <_printf_float+0x356>
 80034ae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	db3c      	blt.n	8003530 <_printf_float+0x370>
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	07da      	lsls	r2, r3, #31
 80034ba:	d439      	bmi.n	8003530 <_printf_float+0x370>
 80034bc:	9a08      	ldr	r2, [sp, #32]
 80034be:	9b04      	ldr	r3, [sp, #16]
 80034c0:	9907      	ldr	r1, [sp, #28]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	eba2 0901 	sub.w	r9, r2, r1
 80034c8:	4599      	cmp	r9, r3
 80034ca:	bfa8      	it	ge
 80034cc:	4699      	movge	r9, r3
 80034ce:	f1b9 0f00 	cmp.w	r9, #0
 80034d2:	dc35      	bgt.n	8003540 <_printf_float+0x380>
 80034d4:	f04f 0800 	mov.w	r8, #0
 80034d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034dc:	f104 0a1a 	add.w	sl, r4, #26
 80034e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	eba3 0309 	sub.w	r3, r3, r9
 80034ea:	4543      	cmp	r3, r8
 80034ec:	f77f af75 	ble.w	80033da <_printf_float+0x21a>
 80034f0:	2301      	movs	r3, #1
 80034f2:	4652      	mov	r2, sl
 80034f4:	4631      	mov	r1, r6
 80034f6:	4628      	mov	r0, r5
 80034f8:	47b8      	blx	r7
 80034fa:	3001      	adds	r0, #1
 80034fc:	f43f aeae 	beq.w	800325c <_printf_float+0x9c>
 8003500:	f108 0801 	add.w	r8, r8, #1
 8003504:	e7ec      	b.n	80034e0 <_printf_float+0x320>
 8003506:	4613      	mov	r3, r2
 8003508:	4631      	mov	r1, r6
 800350a:	4642      	mov	r2, r8
 800350c:	4628      	mov	r0, r5
 800350e:	47b8      	blx	r7
 8003510:	3001      	adds	r0, #1
 8003512:	d1bf      	bne.n	8003494 <_printf_float+0x2d4>
 8003514:	e6a2      	b.n	800325c <_printf_float+0x9c>
 8003516:	2301      	movs	r3, #1
 8003518:	4631      	mov	r1, r6
 800351a:	4628      	mov	r0, r5
 800351c:	9204      	str	r2, [sp, #16]
 800351e:	47b8      	blx	r7
 8003520:	3001      	adds	r0, #1
 8003522:	f43f ae9b 	beq.w	800325c <_printf_float+0x9c>
 8003526:	9b05      	ldr	r3, [sp, #20]
 8003528:	9a04      	ldr	r2, [sp, #16]
 800352a:	3301      	adds	r3, #1
 800352c:	9305      	str	r3, [sp, #20]
 800352e:	e7b7      	b.n	80034a0 <_printf_float+0x2e0>
 8003530:	4653      	mov	r3, sl
 8003532:	465a      	mov	r2, fp
 8003534:	4631      	mov	r1, r6
 8003536:	4628      	mov	r0, r5
 8003538:	47b8      	blx	r7
 800353a:	3001      	adds	r0, #1
 800353c:	d1be      	bne.n	80034bc <_printf_float+0x2fc>
 800353e:	e68d      	b.n	800325c <_printf_float+0x9c>
 8003540:	9a04      	ldr	r2, [sp, #16]
 8003542:	464b      	mov	r3, r9
 8003544:	4442      	add	r2, r8
 8003546:	4631      	mov	r1, r6
 8003548:	4628      	mov	r0, r5
 800354a:	47b8      	blx	r7
 800354c:	3001      	adds	r0, #1
 800354e:	d1c1      	bne.n	80034d4 <_printf_float+0x314>
 8003550:	e684      	b.n	800325c <_printf_float+0x9c>
 8003552:	9a08      	ldr	r2, [sp, #32]
 8003554:	2a01      	cmp	r2, #1
 8003556:	dc01      	bgt.n	800355c <_printf_float+0x39c>
 8003558:	07db      	lsls	r3, r3, #31
 800355a:	d537      	bpl.n	80035cc <_printf_float+0x40c>
 800355c:	2301      	movs	r3, #1
 800355e:	4642      	mov	r2, r8
 8003560:	4631      	mov	r1, r6
 8003562:	4628      	mov	r0, r5
 8003564:	47b8      	blx	r7
 8003566:	3001      	adds	r0, #1
 8003568:	f43f ae78 	beq.w	800325c <_printf_float+0x9c>
 800356c:	4653      	mov	r3, sl
 800356e:	465a      	mov	r2, fp
 8003570:	4631      	mov	r1, r6
 8003572:	4628      	mov	r0, r5
 8003574:	47b8      	blx	r7
 8003576:	3001      	adds	r0, #1
 8003578:	f43f ae70 	beq.w	800325c <_printf_float+0x9c>
 800357c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8003580:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003588:	d01b      	beq.n	80035c2 <_printf_float+0x402>
 800358a:	9b08      	ldr	r3, [sp, #32]
 800358c:	f108 0201 	add.w	r2, r8, #1
 8003590:	3b01      	subs	r3, #1
 8003592:	4631      	mov	r1, r6
 8003594:	4628      	mov	r0, r5
 8003596:	47b8      	blx	r7
 8003598:	3001      	adds	r0, #1
 800359a:	d10e      	bne.n	80035ba <_printf_float+0x3fa>
 800359c:	e65e      	b.n	800325c <_printf_float+0x9c>
 800359e:	2301      	movs	r3, #1
 80035a0:	464a      	mov	r2, r9
 80035a2:	4631      	mov	r1, r6
 80035a4:	4628      	mov	r0, r5
 80035a6:	47b8      	blx	r7
 80035a8:	3001      	adds	r0, #1
 80035aa:	f43f ae57 	beq.w	800325c <_printf_float+0x9c>
 80035ae:	f108 0801 	add.w	r8, r8, #1
 80035b2:	9b08      	ldr	r3, [sp, #32]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	4543      	cmp	r3, r8
 80035b8:	dcf1      	bgt.n	800359e <_printf_float+0x3de>
 80035ba:	9b04      	ldr	r3, [sp, #16]
 80035bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80035c0:	e6db      	b.n	800337a <_printf_float+0x1ba>
 80035c2:	f04f 0800 	mov.w	r8, #0
 80035c6:	f104 091a 	add.w	r9, r4, #26
 80035ca:	e7f2      	b.n	80035b2 <_printf_float+0x3f2>
 80035cc:	2301      	movs	r3, #1
 80035ce:	4642      	mov	r2, r8
 80035d0:	e7df      	b.n	8003592 <_printf_float+0x3d2>
 80035d2:	2301      	movs	r3, #1
 80035d4:	464a      	mov	r2, r9
 80035d6:	4631      	mov	r1, r6
 80035d8:	4628      	mov	r0, r5
 80035da:	47b8      	blx	r7
 80035dc:	3001      	adds	r0, #1
 80035de:	f43f ae3d 	beq.w	800325c <_printf_float+0x9c>
 80035e2:	f108 0801 	add.w	r8, r8, #1
 80035e6:	68e3      	ldr	r3, [r4, #12]
 80035e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80035ea:	1a5b      	subs	r3, r3, r1
 80035ec:	4543      	cmp	r3, r8
 80035ee:	dcf0      	bgt.n	80035d2 <_printf_float+0x412>
 80035f0:	e6f7      	b.n	80033e2 <_printf_float+0x222>
 80035f2:	f04f 0800 	mov.w	r8, #0
 80035f6:	f104 0919 	add.w	r9, r4, #25
 80035fa:	e7f4      	b.n	80035e6 <_printf_float+0x426>

080035fc <_printf_common>:
 80035fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003600:	4616      	mov	r6, r2
 8003602:	4699      	mov	r9, r3
 8003604:	688a      	ldr	r2, [r1, #8]
 8003606:	690b      	ldr	r3, [r1, #16]
 8003608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800360c:	4293      	cmp	r3, r2
 800360e:	bfb8      	it	lt
 8003610:	4613      	movlt	r3, r2
 8003612:	6033      	str	r3, [r6, #0]
 8003614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003618:	4607      	mov	r7, r0
 800361a:	460c      	mov	r4, r1
 800361c:	b10a      	cbz	r2, 8003622 <_printf_common+0x26>
 800361e:	3301      	adds	r3, #1
 8003620:	6033      	str	r3, [r6, #0]
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	0699      	lsls	r1, r3, #26
 8003626:	bf42      	ittt	mi
 8003628:	6833      	ldrmi	r3, [r6, #0]
 800362a:	3302      	addmi	r3, #2
 800362c:	6033      	strmi	r3, [r6, #0]
 800362e:	6825      	ldr	r5, [r4, #0]
 8003630:	f015 0506 	ands.w	r5, r5, #6
 8003634:	d106      	bne.n	8003644 <_printf_common+0x48>
 8003636:	f104 0a19 	add.w	sl, r4, #25
 800363a:	68e3      	ldr	r3, [r4, #12]
 800363c:	6832      	ldr	r2, [r6, #0]
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	42ab      	cmp	r3, r5
 8003642:	dc26      	bgt.n	8003692 <_printf_common+0x96>
 8003644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003648:	1e13      	subs	r3, r2, #0
 800364a:	6822      	ldr	r2, [r4, #0]
 800364c:	bf18      	it	ne
 800364e:	2301      	movne	r3, #1
 8003650:	0692      	lsls	r2, r2, #26
 8003652:	d42b      	bmi.n	80036ac <_printf_common+0xb0>
 8003654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003658:	4649      	mov	r1, r9
 800365a:	4638      	mov	r0, r7
 800365c:	47c0      	blx	r8
 800365e:	3001      	adds	r0, #1
 8003660:	d01e      	beq.n	80036a0 <_printf_common+0xa4>
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	68e5      	ldr	r5, [r4, #12]
 8003666:	6832      	ldr	r2, [r6, #0]
 8003668:	f003 0306 	and.w	r3, r3, #6
 800366c:	2b04      	cmp	r3, #4
 800366e:	bf08      	it	eq
 8003670:	1aad      	subeq	r5, r5, r2
 8003672:	68a3      	ldr	r3, [r4, #8]
 8003674:	6922      	ldr	r2, [r4, #16]
 8003676:	bf0c      	ite	eq
 8003678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800367c:	2500      	movne	r5, #0
 800367e:	4293      	cmp	r3, r2
 8003680:	bfc4      	itt	gt
 8003682:	1a9b      	subgt	r3, r3, r2
 8003684:	18ed      	addgt	r5, r5, r3
 8003686:	2600      	movs	r6, #0
 8003688:	341a      	adds	r4, #26
 800368a:	42b5      	cmp	r5, r6
 800368c:	d11a      	bne.n	80036c4 <_printf_common+0xc8>
 800368e:	2000      	movs	r0, #0
 8003690:	e008      	b.n	80036a4 <_printf_common+0xa8>
 8003692:	2301      	movs	r3, #1
 8003694:	4652      	mov	r2, sl
 8003696:	4649      	mov	r1, r9
 8003698:	4638      	mov	r0, r7
 800369a:	47c0      	blx	r8
 800369c:	3001      	adds	r0, #1
 800369e:	d103      	bne.n	80036a8 <_printf_common+0xac>
 80036a0:	f04f 30ff 	mov.w	r0, #4294967295
 80036a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a8:	3501      	adds	r5, #1
 80036aa:	e7c6      	b.n	800363a <_printf_common+0x3e>
 80036ac:	18e1      	adds	r1, r4, r3
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	2030      	movs	r0, #48	; 0x30
 80036b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036b6:	4422      	add	r2, r4
 80036b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036c0:	3302      	adds	r3, #2
 80036c2:	e7c7      	b.n	8003654 <_printf_common+0x58>
 80036c4:	2301      	movs	r3, #1
 80036c6:	4622      	mov	r2, r4
 80036c8:	4649      	mov	r1, r9
 80036ca:	4638      	mov	r0, r7
 80036cc:	47c0      	blx	r8
 80036ce:	3001      	adds	r0, #1
 80036d0:	d0e6      	beq.n	80036a0 <_printf_common+0xa4>
 80036d2:	3601      	adds	r6, #1
 80036d4:	e7d9      	b.n	800368a <_printf_common+0x8e>
	...

080036d8 <_printf_i>:
 80036d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036dc:	460c      	mov	r4, r1
 80036de:	4691      	mov	r9, r2
 80036e0:	7e27      	ldrb	r7, [r4, #24]
 80036e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036e4:	2f78      	cmp	r7, #120	; 0x78
 80036e6:	4680      	mov	r8, r0
 80036e8:	469a      	mov	sl, r3
 80036ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036ee:	d807      	bhi.n	8003700 <_printf_i+0x28>
 80036f0:	2f62      	cmp	r7, #98	; 0x62
 80036f2:	d80a      	bhi.n	800370a <_printf_i+0x32>
 80036f4:	2f00      	cmp	r7, #0
 80036f6:	f000 80d8 	beq.w	80038aa <_printf_i+0x1d2>
 80036fa:	2f58      	cmp	r7, #88	; 0x58
 80036fc:	f000 80a3 	beq.w	8003846 <_printf_i+0x16e>
 8003700:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003708:	e03a      	b.n	8003780 <_printf_i+0xa8>
 800370a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800370e:	2b15      	cmp	r3, #21
 8003710:	d8f6      	bhi.n	8003700 <_printf_i+0x28>
 8003712:	a001      	add	r0, pc, #4	; (adr r0, 8003718 <_printf_i+0x40>)
 8003714:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003718:	08003771 	.word	0x08003771
 800371c:	08003785 	.word	0x08003785
 8003720:	08003701 	.word	0x08003701
 8003724:	08003701 	.word	0x08003701
 8003728:	08003701 	.word	0x08003701
 800372c:	08003701 	.word	0x08003701
 8003730:	08003785 	.word	0x08003785
 8003734:	08003701 	.word	0x08003701
 8003738:	08003701 	.word	0x08003701
 800373c:	08003701 	.word	0x08003701
 8003740:	08003701 	.word	0x08003701
 8003744:	08003891 	.word	0x08003891
 8003748:	080037b5 	.word	0x080037b5
 800374c:	08003873 	.word	0x08003873
 8003750:	08003701 	.word	0x08003701
 8003754:	08003701 	.word	0x08003701
 8003758:	080038b3 	.word	0x080038b3
 800375c:	08003701 	.word	0x08003701
 8003760:	080037b5 	.word	0x080037b5
 8003764:	08003701 	.word	0x08003701
 8003768:	08003701 	.word	0x08003701
 800376c:	0800387b 	.word	0x0800387b
 8003770:	680b      	ldr	r3, [r1, #0]
 8003772:	1d1a      	adds	r2, r3, #4
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	600a      	str	r2, [r1, #0]
 8003778:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800377c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003780:	2301      	movs	r3, #1
 8003782:	e0a3      	b.n	80038cc <_printf_i+0x1f4>
 8003784:	6825      	ldr	r5, [r4, #0]
 8003786:	6808      	ldr	r0, [r1, #0]
 8003788:	062e      	lsls	r6, r5, #24
 800378a:	f100 0304 	add.w	r3, r0, #4
 800378e:	d50a      	bpl.n	80037a6 <_printf_i+0xce>
 8003790:	6805      	ldr	r5, [r0, #0]
 8003792:	600b      	str	r3, [r1, #0]
 8003794:	2d00      	cmp	r5, #0
 8003796:	da03      	bge.n	80037a0 <_printf_i+0xc8>
 8003798:	232d      	movs	r3, #45	; 0x2d
 800379a:	426d      	negs	r5, r5
 800379c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037a0:	485e      	ldr	r0, [pc, #376]	; (800391c <_printf_i+0x244>)
 80037a2:	230a      	movs	r3, #10
 80037a4:	e019      	b.n	80037da <_printf_i+0x102>
 80037a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80037aa:	6805      	ldr	r5, [r0, #0]
 80037ac:	600b      	str	r3, [r1, #0]
 80037ae:	bf18      	it	ne
 80037b0:	b22d      	sxthne	r5, r5
 80037b2:	e7ef      	b.n	8003794 <_printf_i+0xbc>
 80037b4:	680b      	ldr	r3, [r1, #0]
 80037b6:	6825      	ldr	r5, [r4, #0]
 80037b8:	1d18      	adds	r0, r3, #4
 80037ba:	6008      	str	r0, [r1, #0]
 80037bc:	0628      	lsls	r0, r5, #24
 80037be:	d501      	bpl.n	80037c4 <_printf_i+0xec>
 80037c0:	681d      	ldr	r5, [r3, #0]
 80037c2:	e002      	b.n	80037ca <_printf_i+0xf2>
 80037c4:	0669      	lsls	r1, r5, #25
 80037c6:	d5fb      	bpl.n	80037c0 <_printf_i+0xe8>
 80037c8:	881d      	ldrh	r5, [r3, #0]
 80037ca:	4854      	ldr	r0, [pc, #336]	; (800391c <_printf_i+0x244>)
 80037cc:	2f6f      	cmp	r7, #111	; 0x6f
 80037ce:	bf0c      	ite	eq
 80037d0:	2308      	moveq	r3, #8
 80037d2:	230a      	movne	r3, #10
 80037d4:	2100      	movs	r1, #0
 80037d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037da:	6866      	ldr	r6, [r4, #4]
 80037dc:	60a6      	str	r6, [r4, #8]
 80037de:	2e00      	cmp	r6, #0
 80037e0:	bfa2      	ittt	ge
 80037e2:	6821      	ldrge	r1, [r4, #0]
 80037e4:	f021 0104 	bicge.w	r1, r1, #4
 80037e8:	6021      	strge	r1, [r4, #0]
 80037ea:	b90d      	cbnz	r5, 80037f0 <_printf_i+0x118>
 80037ec:	2e00      	cmp	r6, #0
 80037ee:	d04d      	beq.n	800388c <_printf_i+0x1b4>
 80037f0:	4616      	mov	r6, r2
 80037f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80037f6:	fb03 5711 	mls	r7, r3, r1, r5
 80037fa:	5dc7      	ldrb	r7, [r0, r7]
 80037fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003800:	462f      	mov	r7, r5
 8003802:	42bb      	cmp	r3, r7
 8003804:	460d      	mov	r5, r1
 8003806:	d9f4      	bls.n	80037f2 <_printf_i+0x11a>
 8003808:	2b08      	cmp	r3, #8
 800380a:	d10b      	bne.n	8003824 <_printf_i+0x14c>
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	07df      	lsls	r7, r3, #31
 8003810:	d508      	bpl.n	8003824 <_printf_i+0x14c>
 8003812:	6923      	ldr	r3, [r4, #16]
 8003814:	6861      	ldr	r1, [r4, #4]
 8003816:	4299      	cmp	r1, r3
 8003818:	bfde      	ittt	le
 800381a:	2330      	movle	r3, #48	; 0x30
 800381c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003820:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003824:	1b92      	subs	r2, r2, r6
 8003826:	6122      	str	r2, [r4, #16]
 8003828:	f8cd a000 	str.w	sl, [sp]
 800382c:	464b      	mov	r3, r9
 800382e:	aa03      	add	r2, sp, #12
 8003830:	4621      	mov	r1, r4
 8003832:	4640      	mov	r0, r8
 8003834:	f7ff fee2 	bl	80035fc <_printf_common>
 8003838:	3001      	adds	r0, #1
 800383a:	d14c      	bne.n	80038d6 <_printf_i+0x1fe>
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
 8003840:	b004      	add	sp, #16
 8003842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003846:	4835      	ldr	r0, [pc, #212]	; (800391c <_printf_i+0x244>)
 8003848:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	680e      	ldr	r6, [r1, #0]
 8003850:	061f      	lsls	r7, r3, #24
 8003852:	f856 5b04 	ldr.w	r5, [r6], #4
 8003856:	600e      	str	r6, [r1, #0]
 8003858:	d514      	bpl.n	8003884 <_printf_i+0x1ac>
 800385a:	07d9      	lsls	r1, r3, #31
 800385c:	bf44      	itt	mi
 800385e:	f043 0320 	orrmi.w	r3, r3, #32
 8003862:	6023      	strmi	r3, [r4, #0]
 8003864:	b91d      	cbnz	r5, 800386e <_printf_i+0x196>
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	f023 0320 	bic.w	r3, r3, #32
 800386c:	6023      	str	r3, [r4, #0]
 800386e:	2310      	movs	r3, #16
 8003870:	e7b0      	b.n	80037d4 <_printf_i+0xfc>
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	f043 0320 	orr.w	r3, r3, #32
 8003878:	6023      	str	r3, [r4, #0]
 800387a:	2378      	movs	r3, #120	; 0x78
 800387c:	4828      	ldr	r0, [pc, #160]	; (8003920 <_printf_i+0x248>)
 800387e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003882:	e7e3      	b.n	800384c <_printf_i+0x174>
 8003884:	065e      	lsls	r6, r3, #25
 8003886:	bf48      	it	mi
 8003888:	b2ad      	uxthmi	r5, r5
 800388a:	e7e6      	b.n	800385a <_printf_i+0x182>
 800388c:	4616      	mov	r6, r2
 800388e:	e7bb      	b.n	8003808 <_printf_i+0x130>
 8003890:	680b      	ldr	r3, [r1, #0]
 8003892:	6826      	ldr	r6, [r4, #0]
 8003894:	6960      	ldr	r0, [r4, #20]
 8003896:	1d1d      	adds	r5, r3, #4
 8003898:	600d      	str	r5, [r1, #0]
 800389a:	0635      	lsls	r5, r6, #24
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	d501      	bpl.n	80038a4 <_printf_i+0x1cc>
 80038a0:	6018      	str	r0, [r3, #0]
 80038a2:	e002      	b.n	80038aa <_printf_i+0x1d2>
 80038a4:	0671      	lsls	r1, r6, #25
 80038a6:	d5fb      	bpl.n	80038a0 <_printf_i+0x1c8>
 80038a8:	8018      	strh	r0, [r3, #0]
 80038aa:	2300      	movs	r3, #0
 80038ac:	6123      	str	r3, [r4, #16]
 80038ae:	4616      	mov	r6, r2
 80038b0:	e7ba      	b.n	8003828 <_printf_i+0x150>
 80038b2:	680b      	ldr	r3, [r1, #0]
 80038b4:	1d1a      	adds	r2, r3, #4
 80038b6:	600a      	str	r2, [r1, #0]
 80038b8:	681e      	ldr	r6, [r3, #0]
 80038ba:	6862      	ldr	r2, [r4, #4]
 80038bc:	2100      	movs	r1, #0
 80038be:	4630      	mov	r0, r6
 80038c0:	f7fc fd16 	bl	80002f0 <memchr>
 80038c4:	b108      	cbz	r0, 80038ca <_printf_i+0x1f2>
 80038c6:	1b80      	subs	r0, r0, r6
 80038c8:	6060      	str	r0, [r4, #4]
 80038ca:	6863      	ldr	r3, [r4, #4]
 80038cc:	6123      	str	r3, [r4, #16]
 80038ce:	2300      	movs	r3, #0
 80038d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038d4:	e7a8      	b.n	8003828 <_printf_i+0x150>
 80038d6:	6923      	ldr	r3, [r4, #16]
 80038d8:	4632      	mov	r2, r6
 80038da:	4649      	mov	r1, r9
 80038dc:	4640      	mov	r0, r8
 80038de:	47d0      	blx	sl
 80038e0:	3001      	adds	r0, #1
 80038e2:	d0ab      	beq.n	800383c <_printf_i+0x164>
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	079b      	lsls	r3, r3, #30
 80038e8:	d413      	bmi.n	8003912 <_printf_i+0x23a>
 80038ea:	68e0      	ldr	r0, [r4, #12]
 80038ec:	9b03      	ldr	r3, [sp, #12]
 80038ee:	4298      	cmp	r0, r3
 80038f0:	bfb8      	it	lt
 80038f2:	4618      	movlt	r0, r3
 80038f4:	e7a4      	b.n	8003840 <_printf_i+0x168>
 80038f6:	2301      	movs	r3, #1
 80038f8:	4632      	mov	r2, r6
 80038fa:	4649      	mov	r1, r9
 80038fc:	4640      	mov	r0, r8
 80038fe:	47d0      	blx	sl
 8003900:	3001      	adds	r0, #1
 8003902:	d09b      	beq.n	800383c <_printf_i+0x164>
 8003904:	3501      	adds	r5, #1
 8003906:	68e3      	ldr	r3, [r4, #12]
 8003908:	9903      	ldr	r1, [sp, #12]
 800390a:	1a5b      	subs	r3, r3, r1
 800390c:	42ab      	cmp	r3, r5
 800390e:	dcf2      	bgt.n	80038f6 <_printf_i+0x21e>
 8003910:	e7eb      	b.n	80038ea <_printf_i+0x212>
 8003912:	2500      	movs	r5, #0
 8003914:	f104 0619 	add.w	r6, r4, #25
 8003918:	e7f5      	b.n	8003906 <_printf_i+0x22e>
 800391a:	bf00      	nop
 800391c:	08005d0a 	.word	0x08005d0a
 8003920:	08005d1b 	.word	0x08005d1b

08003924 <siprintf>:
 8003924:	b40e      	push	{r1, r2, r3}
 8003926:	b500      	push	{lr}
 8003928:	b09c      	sub	sp, #112	; 0x70
 800392a:	ab1d      	add	r3, sp, #116	; 0x74
 800392c:	9002      	str	r0, [sp, #8]
 800392e:	9006      	str	r0, [sp, #24]
 8003930:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003934:	4809      	ldr	r0, [pc, #36]	; (800395c <siprintf+0x38>)
 8003936:	9107      	str	r1, [sp, #28]
 8003938:	9104      	str	r1, [sp, #16]
 800393a:	4909      	ldr	r1, [pc, #36]	; (8003960 <siprintf+0x3c>)
 800393c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003940:	9105      	str	r1, [sp, #20]
 8003942:	6800      	ldr	r0, [r0, #0]
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	a902      	add	r1, sp, #8
 8003948:	f001 faca 	bl	8004ee0 <_svfiprintf_r>
 800394c:	9b02      	ldr	r3, [sp, #8]
 800394e:	2200      	movs	r2, #0
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	b01c      	add	sp, #112	; 0x70
 8003954:	f85d eb04 	ldr.w	lr, [sp], #4
 8003958:	b003      	add	sp, #12
 800395a:	4770      	bx	lr
 800395c:	24000010 	.word	0x24000010
 8003960:	ffff0208 	.word	0xffff0208

08003964 <quorem>:
 8003964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003968:	6903      	ldr	r3, [r0, #16]
 800396a:	690c      	ldr	r4, [r1, #16]
 800396c:	42a3      	cmp	r3, r4
 800396e:	4607      	mov	r7, r0
 8003970:	f2c0 8081 	blt.w	8003a76 <quorem+0x112>
 8003974:	3c01      	subs	r4, #1
 8003976:	f101 0814 	add.w	r8, r1, #20
 800397a:	f100 0514 	add.w	r5, r0, #20
 800397e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003988:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800398c:	3301      	adds	r3, #1
 800398e:	429a      	cmp	r2, r3
 8003990:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003994:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003998:	fbb2 f6f3 	udiv	r6, r2, r3
 800399c:	d331      	bcc.n	8003a02 <quorem+0x9e>
 800399e:	f04f 0e00 	mov.w	lr, #0
 80039a2:	4640      	mov	r0, r8
 80039a4:	46ac      	mov	ip, r5
 80039a6:	46f2      	mov	sl, lr
 80039a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80039ac:	b293      	uxth	r3, r2
 80039ae:	fb06 e303 	mla	r3, r6, r3, lr
 80039b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	ebaa 0303 	sub.w	r3, sl, r3
 80039bc:	0c12      	lsrs	r2, r2, #16
 80039be:	f8dc a000 	ldr.w	sl, [ip]
 80039c2:	fb06 e202 	mla	r2, r6, r2, lr
 80039c6:	fa13 f38a 	uxtah	r3, r3, sl
 80039ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80039ce:	fa1f fa82 	uxth.w	sl, r2
 80039d2:	f8dc 2000 	ldr.w	r2, [ip]
 80039d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80039da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80039de:	b29b      	uxth	r3, r3
 80039e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039e4:	4581      	cmp	r9, r0
 80039e6:	f84c 3b04 	str.w	r3, [ip], #4
 80039ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80039ee:	d2db      	bcs.n	80039a8 <quorem+0x44>
 80039f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80039f4:	b92b      	cbnz	r3, 8003a02 <quorem+0x9e>
 80039f6:	9b01      	ldr	r3, [sp, #4]
 80039f8:	3b04      	subs	r3, #4
 80039fa:	429d      	cmp	r5, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	d32e      	bcc.n	8003a5e <quorem+0xfa>
 8003a00:	613c      	str	r4, [r7, #16]
 8003a02:	4638      	mov	r0, r7
 8003a04:	f001 f856 	bl	8004ab4 <__mcmp>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	db24      	blt.n	8003a56 <quorem+0xf2>
 8003a0c:	3601      	adds	r6, #1
 8003a0e:	4628      	mov	r0, r5
 8003a10:	f04f 0c00 	mov.w	ip, #0
 8003a14:	f858 2b04 	ldr.w	r2, [r8], #4
 8003a18:	f8d0 e000 	ldr.w	lr, [r0]
 8003a1c:	b293      	uxth	r3, r2
 8003a1e:	ebac 0303 	sub.w	r3, ip, r3
 8003a22:	0c12      	lsrs	r2, r2, #16
 8003a24:	fa13 f38e 	uxtah	r3, r3, lr
 8003a28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003a2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a36:	45c1      	cmp	r9, r8
 8003a38:	f840 3b04 	str.w	r3, [r0], #4
 8003a3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003a40:	d2e8      	bcs.n	8003a14 <quorem+0xb0>
 8003a42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a4a:	b922      	cbnz	r2, 8003a56 <quorem+0xf2>
 8003a4c:	3b04      	subs	r3, #4
 8003a4e:	429d      	cmp	r5, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	d30a      	bcc.n	8003a6a <quorem+0x106>
 8003a54:	613c      	str	r4, [r7, #16]
 8003a56:	4630      	mov	r0, r6
 8003a58:	b003      	add	sp, #12
 8003a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	3b04      	subs	r3, #4
 8003a62:	2a00      	cmp	r2, #0
 8003a64:	d1cc      	bne.n	8003a00 <quorem+0x9c>
 8003a66:	3c01      	subs	r4, #1
 8003a68:	e7c7      	b.n	80039fa <quorem+0x96>
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	3b04      	subs	r3, #4
 8003a6e:	2a00      	cmp	r2, #0
 8003a70:	d1f0      	bne.n	8003a54 <quorem+0xf0>
 8003a72:	3c01      	subs	r4, #1
 8003a74:	e7eb      	b.n	8003a4e <quorem+0xea>
 8003a76:	2000      	movs	r0, #0
 8003a78:	e7ee      	b.n	8003a58 <quorem+0xf4>
 8003a7a:	0000      	movs	r0, r0
 8003a7c:	0000      	movs	r0, r0
	...

08003a80 <_dtoa_r>:
 8003a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a84:	ec59 8b10 	vmov	r8, r9, d0
 8003a88:	b095      	sub	sp, #84	; 0x54
 8003a8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003a8c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8003a8e:	9107      	str	r1, [sp, #28]
 8003a90:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003a94:	4606      	mov	r6, r0
 8003a96:	9209      	str	r2, [sp, #36]	; 0x24
 8003a98:	9310      	str	r3, [sp, #64]	; 0x40
 8003a9a:	b975      	cbnz	r5, 8003aba <_dtoa_r+0x3a>
 8003a9c:	2010      	movs	r0, #16
 8003a9e:	f000 fd75 	bl	800458c <malloc>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	6270      	str	r0, [r6, #36]	; 0x24
 8003aa6:	b920      	cbnz	r0, 8003ab2 <_dtoa_r+0x32>
 8003aa8:	4bab      	ldr	r3, [pc, #684]	; (8003d58 <_dtoa_r+0x2d8>)
 8003aaa:	21ea      	movs	r1, #234	; 0xea
 8003aac:	48ab      	ldr	r0, [pc, #684]	; (8003d5c <_dtoa_r+0x2dc>)
 8003aae:	f001 fb27 	bl	8005100 <__assert_func>
 8003ab2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003ab6:	6005      	str	r5, [r0, #0]
 8003ab8:	60c5      	str	r5, [r0, #12]
 8003aba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003abc:	6819      	ldr	r1, [r3, #0]
 8003abe:	b151      	cbz	r1, 8003ad6 <_dtoa_r+0x56>
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	604a      	str	r2, [r1, #4]
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	4093      	lsls	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
 8003aca:	4630      	mov	r0, r6
 8003acc:	f000 fdb4 	bl	8004638 <_Bfree>
 8003ad0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	f1b9 0300 	subs.w	r3, r9, #0
 8003ada:	bfbb      	ittet	lt
 8003adc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ae0:	9303      	strlt	r3, [sp, #12]
 8003ae2:	2300      	movge	r3, #0
 8003ae4:	2201      	movlt	r2, #1
 8003ae6:	bfac      	ite	ge
 8003ae8:	6023      	strge	r3, [r4, #0]
 8003aea:	6022      	strlt	r2, [r4, #0]
 8003aec:	4b9c      	ldr	r3, [pc, #624]	; (8003d60 <_dtoa_r+0x2e0>)
 8003aee:	9c03      	ldr	r4, [sp, #12]
 8003af0:	43a3      	bics	r3, r4
 8003af2:	d11a      	bne.n	8003b2a <_dtoa_r+0xaa>
 8003af4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003af6:	f242 730f 	movw	r3, #9999	; 0x270f
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8003b00:	ea53 0308 	orrs.w	r3, r3, r8
 8003b04:	f000 8512 	beq.w	800452c <_dtoa_r+0xaac>
 8003b08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003b0a:	b953      	cbnz	r3, 8003b22 <_dtoa_r+0xa2>
 8003b0c:	4b95      	ldr	r3, [pc, #596]	; (8003d64 <_dtoa_r+0x2e4>)
 8003b0e:	e01f      	b.n	8003b50 <_dtoa_r+0xd0>
 8003b10:	4b95      	ldr	r3, [pc, #596]	; (8003d68 <_dtoa_r+0x2e8>)
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	3308      	adds	r3, #8
 8003b16:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	9800      	ldr	r0, [sp, #0]
 8003b1c:	b015      	add	sp, #84	; 0x54
 8003b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b22:	4b90      	ldr	r3, [pc, #576]	; (8003d64 <_dtoa_r+0x2e4>)
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	3303      	adds	r3, #3
 8003b28:	e7f5      	b.n	8003b16 <_dtoa_r+0x96>
 8003b2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003b2e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b36:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003b3a:	d10b      	bne.n	8003b54 <_dtoa_r+0xd4>
 8003b3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b3e:	2301      	movs	r3, #1
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 84ee 	beq.w	8004526 <_dtoa_r+0xaa6>
 8003b4a:	4888      	ldr	r0, [pc, #544]	; (8003d6c <_dtoa_r+0x2ec>)
 8003b4c:	6018      	str	r0, [r3, #0]
 8003b4e:	1e43      	subs	r3, r0, #1
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	e7e2      	b.n	8003b1a <_dtoa_r+0x9a>
 8003b54:	a913      	add	r1, sp, #76	; 0x4c
 8003b56:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8003b5a:	aa12      	add	r2, sp, #72	; 0x48
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	f001 f84d 	bl	8004bfc <__d2b>
 8003b62:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8003b66:	4605      	mov	r5, r0
 8003b68:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003b6a:	2900      	cmp	r1, #0
 8003b6c:	d047      	beq.n	8003bfe <_dtoa_r+0x17e>
 8003b6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003b70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003b74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003b78:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8003b7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003b80:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8003b84:	2400      	movs	r4, #0
 8003b86:	ec43 2b16 	vmov	d6, r2, r3
 8003b8a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8003b8e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8003d40 <_dtoa_r+0x2c0>
 8003b92:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003b96:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8003d48 <_dtoa_r+0x2c8>
 8003b9a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8003b9e:	eeb0 7b46 	vmov.f64	d7, d6
 8003ba2:	ee06 1a90 	vmov	s13, r1
 8003ba6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8003baa:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8003d50 <_dtoa_r+0x2d0>
 8003bae:	eea5 7b06 	vfma.f64	d7, d5, d6
 8003bb2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8003bb6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bbe:	ee16 ba90 	vmov	fp, s13
 8003bc2:	9411      	str	r4, [sp, #68]	; 0x44
 8003bc4:	d508      	bpl.n	8003bd8 <_dtoa_r+0x158>
 8003bc6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8003bca:	eeb4 6b47 	vcmp.f64	d6, d7
 8003bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd2:	bf18      	it	ne
 8003bd4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8003bd8:	f1bb 0f16 	cmp.w	fp, #22
 8003bdc:	d832      	bhi.n	8003c44 <_dtoa_r+0x1c4>
 8003bde:	4b64      	ldr	r3, [pc, #400]	; (8003d70 <_dtoa_r+0x2f0>)
 8003be0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003be4:	ed93 7b00 	vldr	d7, [r3]
 8003be8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8003bec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf4:	d501      	bpl.n	8003bfa <_dtoa_r+0x17a>
 8003bf6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e023      	b.n	8003c46 <_dtoa_r+0x1c6>
 8003bfe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003c00:	4401      	add	r1, r0
 8003c02:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	bfc3      	ittte	gt
 8003c0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003c0e:	fa04 f303 	lslgt.w	r3, r4, r3
 8003c12:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8003c16:	f1c3 0320 	rsble	r3, r3, #32
 8003c1a:	bfc6      	itte	gt
 8003c1c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8003c20:	ea43 0308 	orrgt.w	r3, r3, r8
 8003c24:	fa08 f303 	lslle.w	r3, r8, r3
 8003c28:	ee07 3a90 	vmov	s15, r3
 8003c2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003c30:	3901      	subs	r1, #1
 8003c32:	ed8d 7b00 	vstr	d7, [sp]
 8003c36:	9c01      	ldr	r4, [sp, #4]
 8003c38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c3c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8003c40:	2401      	movs	r4, #1
 8003c42:	e7a0      	b.n	8003b86 <_dtoa_r+0x106>
 8003c44:	2301      	movs	r3, #1
 8003c46:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c48:	1a43      	subs	r3, r0, r1
 8003c4a:	1e5a      	subs	r2, r3, #1
 8003c4c:	bf45      	ittet	mi
 8003c4e:	f1c3 0301 	rsbmi	r3, r3, #1
 8003c52:	9305      	strmi	r3, [sp, #20]
 8003c54:	2300      	movpl	r3, #0
 8003c56:	2300      	movmi	r3, #0
 8003c58:	9206      	str	r2, [sp, #24]
 8003c5a:	bf54      	ite	pl
 8003c5c:	9305      	strpl	r3, [sp, #20]
 8003c5e:	9306      	strmi	r3, [sp, #24]
 8003c60:	f1bb 0f00 	cmp.w	fp, #0
 8003c64:	db18      	blt.n	8003c98 <_dtoa_r+0x218>
 8003c66:	9b06      	ldr	r3, [sp, #24]
 8003c68:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8003c6c:	445b      	add	r3, fp
 8003c6e:	9306      	str	r3, [sp, #24]
 8003c70:	2300      	movs	r3, #0
 8003c72:	9a07      	ldr	r2, [sp, #28]
 8003c74:	2a09      	cmp	r2, #9
 8003c76:	d849      	bhi.n	8003d0c <_dtoa_r+0x28c>
 8003c78:	2a05      	cmp	r2, #5
 8003c7a:	bfc4      	itt	gt
 8003c7c:	3a04      	subgt	r2, #4
 8003c7e:	9207      	strgt	r2, [sp, #28]
 8003c80:	9a07      	ldr	r2, [sp, #28]
 8003c82:	f1a2 0202 	sub.w	r2, r2, #2
 8003c86:	bfcc      	ite	gt
 8003c88:	2400      	movgt	r4, #0
 8003c8a:	2401      	movle	r4, #1
 8003c8c:	2a03      	cmp	r2, #3
 8003c8e:	d848      	bhi.n	8003d22 <_dtoa_r+0x2a2>
 8003c90:	e8df f002 	tbb	[pc, r2]
 8003c94:	3a2c2e0b 	.word	0x3a2c2e0b
 8003c98:	9b05      	ldr	r3, [sp, #20]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	eba3 030b 	sub.w	r3, r3, fp
 8003ca0:	9305      	str	r3, [sp, #20]
 8003ca2:	920e      	str	r2, [sp, #56]	; 0x38
 8003ca4:	f1cb 0300 	rsb	r3, fp, #0
 8003ca8:	e7e3      	b.n	8003c72 <_dtoa_r+0x1f2>
 8003caa:	2200      	movs	r2, #0
 8003cac:	9208      	str	r2, [sp, #32]
 8003cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cb0:	2a00      	cmp	r2, #0
 8003cb2:	dc39      	bgt.n	8003d28 <_dtoa_r+0x2a8>
 8003cb4:	f04f 0a01 	mov.w	sl, #1
 8003cb8:	46d1      	mov	r9, sl
 8003cba:	4652      	mov	r2, sl
 8003cbc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8003cc0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	6079      	str	r1, [r7, #4]
 8003cc6:	2004      	movs	r0, #4
 8003cc8:	f100 0c14 	add.w	ip, r0, #20
 8003ccc:	4594      	cmp	ip, r2
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	d92f      	bls.n	8003d32 <_dtoa_r+0x2b2>
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	930c      	str	r3, [sp, #48]	; 0x30
 8003cd6:	f000 fc6f 	bl	80045b8 <_Balloc>
 8003cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cdc:	9000      	str	r0, [sp, #0]
 8003cde:	4602      	mov	r2, r0
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d149      	bne.n	8003d78 <_dtoa_r+0x2f8>
 8003ce4:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <_dtoa_r+0x2f4>)
 8003ce6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003cea:	e6df      	b.n	8003aac <_dtoa_r+0x2c>
 8003cec:	2201      	movs	r2, #1
 8003cee:	e7dd      	b.n	8003cac <_dtoa_r+0x22c>
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	9208      	str	r2, [sp, #32]
 8003cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cf6:	eb0b 0a02 	add.w	sl, fp, r2
 8003cfa:	f10a 0901 	add.w	r9, sl, #1
 8003cfe:	464a      	mov	r2, r9
 8003d00:	2a01      	cmp	r2, #1
 8003d02:	bfb8      	it	lt
 8003d04:	2201      	movlt	r2, #1
 8003d06:	e7db      	b.n	8003cc0 <_dtoa_r+0x240>
 8003d08:	2201      	movs	r2, #1
 8003d0a:	e7f2      	b.n	8003cf2 <_dtoa_r+0x272>
 8003d0c:	2401      	movs	r4, #1
 8003d0e:	2200      	movs	r2, #0
 8003d10:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8003d14:	f04f 3aff 	mov.w	sl, #4294967295
 8003d18:	2100      	movs	r1, #0
 8003d1a:	46d1      	mov	r9, sl
 8003d1c:	2212      	movs	r2, #18
 8003d1e:	9109      	str	r1, [sp, #36]	; 0x24
 8003d20:	e7ce      	b.n	8003cc0 <_dtoa_r+0x240>
 8003d22:	2201      	movs	r2, #1
 8003d24:	9208      	str	r2, [sp, #32]
 8003d26:	e7f5      	b.n	8003d14 <_dtoa_r+0x294>
 8003d28:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8003d2c:	46d1      	mov	r9, sl
 8003d2e:	4652      	mov	r2, sl
 8003d30:	e7c6      	b.n	8003cc0 <_dtoa_r+0x240>
 8003d32:	3101      	adds	r1, #1
 8003d34:	6079      	str	r1, [r7, #4]
 8003d36:	0040      	lsls	r0, r0, #1
 8003d38:	e7c6      	b.n	8003cc8 <_dtoa_r+0x248>
 8003d3a:	bf00      	nop
 8003d3c:	f3af 8000 	nop.w
 8003d40:	636f4361 	.word	0x636f4361
 8003d44:	3fd287a7 	.word	0x3fd287a7
 8003d48:	8b60c8b3 	.word	0x8b60c8b3
 8003d4c:	3fc68a28 	.word	0x3fc68a28
 8003d50:	509f79fb 	.word	0x509f79fb
 8003d54:	3fd34413 	.word	0x3fd34413
 8003d58:	08005d39 	.word	0x08005d39
 8003d5c:	08005d50 	.word	0x08005d50
 8003d60:	7ff00000 	.word	0x7ff00000
 8003d64:	08005d35 	.word	0x08005d35
 8003d68:	08005d2c 	.word	0x08005d2c
 8003d6c:	08005d09 	.word	0x08005d09
 8003d70:	08005e48 	.word	0x08005e48
 8003d74:	08005daf 	.word	0x08005daf
 8003d78:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003d7a:	9900      	ldr	r1, [sp, #0]
 8003d7c:	6011      	str	r1, [r2, #0]
 8003d7e:	f1b9 0f0e 	cmp.w	r9, #14
 8003d82:	d872      	bhi.n	8003e6a <_dtoa_r+0x3ea>
 8003d84:	2c00      	cmp	r4, #0
 8003d86:	d070      	beq.n	8003e6a <_dtoa_r+0x3ea>
 8003d88:	f1bb 0f00 	cmp.w	fp, #0
 8003d8c:	f340 80a6 	ble.w	8003edc <_dtoa_r+0x45c>
 8003d90:	49ca      	ldr	r1, [pc, #808]	; (80040bc <_dtoa_r+0x63c>)
 8003d92:	f00b 020f 	and.w	r2, fp, #15
 8003d96:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8003d9a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003d9e:	ed92 7b00 	vldr	d7, [r2]
 8003da2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8003da6:	f000 808d 	beq.w	8003ec4 <_dtoa_r+0x444>
 8003daa:	4ac5      	ldr	r2, [pc, #788]	; (80040c0 <_dtoa_r+0x640>)
 8003dac:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8003db0:	ed92 6b08 	vldr	d6, [r2, #32]
 8003db4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8003db8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003dbc:	f001 010f 	and.w	r1, r1, #15
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	48bf      	ldr	r0, [pc, #764]	; (80040c0 <_dtoa_r+0x640>)
 8003dc4:	2900      	cmp	r1, #0
 8003dc6:	d17f      	bne.n	8003ec8 <_dtoa_r+0x448>
 8003dc8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8003dcc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8003dd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003dd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003dd6:	2900      	cmp	r1, #0
 8003dd8:	f000 80b2 	beq.w	8003f40 <_dtoa_r+0x4c0>
 8003ddc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003de0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003de4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dec:	f140 80a8 	bpl.w	8003f40 <_dtoa_r+0x4c0>
 8003df0:	f1b9 0f00 	cmp.w	r9, #0
 8003df4:	f000 80a4 	beq.w	8003f40 <_dtoa_r+0x4c0>
 8003df8:	f1ba 0f00 	cmp.w	sl, #0
 8003dfc:	dd31      	ble.n	8003e62 <_dtoa_r+0x3e2>
 8003dfe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003e02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003e06:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003e0a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003e0e:	3201      	adds	r2, #1
 8003e10:	4650      	mov	r0, sl
 8003e12:	ed9d 6b02 	vldr	d6, [sp, #8]
 8003e16:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8003e1a:	ee07 2a90 	vmov	s15, r2
 8003e1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003e22:	eea7 5b06 	vfma.f64	d5, d7, d6
 8003e26:	ed8d 5b02 	vstr	d5, [sp, #8]
 8003e2a:	9c03      	ldr	r4, [sp, #12]
 8003e2c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003e30:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8003e34:	2800      	cmp	r0, #0
 8003e36:	f040 8086 	bne.w	8003f46 <_dtoa_r+0x4c6>
 8003e3a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8003e3e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003e42:	ec42 1b17 	vmov	d7, r1, r2
 8003e46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e4e:	f300 8272 	bgt.w	8004336 <_dtoa_r+0x8b6>
 8003e52:	eeb1 7b47 	vneg.f64	d7, d7
 8003e56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5e:	f100 8267 	bmi.w	8004330 <_dtoa_r+0x8b0>
 8003e62:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8003e66:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003e6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003e6c:	2a00      	cmp	r2, #0
 8003e6e:	f2c0 8129 	blt.w	80040c4 <_dtoa_r+0x644>
 8003e72:	f1bb 0f0e 	cmp.w	fp, #14
 8003e76:	f300 8125 	bgt.w	80040c4 <_dtoa_r+0x644>
 8003e7a:	4b90      	ldr	r3, [pc, #576]	; (80040bc <_dtoa_r+0x63c>)
 8003e7c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003e80:	ed93 6b00 	vldr	d6, [r3]
 8003e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f280 80c3 	bge.w	8004012 <_dtoa_r+0x592>
 8003e8c:	f1b9 0f00 	cmp.w	r9, #0
 8003e90:	f300 80bf 	bgt.w	8004012 <_dtoa_r+0x592>
 8003e94:	f040 824c 	bne.w	8004330 <_dtoa_r+0x8b0>
 8003e98:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8003e9c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003ea0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003ea4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eac:	464c      	mov	r4, r9
 8003eae:	464f      	mov	r7, r9
 8003eb0:	f280 8222 	bge.w	80042f8 <_dtoa_r+0x878>
 8003eb4:	f8dd 8000 	ldr.w	r8, [sp]
 8003eb8:	2331      	movs	r3, #49	; 0x31
 8003eba:	f808 3b01 	strb.w	r3, [r8], #1
 8003ebe:	f10b 0b01 	add.w	fp, fp, #1
 8003ec2:	e21e      	b.n	8004302 <_dtoa_r+0x882>
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	e77c      	b.n	8003dc2 <_dtoa_r+0x342>
 8003ec8:	07cc      	lsls	r4, r1, #31
 8003eca:	d504      	bpl.n	8003ed6 <_dtoa_r+0x456>
 8003ecc:	ed90 6b00 	vldr	d6, [r0]
 8003ed0:	3201      	adds	r2, #1
 8003ed2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003ed6:	1049      	asrs	r1, r1, #1
 8003ed8:	3008      	adds	r0, #8
 8003eda:	e773      	b.n	8003dc4 <_dtoa_r+0x344>
 8003edc:	d02e      	beq.n	8003f3c <_dtoa_r+0x4bc>
 8003ede:	f1cb 0100 	rsb	r1, fp, #0
 8003ee2:	4a76      	ldr	r2, [pc, #472]	; (80040bc <_dtoa_r+0x63c>)
 8003ee4:	f001 000f 	and.w	r0, r1, #15
 8003ee8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003eec:	ed92 7b00 	vldr	d7, [r2]
 8003ef0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8003ef4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003ef8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003efc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8003f00:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8003f04:	486e      	ldr	r0, [pc, #440]	; (80040c0 <_dtoa_r+0x640>)
 8003f06:	1109      	asrs	r1, r1, #4
 8003f08:	2400      	movs	r4, #0
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	b939      	cbnz	r1, 8003f1e <_dtoa_r+0x49e>
 8003f0e:	2c00      	cmp	r4, #0
 8003f10:	f43f af60 	beq.w	8003dd4 <_dtoa_r+0x354>
 8003f14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f1c:	e75a      	b.n	8003dd4 <_dtoa_r+0x354>
 8003f1e:	07cf      	lsls	r7, r1, #31
 8003f20:	d509      	bpl.n	8003f36 <_dtoa_r+0x4b6>
 8003f22:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8003f26:	ed90 7b00 	vldr	d7, [r0]
 8003f2a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003f2e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003f32:	3201      	adds	r2, #1
 8003f34:	2401      	movs	r4, #1
 8003f36:	1049      	asrs	r1, r1, #1
 8003f38:	3008      	adds	r0, #8
 8003f3a:	e7e7      	b.n	8003f0c <_dtoa_r+0x48c>
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	e749      	b.n	8003dd4 <_dtoa_r+0x354>
 8003f40:	465f      	mov	r7, fp
 8003f42:	4648      	mov	r0, r9
 8003f44:	e765      	b.n	8003e12 <_dtoa_r+0x392>
 8003f46:	ec42 1b17 	vmov	d7, r1, r2
 8003f4a:	4a5c      	ldr	r2, [pc, #368]	; (80040bc <_dtoa_r+0x63c>)
 8003f4c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003f50:	ed12 4b02 	vldr	d4, [r2, #-8]
 8003f54:	9a00      	ldr	r2, [sp, #0]
 8003f56:	1814      	adds	r4, r2, r0
 8003f58:	9a08      	ldr	r2, [sp, #32]
 8003f5a:	b352      	cbz	r2, 8003fb2 <_dtoa_r+0x532>
 8003f5c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8003f60:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8003f64:	f8dd 8000 	ldr.w	r8, [sp]
 8003f68:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8003f6c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8003f70:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003f74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8003f78:	ee14 2a90 	vmov	r2, s9
 8003f7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8003f80:	3230      	adds	r2, #48	; 0x30
 8003f82:	ee36 6b45 	vsub.f64	d6, d6, d5
 8003f86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8e:	f808 2b01 	strb.w	r2, [r8], #1
 8003f92:	d439      	bmi.n	8004008 <_dtoa_r+0x588>
 8003f94:	ee32 5b46 	vsub.f64	d5, d2, d6
 8003f98:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8003f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa0:	d472      	bmi.n	8004088 <_dtoa_r+0x608>
 8003fa2:	45a0      	cmp	r8, r4
 8003fa4:	f43f af5d 	beq.w	8003e62 <_dtoa_r+0x3e2>
 8003fa8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8003fac:	ee26 6b03 	vmul.f64	d6, d6, d3
 8003fb0:	e7e0      	b.n	8003f74 <_dtoa_r+0x4f4>
 8003fb2:	f8dd 8000 	ldr.w	r8, [sp]
 8003fb6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8003fba:	4621      	mov	r1, r4
 8003fbc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8003fc0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8003fc4:	ee14 2a90 	vmov	r2, s9
 8003fc8:	3230      	adds	r2, #48	; 0x30
 8003fca:	f808 2b01 	strb.w	r2, [r8], #1
 8003fce:	45a0      	cmp	r8, r4
 8003fd0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8003fd4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8003fd8:	d118      	bne.n	800400c <_dtoa_r+0x58c>
 8003fda:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8003fde:	ee37 4b05 	vadd.f64	d4, d7, d5
 8003fe2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8003fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fea:	dc4d      	bgt.n	8004088 <_dtoa_r+0x608>
 8003fec:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003ff0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff8:	f57f af33 	bpl.w	8003e62 <_dtoa_r+0x3e2>
 8003ffc:	4688      	mov	r8, r1
 8003ffe:	3901      	subs	r1, #1
 8004000:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8004004:	2b30      	cmp	r3, #48	; 0x30
 8004006:	d0f9      	beq.n	8003ffc <_dtoa_r+0x57c>
 8004008:	46bb      	mov	fp, r7
 800400a:	e02a      	b.n	8004062 <_dtoa_r+0x5e2>
 800400c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004010:	e7d6      	b.n	8003fc0 <_dtoa_r+0x540>
 8004012:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004016:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800401a:	f8dd 8000 	ldr.w	r8, [sp]
 800401e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004022:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004026:	ee15 3a10 	vmov	r3, s10
 800402a:	3330      	adds	r3, #48	; 0x30
 800402c:	f808 3b01 	strb.w	r3, [r8], #1
 8004030:	9b00      	ldr	r3, [sp, #0]
 8004032:	eba8 0303 	sub.w	r3, r8, r3
 8004036:	4599      	cmp	r9, r3
 8004038:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800403c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8004040:	d133      	bne.n	80040aa <_dtoa_r+0x62a>
 8004042:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004046:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800404a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800404e:	dc1a      	bgt.n	8004086 <_dtoa_r+0x606>
 8004050:	eeb4 7b46 	vcmp.f64	d7, d6
 8004054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004058:	d103      	bne.n	8004062 <_dtoa_r+0x5e2>
 800405a:	ee15 3a10 	vmov	r3, s10
 800405e:	07d9      	lsls	r1, r3, #31
 8004060:	d411      	bmi.n	8004086 <_dtoa_r+0x606>
 8004062:	4629      	mov	r1, r5
 8004064:	4630      	mov	r0, r6
 8004066:	f000 fae7 	bl	8004638 <_Bfree>
 800406a:	2300      	movs	r3, #0
 800406c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800406e:	f888 3000 	strb.w	r3, [r8]
 8004072:	f10b 0301 	add.w	r3, fp, #1
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800407a:	2b00      	cmp	r3, #0
 800407c:	f43f ad4d 	beq.w	8003b1a <_dtoa_r+0x9a>
 8004080:	f8c3 8000 	str.w	r8, [r3]
 8004084:	e549      	b.n	8003b1a <_dtoa_r+0x9a>
 8004086:	465f      	mov	r7, fp
 8004088:	4643      	mov	r3, r8
 800408a:	4698      	mov	r8, r3
 800408c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004090:	2a39      	cmp	r2, #57	; 0x39
 8004092:	d106      	bne.n	80040a2 <_dtoa_r+0x622>
 8004094:	9a00      	ldr	r2, [sp, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d1f7      	bne.n	800408a <_dtoa_r+0x60a>
 800409a:	9900      	ldr	r1, [sp, #0]
 800409c:	2230      	movs	r2, #48	; 0x30
 800409e:	3701      	adds	r7, #1
 80040a0:	700a      	strb	r2, [r1, #0]
 80040a2:	781a      	ldrb	r2, [r3, #0]
 80040a4:	3201      	adds	r2, #1
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	e7ae      	b.n	8004008 <_dtoa_r+0x588>
 80040aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80040ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80040b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b6:	d1b2      	bne.n	800401e <_dtoa_r+0x59e>
 80040b8:	e7d3      	b.n	8004062 <_dtoa_r+0x5e2>
 80040ba:	bf00      	nop
 80040bc:	08005e48 	.word	0x08005e48
 80040c0:	08005e20 	.word	0x08005e20
 80040c4:	9908      	ldr	r1, [sp, #32]
 80040c6:	2900      	cmp	r1, #0
 80040c8:	f000 80d1 	beq.w	800426e <_dtoa_r+0x7ee>
 80040cc:	9907      	ldr	r1, [sp, #28]
 80040ce:	2901      	cmp	r1, #1
 80040d0:	f300 80b4 	bgt.w	800423c <_dtoa_r+0x7bc>
 80040d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80040d6:	2900      	cmp	r1, #0
 80040d8:	f000 80ac 	beq.w	8004234 <_dtoa_r+0x7b4>
 80040dc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80040e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80040e4:	461c      	mov	r4, r3
 80040e6:	930a      	str	r3, [sp, #40]	; 0x28
 80040e8:	9b05      	ldr	r3, [sp, #20]
 80040ea:	4413      	add	r3, r2
 80040ec:	9305      	str	r3, [sp, #20]
 80040ee:	9b06      	ldr	r3, [sp, #24]
 80040f0:	2101      	movs	r1, #1
 80040f2:	4413      	add	r3, r2
 80040f4:	4630      	mov	r0, r6
 80040f6:	9306      	str	r3, [sp, #24]
 80040f8:	f000 fb5a 	bl	80047b0 <__i2b>
 80040fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040fe:	4607      	mov	r7, r0
 8004100:	f1b8 0f00 	cmp.w	r8, #0
 8004104:	dd0d      	ble.n	8004122 <_dtoa_r+0x6a2>
 8004106:	9a06      	ldr	r2, [sp, #24]
 8004108:	2a00      	cmp	r2, #0
 800410a:	dd0a      	ble.n	8004122 <_dtoa_r+0x6a2>
 800410c:	4542      	cmp	r2, r8
 800410e:	9905      	ldr	r1, [sp, #20]
 8004110:	bfa8      	it	ge
 8004112:	4642      	movge	r2, r8
 8004114:	1a89      	subs	r1, r1, r2
 8004116:	9105      	str	r1, [sp, #20]
 8004118:	9906      	ldr	r1, [sp, #24]
 800411a:	eba8 0802 	sub.w	r8, r8, r2
 800411e:	1a8a      	subs	r2, r1, r2
 8004120:	9206      	str	r2, [sp, #24]
 8004122:	b303      	cbz	r3, 8004166 <_dtoa_r+0x6e6>
 8004124:	9a08      	ldr	r2, [sp, #32]
 8004126:	2a00      	cmp	r2, #0
 8004128:	f000 80a6 	beq.w	8004278 <_dtoa_r+0x7f8>
 800412c:	2c00      	cmp	r4, #0
 800412e:	dd13      	ble.n	8004158 <_dtoa_r+0x6d8>
 8004130:	4639      	mov	r1, r7
 8004132:	4622      	mov	r2, r4
 8004134:	4630      	mov	r0, r6
 8004136:	930c      	str	r3, [sp, #48]	; 0x30
 8004138:	f000 fbf6 	bl	8004928 <__pow5mult>
 800413c:	462a      	mov	r2, r5
 800413e:	4601      	mov	r1, r0
 8004140:	4607      	mov	r7, r0
 8004142:	4630      	mov	r0, r6
 8004144:	f000 fb4a 	bl	80047dc <__multiply>
 8004148:	4629      	mov	r1, r5
 800414a:	900a      	str	r0, [sp, #40]	; 0x28
 800414c:	4630      	mov	r0, r6
 800414e:	f000 fa73 	bl	8004638 <_Bfree>
 8004152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004156:	4615      	mov	r5, r2
 8004158:	1b1a      	subs	r2, r3, r4
 800415a:	d004      	beq.n	8004166 <_dtoa_r+0x6e6>
 800415c:	4629      	mov	r1, r5
 800415e:	4630      	mov	r0, r6
 8004160:	f000 fbe2 	bl	8004928 <__pow5mult>
 8004164:	4605      	mov	r5, r0
 8004166:	2101      	movs	r1, #1
 8004168:	4630      	mov	r0, r6
 800416a:	f000 fb21 	bl	80047b0 <__i2b>
 800416e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004170:	2b00      	cmp	r3, #0
 8004172:	4604      	mov	r4, r0
 8004174:	f340 8082 	ble.w	800427c <_dtoa_r+0x7fc>
 8004178:	461a      	mov	r2, r3
 800417a:	4601      	mov	r1, r0
 800417c:	4630      	mov	r0, r6
 800417e:	f000 fbd3 	bl	8004928 <__pow5mult>
 8004182:	9b07      	ldr	r3, [sp, #28]
 8004184:	2b01      	cmp	r3, #1
 8004186:	4604      	mov	r4, r0
 8004188:	dd7b      	ble.n	8004282 <_dtoa_r+0x802>
 800418a:	2300      	movs	r3, #0
 800418c:	930a      	str	r3, [sp, #40]	; 0x28
 800418e:	6922      	ldr	r2, [r4, #16]
 8004190:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004194:	6910      	ldr	r0, [r2, #16]
 8004196:	f000 fabb 	bl	8004710 <__hi0bits>
 800419a:	f1c0 0020 	rsb	r0, r0, #32
 800419e:	9b06      	ldr	r3, [sp, #24]
 80041a0:	4418      	add	r0, r3
 80041a2:	f010 001f 	ands.w	r0, r0, #31
 80041a6:	f000 808d 	beq.w	80042c4 <_dtoa_r+0x844>
 80041aa:	f1c0 0220 	rsb	r2, r0, #32
 80041ae:	2a04      	cmp	r2, #4
 80041b0:	f340 8086 	ble.w	80042c0 <_dtoa_r+0x840>
 80041b4:	f1c0 001c 	rsb	r0, r0, #28
 80041b8:	9b05      	ldr	r3, [sp, #20]
 80041ba:	4403      	add	r3, r0
 80041bc:	9305      	str	r3, [sp, #20]
 80041be:	9b06      	ldr	r3, [sp, #24]
 80041c0:	4403      	add	r3, r0
 80041c2:	4480      	add	r8, r0
 80041c4:	9306      	str	r3, [sp, #24]
 80041c6:	9b05      	ldr	r3, [sp, #20]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	dd05      	ble.n	80041d8 <_dtoa_r+0x758>
 80041cc:	4629      	mov	r1, r5
 80041ce:	461a      	mov	r2, r3
 80041d0:	4630      	mov	r0, r6
 80041d2:	f000 fc03 	bl	80049dc <__lshift>
 80041d6:	4605      	mov	r5, r0
 80041d8:	9b06      	ldr	r3, [sp, #24]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	dd05      	ble.n	80041ea <_dtoa_r+0x76a>
 80041de:	4621      	mov	r1, r4
 80041e0:	461a      	mov	r2, r3
 80041e2:	4630      	mov	r0, r6
 80041e4:	f000 fbfa 	bl	80049dc <__lshift>
 80041e8:	4604      	mov	r4, r0
 80041ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d06b      	beq.n	80042c8 <_dtoa_r+0x848>
 80041f0:	4621      	mov	r1, r4
 80041f2:	4628      	mov	r0, r5
 80041f4:	f000 fc5e 	bl	8004ab4 <__mcmp>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	da65      	bge.n	80042c8 <_dtoa_r+0x848>
 80041fc:	2300      	movs	r3, #0
 80041fe:	4629      	mov	r1, r5
 8004200:	220a      	movs	r2, #10
 8004202:	4630      	mov	r0, r6
 8004204:	f000 fa3a 	bl	800467c <__multadd>
 8004208:	9b08      	ldr	r3, [sp, #32]
 800420a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800420e:	4605      	mov	r5, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8192 	beq.w	800453a <_dtoa_r+0xaba>
 8004216:	4639      	mov	r1, r7
 8004218:	2300      	movs	r3, #0
 800421a:	220a      	movs	r2, #10
 800421c:	4630      	mov	r0, r6
 800421e:	f000 fa2d 	bl	800467c <__multadd>
 8004222:	f1ba 0f00 	cmp.w	sl, #0
 8004226:	4607      	mov	r7, r0
 8004228:	f300 808e 	bgt.w	8004348 <_dtoa_r+0x8c8>
 800422c:	9b07      	ldr	r3, [sp, #28]
 800422e:	2b02      	cmp	r3, #2
 8004230:	dc51      	bgt.n	80042d6 <_dtoa_r+0x856>
 8004232:	e089      	b.n	8004348 <_dtoa_r+0x8c8>
 8004234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004236:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800423a:	e751      	b.n	80040e0 <_dtoa_r+0x660>
 800423c:	f109 34ff 	add.w	r4, r9, #4294967295
 8004240:	42a3      	cmp	r3, r4
 8004242:	bfbf      	itttt	lt
 8004244:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004246:	1ae3      	sublt	r3, r4, r3
 8004248:	18d2      	addlt	r2, r2, r3
 800424a:	4613      	movlt	r3, r2
 800424c:	bfb7      	itett	lt
 800424e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004250:	1b1c      	subge	r4, r3, r4
 8004252:	4623      	movlt	r3, r4
 8004254:	2400      	movlt	r4, #0
 8004256:	f1b9 0f00 	cmp.w	r9, #0
 800425a:	bfb5      	itete	lt
 800425c:	9a05      	ldrlt	r2, [sp, #20]
 800425e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8004262:	eba2 0809 	sublt.w	r8, r2, r9
 8004266:	464a      	movge	r2, r9
 8004268:	bfb8      	it	lt
 800426a:	2200      	movlt	r2, #0
 800426c:	e73b      	b.n	80040e6 <_dtoa_r+0x666>
 800426e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004272:	9f08      	ldr	r7, [sp, #32]
 8004274:	461c      	mov	r4, r3
 8004276:	e743      	b.n	8004100 <_dtoa_r+0x680>
 8004278:	461a      	mov	r2, r3
 800427a:	e76f      	b.n	800415c <_dtoa_r+0x6dc>
 800427c:	9b07      	ldr	r3, [sp, #28]
 800427e:	2b01      	cmp	r3, #1
 8004280:	dc18      	bgt.n	80042b4 <_dtoa_r+0x834>
 8004282:	9b02      	ldr	r3, [sp, #8]
 8004284:	b9b3      	cbnz	r3, 80042b4 <_dtoa_r+0x834>
 8004286:	9b03      	ldr	r3, [sp, #12]
 8004288:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800428c:	b9a2      	cbnz	r2, 80042b8 <_dtoa_r+0x838>
 800428e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004292:	0d12      	lsrs	r2, r2, #20
 8004294:	0512      	lsls	r2, r2, #20
 8004296:	b18a      	cbz	r2, 80042bc <_dtoa_r+0x83c>
 8004298:	9b05      	ldr	r3, [sp, #20]
 800429a:	3301      	adds	r3, #1
 800429c:	9305      	str	r3, [sp, #20]
 800429e:	9b06      	ldr	r3, [sp, #24]
 80042a0:	3301      	adds	r3, #1
 80042a2:	9306      	str	r3, [sp, #24]
 80042a4:	2301      	movs	r3, #1
 80042a6:	930a      	str	r3, [sp, #40]	; 0x28
 80042a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f47f af6f 	bne.w	800418e <_dtoa_r+0x70e>
 80042b0:	2001      	movs	r0, #1
 80042b2:	e774      	b.n	800419e <_dtoa_r+0x71e>
 80042b4:	2300      	movs	r3, #0
 80042b6:	e7f6      	b.n	80042a6 <_dtoa_r+0x826>
 80042b8:	9b02      	ldr	r3, [sp, #8]
 80042ba:	e7f4      	b.n	80042a6 <_dtoa_r+0x826>
 80042bc:	920a      	str	r2, [sp, #40]	; 0x28
 80042be:	e7f3      	b.n	80042a8 <_dtoa_r+0x828>
 80042c0:	d081      	beq.n	80041c6 <_dtoa_r+0x746>
 80042c2:	4610      	mov	r0, r2
 80042c4:	301c      	adds	r0, #28
 80042c6:	e777      	b.n	80041b8 <_dtoa_r+0x738>
 80042c8:	f1b9 0f00 	cmp.w	r9, #0
 80042cc:	dc37      	bgt.n	800433e <_dtoa_r+0x8be>
 80042ce:	9b07      	ldr	r3, [sp, #28]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	dd34      	ble.n	800433e <_dtoa_r+0x8be>
 80042d4:	46ca      	mov	sl, r9
 80042d6:	f1ba 0f00 	cmp.w	sl, #0
 80042da:	d10d      	bne.n	80042f8 <_dtoa_r+0x878>
 80042dc:	4621      	mov	r1, r4
 80042de:	4653      	mov	r3, sl
 80042e0:	2205      	movs	r2, #5
 80042e2:	4630      	mov	r0, r6
 80042e4:	f000 f9ca 	bl	800467c <__multadd>
 80042e8:	4601      	mov	r1, r0
 80042ea:	4604      	mov	r4, r0
 80042ec:	4628      	mov	r0, r5
 80042ee:	f000 fbe1 	bl	8004ab4 <__mcmp>
 80042f2:	2800      	cmp	r0, #0
 80042f4:	f73f adde 	bgt.w	8003eb4 <_dtoa_r+0x434>
 80042f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042fa:	f8dd 8000 	ldr.w	r8, [sp]
 80042fe:	ea6f 0b03 	mvn.w	fp, r3
 8004302:	f04f 0900 	mov.w	r9, #0
 8004306:	4621      	mov	r1, r4
 8004308:	4630      	mov	r0, r6
 800430a:	f000 f995 	bl	8004638 <_Bfree>
 800430e:	2f00      	cmp	r7, #0
 8004310:	f43f aea7 	beq.w	8004062 <_dtoa_r+0x5e2>
 8004314:	f1b9 0f00 	cmp.w	r9, #0
 8004318:	d005      	beq.n	8004326 <_dtoa_r+0x8a6>
 800431a:	45b9      	cmp	r9, r7
 800431c:	d003      	beq.n	8004326 <_dtoa_r+0x8a6>
 800431e:	4649      	mov	r1, r9
 8004320:	4630      	mov	r0, r6
 8004322:	f000 f989 	bl	8004638 <_Bfree>
 8004326:	4639      	mov	r1, r7
 8004328:	4630      	mov	r0, r6
 800432a:	f000 f985 	bl	8004638 <_Bfree>
 800432e:	e698      	b.n	8004062 <_dtoa_r+0x5e2>
 8004330:	2400      	movs	r4, #0
 8004332:	4627      	mov	r7, r4
 8004334:	e7e0      	b.n	80042f8 <_dtoa_r+0x878>
 8004336:	46bb      	mov	fp, r7
 8004338:	4604      	mov	r4, r0
 800433a:	4607      	mov	r7, r0
 800433c:	e5ba      	b.n	8003eb4 <_dtoa_r+0x434>
 800433e:	9b08      	ldr	r3, [sp, #32]
 8004340:	46ca      	mov	sl, r9
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 8100 	beq.w	8004548 <_dtoa_r+0xac8>
 8004348:	f1b8 0f00 	cmp.w	r8, #0
 800434c:	dd05      	ble.n	800435a <_dtoa_r+0x8da>
 800434e:	4639      	mov	r1, r7
 8004350:	4642      	mov	r2, r8
 8004352:	4630      	mov	r0, r6
 8004354:	f000 fb42 	bl	80049dc <__lshift>
 8004358:	4607      	mov	r7, r0
 800435a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800435c:	2b00      	cmp	r3, #0
 800435e:	d05d      	beq.n	800441c <_dtoa_r+0x99c>
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4630      	mov	r0, r6
 8004364:	f000 f928 	bl	80045b8 <_Balloc>
 8004368:	4680      	mov	r8, r0
 800436a:	b928      	cbnz	r0, 8004378 <_dtoa_r+0x8f8>
 800436c:	4b82      	ldr	r3, [pc, #520]	; (8004578 <_dtoa_r+0xaf8>)
 800436e:	4602      	mov	r2, r0
 8004370:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004374:	f7ff bb9a 	b.w	8003aac <_dtoa_r+0x2c>
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	3202      	adds	r2, #2
 800437c:	0092      	lsls	r2, r2, #2
 800437e:	f107 010c 	add.w	r1, r7, #12
 8004382:	300c      	adds	r0, #12
 8004384:	f000 f90a 	bl	800459c <memcpy>
 8004388:	2201      	movs	r2, #1
 800438a:	4641      	mov	r1, r8
 800438c:	4630      	mov	r0, r6
 800438e:	f000 fb25 	bl	80049dc <__lshift>
 8004392:	9b00      	ldr	r3, [sp, #0]
 8004394:	3301      	adds	r3, #1
 8004396:	9305      	str	r3, [sp, #20]
 8004398:	9b00      	ldr	r3, [sp, #0]
 800439a:	4453      	add	r3, sl
 800439c:	9309      	str	r3, [sp, #36]	; 0x24
 800439e:	9b02      	ldr	r3, [sp, #8]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	46b9      	mov	r9, r7
 80043a6:	9308      	str	r3, [sp, #32]
 80043a8:	4607      	mov	r7, r0
 80043aa:	9b05      	ldr	r3, [sp, #20]
 80043ac:	4621      	mov	r1, r4
 80043ae:	3b01      	subs	r3, #1
 80043b0:	4628      	mov	r0, r5
 80043b2:	9302      	str	r3, [sp, #8]
 80043b4:	f7ff fad6 	bl	8003964 <quorem>
 80043b8:	4603      	mov	r3, r0
 80043ba:	3330      	adds	r3, #48	; 0x30
 80043bc:	9006      	str	r0, [sp, #24]
 80043be:	4649      	mov	r1, r9
 80043c0:	4628      	mov	r0, r5
 80043c2:	930a      	str	r3, [sp, #40]	; 0x28
 80043c4:	f000 fb76 	bl	8004ab4 <__mcmp>
 80043c8:	463a      	mov	r2, r7
 80043ca:	4682      	mov	sl, r0
 80043cc:	4621      	mov	r1, r4
 80043ce:	4630      	mov	r0, r6
 80043d0:	f000 fb8c 	bl	8004aec <__mdiff>
 80043d4:	68c2      	ldr	r2, [r0, #12]
 80043d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043d8:	4680      	mov	r8, r0
 80043da:	bb0a      	cbnz	r2, 8004420 <_dtoa_r+0x9a0>
 80043dc:	4601      	mov	r1, r0
 80043de:	4628      	mov	r0, r5
 80043e0:	f000 fb68 	bl	8004ab4 <__mcmp>
 80043e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043e6:	4602      	mov	r2, r0
 80043e8:	4641      	mov	r1, r8
 80043ea:	4630      	mov	r0, r6
 80043ec:	920e      	str	r2, [sp, #56]	; 0x38
 80043ee:	930a      	str	r3, [sp, #40]	; 0x28
 80043f0:	f000 f922 	bl	8004638 <_Bfree>
 80043f4:	9b07      	ldr	r3, [sp, #28]
 80043f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80043fc:	ea43 0102 	orr.w	r1, r3, r2
 8004400:	9b08      	ldr	r3, [sp, #32]
 8004402:	430b      	orrs	r3, r1
 8004404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004406:	d10d      	bne.n	8004424 <_dtoa_r+0x9a4>
 8004408:	2b39      	cmp	r3, #57	; 0x39
 800440a:	d029      	beq.n	8004460 <_dtoa_r+0x9e0>
 800440c:	f1ba 0f00 	cmp.w	sl, #0
 8004410:	dd01      	ble.n	8004416 <_dtoa_r+0x996>
 8004412:	9b06      	ldr	r3, [sp, #24]
 8004414:	3331      	adds	r3, #49	; 0x31
 8004416:	9a02      	ldr	r2, [sp, #8]
 8004418:	7013      	strb	r3, [r2, #0]
 800441a:	e774      	b.n	8004306 <_dtoa_r+0x886>
 800441c:	4638      	mov	r0, r7
 800441e:	e7b8      	b.n	8004392 <_dtoa_r+0x912>
 8004420:	2201      	movs	r2, #1
 8004422:	e7e1      	b.n	80043e8 <_dtoa_r+0x968>
 8004424:	f1ba 0f00 	cmp.w	sl, #0
 8004428:	db06      	blt.n	8004438 <_dtoa_r+0x9b8>
 800442a:	9907      	ldr	r1, [sp, #28]
 800442c:	ea41 0a0a 	orr.w	sl, r1, sl
 8004430:	9908      	ldr	r1, [sp, #32]
 8004432:	ea5a 0101 	orrs.w	r1, sl, r1
 8004436:	d120      	bne.n	800447a <_dtoa_r+0x9fa>
 8004438:	2a00      	cmp	r2, #0
 800443a:	ddec      	ble.n	8004416 <_dtoa_r+0x996>
 800443c:	4629      	mov	r1, r5
 800443e:	2201      	movs	r2, #1
 8004440:	4630      	mov	r0, r6
 8004442:	9305      	str	r3, [sp, #20]
 8004444:	f000 faca 	bl	80049dc <__lshift>
 8004448:	4621      	mov	r1, r4
 800444a:	4605      	mov	r5, r0
 800444c:	f000 fb32 	bl	8004ab4 <__mcmp>
 8004450:	2800      	cmp	r0, #0
 8004452:	9b05      	ldr	r3, [sp, #20]
 8004454:	dc02      	bgt.n	800445c <_dtoa_r+0x9dc>
 8004456:	d1de      	bne.n	8004416 <_dtoa_r+0x996>
 8004458:	07da      	lsls	r2, r3, #31
 800445a:	d5dc      	bpl.n	8004416 <_dtoa_r+0x996>
 800445c:	2b39      	cmp	r3, #57	; 0x39
 800445e:	d1d8      	bne.n	8004412 <_dtoa_r+0x992>
 8004460:	9a02      	ldr	r2, [sp, #8]
 8004462:	2339      	movs	r3, #57	; 0x39
 8004464:	7013      	strb	r3, [r2, #0]
 8004466:	4643      	mov	r3, r8
 8004468:	4698      	mov	r8, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8004470:	2a39      	cmp	r2, #57	; 0x39
 8004472:	d051      	beq.n	8004518 <_dtoa_r+0xa98>
 8004474:	3201      	adds	r2, #1
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	e745      	b.n	8004306 <_dtoa_r+0x886>
 800447a:	2a00      	cmp	r2, #0
 800447c:	dd03      	ble.n	8004486 <_dtoa_r+0xa06>
 800447e:	2b39      	cmp	r3, #57	; 0x39
 8004480:	d0ee      	beq.n	8004460 <_dtoa_r+0x9e0>
 8004482:	3301      	adds	r3, #1
 8004484:	e7c7      	b.n	8004416 <_dtoa_r+0x996>
 8004486:	9a05      	ldr	r2, [sp, #20]
 8004488:	9909      	ldr	r1, [sp, #36]	; 0x24
 800448a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800448e:	428a      	cmp	r2, r1
 8004490:	d02b      	beq.n	80044ea <_dtoa_r+0xa6a>
 8004492:	4629      	mov	r1, r5
 8004494:	2300      	movs	r3, #0
 8004496:	220a      	movs	r2, #10
 8004498:	4630      	mov	r0, r6
 800449a:	f000 f8ef 	bl	800467c <__multadd>
 800449e:	45b9      	cmp	r9, r7
 80044a0:	4605      	mov	r5, r0
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	f04f 020a 	mov.w	r2, #10
 80044aa:	4649      	mov	r1, r9
 80044ac:	4630      	mov	r0, r6
 80044ae:	d107      	bne.n	80044c0 <_dtoa_r+0xa40>
 80044b0:	f000 f8e4 	bl	800467c <__multadd>
 80044b4:	4681      	mov	r9, r0
 80044b6:	4607      	mov	r7, r0
 80044b8:	9b05      	ldr	r3, [sp, #20]
 80044ba:	3301      	adds	r3, #1
 80044bc:	9305      	str	r3, [sp, #20]
 80044be:	e774      	b.n	80043aa <_dtoa_r+0x92a>
 80044c0:	f000 f8dc 	bl	800467c <__multadd>
 80044c4:	4639      	mov	r1, r7
 80044c6:	4681      	mov	r9, r0
 80044c8:	2300      	movs	r3, #0
 80044ca:	220a      	movs	r2, #10
 80044cc:	4630      	mov	r0, r6
 80044ce:	f000 f8d5 	bl	800467c <__multadd>
 80044d2:	4607      	mov	r7, r0
 80044d4:	e7f0      	b.n	80044b8 <_dtoa_r+0xa38>
 80044d6:	f1ba 0f00 	cmp.w	sl, #0
 80044da:	9a00      	ldr	r2, [sp, #0]
 80044dc:	bfcc      	ite	gt
 80044de:	46d0      	movgt	r8, sl
 80044e0:	f04f 0801 	movle.w	r8, #1
 80044e4:	4490      	add	r8, r2
 80044e6:	f04f 0900 	mov.w	r9, #0
 80044ea:	4629      	mov	r1, r5
 80044ec:	2201      	movs	r2, #1
 80044ee:	4630      	mov	r0, r6
 80044f0:	9302      	str	r3, [sp, #8]
 80044f2:	f000 fa73 	bl	80049dc <__lshift>
 80044f6:	4621      	mov	r1, r4
 80044f8:	4605      	mov	r5, r0
 80044fa:	f000 fadb 	bl	8004ab4 <__mcmp>
 80044fe:	2800      	cmp	r0, #0
 8004500:	dcb1      	bgt.n	8004466 <_dtoa_r+0x9e6>
 8004502:	d102      	bne.n	800450a <_dtoa_r+0xa8a>
 8004504:	9b02      	ldr	r3, [sp, #8]
 8004506:	07db      	lsls	r3, r3, #31
 8004508:	d4ad      	bmi.n	8004466 <_dtoa_r+0x9e6>
 800450a:	4643      	mov	r3, r8
 800450c:	4698      	mov	r8, r3
 800450e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004512:	2a30      	cmp	r2, #48	; 0x30
 8004514:	d0fa      	beq.n	800450c <_dtoa_r+0xa8c>
 8004516:	e6f6      	b.n	8004306 <_dtoa_r+0x886>
 8004518:	9a00      	ldr	r2, [sp, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d1a4      	bne.n	8004468 <_dtoa_r+0x9e8>
 800451e:	f10b 0b01 	add.w	fp, fp, #1
 8004522:	2331      	movs	r3, #49	; 0x31
 8004524:	e778      	b.n	8004418 <_dtoa_r+0x998>
 8004526:	4b15      	ldr	r3, [pc, #84]	; (800457c <_dtoa_r+0xafc>)
 8004528:	f7ff bb12 	b.w	8003b50 <_dtoa_r+0xd0>
 800452c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800452e:	2b00      	cmp	r3, #0
 8004530:	f47f aaee 	bne.w	8003b10 <_dtoa_r+0x90>
 8004534:	4b12      	ldr	r3, [pc, #72]	; (8004580 <_dtoa_r+0xb00>)
 8004536:	f7ff bb0b 	b.w	8003b50 <_dtoa_r+0xd0>
 800453a:	f1ba 0f00 	cmp.w	sl, #0
 800453e:	dc03      	bgt.n	8004548 <_dtoa_r+0xac8>
 8004540:	9b07      	ldr	r3, [sp, #28]
 8004542:	2b02      	cmp	r3, #2
 8004544:	f73f aec7 	bgt.w	80042d6 <_dtoa_r+0x856>
 8004548:	f8dd 8000 	ldr.w	r8, [sp]
 800454c:	4621      	mov	r1, r4
 800454e:	4628      	mov	r0, r5
 8004550:	f7ff fa08 	bl	8003964 <quorem>
 8004554:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004558:	f808 3b01 	strb.w	r3, [r8], #1
 800455c:	9a00      	ldr	r2, [sp, #0]
 800455e:	eba8 0202 	sub.w	r2, r8, r2
 8004562:	4592      	cmp	sl, r2
 8004564:	ddb7      	ble.n	80044d6 <_dtoa_r+0xa56>
 8004566:	4629      	mov	r1, r5
 8004568:	2300      	movs	r3, #0
 800456a:	220a      	movs	r2, #10
 800456c:	4630      	mov	r0, r6
 800456e:	f000 f885 	bl	800467c <__multadd>
 8004572:	4605      	mov	r5, r0
 8004574:	e7ea      	b.n	800454c <_dtoa_r+0xacc>
 8004576:	bf00      	nop
 8004578:	08005daf 	.word	0x08005daf
 800457c:	08005d08 	.word	0x08005d08
 8004580:	08005d2c 	.word	0x08005d2c

08004584 <_localeconv_r>:
 8004584:	4800      	ldr	r0, [pc, #0]	; (8004588 <_localeconv_r+0x4>)
 8004586:	4770      	bx	lr
 8004588:	24000164 	.word	0x24000164

0800458c <malloc>:
 800458c:	4b02      	ldr	r3, [pc, #8]	; (8004598 <malloc+0xc>)
 800458e:	4601      	mov	r1, r0
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	f000 bbef 	b.w	8004d74 <_malloc_r>
 8004596:	bf00      	nop
 8004598:	24000010 	.word	0x24000010

0800459c <memcpy>:
 800459c:	440a      	add	r2, r1
 800459e:	4291      	cmp	r1, r2
 80045a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80045a4:	d100      	bne.n	80045a8 <memcpy+0xc>
 80045a6:	4770      	bx	lr
 80045a8:	b510      	push	{r4, lr}
 80045aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045b2:	4291      	cmp	r1, r2
 80045b4:	d1f9      	bne.n	80045aa <memcpy+0xe>
 80045b6:	bd10      	pop	{r4, pc}

080045b8 <_Balloc>:
 80045b8:	b570      	push	{r4, r5, r6, lr}
 80045ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80045bc:	4604      	mov	r4, r0
 80045be:	460d      	mov	r5, r1
 80045c0:	b976      	cbnz	r6, 80045e0 <_Balloc+0x28>
 80045c2:	2010      	movs	r0, #16
 80045c4:	f7ff ffe2 	bl	800458c <malloc>
 80045c8:	4602      	mov	r2, r0
 80045ca:	6260      	str	r0, [r4, #36]	; 0x24
 80045cc:	b920      	cbnz	r0, 80045d8 <_Balloc+0x20>
 80045ce:	4b18      	ldr	r3, [pc, #96]	; (8004630 <_Balloc+0x78>)
 80045d0:	4818      	ldr	r0, [pc, #96]	; (8004634 <_Balloc+0x7c>)
 80045d2:	2166      	movs	r1, #102	; 0x66
 80045d4:	f000 fd94 	bl	8005100 <__assert_func>
 80045d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80045dc:	6006      	str	r6, [r0, #0]
 80045de:	60c6      	str	r6, [r0, #12]
 80045e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80045e2:	68f3      	ldr	r3, [r6, #12]
 80045e4:	b183      	cbz	r3, 8004608 <_Balloc+0x50>
 80045e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80045ee:	b9b8      	cbnz	r0, 8004620 <_Balloc+0x68>
 80045f0:	2101      	movs	r1, #1
 80045f2:	fa01 f605 	lsl.w	r6, r1, r5
 80045f6:	1d72      	adds	r2, r6, #5
 80045f8:	0092      	lsls	r2, r2, #2
 80045fa:	4620      	mov	r0, r4
 80045fc:	f000 fb5a 	bl	8004cb4 <_calloc_r>
 8004600:	b160      	cbz	r0, 800461c <_Balloc+0x64>
 8004602:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004606:	e00e      	b.n	8004626 <_Balloc+0x6e>
 8004608:	2221      	movs	r2, #33	; 0x21
 800460a:	2104      	movs	r1, #4
 800460c:	4620      	mov	r0, r4
 800460e:	f000 fb51 	bl	8004cb4 <_calloc_r>
 8004612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004614:	60f0      	str	r0, [r6, #12]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e4      	bne.n	80045e6 <_Balloc+0x2e>
 800461c:	2000      	movs	r0, #0
 800461e:	bd70      	pop	{r4, r5, r6, pc}
 8004620:	6802      	ldr	r2, [r0, #0]
 8004622:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004626:	2300      	movs	r3, #0
 8004628:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800462c:	e7f7      	b.n	800461e <_Balloc+0x66>
 800462e:	bf00      	nop
 8004630:	08005d39 	.word	0x08005d39
 8004634:	08005dc0 	.word	0x08005dc0

08004638 <_Bfree>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800463c:	4605      	mov	r5, r0
 800463e:	460c      	mov	r4, r1
 8004640:	b976      	cbnz	r6, 8004660 <_Bfree+0x28>
 8004642:	2010      	movs	r0, #16
 8004644:	f7ff ffa2 	bl	800458c <malloc>
 8004648:	4602      	mov	r2, r0
 800464a:	6268      	str	r0, [r5, #36]	; 0x24
 800464c:	b920      	cbnz	r0, 8004658 <_Bfree+0x20>
 800464e:	4b09      	ldr	r3, [pc, #36]	; (8004674 <_Bfree+0x3c>)
 8004650:	4809      	ldr	r0, [pc, #36]	; (8004678 <_Bfree+0x40>)
 8004652:	218a      	movs	r1, #138	; 0x8a
 8004654:	f000 fd54 	bl	8005100 <__assert_func>
 8004658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800465c:	6006      	str	r6, [r0, #0]
 800465e:	60c6      	str	r6, [r0, #12]
 8004660:	b13c      	cbz	r4, 8004672 <_Bfree+0x3a>
 8004662:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004664:	6862      	ldr	r2, [r4, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800466c:	6021      	str	r1, [r4, #0]
 800466e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004672:	bd70      	pop	{r4, r5, r6, pc}
 8004674:	08005d39 	.word	0x08005d39
 8004678:	08005dc0 	.word	0x08005dc0

0800467c <__multadd>:
 800467c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004680:	690e      	ldr	r6, [r1, #16]
 8004682:	4607      	mov	r7, r0
 8004684:	4698      	mov	r8, r3
 8004686:	460c      	mov	r4, r1
 8004688:	f101 0014 	add.w	r0, r1, #20
 800468c:	2300      	movs	r3, #0
 800468e:	6805      	ldr	r5, [r0, #0]
 8004690:	b2a9      	uxth	r1, r5
 8004692:	fb02 8101 	mla	r1, r2, r1, r8
 8004696:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800469a:	0c2d      	lsrs	r5, r5, #16
 800469c:	fb02 c505 	mla	r5, r2, r5, ip
 80046a0:	b289      	uxth	r1, r1
 80046a2:	3301      	adds	r3, #1
 80046a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80046a8:	429e      	cmp	r6, r3
 80046aa:	f840 1b04 	str.w	r1, [r0], #4
 80046ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80046b2:	dcec      	bgt.n	800468e <__multadd+0x12>
 80046b4:	f1b8 0f00 	cmp.w	r8, #0
 80046b8:	d022      	beq.n	8004700 <__multadd+0x84>
 80046ba:	68a3      	ldr	r3, [r4, #8]
 80046bc:	42b3      	cmp	r3, r6
 80046be:	dc19      	bgt.n	80046f4 <__multadd+0x78>
 80046c0:	6861      	ldr	r1, [r4, #4]
 80046c2:	4638      	mov	r0, r7
 80046c4:	3101      	adds	r1, #1
 80046c6:	f7ff ff77 	bl	80045b8 <_Balloc>
 80046ca:	4605      	mov	r5, r0
 80046cc:	b928      	cbnz	r0, 80046da <__multadd+0x5e>
 80046ce:	4602      	mov	r2, r0
 80046d0:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <__multadd+0x8c>)
 80046d2:	480e      	ldr	r0, [pc, #56]	; (800470c <__multadd+0x90>)
 80046d4:	21b5      	movs	r1, #181	; 0xb5
 80046d6:	f000 fd13 	bl	8005100 <__assert_func>
 80046da:	6922      	ldr	r2, [r4, #16]
 80046dc:	3202      	adds	r2, #2
 80046de:	f104 010c 	add.w	r1, r4, #12
 80046e2:	0092      	lsls	r2, r2, #2
 80046e4:	300c      	adds	r0, #12
 80046e6:	f7ff ff59 	bl	800459c <memcpy>
 80046ea:	4621      	mov	r1, r4
 80046ec:	4638      	mov	r0, r7
 80046ee:	f7ff ffa3 	bl	8004638 <_Bfree>
 80046f2:	462c      	mov	r4, r5
 80046f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80046f8:	3601      	adds	r6, #1
 80046fa:	f8c3 8014 	str.w	r8, [r3, #20]
 80046fe:	6126      	str	r6, [r4, #16]
 8004700:	4620      	mov	r0, r4
 8004702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004706:	bf00      	nop
 8004708:	08005daf 	.word	0x08005daf
 800470c:	08005dc0 	.word	0x08005dc0

08004710 <__hi0bits>:
 8004710:	0c03      	lsrs	r3, r0, #16
 8004712:	041b      	lsls	r3, r3, #16
 8004714:	b9d3      	cbnz	r3, 800474c <__hi0bits+0x3c>
 8004716:	0400      	lsls	r0, r0, #16
 8004718:	2310      	movs	r3, #16
 800471a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800471e:	bf04      	itt	eq
 8004720:	0200      	lsleq	r0, r0, #8
 8004722:	3308      	addeq	r3, #8
 8004724:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004728:	bf04      	itt	eq
 800472a:	0100      	lsleq	r0, r0, #4
 800472c:	3304      	addeq	r3, #4
 800472e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004732:	bf04      	itt	eq
 8004734:	0080      	lsleq	r0, r0, #2
 8004736:	3302      	addeq	r3, #2
 8004738:	2800      	cmp	r0, #0
 800473a:	db05      	blt.n	8004748 <__hi0bits+0x38>
 800473c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004740:	f103 0301 	add.w	r3, r3, #1
 8004744:	bf08      	it	eq
 8004746:	2320      	moveq	r3, #32
 8004748:	4618      	mov	r0, r3
 800474a:	4770      	bx	lr
 800474c:	2300      	movs	r3, #0
 800474e:	e7e4      	b.n	800471a <__hi0bits+0xa>

08004750 <__lo0bits>:
 8004750:	6803      	ldr	r3, [r0, #0]
 8004752:	f013 0207 	ands.w	r2, r3, #7
 8004756:	4601      	mov	r1, r0
 8004758:	d00b      	beq.n	8004772 <__lo0bits+0x22>
 800475a:	07da      	lsls	r2, r3, #31
 800475c:	d424      	bmi.n	80047a8 <__lo0bits+0x58>
 800475e:	0798      	lsls	r0, r3, #30
 8004760:	bf49      	itett	mi
 8004762:	085b      	lsrmi	r3, r3, #1
 8004764:	089b      	lsrpl	r3, r3, #2
 8004766:	2001      	movmi	r0, #1
 8004768:	600b      	strmi	r3, [r1, #0]
 800476a:	bf5c      	itt	pl
 800476c:	600b      	strpl	r3, [r1, #0]
 800476e:	2002      	movpl	r0, #2
 8004770:	4770      	bx	lr
 8004772:	b298      	uxth	r0, r3
 8004774:	b9b0      	cbnz	r0, 80047a4 <__lo0bits+0x54>
 8004776:	0c1b      	lsrs	r3, r3, #16
 8004778:	2010      	movs	r0, #16
 800477a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800477e:	bf04      	itt	eq
 8004780:	0a1b      	lsreq	r3, r3, #8
 8004782:	3008      	addeq	r0, #8
 8004784:	071a      	lsls	r2, r3, #28
 8004786:	bf04      	itt	eq
 8004788:	091b      	lsreq	r3, r3, #4
 800478a:	3004      	addeq	r0, #4
 800478c:	079a      	lsls	r2, r3, #30
 800478e:	bf04      	itt	eq
 8004790:	089b      	lsreq	r3, r3, #2
 8004792:	3002      	addeq	r0, #2
 8004794:	07da      	lsls	r2, r3, #31
 8004796:	d403      	bmi.n	80047a0 <__lo0bits+0x50>
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	f100 0001 	add.w	r0, r0, #1
 800479e:	d005      	beq.n	80047ac <__lo0bits+0x5c>
 80047a0:	600b      	str	r3, [r1, #0]
 80047a2:	4770      	bx	lr
 80047a4:	4610      	mov	r0, r2
 80047a6:	e7e8      	b.n	800477a <__lo0bits+0x2a>
 80047a8:	2000      	movs	r0, #0
 80047aa:	4770      	bx	lr
 80047ac:	2020      	movs	r0, #32
 80047ae:	4770      	bx	lr

080047b0 <__i2b>:
 80047b0:	b510      	push	{r4, lr}
 80047b2:	460c      	mov	r4, r1
 80047b4:	2101      	movs	r1, #1
 80047b6:	f7ff feff 	bl	80045b8 <_Balloc>
 80047ba:	4602      	mov	r2, r0
 80047bc:	b928      	cbnz	r0, 80047ca <__i2b+0x1a>
 80047be:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <__i2b+0x24>)
 80047c0:	4805      	ldr	r0, [pc, #20]	; (80047d8 <__i2b+0x28>)
 80047c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80047c6:	f000 fc9b 	bl	8005100 <__assert_func>
 80047ca:	2301      	movs	r3, #1
 80047cc:	6144      	str	r4, [r0, #20]
 80047ce:	6103      	str	r3, [r0, #16]
 80047d0:	bd10      	pop	{r4, pc}
 80047d2:	bf00      	nop
 80047d4:	08005daf 	.word	0x08005daf
 80047d8:	08005dc0 	.word	0x08005dc0

080047dc <__multiply>:
 80047dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e0:	4614      	mov	r4, r2
 80047e2:	690a      	ldr	r2, [r1, #16]
 80047e4:	6923      	ldr	r3, [r4, #16]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	bfb8      	it	lt
 80047ea:	460b      	movlt	r3, r1
 80047ec:	460d      	mov	r5, r1
 80047ee:	bfbc      	itt	lt
 80047f0:	4625      	movlt	r5, r4
 80047f2:	461c      	movlt	r4, r3
 80047f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80047f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80047fc:	68ab      	ldr	r3, [r5, #8]
 80047fe:	6869      	ldr	r1, [r5, #4]
 8004800:	eb0a 0709 	add.w	r7, sl, r9
 8004804:	42bb      	cmp	r3, r7
 8004806:	b085      	sub	sp, #20
 8004808:	bfb8      	it	lt
 800480a:	3101      	addlt	r1, #1
 800480c:	f7ff fed4 	bl	80045b8 <_Balloc>
 8004810:	b930      	cbnz	r0, 8004820 <__multiply+0x44>
 8004812:	4602      	mov	r2, r0
 8004814:	4b42      	ldr	r3, [pc, #264]	; (8004920 <__multiply+0x144>)
 8004816:	4843      	ldr	r0, [pc, #268]	; (8004924 <__multiply+0x148>)
 8004818:	f240 115d 	movw	r1, #349	; 0x15d
 800481c:	f000 fc70 	bl	8005100 <__assert_func>
 8004820:	f100 0614 	add.w	r6, r0, #20
 8004824:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004828:	4633      	mov	r3, r6
 800482a:	2200      	movs	r2, #0
 800482c:	4543      	cmp	r3, r8
 800482e:	d31e      	bcc.n	800486e <__multiply+0x92>
 8004830:	f105 0c14 	add.w	ip, r5, #20
 8004834:	f104 0314 	add.w	r3, r4, #20
 8004838:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800483c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004840:	9202      	str	r2, [sp, #8]
 8004842:	ebac 0205 	sub.w	r2, ip, r5
 8004846:	3a15      	subs	r2, #21
 8004848:	f022 0203 	bic.w	r2, r2, #3
 800484c:	3204      	adds	r2, #4
 800484e:	f105 0115 	add.w	r1, r5, #21
 8004852:	458c      	cmp	ip, r1
 8004854:	bf38      	it	cc
 8004856:	2204      	movcc	r2, #4
 8004858:	9201      	str	r2, [sp, #4]
 800485a:	9a02      	ldr	r2, [sp, #8]
 800485c:	9303      	str	r3, [sp, #12]
 800485e:	429a      	cmp	r2, r3
 8004860:	d808      	bhi.n	8004874 <__multiply+0x98>
 8004862:	2f00      	cmp	r7, #0
 8004864:	dc55      	bgt.n	8004912 <__multiply+0x136>
 8004866:	6107      	str	r7, [r0, #16]
 8004868:	b005      	add	sp, #20
 800486a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800486e:	f843 2b04 	str.w	r2, [r3], #4
 8004872:	e7db      	b.n	800482c <__multiply+0x50>
 8004874:	f8b3 a000 	ldrh.w	sl, [r3]
 8004878:	f1ba 0f00 	cmp.w	sl, #0
 800487c:	d020      	beq.n	80048c0 <__multiply+0xe4>
 800487e:	f105 0e14 	add.w	lr, r5, #20
 8004882:	46b1      	mov	r9, r6
 8004884:	2200      	movs	r2, #0
 8004886:	f85e 4b04 	ldr.w	r4, [lr], #4
 800488a:	f8d9 b000 	ldr.w	fp, [r9]
 800488e:	b2a1      	uxth	r1, r4
 8004890:	fa1f fb8b 	uxth.w	fp, fp
 8004894:	fb0a b101 	mla	r1, sl, r1, fp
 8004898:	4411      	add	r1, r2
 800489a:	f8d9 2000 	ldr.w	r2, [r9]
 800489e:	0c24      	lsrs	r4, r4, #16
 80048a0:	0c12      	lsrs	r2, r2, #16
 80048a2:	fb0a 2404 	mla	r4, sl, r4, r2
 80048a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80048aa:	b289      	uxth	r1, r1
 80048ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80048b0:	45f4      	cmp	ip, lr
 80048b2:	f849 1b04 	str.w	r1, [r9], #4
 80048b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80048ba:	d8e4      	bhi.n	8004886 <__multiply+0xaa>
 80048bc:	9901      	ldr	r1, [sp, #4]
 80048be:	5072      	str	r2, [r6, r1]
 80048c0:	9a03      	ldr	r2, [sp, #12]
 80048c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80048c6:	3304      	adds	r3, #4
 80048c8:	f1b9 0f00 	cmp.w	r9, #0
 80048cc:	d01f      	beq.n	800490e <__multiply+0x132>
 80048ce:	6834      	ldr	r4, [r6, #0]
 80048d0:	f105 0114 	add.w	r1, r5, #20
 80048d4:	46b6      	mov	lr, r6
 80048d6:	f04f 0a00 	mov.w	sl, #0
 80048da:	880a      	ldrh	r2, [r1, #0]
 80048dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80048e0:	fb09 b202 	mla	r2, r9, r2, fp
 80048e4:	4492      	add	sl, r2
 80048e6:	b2a4      	uxth	r4, r4
 80048e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80048ec:	f84e 4b04 	str.w	r4, [lr], #4
 80048f0:	f851 4b04 	ldr.w	r4, [r1], #4
 80048f4:	f8be 2000 	ldrh.w	r2, [lr]
 80048f8:	0c24      	lsrs	r4, r4, #16
 80048fa:	fb09 2404 	mla	r4, r9, r4, r2
 80048fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004902:	458c      	cmp	ip, r1
 8004904:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004908:	d8e7      	bhi.n	80048da <__multiply+0xfe>
 800490a:	9a01      	ldr	r2, [sp, #4]
 800490c:	50b4      	str	r4, [r6, r2]
 800490e:	3604      	adds	r6, #4
 8004910:	e7a3      	b.n	800485a <__multiply+0x7e>
 8004912:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1a5      	bne.n	8004866 <__multiply+0x8a>
 800491a:	3f01      	subs	r7, #1
 800491c:	e7a1      	b.n	8004862 <__multiply+0x86>
 800491e:	bf00      	nop
 8004920:	08005daf 	.word	0x08005daf
 8004924:	08005dc0 	.word	0x08005dc0

08004928 <__pow5mult>:
 8004928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800492c:	4615      	mov	r5, r2
 800492e:	f012 0203 	ands.w	r2, r2, #3
 8004932:	4606      	mov	r6, r0
 8004934:	460f      	mov	r7, r1
 8004936:	d007      	beq.n	8004948 <__pow5mult+0x20>
 8004938:	4c25      	ldr	r4, [pc, #148]	; (80049d0 <__pow5mult+0xa8>)
 800493a:	3a01      	subs	r2, #1
 800493c:	2300      	movs	r3, #0
 800493e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004942:	f7ff fe9b 	bl	800467c <__multadd>
 8004946:	4607      	mov	r7, r0
 8004948:	10ad      	asrs	r5, r5, #2
 800494a:	d03d      	beq.n	80049c8 <__pow5mult+0xa0>
 800494c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800494e:	b97c      	cbnz	r4, 8004970 <__pow5mult+0x48>
 8004950:	2010      	movs	r0, #16
 8004952:	f7ff fe1b 	bl	800458c <malloc>
 8004956:	4602      	mov	r2, r0
 8004958:	6270      	str	r0, [r6, #36]	; 0x24
 800495a:	b928      	cbnz	r0, 8004968 <__pow5mult+0x40>
 800495c:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <__pow5mult+0xac>)
 800495e:	481e      	ldr	r0, [pc, #120]	; (80049d8 <__pow5mult+0xb0>)
 8004960:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004964:	f000 fbcc 	bl	8005100 <__assert_func>
 8004968:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800496c:	6004      	str	r4, [r0, #0]
 800496e:	60c4      	str	r4, [r0, #12]
 8004970:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004974:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004978:	b94c      	cbnz	r4, 800498e <__pow5mult+0x66>
 800497a:	f240 2171 	movw	r1, #625	; 0x271
 800497e:	4630      	mov	r0, r6
 8004980:	f7ff ff16 	bl	80047b0 <__i2b>
 8004984:	2300      	movs	r3, #0
 8004986:	f8c8 0008 	str.w	r0, [r8, #8]
 800498a:	4604      	mov	r4, r0
 800498c:	6003      	str	r3, [r0, #0]
 800498e:	f04f 0900 	mov.w	r9, #0
 8004992:	07eb      	lsls	r3, r5, #31
 8004994:	d50a      	bpl.n	80049ac <__pow5mult+0x84>
 8004996:	4639      	mov	r1, r7
 8004998:	4622      	mov	r2, r4
 800499a:	4630      	mov	r0, r6
 800499c:	f7ff ff1e 	bl	80047dc <__multiply>
 80049a0:	4639      	mov	r1, r7
 80049a2:	4680      	mov	r8, r0
 80049a4:	4630      	mov	r0, r6
 80049a6:	f7ff fe47 	bl	8004638 <_Bfree>
 80049aa:	4647      	mov	r7, r8
 80049ac:	106d      	asrs	r5, r5, #1
 80049ae:	d00b      	beq.n	80049c8 <__pow5mult+0xa0>
 80049b0:	6820      	ldr	r0, [r4, #0]
 80049b2:	b938      	cbnz	r0, 80049c4 <__pow5mult+0x9c>
 80049b4:	4622      	mov	r2, r4
 80049b6:	4621      	mov	r1, r4
 80049b8:	4630      	mov	r0, r6
 80049ba:	f7ff ff0f 	bl	80047dc <__multiply>
 80049be:	6020      	str	r0, [r4, #0]
 80049c0:	f8c0 9000 	str.w	r9, [r0]
 80049c4:	4604      	mov	r4, r0
 80049c6:	e7e4      	b.n	8004992 <__pow5mult+0x6a>
 80049c8:	4638      	mov	r0, r7
 80049ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ce:	bf00      	nop
 80049d0:	08005f10 	.word	0x08005f10
 80049d4:	08005d39 	.word	0x08005d39
 80049d8:	08005dc0 	.word	0x08005dc0

080049dc <__lshift>:
 80049dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049e0:	460c      	mov	r4, r1
 80049e2:	6849      	ldr	r1, [r1, #4]
 80049e4:	6923      	ldr	r3, [r4, #16]
 80049e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80049ea:	68a3      	ldr	r3, [r4, #8]
 80049ec:	4607      	mov	r7, r0
 80049ee:	4691      	mov	r9, r2
 80049f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80049f4:	f108 0601 	add.w	r6, r8, #1
 80049f8:	42b3      	cmp	r3, r6
 80049fa:	db0b      	blt.n	8004a14 <__lshift+0x38>
 80049fc:	4638      	mov	r0, r7
 80049fe:	f7ff fddb 	bl	80045b8 <_Balloc>
 8004a02:	4605      	mov	r5, r0
 8004a04:	b948      	cbnz	r0, 8004a1a <__lshift+0x3e>
 8004a06:	4602      	mov	r2, r0
 8004a08:	4b28      	ldr	r3, [pc, #160]	; (8004aac <__lshift+0xd0>)
 8004a0a:	4829      	ldr	r0, [pc, #164]	; (8004ab0 <__lshift+0xd4>)
 8004a0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004a10:	f000 fb76 	bl	8005100 <__assert_func>
 8004a14:	3101      	adds	r1, #1
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	e7ee      	b.n	80049f8 <__lshift+0x1c>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f100 0114 	add.w	r1, r0, #20
 8004a20:	f100 0210 	add.w	r2, r0, #16
 8004a24:	4618      	mov	r0, r3
 8004a26:	4553      	cmp	r3, sl
 8004a28:	db33      	blt.n	8004a92 <__lshift+0xb6>
 8004a2a:	6920      	ldr	r0, [r4, #16]
 8004a2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004a30:	f104 0314 	add.w	r3, r4, #20
 8004a34:	f019 091f 	ands.w	r9, r9, #31
 8004a38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004a3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004a40:	d02b      	beq.n	8004a9a <__lshift+0xbe>
 8004a42:	f1c9 0e20 	rsb	lr, r9, #32
 8004a46:	468a      	mov	sl, r1
 8004a48:	2200      	movs	r2, #0
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	fa00 f009 	lsl.w	r0, r0, r9
 8004a50:	4302      	orrs	r2, r0
 8004a52:	f84a 2b04 	str.w	r2, [sl], #4
 8004a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a5a:	459c      	cmp	ip, r3
 8004a5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004a60:	d8f3      	bhi.n	8004a4a <__lshift+0x6e>
 8004a62:	ebac 0304 	sub.w	r3, ip, r4
 8004a66:	3b15      	subs	r3, #21
 8004a68:	f023 0303 	bic.w	r3, r3, #3
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	f104 0015 	add.w	r0, r4, #21
 8004a72:	4584      	cmp	ip, r0
 8004a74:	bf38      	it	cc
 8004a76:	2304      	movcc	r3, #4
 8004a78:	50ca      	str	r2, [r1, r3]
 8004a7a:	b10a      	cbz	r2, 8004a80 <__lshift+0xa4>
 8004a7c:	f108 0602 	add.w	r6, r8, #2
 8004a80:	3e01      	subs	r6, #1
 8004a82:	4638      	mov	r0, r7
 8004a84:	612e      	str	r6, [r5, #16]
 8004a86:	4621      	mov	r1, r4
 8004a88:	f7ff fdd6 	bl	8004638 <_Bfree>
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a92:	f842 0f04 	str.w	r0, [r2, #4]!
 8004a96:	3301      	adds	r3, #1
 8004a98:	e7c5      	b.n	8004a26 <__lshift+0x4a>
 8004a9a:	3904      	subs	r1, #4
 8004a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aa0:	f841 2f04 	str.w	r2, [r1, #4]!
 8004aa4:	459c      	cmp	ip, r3
 8004aa6:	d8f9      	bhi.n	8004a9c <__lshift+0xc0>
 8004aa8:	e7ea      	b.n	8004a80 <__lshift+0xa4>
 8004aaa:	bf00      	nop
 8004aac:	08005daf 	.word	0x08005daf
 8004ab0:	08005dc0 	.word	0x08005dc0

08004ab4 <__mcmp>:
 8004ab4:	b530      	push	{r4, r5, lr}
 8004ab6:	6902      	ldr	r2, [r0, #16]
 8004ab8:	690c      	ldr	r4, [r1, #16]
 8004aba:	1b12      	subs	r2, r2, r4
 8004abc:	d10e      	bne.n	8004adc <__mcmp+0x28>
 8004abe:	f100 0314 	add.w	r3, r0, #20
 8004ac2:	3114      	adds	r1, #20
 8004ac4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004ac8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004acc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004ad0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004ad4:	42a5      	cmp	r5, r4
 8004ad6:	d003      	beq.n	8004ae0 <__mcmp+0x2c>
 8004ad8:	d305      	bcc.n	8004ae6 <__mcmp+0x32>
 8004ada:	2201      	movs	r2, #1
 8004adc:	4610      	mov	r0, r2
 8004ade:	bd30      	pop	{r4, r5, pc}
 8004ae0:	4283      	cmp	r3, r0
 8004ae2:	d3f3      	bcc.n	8004acc <__mcmp+0x18>
 8004ae4:	e7fa      	b.n	8004adc <__mcmp+0x28>
 8004ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aea:	e7f7      	b.n	8004adc <__mcmp+0x28>

08004aec <__mdiff>:
 8004aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af0:	460c      	mov	r4, r1
 8004af2:	4606      	mov	r6, r0
 8004af4:	4611      	mov	r1, r2
 8004af6:	4620      	mov	r0, r4
 8004af8:	4617      	mov	r7, r2
 8004afa:	f7ff ffdb 	bl	8004ab4 <__mcmp>
 8004afe:	1e05      	subs	r5, r0, #0
 8004b00:	d110      	bne.n	8004b24 <__mdiff+0x38>
 8004b02:	4629      	mov	r1, r5
 8004b04:	4630      	mov	r0, r6
 8004b06:	f7ff fd57 	bl	80045b8 <_Balloc>
 8004b0a:	b930      	cbnz	r0, 8004b1a <__mdiff+0x2e>
 8004b0c:	4b39      	ldr	r3, [pc, #228]	; (8004bf4 <__mdiff+0x108>)
 8004b0e:	4602      	mov	r2, r0
 8004b10:	f240 2132 	movw	r1, #562	; 0x232
 8004b14:	4838      	ldr	r0, [pc, #224]	; (8004bf8 <__mdiff+0x10c>)
 8004b16:	f000 faf3 	bl	8005100 <__assert_func>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004b20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b24:	bfa4      	itt	ge
 8004b26:	463b      	movge	r3, r7
 8004b28:	4627      	movge	r7, r4
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	bfa6      	itte	ge
 8004b30:	461c      	movge	r4, r3
 8004b32:	2500      	movge	r5, #0
 8004b34:	2501      	movlt	r5, #1
 8004b36:	f7ff fd3f 	bl	80045b8 <_Balloc>
 8004b3a:	b920      	cbnz	r0, 8004b46 <__mdiff+0x5a>
 8004b3c:	4b2d      	ldr	r3, [pc, #180]	; (8004bf4 <__mdiff+0x108>)
 8004b3e:	4602      	mov	r2, r0
 8004b40:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004b44:	e7e6      	b.n	8004b14 <__mdiff+0x28>
 8004b46:	693e      	ldr	r6, [r7, #16]
 8004b48:	60c5      	str	r5, [r0, #12]
 8004b4a:	6925      	ldr	r5, [r4, #16]
 8004b4c:	f107 0114 	add.w	r1, r7, #20
 8004b50:	f104 0914 	add.w	r9, r4, #20
 8004b54:	f100 0e14 	add.w	lr, r0, #20
 8004b58:	f107 0210 	add.w	r2, r7, #16
 8004b5c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004b60:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004b64:	46f2      	mov	sl, lr
 8004b66:	2700      	movs	r7, #0
 8004b68:	f859 3b04 	ldr.w	r3, [r9], #4
 8004b6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004b70:	fa1f f883 	uxth.w	r8, r3
 8004b74:	fa17 f78b 	uxtah	r7, r7, fp
 8004b78:	0c1b      	lsrs	r3, r3, #16
 8004b7a:	eba7 0808 	sub.w	r8, r7, r8
 8004b7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004b82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004b86:	fa1f f888 	uxth.w	r8, r8
 8004b8a:	141f      	asrs	r7, r3, #16
 8004b8c:	454d      	cmp	r5, r9
 8004b8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004b92:	f84a 3b04 	str.w	r3, [sl], #4
 8004b96:	d8e7      	bhi.n	8004b68 <__mdiff+0x7c>
 8004b98:	1b2b      	subs	r3, r5, r4
 8004b9a:	3b15      	subs	r3, #21
 8004b9c:	f023 0303 	bic.w	r3, r3, #3
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	3415      	adds	r4, #21
 8004ba4:	42a5      	cmp	r5, r4
 8004ba6:	bf38      	it	cc
 8004ba8:	2304      	movcc	r3, #4
 8004baa:	4419      	add	r1, r3
 8004bac:	4473      	add	r3, lr
 8004bae:	469e      	mov	lr, r3
 8004bb0:	460d      	mov	r5, r1
 8004bb2:	4565      	cmp	r5, ip
 8004bb4:	d30e      	bcc.n	8004bd4 <__mdiff+0xe8>
 8004bb6:	f10c 0203 	add.w	r2, ip, #3
 8004bba:	1a52      	subs	r2, r2, r1
 8004bbc:	f022 0203 	bic.w	r2, r2, #3
 8004bc0:	3903      	subs	r1, #3
 8004bc2:	458c      	cmp	ip, r1
 8004bc4:	bf38      	it	cc
 8004bc6:	2200      	movcc	r2, #0
 8004bc8:	441a      	add	r2, r3
 8004bca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004bce:	b17b      	cbz	r3, 8004bf0 <__mdiff+0x104>
 8004bd0:	6106      	str	r6, [r0, #16]
 8004bd2:	e7a5      	b.n	8004b20 <__mdiff+0x34>
 8004bd4:	f855 8b04 	ldr.w	r8, [r5], #4
 8004bd8:	fa17 f488 	uxtah	r4, r7, r8
 8004bdc:	1422      	asrs	r2, r4, #16
 8004bde:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8004be2:	b2a4      	uxth	r4, r4
 8004be4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004be8:	f84e 4b04 	str.w	r4, [lr], #4
 8004bec:	1417      	asrs	r7, r2, #16
 8004bee:	e7e0      	b.n	8004bb2 <__mdiff+0xc6>
 8004bf0:	3e01      	subs	r6, #1
 8004bf2:	e7ea      	b.n	8004bca <__mdiff+0xde>
 8004bf4:	08005daf 	.word	0x08005daf
 8004bf8:	08005dc0 	.word	0x08005dc0

08004bfc <__d2b>:
 8004bfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004c00:	4689      	mov	r9, r1
 8004c02:	2101      	movs	r1, #1
 8004c04:	ec57 6b10 	vmov	r6, r7, d0
 8004c08:	4690      	mov	r8, r2
 8004c0a:	f7ff fcd5 	bl	80045b8 <_Balloc>
 8004c0e:	4604      	mov	r4, r0
 8004c10:	b930      	cbnz	r0, 8004c20 <__d2b+0x24>
 8004c12:	4602      	mov	r2, r0
 8004c14:	4b25      	ldr	r3, [pc, #148]	; (8004cac <__d2b+0xb0>)
 8004c16:	4826      	ldr	r0, [pc, #152]	; (8004cb0 <__d2b+0xb4>)
 8004c18:	f240 310a 	movw	r1, #778	; 0x30a
 8004c1c:	f000 fa70 	bl	8005100 <__assert_func>
 8004c20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004c24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004c28:	bb35      	cbnz	r5, 8004c78 <__d2b+0x7c>
 8004c2a:	2e00      	cmp	r6, #0
 8004c2c:	9301      	str	r3, [sp, #4]
 8004c2e:	d028      	beq.n	8004c82 <__d2b+0x86>
 8004c30:	4668      	mov	r0, sp
 8004c32:	9600      	str	r6, [sp, #0]
 8004c34:	f7ff fd8c 	bl	8004750 <__lo0bits>
 8004c38:	9900      	ldr	r1, [sp, #0]
 8004c3a:	b300      	cbz	r0, 8004c7e <__d2b+0x82>
 8004c3c:	9a01      	ldr	r2, [sp, #4]
 8004c3e:	f1c0 0320 	rsb	r3, r0, #32
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	430b      	orrs	r3, r1
 8004c48:	40c2      	lsrs	r2, r0
 8004c4a:	6163      	str	r3, [r4, #20]
 8004c4c:	9201      	str	r2, [sp, #4]
 8004c4e:	9b01      	ldr	r3, [sp, #4]
 8004c50:	61a3      	str	r3, [r4, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	bf14      	ite	ne
 8004c56:	2202      	movne	r2, #2
 8004c58:	2201      	moveq	r2, #1
 8004c5a:	6122      	str	r2, [r4, #16]
 8004c5c:	b1d5      	cbz	r5, 8004c94 <__d2b+0x98>
 8004c5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004c62:	4405      	add	r5, r0
 8004c64:	f8c9 5000 	str.w	r5, [r9]
 8004c68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004c6c:	f8c8 0000 	str.w	r0, [r8]
 8004c70:	4620      	mov	r0, r4
 8004c72:	b003      	add	sp, #12
 8004c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c7c:	e7d5      	b.n	8004c2a <__d2b+0x2e>
 8004c7e:	6161      	str	r1, [r4, #20]
 8004c80:	e7e5      	b.n	8004c4e <__d2b+0x52>
 8004c82:	a801      	add	r0, sp, #4
 8004c84:	f7ff fd64 	bl	8004750 <__lo0bits>
 8004c88:	9b01      	ldr	r3, [sp, #4]
 8004c8a:	6163      	str	r3, [r4, #20]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	6122      	str	r2, [r4, #16]
 8004c90:	3020      	adds	r0, #32
 8004c92:	e7e3      	b.n	8004c5c <__d2b+0x60>
 8004c94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004c98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004c9c:	f8c9 0000 	str.w	r0, [r9]
 8004ca0:	6918      	ldr	r0, [r3, #16]
 8004ca2:	f7ff fd35 	bl	8004710 <__hi0bits>
 8004ca6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004caa:	e7df      	b.n	8004c6c <__d2b+0x70>
 8004cac:	08005daf 	.word	0x08005daf
 8004cb0:	08005dc0 	.word	0x08005dc0

08004cb4 <_calloc_r>:
 8004cb4:	b513      	push	{r0, r1, r4, lr}
 8004cb6:	434a      	muls	r2, r1
 8004cb8:	4611      	mov	r1, r2
 8004cba:	9201      	str	r2, [sp, #4]
 8004cbc:	f000 f85a 	bl	8004d74 <_malloc_r>
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	b118      	cbz	r0, 8004ccc <_calloc_r+0x18>
 8004cc4:	9a01      	ldr	r2, [sp, #4]
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	f7fe f9e2 	bl	8003090 <memset>
 8004ccc:	4620      	mov	r0, r4
 8004cce:	b002      	add	sp, #8
 8004cd0:	bd10      	pop	{r4, pc}
	...

08004cd4 <_free_r>:
 8004cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cd6:	2900      	cmp	r1, #0
 8004cd8:	d048      	beq.n	8004d6c <_free_r+0x98>
 8004cda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cde:	9001      	str	r0, [sp, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f1a1 0404 	sub.w	r4, r1, #4
 8004ce6:	bfb8      	it	lt
 8004ce8:	18e4      	addlt	r4, r4, r3
 8004cea:	f000 fa65 	bl	80051b8 <__malloc_lock>
 8004cee:	4a20      	ldr	r2, [pc, #128]	; (8004d70 <_free_r+0x9c>)
 8004cf0:	9801      	ldr	r0, [sp, #4]
 8004cf2:	6813      	ldr	r3, [r2, #0]
 8004cf4:	4615      	mov	r5, r2
 8004cf6:	b933      	cbnz	r3, 8004d06 <_free_r+0x32>
 8004cf8:	6063      	str	r3, [r4, #4]
 8004cfa:	6014      	str	r4, [r2, #0]
 8004cfc:	b003      	add	sp, #12
 8004cfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d02:	f000 ba5f 	b.w	80051c4 <__malloc_unlock>
 8004d06:	42a3      	cmp	r3, r4
 8004d08:	d90b      	bls.n	8004d22 <_free_r+0x4e>
 8004d0a:	6821      	ldr	r1, [r4, #0]
 8004d0c:	1862      	adds	r2, r4, r1
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	bf04      	itt	eq
 8004d12:	681a      	ldreq	r2, [r3, #0]
 8004d14:	685b      	ldreq	r3, [r3, #4]
 8004d16:	6063      	str	r3, [r4, #4]
 8004d18:	bf04      	itt	eq
 8004d1a:	1852      	addeq	r2, r2, r1
 8004d1c:	6022      	streq	r2, [r4, #0]
 8004d1e:	602c      	str	r4, [r5, #0]
 8004d20:	e7ec      	b.n	8004cfc <_free_r+0x28>
 8004d22:	461a      	mov	r2, r3
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	b10b      	cbz	r3, 8004d2c <_free_r+0x58>
 8004d28:	42a3      	cmp	r3, r4
 8004d2a:	d9fa      	bls.n	8004d22 <_free_r+0x4e>
 8004d2c:	6811      	ldr	r1, [r2, #0]
 8004d2e:	1855      	adds	r5, r2, r1
 8004d30:	42a5      	cmp	r5, r4
 8004d32:	d10b      	bne.n	8004d4c <_free_r+0x78>
 8004d34:	6824      	ldr	r4, [r4, #0]
 8004d36:	4421      	add	r1, r4
 8004d38:	1854      	adds	r4, r2, r1
 8004d3a:	42a3      	cmp	r3, r4
 8004d3c:	6011      	str	r1, [r2, #0]
 8004d3e:	d1dd      	bne.n	8004cfc <_free_r+0x28>
 8004d40:	681c      	ldr	r4, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	6053      	str	r3, [r2, #4]
 8004d46:	4421      	add	r1, r4
 8004d48:	6011      	str	r1, [r2, #0]
 8004d4a:	e7d7      	b.n	8004cfc <_free_r+0x28>
 8004d4c:	d902      	bls.n	8004d54 <_free_r+0x80>
 8004d4e:	230c      	movs	r3, #12
 8004d50:	6003      	str	r3, [r0, #0]
 8004d52:	e7d3      	b.n	8004cfc <_free_r+0x28>
 8004d54:	6825      	ldr	r5, [r4, #0]
 8004d56:	1961      	adds	r1, r4, r5
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	bf04      	itt	eq
 8004d5c:	6819      	ldreq	r1, [r3, #0]
 8004d5e:	685b      	ldreq	r3, [r3, #4]
 8004d60:	6063      	str	r3, [r4, #4]
 8004d62:	bf04      	itt	eq
 8004d64:	1949      	addeq	r1, r1, r5
 8004d66:	6021      	streq	r1, [r4, #0]
 8004d68:	6054      	str	r4, [r2, #4]
 8004d6a:	e7c7      	b.n	8004cfc <_free_r+0x28>
 8004d6c:	b003      	add	sp, #12
 8004d6e:	bd30      	pop	{r4, r5, pc}
 8004d70:	24000204 	.word	0x24000204

08004d74 <_malloc_r>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	1ccd      	adds	r5, r1, #3
 8004d78:	f025 0503 	bic.w	r5, r5, #3
 8004d7c:	3508      	adds	r5, #8
 8004d7e:	2d0c      	cmp	r5, #12
 8004d80:	bf38      	it	cc
 8004d82:	250c      	movcc	r5, #12
 8004d84:	2d00      	cmp	r5, #0
 8004d86:	4606      	mov	r6, r0
 8004d88:	db01      	blt.n	8004d8e <_malloc_r+0x1a>
 8004d8a:	42a9      	cmp	r1, r5
 8004d8c:	d903      	bls.n	8004d96 <_malloc_r+0x22>
 8004d8e:	230c      	movs	r3, #12
 8004d90:	6033      	str	r3, [r6, #0]
 8004d92:	2000      	movs	r0, #0
 8004d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d96:	f000 fa0f 	bl	80051b8 <__malloc_lock>
 8004d9a:	4921      	ldr	r1, [pc, #132]	; (8004e20 <_malloc_r+0xac>)
 8004d9c:	680a      	ldr	r2, [r1, #0]
 8004d9e:	4614      	mov	r4, r2
 8004da0:	b99c      	cbnz	r4, 8004dca <_malloc_r+0x56>
 8004da2:	4f20      	ldr	r7, [pc, #128]	; (8004e24 <_malloc_r+0xb0>)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	b923      	cbnz	r3, 8004db2 <_malloc_r+0x3e>
 8004da8:	4621      	mov	r1, r4
 8004daa:	4630      	mov	r0, r6
 8004dac:	f000 f998 	bl	80050e0 <_sbrk_r>
 8004db0:	6038      	str	r0, [r7, #0]
 8004db2:	4629      	mov	r1, r5
 8004db4:	4630      	mov	r0, r6
 8004db6:	f000 f993 	bl	80050e0 <_sbrk_r>
 8004dba:	1c43      	adds	r3, r0, #1
 8004dbc:	d123      	bne.n	8004e06 <_malloc_r+0x92>
 8004dbe:	230c      	movs	r3, #12
 8004dc0:	6033      	str	r3, [r6, #0]
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	f000 f9fe 	bl	80051c4 <__malloc_unlock>
 8004dc8:	e7e3      	b.n	8004d92 <_malloc_r+0x1e>
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	1b5b      	subs	r3, r3, r5
 8004dce:	d417      	bmi.n	8004e00 <_malloc_r+0x8c>
 8004dd0:	2b0b      	cmp	r3, #11
 8004dd2:	d903      	bls.n	8004ddc <_malloc_r+0x68>
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	441c      	add	r4, r3
 8004dd8:	6025      	str	r5, [r4, #0]
 8004dda:	e004      	b.n	8004de6 <_malloc_r+0x72>
 8004ddc:	6863      	ldr	r3, [r4, #4]
 8004dde:	42a2      	cmp	r2, r4
 8004de0:	bf0c      	ite	eq
 8004de2:	600b      	streq	r3, [r1, #0]
 8004de4:	6053      	strne	r3, [r2, #4]
 8004de6:	4630      	mov	r0, r6
 8004de8:	f000 f9ec 	bl	80051c4 <__malloc_unlock>
 8004dec:	f104 000b 	add.w	r0, r4, #11
 8004df0:	1d23      	adds	r3, r4, #4
 8004df2:	f020 0007 	bic.w	r0, r0, #7
 8004df6:	1ac2      	subs	r2, r0, r3
 8004df8:	d0cc      	beq.n	8004d94 <_malloc_r+0x20>
 8004dfa:	1a1b      	subs	r3, r3, r0
 8004dfc:	50a3      	str	r3, [r4, r2]
 8004dfe:	e7c9      	b.n	8004d94 <_malloc_r+0x20>
 8004e00:	4622      	mov	r2, r4
 8004e02:	6864      	ldr	r4, [r4, #4]
 8004e04:	e7cc      	b.n	8004da0 <_malloc_r+0x2c>
 8004e06:	1cc4      	adds	r4, r0, #3
 8004e08:	f024 0403 	bic.w	r4, r4, #3
 8004e0c:	42a0      	cmp	r0, r4
 8004e0e:	d0e3      	beq.n	8004dd8 <_malloc_r+0x64>
 8004e10:	1a21      	subs	r1, r4, r0
 8004e12:	4630      	mov	r0, r6
 8004e14:	f000 f964 	bl	80050e0 <_sbrk_r>
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d1dd      	bne.n	8004dd8 <_malloc_r+0x64>
 8004e1c:	e7cf      	b.n	8004dbe <_malloc_r+0x4a>
 8004e1e:	bf00      	nop
 8004e20:	24000204 	.word	0x24000204
 8004e24:	24000208 	.word	0x24000208

08004e28 <__ssputs_r>:
 8004e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e2c:	688e      	ldr	r6, [r1, #8]
 8004e2e:	429e      	cmp	r6, r3
 8004e30:	4682      	mov	sl, r0
 8004e32:	460c      	mov	r4, r1
 8004e34:	4690      	mov	r8, r2
 8004e36:	461f      	mov	r7, r3
 8004e38:	d838      	bhi.n	8004eac <__ssputs_r+0x84>
 8004e3a:	898a      	ldrh	r2, [r1, #12]
 8004e3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e40:	d032      	beq.n	8004ea8 <__ssputs_r+0x80>
 8004e42:	6825      	ldr	r5, [r4, #0]
 8004e44:	6909      	ldr	r1, [r1, #16]
 8004e46:	eba5 0901 	sub.w	r9, r5, r1
 8004e4a:	6965      	ldr	r5, [r4, #20]
 8004e4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e54:	3301      	adds	r3, #1
 8004e56:	444b      	add	r3, r9
 8004e58:	106d      	asrs	r5, r5, #1
 8004e5a:	429d      	cmp	r5, r3
 8004e5c:	bf38      	it	cc
 8004e5e:	461d      	movcc	r5, r3
 8004e60:	0553      	lsls	r3, r2, #21
 8004e62:	d531      	bpl.n	8004ec8 <__ssputs_r+0xa0>
 8004e64:	4629      	mov	r1, r5
 8004e66:	f7ff ff85 	bl	8004d74 <_malloc_r>
 8004e6a:	4606      	mov	r6, r0
 8004e6c:	b950      	cbnz	r0, 8004e84 <__ssputs_r+0x5c>
 8004e6e:	230c      	movs	r3, #12
 8004e70:	f8ca 3000 	str.w	r3, [sl]
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e7a:	81a3      	strh	r3, [r4, #12]
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e84:	6921      	ldr	r1, [r4, #16]
 8004e86:	464a      	mov	r2, r9
 8004e88:	f7ff fb88 	bl	800459c <memcpy>
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e96:	81a3      	strh	r3, [r4, #12]
 8004e98:	6126      	str	r6, [r4, #16]
 8004e9a:	6165      	str	r5, [r4, #20]
 8004e9c:	444e      	add	r6, r9
 8004e9e:	eba5 0509 	sub.w	r5, r5, r9
 8004ea2:	6026      	str	r6, [r4, #0]
 8004ea4:	60a5      	str	r5, [r4, #8]
 8004ea6:	463e      	mov	r6, r7
 8004ea8:	42be      	cmp	r6, r7
 8004eaa:	d900      	bls.n	8004eae <__ssputs_r+0x86>
 8004eac:	463e      	mov	r6, r7
 8004eae:	4632      	mov	r2, r6
 8004eb0:	6820      	ldr	r0, [r4, #0]
 8004eb2:	4641      	mov	r1, r8
 8004eb4:	f000 f966 	bl	8005184 <memmove>
 8004eb8:	68a3      	ldr	r3, [r4, #8]
 8004eba:	6822      	ldr	r2, [r4, #0]
 8004ebc:	1b9b      	subs	r3, r3, r6
 8004ebe:	4432      	add	r2, r6
 8004ec0:	60a3      	str	r3, [r4, #8]
 8004ec2:	6022      	str	r2, [r4, #0]
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	e7db      	b.n	8004e80 <__ssputs_r+0x58>
 8004ec8:	462a      	mov	r2, r5
 8004eca:	f000 f981 	bl	80051d0 <_realloc_r>
 8004ece:	4606      	mov	r6, r0
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	d1e1      	bne.n	8004e98 <__ssputs_r+0x70>
 8004ed4:	6921      	ldr	r1, [r4, #16]
 8004ed6:	4650      	mov	r0, sl
 8004ed8:	f7ff fefc 	bl	8004cd4 <_free_r>
 8004edc:	e7c7      	b.n	8004e6e <__ssputs_r+0x46>
	...

08004ee0 <_svfiprintf_r>:
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	4698      	mov	r8, r3
 8004ee6:	898b      	ldrh	r3, [r1, #12]
 8004ee8:	061b      	lsls	r3, r3, #24
 8004eea:	b09d      	sub	sp, #116	; 0x74
 8004eec:	4607      	mov	r7, r0
 8004eee:	460d      	mov	r5, r1
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	d50e      	bpl.n	8004f12 <_svfiprintf_r+0x32>
 8004ef4:	690b      	ldr	r3, [r1, #16]
 8004ef6:	b963      	cbnz	r3, 8004f12 <_svfiprintf_r+0x32>
 8004ef8:	2140      	movs	r1, #64	; 0x40
 8004efa:	f7ff ff3b 	bl	8004d74 <_malloc_r>
 8004efe:	6028      	str	r0, [r5, #0]
 8004f00:	6128      	str	r0, [r5, #16]
 8004f02:	b920      	cbnz	r0, 8004f0e <_svfiprintf_r+0x2e>
 8004f04:	230c      	movs	r3, #12
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0c:	e0d1      	b.n	80050b2 <_svfiprintf_r+0x1d2>
 8004f0e:	2340      	movs	r3, #64	; 0x40
 8004f10:	616b      	str	r3, [r5, #20]
 8004f12:	2300      	movs	r3, #0
 8004f14:	9309      	str	r3, [sp, #36]	; 0x24
 8004f16:	2320      	movs	r3, #32
 8004f18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f20:	2330      	movs	r3, #48	; 0x30
 8004f22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80050cc <_svfiprintf_r+0x1ec>
 8004f26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f2a:	f04f 0901 	mov.w	r9, #1
 8004f2e:	4623      	mov	r3, r4
 8004f30:	469a      	mov	sl, r3
 8004f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f36:	b10a      	cbz	r2, 8004f3c <_svfiprintf_r+0x5c>
 8004f38:	2a25      	cmp	r2, #37	; 0x25
 8004f3a:	d1f9      	bne.n	8004f30 <_svfiprintf_r+0x50>
 8004f3c:	ebba 0b04 	subs.w	fp, sl, r4
 8004f40:	d00b      	beq.n	8004f5a <_svfiprintf_r+0x7a>
 8004f42:	465b      	mov	r3, fp
 8004f44:	4622      	mov	r2, r4
 8004f46:	4629      	mov	r1, r5
 8004f48:	4638      	mov	r0, r7
 8004f4a:	f7ff ff6d 	bl	8004e28 <__ssputs_r>
 8004f4e:	3001      	adds	r0, #1
 8004f50:	f000 80aa 	beq.w	80050a8 <_svfiprintf_r+0x1c8>
 8004f54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f56:	445a      	add	r2, fp
 8004f58:	9209      	str	r2, [sp, #36]	; 0x24
 8004f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 80a2 	beq.w	80050a8 <_svfiprintf_r+0x1c8>
 8004f64:	2300      	movs	r3, #0
 8004f66:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f6e:	f10a 0a01 	add.w	sl, sl, #1
 8004f72:	9304      	str	r3, [sp, #16]
 8004f74:	9307      	str	r3, [sp, #28]
 8004f76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f7a:	931a      	str	r3, [sp, #104]	; 0x68
 8004f7c:	4654      	mov	r4, sl
 8004f7e:	2205      	movs	r2, #5
 8004f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f84:	4851      	ldr	r0, [pc, #324]	; (80050cc <_svfiprintf_r+0x1ec>)
 8004f86:	f7fb f9b3 	bl	80002f0 <memchr>
 8004f8a:	9a04      	ldr	r2, [sp, #16]
 8004f8c:	b9d8      	cbnz	r0, 8004fc6 <_svfiprintf_r+0xe6>
 8004f8e:	06d0      	lsls	r0, r2, #27
 8004f90:	bf44      	itt	mi
 8004f92:	2320      	movmi	r3, #32
 8004f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f98:	0711      	lsls	r1, r2, #28
 8004f9a:	bf44      	itt	mi
 8004f9c:	232b      	movmi	r3, #43	; 0x2b
 8004f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8004fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8004fa8:	d015      	beq.n	8004fd6 <_svfiprintf_r+0xf6>
 8004faa:	9a07      	ldr	r2, [sp, #28]
 8004fac:	4654      	mov	r4, sl
 8004fae:	2000      	movs	r0, #0
 8004fb0:	f04f 0c0a 	mov.w	ip, #10
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fba:	3b30      	subs	r3, #48	; 0x30
 8004fbc:	2b09      	cmp	r3, #9
 8004fbe:	d94e      	bls.n	800505e <_svfiprintf_r+0x17e>
 8004fc0:	b1b0      	cbz	r0, 8004ff0 <_svfiprintf_r+0x110>
 8004fc2:	9207      	str	r2, [sp, #28]
 8004fc4:	e014      	b.n	8004ff0 <_svfiprintf_r+0x110>
 8004fc6:	eba0 0308 	sub.w	r3, r0, r8
 8004fca:	fa09 f303 	lsl.w	r3, r9, r3
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	9304      	str	r3, [sp, #16]
 8004fd2:	46a2      	mov	sl, r4
 8004fd4:	e7d2      	b.n	8004f7c <_svfiprintf_r+0x9c>
 8004fd6:	9b03      	ldr	r3, [sp, #12]
 8004fd8:	1d19      	adds	r1, r3, #4
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	9103      	str	r1, [sp, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	bfbb      	ittet	lt
 8004fe2:	425b      	neglt	r3, r3
 8004fe4:	f042 0202 	orrlt.w	r2, r2, #2
 8004fe8:	9307      	strge	r3, [sp, #28]
 8004fea:	9307      	strlt	r3, [sp, #28]
 8004fec:	bfb8      	it	lt
 8004fee:	9204      	strlt	r2, [sp, #16]
 8004ff0:	7823      	ldrb	r3, [r4, #0]
 8004ff2:	2b2e      	cmp	r3, #46	; 0x2e
 8004ff4:	d10c      	bne.n	8005010 <_svfiprintf_r+0x130>
 8004ff6:	7863      	ldrb	r3, [r4, #1]
 8004ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8004ffa:	d135      	bne.n	8005068 <_svfiprintf_r+0x188>
 8004ffc:	9b03      	ldr	r3, [sp, #12]
 8004ffe:	1d1a      	adds	r2, r3, #4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	9203      	str	r2, [sp, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	bfb8      	it	lt
 8005008:	f04f 33ff 	movlt.w	r3, #4294967295
 800500c:	3402      	adds	r4, #2
 800500e:	9305      	str	r3, [sp, #20]
 8005010:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80050dc <_svfiprintf_r+0x1fc>
 8005014:	7821      	ldrb	r1, [r4, #0]
 8005016:	2203      	movs	r2, #3
 8005018:	4650      	mov	r0, sl
 800501a:	f7fb f969 	bl	80002f0 <memchr>
 800501e:	b140      	cbz	r0, 8005032 <_svfiprintf_r+0x152>
 8005020:	2340      	movs	r3, #64	; 0x40
 8005022:	eba0 000a 	sub.w	r0, r0, sl
 8005026:	fa03 f000 	lsl.w	r0, r3, r0
 800502a:	9b04      	ldr	r3, [sp, #16]
 800502c:	4303      	orrs	r3, r0
 800502e:	3401      	adds	r4, #1
 8005030:	9304      	str	r3, [sp, #16]
 8005032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005036:	4826      	ldr	r0, [pc, #152]	; (80050d0 <_svfiprintf_r+0x1f0>)
 8005038:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800503c:	2206      	movs	r2, #6
 800503e:	f7fb f957 	bl	80002f0 <memchr>
 8005042:	2800      	cmp	r0, #0
 8005044:	d038      	beq.n	80050b8 <_svfiprintf_r+0x1d8>
 8005046:	4b23      	ldr	r3, [pc, #140]	; (80050d4 <_svfiprintf_r+0x1f4>)
 8005048:	bb1b      	cbnz	r3, 8005092 <_svfiprintf_r+0x1b2>
 800504a:	9b03      	ldr	r3, [sp, #12]
 800504c:	3307      	adds	r3, #7
 800504e:	f023 0307 	bic.w	r3, r3, #7
 8005052:	3308      	adds	r3, #8
 8005054:	9303      	str	r3, [sp, #12]
 8005056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005058:	4433      	add	r3, r6
 800505a:	9309      	str	r3, [sp, #36]	; 0x24
 800505c:	e767      	b.n	8004f2e <_svfiprintf_r+0x4e>
 800505e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005062:	460c      	mov	r4, r1
 8005064:	2001      	movs	r0, #1
 8005066:	e7a5      	b.n	8004fb4 <_svfiprintf_r+0xd4>
 8005068:	2300      	movs	r3, #0
 800506a:	3401      	adds	r4, #1
 800506c:	9305      	str	r3, [sp, #20]
 800506e:	4619      	mov	r1, r3
 8005070:	f04f 0c0a 	mov.w	ip, #10
 8005074:	4620      	mov	r0, r4
 8005076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800507a:	3a30      	subs	r2, #48	; 0x30
 800507c:	2a09      	cmp	r2, #9
 800507e:	d903      	bls.n	8005088 <_svfiprintf_r+0x1a8>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0c5      	beq.n	8005010 <_svfiprintf_r+0x130>
 8005084:	9105      	str	r1, [sp, #20]
 8005086:	e7c3      	b.n	8005010 <_svfiprintf_r+0x130>
 8005088:	fb0c 2101 	mla	r1, ip, r1, r2
 800508c:	4604      	mov	r4, r0
 800508e:	2301      	movs	r3, #1
 8005090:	e7f0      	b.n	8005074 <_svfiprintf_r+0x194>
 8005092:	ab03      	add	r3, sp, #12
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	462a      	mov	r2, r5
 8005098:	4b0f      	ldr	r3, [pc, #60]	; (80050d8 <_svfiprintf_r+0x1f8>)
 800509a:	a904      	add	r1, sp, #16
 800509c:	4638      	mov	r0, r7
 800509e:	f7fe f88f 	bl	80031c0 <_printf_float>
 80050a2:	1c42      	adds	r2, r0, #1
 80050a4:	4606      	mov	r6, r0
 80050a6:	d1d6      	bne.n	8005056 <_svfiprintf_r+0x176>
 80050a8:	89ab      	ldrh	r3, [r5, #12]
 80050aa:	065b      	lsls	r3, r3, #25
 80050ac:	f53f af2c 	bmi.w	8004f08 <_svfiprintf_r+0x28>
 80050b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050b2:	b01d      	add	sp, #116	; 0x74
 80050b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b8:	ab03      	add	r3, sp, #12
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	462a      	mov	r2, r5
 80050be:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <_svfiprintf_r+0x1f8>)
 80050c0:	a904      	add	r1, sp, #16
 80050c2:	4638      	mov	r0, r7
 80050c4:	f7fe fb08 	bl	80036d8 <_printf_i>
 80050c8:	e7eb      	b.n	80050a2 <_svfiprintf_r+0x1c2>
 80050ca:	bf00      	nop
 80050cc:	08005f1c 	.word	0x08005f1c
 80050d0:	08005f26 	.word	0x08005f26
 80050d4:	080031c1 	.word	0x080031c1
 80050d8:	08004e29 	.word	0x08004e29
 80050dc:	08005f22 	.word	0x08005f22

080050e0 <_sbrk_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4d06      	ldr	r5, [pc, #24]	; (80050fc <_sbrk_r+0x1c>)
 80050e4:	2300      	movs	r3, #0
 80050e6:	4604      	mov	r4, r0
 80050e8:	4608      	mov	r0, r1
 80050ea:	602b      	str	r3, [r5, #0]
 80050ec:	f7fc f860 	bl	80011b0 <_sbrk>
 80050f0:	1c43      	adds	r3, r0, #1
 80050f2:	d102      	bne.n	80050fa <_sbrk_r+0x1a>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	b103      	cbz	r3, 80050fa <_sbrk_r+0x1a>
 80050f8:	6023      	str	r3, [r4, #0]
 80050fa:	bd38      	pop	{r3, r4, r5, pc}
 80050fc:	240002c0 	.word	0x240002c0

08005100 <__assert_func>:
 8005100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005102:	4614      	mov	r4, r2
 8005104:	461a      	mov	r2, r3
 8005106:	4b09      	ldr	r3, [pc, #36]	; (800512c <__assert_func+0x2c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4605      	mov	r5, r0
 800510c:	68d8      	ldr	r0, [r3, #12]
 800510e:	b14c      	cbz	r4, 8005124 <__assert_func+0x24>
 8005110:	4b07      	ldr	r3, [pc, #28]	; (8005130 <__assert_func+0x30>)
 8005112:	9100      	str	r1, [sp, #0]
 8005114:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005118:	4906      	ldr	r1, [pc, #24]	; (8005134 <__assert_func+0x34>)
 800511a:	462b      	mov	r3, r5
 800511c:	f000 f80e 	bl	800513c <fiprintf>
 8005120:	f000 faa4 	bl	800566c <abort>
 8005124:	4b04      	ldr	r3, [pc, #16]	; (8005138 <__assert_func+0x38>)
 8005126:	461c      	mov	r4, r3
 8005128:	e7f3      	b.n	8005112 <__assert_func+0x12>
 800512a:	bf00      	nop
 800512c:	24000010 	.word	0x24000010
 8005130:	08005f2d 	.word	0x08005f2d
 8005134:	08005f3a 	.word	0x08005f3a
 8005138:	08005f68 	.word	0x08005f68

0800513c <fiprintf>:
 800513c:	b40e      	push	{r1, r2, r3}
 800513e:	b503      	push	{r0, r1, lr}
 8005140:	4601      	mov	r1, r0
 8005142:	ab03      	add	r3, sp, #12
 8005144:	4805      	ldr	r0, [pc, #20]	; (800515c <fiprintf+0x20>)
 8005146:	f853 2b04 	ldr.w	r2, [r3], #4
 800514a:	6800      	ldr	r0, [r0, #0]
 800514c:	9301      	str	r3, [sp, #4]
 800514e:	f000 f88f 	bl	8005270 <_vfiprintf_r>
 8005152:	b002      	add	sp, #8
 8005154:	f85d eb04 	ldr.w	lr, [sp], #4
 8005158:	b003      	add	sp, #12
 800515a:	4770      	bx	lr
 800515c:	24000010 	.word	0x24000010

08005160 <__ascii_mbtowc>:
 8005160:	b082      	sub	sp, #8
 8005162:	b901      	cbnz	r1, 8005166 <__ascii_mbtowc+0x6>
 8005164:	a901      	add	r1, sp, #4
 8005166:	b142      	cbz	r2, 800517a <__ascii_mbtowc+0x1a>
 8005168:	b14b      	cbz	r3, 800517e <__ascii_mbtowc+0x1e>
 800516a:	7813      	ldrb	r3, [r2, #0]
 800516c:	600b      	str	r3, [r1, #0]
 800516e:	7812      	ldrb	r2, [r2, #0]
 8005170:	1e10      	subs	r0, r2, #0
 8005172:	bf18      	it	ne
 8005174:	2001      	movne	r0, #1
 8005176:	b002      	add	sp, #8
 8005178:	4770      	bx	lr
 800517a:	4610      	mov	r0, r2
 800517c:	e7fb      	b.n	8005176 <__ascii_mbtowc+0x16>
 800517e:	f06f 0001 	mvn.w	r0, #1
 8005182:	e7f8      	b.n	8005176 <__ascii_mbtowc+0x16>

08005184 <memmove>:
 8005184:	4288      	cmp	r0, r1
 8005186:	b510      	push	{r4, lr}
 8005188:	eb01 0402 	add.w	r4, r1, r2
 800518c:	d902      	bls.n	8005194 <memmove+0x10>
 800518e:	4284      	cmp	r4, r0
 8005190:	4623      	mov	r3, r4
 8005192:	d807      	bhi.n	80051a4 <memmove+0x20>
 8005194:	1e43      	subs	r3, r0, #1
 8005196:	42a1      	cmp	r1, r4
 8005198:	d008      	beq.n	80051ac <memmove+0x28>
 800519a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800519e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051a2:	e7f8      	b.n	8005196 <memmove+0x12>
 80051a4:	4402      	add	r2, r0
 80051a6:	4601      	mov	r1, r0
 80051a8:	428a      	cmp	r2, r1
 80051aa:	d100      	bne.n	80051ae <memmove+0x2a>
 80051ac:	bd10      	pop	{r4, pc}
 80051ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051b6:	e7f7      	b.n	80051a8 <memmove+0x24>

080051b8 <__malloc_lock>:
 80051b8:	4801      	ldr	r0, [pc, #4]	; (80051c0 <__malloc_lock+0x8>)
 80051ba:	f000 bc17 	b.w	80059ec <__retarget_lock_acquire_recursive>
 80051be:	bf00      	nop
 80051c0:	240002c8 	.word	0x240002c8

080051c4 <__malloc_unlock>:
 80051c4:	4801      	ldr	r0, [pc, #4]	; (80051cc <__malloc_unlock+0x8>)
 80051c6:	f000 bc12 	b.w	80059ee <__retarget_lock_release_recursive>
 80051ca:	bf00      	nop
 80051cc:	240002c8 	.word	0x240002c8

080051d0 <_realloc_r>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	4607      	mov	r7, r0
 80051d4:	4614      	mov	r4, r2
 80051d6:	460e      	mov	r6, r1
 80051d8:	b921      	cbnz	r1, 80051e4 <_realloc_r+0x14>
 80051da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80051de:	4611      	mov	r1, r2
 80051e0:	f7ff bdc8 	b.w	8004d74 <_malloc_r>
 80051e4:	b922      	cbnz	r2, 80051f0 <_realloc_r+0x20>
 80051e6:	f7ff fd75 	bl	8004cd4 <_free_r>
 80051ea:	4625      	mov	r5, r4
 80051ec:	4628      	mov	r0, r5
 80051ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051f0:	f000 fc62 	bl	8005ab8 <_malloc_usable_size_r>
 80051f4:	42a0      	cmp	r0, r4
 80051f6:	d20f      	bcs.n	8005218 <_realloc_r+0x48>
 80051f8:	4621      	mov	r1, r4
 80051fa:	4638      	mov	r0, r7
 80051fc:	f7ff fdba 	bl	8004d74 <_malloc_r>
 8005200:	4605      	mov	r5, r0
 8005202:	2800      	cmp	r0, #0
 8005204:	d0f2      	beq.n	80051ec <_realloc_r+0x1c>
 8005206:	4631      	mov	r1, r6
 8005208:	4622      	mov	r2, r4
 800520a:	f7ff f9c7 	bl	800459c <memcpy>
 800520e:	4631      	mov	r1, r6
 8005210:	4638      	mov	r0, r7
 8005212:	f7ff fd5f 	bl	8004cd4 <_free_r>
 8005216:	e7e9      	b.n	80051ec <_realloc_r+0x1c>
 8005218:	4635      	mov	r5, r6
 800521a:	e7e7      	b.n	80051ec <_realloc_r+0x1c>

0800521c <__sfputc_r>:
 800521c:	6893      	ldr	r3, [r2, #8]
 800521e:	3b01      	subs	r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	b410      	push	{r4}
 8005224:	6093      	str	r3, [r2, #8]
 8005226:	da08      	bge.n	800523a <__sfputc_r+0x1e>
 8005228:	6994      	ldr	r4, [r2, #24]
 800522a:	42a3      	cmp	r3, r4
 800522c:	db01      	blt.n	8005232 <__sfputc_r+0x16>
 800522e:	290a      	cmp	r1, #10
 8005230:	d103      	bne.n	800523a <__sfputc_r+0x1e>
 8005232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005236:	f000 b94b 	b.w	80054d0 <__swbuf_r>
 800523a:	6813      	ldr	r3, [r2, #0]
 800523c:	1c58      	adds	r0, r3, #1
 800523e:	6010      	str	r0, [r2, #0]
 8005240:	7019      	strb	r1, [r3, #0]
 8005242:	4608      	mov	r0, r1
 8005244:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005248:	4770      	bx	lr

0800524a <__sfputs_r>:
 800524a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524c:	4606      	mov	r6, r0
 800524e:	460f      	mov	r7, r1
 8005250:	4614      	mov	r4, r2
 8005252:	18d5      	adds	r5, r2, r3
 8005254:	42ac      	cmp	r4, r5
 8005256:	d101      	bne.n	800525c <__sfputs_r+0x12>
 8005258:	2000      	movs	r0, #0
 800525a:	e007      	b.n	800526c <__sfputs_r+0x22>
 800525c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005260:	463a      	mov	r2, r7
 8005262:	4630      	mov	r0, r6
 8005264:	f7ff ffda 	bl	800521c <__sfputc_r>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d1f3      	bne.n	8005254 <__sfputs_r+0xa>
 800526c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005270 <_vfiprintf_r>:
 8005270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005274:	460d      	mov	r5, r1
 8005276:	b09d      	sub	sp, #116	; 0x74
 8005278:	4614      	mov	r4, r2
 800527a:	4698      	mov	r8, r3
 800527c:	4606      	mov	r6, r0
 800527e:	b118      	cbz	r0, 8005288 <_vfiprintf_r+0x18>
 8005280:	6983      	ldr	r3, [r0, #24]
 8005282:	b90b      	cbnz	r3, 8005288 <_vfiprintf_r+0x18>
 8005284:	f000 fb14 	bl	80058b0 <__sinit>
 8005288:	4b89      	ldr	r3, [pc, #548]	; (80054b0 <_vfiprintf_r+0x240>)
 800528a:	429d      	cmp	r5, r3
 800528c:	d11b      	bne.n	80052c6 <_vfiprintf_r+0x56>
 800528e:	6875      	ldr	r5, [r6, #4]
 8005290:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005292:	07d9      	lsls	r1, r3, #31
 8005294:	d405      	bmi.n	80052a2 <_vfiprintf_r+0x32>
 8005296:	89ab      	ldrh	r3, [r5, #12]
 8005298:	059a      	lsls	r2, r3, #22
 800529a:	d402      	bmi.n	80052a2 <_vfiprintf_r+0x32>
 800529c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800529e:	f000 fba5 	bl	80059ec <__retarget_lock_acquire_recursive>
 80052a2:	89ab      	ldrh	r3, [r5, #12]
 80052a4:	071b      	lsls	r3, r3, #28
 80052a6:	d501      	bpl.n	80052ac <_vfiprintf_r+0x3c>
 80052a8:	692b      	ldr	r3, [r5, #16]
 80052aa:	b9eb      	cbnz	r3, 80052e8 <_vfiprintf_r+0x78>
 80052ac:	4629      	mov	r1, r5
 80052ae:	4630      	mov	r0, r6
 80052b0:	f000 f96e 	bl	8005590 <__swsetup_r>
 80052b4:	b1c0      	cbz	r0, 80052e8 <_vfiprintf_r+0x78>
 80052b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052b8:	07dc      	lsls	r4, r3, #31
 80052ba:	d50e      	bpl.n	80052da <_vfiprintf_r+0x6a>
 80052bc:	f04f 30ff 	mov.w	r0, #4294967295
 80052c0:	b01d      	add	sp, #116	; 0x74
 80052c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c6:	4b7b      	ldr	r3, [pc, #492]	; (80054b4 <_vfiprintf_r+0x244>)
 80052c8:	429d      	cmp	r5, r3
 80052ca:	d101      	bne.n	80052d0 <_vfiprintf_r+0x60>
 80052cc:	68b5      	ldr	r5, [r6, #8]
 80052ce:	e7df      	b.n	8005290 <_vfiprintf_r+0x20>
 80052d0:	4b79      	ldr	r3, [pc, #484]	; (80054b8 <_vfiprintf_r+0x248>)
 80052d2:	429d      	cmp	r5, r3
 80052d4:	bf08      	it	eq
 80052d6:	68f5      	ldreq	r5, [r6, #12]
 80052d8:	e7da      	b.n	8005290 <_vfiprintf_r+0x20>
 80052da:	89ab      	ldrh	r3, [r5, #12]
 80052dc:	0598      	lsls	r0, r3, #22
 80052de:	d4ed      	bmi.n	80052bc <_vfiprintf_r+0x4c>
 80052e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052e2:	f000 fb84 	bl	80059ee <__retarget_lock_release_recursive>
 80052e6:	e7e9      	b.n	80052bc <_vfiprintf_r+0x4c>
 80052e8:	2300      	movs	r3, #0
 80052ea:	9309      	str	r3, [sp, #36]	; 0x24
 80052ec:	2320      	movs	r3, #32
 80052ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80052f6:	2330      	movs	r3, #48	; 0x30
 80052f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80054bc <_vfiprintf_r+0x24c>
 80052fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005300:	f04f 0901 	mov.w	r9, #1
 8005304:	4623      	mov	r3, r4
 8005306:	469a      	mov	sl, r3
 8005308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800530c:	b10a      	cbz	r2, 8005312 <_vfiprintf_r+0xa2>
 800530e:	2a25      	cmp	r2, #37	; 0x25
 8005310:	d1f9      	bne.n	8005306 <_vfiprintf_r+0x96>
 8005312:	ebba 0b04 	subs.w	fp, sl, r4
 8005316:	d00b      	beq.n	8005330 <_vfiprintf_r+0xc0>
 8005318:	465b      	mov	r3, fp
 800531a:	4622      	mov	r2, r4
 800531c:	4629      	mov	r1, r5
 800531e:	4630      	mov	r0, r6
 8005320:	f7ff ff93 	bl	800524a <__sfputs_r>
 8005324:	3001      	adds	r0, #1
 8005326:	f000 80aa 	beq.w	800547e <_vfiprintf_r+0x20e>
 800532a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800532c:	445a      	add	r2, fp
 800532e:	9209      	str	r2, [sp, #36]	; 0x24
 8005330:	f89a 3000 	ldrb.w	r3, [sl]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 80a2 	beq.w	800547e <_vfiprintf_r+0x20e>
 800533a:	2300      	movs	r3, #0
 800533c:	f04f 32ff 	mov.w	r2, #4294967295
 8005340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005344:	f10a 0a01 	add.w	sl, sl, #1
 8005348:	9304      	str	r3, [sp, #16]
 800534a:	9307      	str	r3, [sp, #28]
 800534c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005350:	931a      	str	r3, [sp, #104]	; 0x68
 8005352:	4654      	mov	r4, sl
 8005354:	2205      	movs	r2, #5
 8005356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800535a:	4858      	ldr	r0, [pc, #352]	; (80054bc <_vfiprintf_r+0x24c>)
 800535c:	f7fa ffc8 	bl	80002f0 <memchr>
 8005360:	9a04      	ldr	r2, [sp, #16]
 8005362:	b9d8      	cbnz	r0, 800539c <_vfiprintf_r+0x12c>
 8005364:	06d1      	lsls	r1, r2, #27
 8005366:	bf44      	itt	mi
 8005368:	2320      	movmi	r3, #32
 800536a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800536e:	0713      	lsls	r3, r2, #28
 8005370:	bf44      	itt	mi
 8005372:	232b      	movmi	r3, #43	; 0x2b
 8005374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005378:	f89a 3000 	ldrb.w	r3, [sl]
 800537c:	2b2a      	cmp	r3, #42	; 0x2a
 800537e:	d015      	beq.n	80053ac <_vfiprintf_r+0x13c>
 8005380:	9a07      	ldr	r2, [sp, #28]
 8005382:	4654      	mov	r4, sl
 8005384:	2000      	movs	r0, #0
 8005386:	f04f 0c0a 	mov.w	ip, #10
 800538a:	4621      	mov	r1, r4
 800538c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005390:	3b30      	subs	r3, #48	; 0x30
 8005392:	2b09      	cmp	r3, #9
 8005394:	d94e      	bls.n	8005434 <_vfiprintf_r+0x1c4>
 8005396:	b1b0      	cbz	r0, 80053c6 <_vfiprintf_r+0x156>
 8005398:	9207      	str	r2, [sp, #28]
 800539a:	e014      	b.n	80053c6 <_vfiprintf_r+0x156>
 800539c:	eba0 0308 	sub.w	r3, r0, r8
 80053a0:	fa09 f303 	lsl.w	r3, r9, r3
 80053a4:	4313      	orrs	r3, r2
 80053a6:	9304      	str	r3, [sp, #16]
 80053a8:	46a2      	mov	sl, r4
 80053aa:	e7d2      	b.n	8005352 <_vfiprintf_r+0xe2>
 80053ac:	9b03      	ldr	r3, [sp, #12]
 80053ae:	1d19      	adds	r1, r3, #4
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	9103      	str	r1, [sp, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	bfbb      	ittet	lt
 80053b8:	425b      	neglt	r3, r3
 80053ba:	f042 0202 	orrlt.w	r2, r2, #2
 80053be:	9307      	strge	r3, [sp, #28]
 80053c0:	9307      	strlt	r3, [sp, #28]
 80053c2:	bfb8      	it	lt
 80053c4:	9204      	strlt	r2, [sp, #16]
 80053c6:	7823      	ldrb	r3, [r4, #0]
 80053c8:	2b2e      	cmp	r3, #46	; 0x2e
 80053ca:	d10c      	bne.n	80053e6 <_vfiprintf_r+0x176>
 80053cc:	7863      	ldrb	r3, [r4, #1]
 80053ce:	2b2a      	cmp	r3, #42	; 0x2a
 80053d0:	d135      	bne.n	800543e <_vfiprintf_r+0x1ce>
 80053d2:	9b03      	ldr	r3, [sp, #12]
 80053d4:	1d1a      	adds	r2, r3, #4
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	9203      	str	r2, [sp, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bfb8      	it	lt
 80053de:	f04f 33ff 	movlt.w	r3, #4294967295
 80053e2:	3402      	adds	r4, #2
 80053e4:	9305      	str	r3, [sp, #20]
 80053e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80054cc <_vfiprintf_r+0x25c>
 80053ea:	7821      	ldrb	r1, [r4, #0]
 80053ec:	2203      	movs	r2, #3
 80053ee:	4650      	mov	r0, sl
 80053f0:	f7fa ff7e 	bl	80002f0 <memchr>
 80053f4:	b140      	cbz	r0, 8005408 <_vfiprintf_r+0x198>
 80053f6:	2340      	movs	r3, #64	; 0x40
 80053f8:	eba0 000a 	sub.w	r0, r0, sl
 80053fc:	fa03 f000 	lsl.w	r0, r3, r0
 8005400:	9b04      	ldr	r3, [sp, #16]
 8005402:	4303      	orrs	r3, r0
 8005404:	3401      	adds	r4, #1
 8005406:	9304      	str	r3, [sp, #16]
 8005408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800540c:	482c      	ldr	r0, [pc, #176]	; (80054c0 <_vfiprintf_r+0x250>)
 800540e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005412:	2206      	movs	r2, #6
 8005414:	f7fa ff6c 	bl	80002f0 <memchr>
 8005418:	2800      	cmp	r0, #0
 800541a:	d03f      	beq.n	800549c <_vfiprintf_r+0x22c>
 800541c:	4b29      	ldr	r3, [pc, #164]	; (80054c4 <_vfiprintf_r+0x254>)
 800541e:	bb1b      	cbnz	r3, 8005468 <_vfiprintf_r+0x1f8>
 8005420:	9b03      	ldr	r3, [sp, #12]
 8005422:	3307      	adds	r3, #7
 8005424:	f023 0307 	bic.w	r3, r3, #7
 8005428:	3308      	adds	r3, #8
 800542a:	9303      	str	r3, [sp, #12]
 800542c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800542e:	443b      	add	r3, r7
 8005430:	9309      	str	r3, [sp, #36]	; 0x24
 8005432:	e767      	b.n	8005304 <_vfiprintf_r+0x94>
 8005434:	fb0c 3202 	mla	r2, ip, r2, r3
 8005438:	460c      	mov	r4, r1
 800543a:	2001      	movs	r0, #1
 800543c:	e7a5      	b.n	800538a <_vfiprintf_r+0x11a>
 800543e:	2300      	movs	r3, #0
 8005440:	3401      	adds	r4, #1
 8005442:	9305      	str	r3, [sp, #20]
 8005444:	4619      	mov	r1, r3
 8005446:	f04f 0c0a 	mov.w	ip, #10
 800544a:	4620      	mov	r0, r4
 800544c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005450:	3a30      	subs	r2, #48	; 0x30
 8005452:	2a09      	cmp	r2, #9
 8005454:	d903      	bls.n	800545e <_vfiprintf_r+0x1ee>
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0c5      	beq.n	80053e6 <_vfiprintf_r+0x176>
 800545a:	9105      	str	r1, [sp, #20]
 800545c:	e7c3      	b.n	80053e6 <_vfiprintf_r+0x176>
 800545e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005462:	4604      	mov	r4, r0
 8005464:	2301      	movs	r3, #1
 8005466:	e7f0      	b.n	800544a <_vfiprintf_r+0x1da>
 8005468:	ab03      	add	r3, sp, #12
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	462a      	mov	r2, r5
 800546e:	4b16      	ldr	r3, [pc, #88]	; (80054c8 <_vfiprintf_r+0x258>)
 8005470:	a904      	add	r1, sp, #16
 8005472:	4630      	mov	r0, r6
 8005474:	f7fd fea4 	bl	80031c0 <_printf_float>
 8005478:	4607      	mov	r7, r0
 800547a:	1c78      	adds	r0, r7, #1
 800547c:	d1d6      	bne.n	800542c <_vfiprintf_r+0x1bc>
 800547e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005480:	07d9      	lsls	r1, r3, #31
 8005482:	d405      	bmi.n	8005490 <_vfiprintf_r+0x220>
 8005484:	89ab      	ldrh	r3, [r5, #12]
 8005486:	059a      	lsls	r2, r3, #22
 8005488:	d402      	bmi.n	8005490 <_vfiprintf_r+0x220>
 800548a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800548c:	f000 faaf 	bl	80059ee <__retarget_lock_release_recursive>
 8005490:	89ab      	ldrh	r3, [r5, #12]
 8005492:	065b      	lsls	r3, r3, #25
 8005494:	f53f af12 	bmi.w	80052bc <_vfiprintf_r+0x4c>
 8005498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800549a:	e711      	b.n	80052c0 <_vfiprintf_r+0x50>
 800549c:	ab03      	add	r3, sp, #12
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	462a      	mov	r2, r5
 80054a2:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <_vfiprintf_r+0x258>)
 80054a4:	a904      	add	r1, sp, #16
 80054a6:	4630      	mov	r0, r6
 80054a8:	f7fe f916 	bl	80036d8 <_printf_i>
 80054ac:	e7e4      	b.n	8005478 <_vfiprintf_r+0x208>
 80054ae:	bf00      	nop
 80054b0:	08006094 	.word	0x08006094
 80054b4:	080060b4 	.word	0x080060b4
 80054b8:	08006074 	.word	0x08006074
 80054bc:	08005f1c 	.word	0x08005f1c
 80054c0:	08005f26 	.word	0x08005f26
 80054c4:	080031c1 	.word	0x080031c1
 80054c8:	0800524b 	.word	0x0800524b
 80054cc:	08005f22 	.word	0x08005f22

080054d0 <__swbuf_r>:
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d2:	460e      	mov	r6, r1
 80054d4:	4614      	mov	r4, r2
 80054d6:	4605      	mov	r5, r0
 80054d8:	b118      	cbz	r0, 80054e2 <__swbuf_r+0x12>
 80054da:	6983      	ldr	r3, [r0, #24]
 80054dc:	b90b      	cbnz	r3, 80054e2 <__swbuf_r+0x12>
 80054de:	f000 f9e7 	bl	80058b0 <__sinit>
 80054e2:	4b21      	ldr	r3, [pc, #132]	; (8005568 <__swbuf_r+0x98>)
 80054e4:	429c      	cmp	r4, r3
 80054e6:	d12b      	bne.n	8005540 <__swbuf_r+0x70>
 80054e8:	686c      	ldr	r4, [r5, #4]
 80054ea:	69a3      	ldr	r3, [r4, #24]
 80054ec:	60a3      	str	r3, [r4, #8]
 80054ee:	89a3      	ldrh	r3, [r4, #12]
 80054f0:	071a      	lsls	r2, r3, #28
 80054f2:	d52f      	bpl.n	8005554 <__swbuf_r+0x84>
 80054f4:	6923      	ldr	r3, [r4, #16]
 80054f6:	b36b      	cbz	r3, 8005554 <__swbuf_r+0x84>
 80054f8:	6923      	ldr	r3, [r4, #16]
 80054fa:	6820      	ldr	r0, [r4, #0]
 80054fc:	1ac0      	subs	r0, r0, r3
 80054fe:	6963      	ldr	r3, [r4, #20]
 8005500:	b2f6      	uxtb	r6, r6
 8005502:	4283      	cmp	r3, r0
 8005504:	4637      	mov	r7, r6
 8005506:	dc04      	bgt.n	8005512 <__swbuf_r+0x42>
 8005508:	4621      	mov	r1, r4
 800550a:	4628      	mov	r0, r5
 800550c:	f000 f93c 	bl	8005788 <_fflush_r>
 8005510:	bb30      	cbnz	r0, 8005560 <__swbuf_r+0x90>
 8005512:	68a3      	ldr	r3, [r4, #8]
 8005514:	3b01      	subs	r3, #1
 8005516:	60a3      	str	r3, [r4, #8]
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	6022      	str	r2, [r4, #0]
 800551e:	701e      	strb	r6, [r3, #0]
 8005520:	6963      	ldr	r3, [r4, #20]
 8005522:	3001      	adds	r0, #1
 8005524:	4283      	cmp	r3, r0
 8005526:	d004      	beq.n	8005532 <__swbuf_r+0x62>
 8005528:	89a3      	ldrh	r3, [r4, #12]
 800552a:	07db      	lsls	r3, r3, #31
 800552c:	d506      	bpl.n	800553c <__swbuf_r+0x6c>
 800552e:	2e0a      	cmp	r6, #10
 8005530:	d104      	bne.n	800553c <__swbuf_r+0x6c>
 8005532:	4621      	mov	r1, r4
 8005534:	4628      	mov	r0, r5
 8005536:	f000 f927 	bl	8005788 <_fflush_r>
 800553a:	b988      	cbnz	r0, 8005560 <__swbuf_r+0x90>
 800553c:	4638      	mov	r0, r7
 800553e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005540:	4b0a      	ldr	r3, [pc, #40]	; (800556c <__swbuf_r+0x9c>)
 8005542:	429c      	cmp	r4, r3
 8005544:	d101      	bne.n	800554a <__swbuf_r+0x7a>
 8005546:	68ac      	ldr	r4, [r5, #8]
 8005548:	e7cf      	b.n	80054ea <__swbuf_r+0x1a>
 800554a:	4b09      	ldr	r3, [pc, #36]	; (8005570 <__swbuf_r+0xa0>)
 800554c:	429c      	cmp	r4, r3
 800554e:	bf08      	it	eq
 8005550:	68ec      	ldreq	r4, [r5, #12]
 8005552:	e7ca      	b.n	80054ea <__swbuf_r+0x1a>
 8005554:	4621      	mov	r1, r4
 8005556:	4628      	mov	r0, r5
 8005558:	f000 f81a 	bl	8005590 <__swsetup_r>
 800555c:	2800      	cmp	r0, #0
 800555e:	d0cb      	beq.n	80054f8 <__swbuf_r+0x28>
 8005560:	f04f 37ff 	mov.w	r7, #4294967295
 8005564:	e7ea      	b.n	800553c <__swbuf_r+0x6c>
 8005566:	bf00      	nop
 8005568:	08006094 	.word	0x08006094
 800556c:	080060b4 	.word	0x080060b4
 8005570:	08006074 	.word	0x08006074

08005574 <__ascii_wctomb>:
 8005574:	b149      	cbz	r1, 800558a <__ascii_wctomb+0x16>
 8005576:	2aff      	cmp	r2, #255	; 0xff
 8005578:	bf85      	ittet	hi
 800557a:	238a      	movhi	r3, #138	; 0x8a
 800557c:	6003      	strhi	r3, [r0, #0]
 800557e:	700a      	strbls	r2, [r1, #0]
 8005580:	f04f 30ff 	movhi.w	r0, #4294967295
 8005584:	bf98      	it	ls
 8005586:	2001      	movls	r0, #1
 8005588:	4770      	bx	lr
 800558a:	4608      	mov	r0, r1
 800558c:	4770      	bx	lr
	...

08005590 <__swsetup_r>:
 8005590:	4b32      	ldr	r3, [pc, #200]	; (800565c <__swsetup_r+0xcc>)
 8005592:	b570      	push	{r4, r5, r6, lr}
 8005594:	681d      	ldr	r5, [r3, #0]
 8005596:	4606      	mov	r6, r0
 8005598:	460c      	mov	r4, r1
 800559a:	b125      	cbz	r5, 80055a6 <__swsetup_r+0x16>
 800559c:	69ab      	ldr	r3, [r5, #24]
 800559e:	b913      	cbnz	r3, 80055a6 <__swsetup_r+0x16>
 80055a0:	4628      	mov	r0, r5
 80055a2:	f000 f985 	bl	80058b0 <__sinit>
 80055a6:	4b2e      	ldr	r3, [pc, #184]	; (8005660 <__swsetup_r+0xd0>)
 80055a8:	429c      	cmp	r4, r3
 80055aa:	d10f      	bne.n	80055cc <__swsetup_r+0x3c>
 80055ac:	686c      	ldr	r4, [r5, #4]
 80055ae:	89a3      	ldrh	r3, [r4, #12]
 80055b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055b4:	0719      	lsls	r1, r3, #28
 80055b6:	d42c      	bmi.n	8005612 <__swsetup_r+0x82>
 80055b8:	06dd      	lsls	r5, r3, #27
 80055ba:	d411      	bmi.n	80055e0 <__swsetup_r+0x50>
 80055bc:	2309      	movs	r3, #9
 80055be:	6033      	str	r3, [r6, #0]
 80055c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ca:	e03e      	b.n	800564a <__swsetup_r+0xba>
 80055cc:	4b25      	ldr	r3, [pc, #148]	; (8005664 <__swsetup_r+0xd4>)
 80055ce:	429c      	cmp	r4, r3
 80055d0:	d101      	bne.n	80055d6 <__swsetup_r+0x46>
 80055d2:	68ac      	ldr	r4, [r5, #8]
 80055d4:	e7eb      	b.n	80055ae <__swsetup_r+0x1e>
 80055d6:	4b24      	ldr	r3, [pc, #144]	; (8005668 <__swsetup_r+0xd8>)
 80055d8:	429c      	cmp	r4, r3
 80055da:	bf08      	it	eq
 80055dc:	68ec      	ldreq	r4, [r5, #12]
 80055de:	e7e6      	b.n	80055ae <__swsetup_r+0x1e>
 80055e0:	0758      	lsls	r0, r3, #29
 80055e2:	d512      	bpl.n	800560a <__swsetup_r+0x7a>
 80055e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055e6:	b141      	cbz	r1, 80055fa <__swsetup_r+0x6a>
 80055e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055ec:	4299      	cmp	r1, r3
 80055ee:	d002      	beq.n	80055f6 <__swsetup_r+0x66>
 80055f0:	4630      	mov	r0, r6
 80055f2:	f7ff fb6f 	bl	8004cd4 <_free_r>
 80055f6:	2300      	movs	r3, #0
 80055f8:	6363      	str	r3, [r4, #52]	; 0x34
 80055fa:	89a3      	ldrh	r3, [r4, #12]
 80055fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005600:	81a3      	strh	r3, [r4, #12]
 8005602:	2300      	movs	r3, #0
 8005604:	6063      	str	r3, [r4, #4]
 8005606:	6923      	ldr	r3, [r4, #16]
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	89a3      	ldrh	r3, [r4, #12]
 800560c:	f043 0308 	orr.w	r3, r3, #8
 8005610:	81a3      	strh	r3, [r4, #12]
 8005612:	6923      	ldr	r3, [r4, #16]
 8005614:	b94b      	cbnz	r3, 800562a <__swsetup_r+0x9a>
 8005616:	89a3      	ldrh	r3, [r4, #12]
 8005618:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800561c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005620:	d003      	beq.n	800562a <__swsetup_r+0x9a>
 8005622:	4621      	mov	r1, r4
 8005624:	4630      	mov	r0, r6
 8005626:	f000 fa07 	bl	8005a38 <__smakebuf_r>
 800562a:	89a0      	ldrh	r0, [r4, #12]
 800562c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005630:	f010 0301 	ands.w	r3, r0, #1
 8005634:	d00a      	beq.n	800564c <__swsetup_r+0xbc>
 8005636:	2300      	movs	r3, #0
 8005638:	60a3      	str	r3, [r4, #8]
 800563a:	6963      	ldr	r3, [r4, #20]
 800563c:	425b      	negs	r3, r3
 800563e:	61a3      	str	r3, [r4, #24]
 8005640:	6923      	ldr	r3, [r4, #16]
 8005642:	b943      	cbnz	r3, 8005656 <__swsetup_r+0xc6>
 8005644:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005648:	d1ba      	bne.n	80055c0 <__swsetup_r+0x30>
 800564a:	bd70      	pop	{r4, r5, r6, pc}
 800564c:	0781      	lsls	r1, r0, #30
 800564e:	bf58      	it	pl
 8005650:	6963      	ldrpl	r3, [r4, #20]
 8005652:	60a3      	str	r3, [r4, #8]
 8005654:	e7f4      	b.n	8005640 <__swsetup_r+0xb0>
 8005656:	2000      	movs	r0, #0
 8005658:	e7f7      	b.n	800564a <__swsetup_r+0xba>
 800565a:	bf00      	nop
 800565c:	24000010 	.word	0x24000010
 8005660:	08006094 	.word	0x08006094
 8005664:	080060b4 	.word	0x080060b4
 8005668:	08006074 	.word	0x08006074

0800566c <abort>:
 800566c:	b508      	push	{r3, lr}
 800566e:	2006      	movs	r0, #6
 8005670:	f000 fa52 	bl	8005b18 <raise>
 8005674:	2001      	movs	r0, #1
 8005676:	f7fb fd23 	bl	80010c0 <_exit>
	...

0800567c <__sflush_r>:
 800567c:	898a      	ldrh	r2, [r1, #12]
 800567e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005682:	4605      	mov	r5, r0
 8005684:	0710      	lsls	r0, r2, #28
 8005686:	460c      	mov	r4, r1
 8005688:	d458      	bmi.n	800573c <__sflush_r+0xc0>
 800568a:	684b      	ldr	r3, [r1, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	dc05      	bgt.n	800569c <__sflush_r+0x20>
 8005690:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	dc02      	bgt.n	800569c <__sflush_r+0x20>
 8005696:	2000      	movs	r0, #0
 8005698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800569c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800569e:	2e00      	cmp	r6, #0
 80056a0:	d0f9      	beq.n	8005696 <__sflush_r+0x1a>
 80056a2:	2300      	movs	r3, #0
 80056a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80056a8:	682f      	ldr	r7, [r5, #0]
 80056aa:	602b      	str	r3, [r5, #0]
 80056ac:	d032      	beq.n	8005714 <__sflush_r+0x98>
 80056ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056b0:	89a3      	ldrh	r3, [r4, #12]
 80056b2:	075a      	lsls	r2, r3, #29
 80056b4:	d505      	bpl.n	80056c2 <__sflush_r+0x46>
 80056b6:	6863      	ldr	r3, [r4, #4]
 80056b8:	1ac0      	subs	r0, r0, r3
 80056ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056bc:	b10b      	cbz	r3, 80056c2 <__sflush_r+0x46>
 80056be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056c0:	1ac0      	subs	r0, r0, r3
 80056c2:	2300      	movs	r3, #0
 80056c4:	4602      	mov	r2, r0
 80056c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056c8:	6a21      	ldr	r1, [r4, #32]
 80056ca:	4628      	mov	r0, r5
 80056cc:	47b0      	blx	r6
 80056ce:	1c43      	adds	r3, r0, #1
 80056d0:	89a3      	ldrh	r3, [r4, #12]
 80056d2:	d106      	bne.n	80056e2 <__sflush_r+0x66>
 80056d4:	6829      	ldr	r1, [r5, #0]
 80056d6:	291d      	cmp	r1, #29
 80056d8:	d82c      	bhi.n	8005734 <__sflush_r+0xb8>
 80056da:	4a2a      	ldr	r2, [pc, #168]	; (8005784 <__sflush_r+0x108>)
 80056dc:	40ca      	lsrs	r2, r1
 80056de:	07d6      	lsls	r6, r2, #31
 80056e0:	d528      	bpl.n	8005734 <__sflush_r+0xb8>
 80056e2:	2200      	movs	r2, #0
 80056e4:	6062      	str	r2, [r4, #4]
 80056e6:	04d9      	lsls	r1, r3, #19
 80056e8:	6922      	ldr	r2, [r4, #16]
 80056ea:	6022      	str	r2, [r4, #0]
 80056ec:	d504      	bpl.n	80056f8 <__sflush_r+0x7c>
 80056ee:	1c42      	adds	r2, r0, #1
 80056f0:	d101      	bne.n	80056f6 <__sflush_r+0x7a>
 80056f2:	682b      	ldr	r3, [r5, #0]
 80056f4:	b903      	cbnz	r3, 80056f8 <__sflush_r+0x7c>
 80056f6:	6560      	str	r0, [r4, #84]	; 0x54
 80056f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056fa:	602f      	str	r7, [r5, #0]
 80056fc:	2900      	cmp	r1, #0
 80056fe:	d0ca      	beq.n	8005696 <__sflush_r+0x1a>
 8005700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005704:	4299      	cmp	r1, r3
 8005706:	d002      	beq.n	800570e <__sflush_r+0x92>
 8005708:	4628      	mov	r0, r5
 800570a:	f7ff fae3 	bl	8004cd4 <_free_r>
 800570e:	2000      	movs	r0, #0
 8005710:	6360      	str	r0, [r4, #52]	; 0x34
 8005712:	e7c1      	b.n	8005698 <__sflush_r+0x1c>
 8005714:	6a21      	ldr	r1, [r4, #32]
 8005716:	2301      	movs	r3, #1
 8005718:	4628      	mov	r0, r5
 800571a:	47b0      	blx	r6
 800571c:	1c41      	adds	r1, r0, #1
 800571e:	d1c7      	bne.n	80056b0 <__sflush_r+0x34>
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0c4      	beq.n	80056b0 <__sflush_r+0x34>
 8005726:	2b1d      	cmp	r3, #29
 8005728:	d001      	beq.n	800572e <__sflush_r+0xb2>
 800572a:	2b16      	cmp	r3, #22
 800572c:	d101      	bne.n	8005732 <__sflush_r+0xb6>
 800572e:	602f      	str	r7, [r5, #0]
 8005730:	e7b1      	b.n	8005696 <__sflush_r+0x1a>
 8005732:	89a3      	ldrh	r3, [r4, #12]
 8005734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005738:	81a3      	strh	r3, [r4, #12]
 800573a:	e7ad      	b.n	8005698 <__sflush_r+0x1c>
 800573c:	690f      	ldr	r7, [r1, #16]
 800573e:	2f00      	cmp	r7, #0
 8005740:	d0a9      	beq.n	8005696 <__sflush_r+0x1a>
 8005742:	0793      	lsls	r3, r2, #30
 8005744:	680e      	ldr	r6, [r1, #0]
 8005746:	bf08      	it	eq
 8005748:	694b      	ldreq	r3, [r1, #20]
 800574a:	600f      	str	r7, [r1, #0]
 800574c:	bf18      	it	ne
 800574e:	2300      	movne	r3, #0
 8005750:	eba6 0807 	sub.w	r8, r6, r7
 8005754:	608b      	str	r3, [r1, #8]
 8005756:	f1b8 0f00 	cmp.w	r8, #0
 800575a:	dd9c      	ble.n	8005696 <__sflush_r+0x1a>
 800575c:	6a21      	ldr	r1, [r4, #32]
 800575e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005760:	4643      	mov	r3, r8
 8005762:	463a      	mov	r2, r7
 8005764:	4628      	mov	r0, r5
 8005766:	47b0      	blx	r6
 8005768:	2800      	cmp	r0, #0
 800576a:	dc06      	bgt.n	800577a <__sflush_r+0xfe>
 800576c:	89a3      	ldrh	r3, [r4, #12]
 800576e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005772:	81a3      	strh	r3, [r4, #12]
 8005774:	f04f 30ff 	mov.w	r0, #4294967295
 8005778:	e78e      	b.n	8005698 <__sflush_r+0x1c>
 800577a:	4407      	add	r7, r0
 800577c:	eba8 0800 	sub.w	r8, r8, r0
 8005780:	e7e9      	b.n	8005756 <__sflush_r+0xda>
 8005782:	bf00      	nop
 8005784:	20400001 	.word	0x20400001

08005788 <_fflush_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	690b      	ldr	r3, [r1, #16]
 800578c:	4605      	mov	r5, r0
 800578e:	460c      	mov	r4, r1
 8005790:	b913      	cbnz	r3, 8005798 <_fflush_r+0x10>
 8005792:	2500      	movs	r5, #0
 8005794:	4628      	mov	r0, r5
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	b118      	cbz	r0, 80057a2 <_fflush_r+0x1a>
 800579a:	6983      	ldr	r3, [r0, #24]
 800579c:	b90b      	cbnz	r3, 80057a2 <_fflush_r+0x1a>
 800579e:	f000 f887 	bl	80058b0 <__sinit>
 80057a2:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <_fflush_r+0x6c>)
 80057a4:	429c      	cmp	r4, r3
 80057a6:	d11b      	bne.n	80057e0 <_fflush_r+0x58>
 80057a8:	686c      	ldr	r4, [r5, #4]
 80057aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0ef      	beq.n	8005792 <_fflush_r+0xa>
 80057b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80057b4:	07d0      	lsls	r0, r2, #31
 80057b6:	d404      	bmi.n	80057c2 <_fflush_r+0x3a>
 80057b8:	0599      	lsls	r1, r3, #22
 80057ba:	d402      	bmi.n	80057c2 <_fflush_r+0x3a>
 80057bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057be:	f000 f915 	bl	80059ec <__retarget_lock_acquire_recursive>
 80057c2:	4628      	mov	r0, r5
 80057c4:	4621      	mov	r1, r4
 80057c6:	f7ff ff59 	bl	800567c <__sflush_r>
 80057ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057cc:	07da      	lsls	r2, r3, #31
 80057ce:	4605      	mov	r5, r0
 80057d0:	d4e0      	bmi.n	8005794 <_fflush_r+0xc>
 80057d2:	89a3      	ldrh	r3, [r4, #12]
 80057d4:	059b      	lsls	r3, r3, #22
 80057d6:	d4dd      	bmi.n	8005794 <_fflush_r+0xc>
 80057d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057da:	f000 f908 	bl	80059ee <__retarget_lock_release_recursive>
 80057de:	e7d9      	b.n	8005794 <_fflush_r+0xc>
 80057e0:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <_fflush_r+0x70>)
 80057e2:	429c      	cmp	r4, r3
 80057e4:	d101      	bne.n	80057ea <_fflush_r+0x62>
 80057e6:	68ac      	ldr	r4, [r5, #8]
 80057e8:	e7df      	b.n	80057aa <_fflush_r+0x22>
 80057ea:	4b04      	ldr	r3, [pc, #16]	; (80057fc <_fflush_r+0x74>)
 80057ec:	429c      	cmp	r4, r3
 80057ee:	bf08      	it	eq
 80057f0:	68ec      	ldreq	r4, [r5, #12]
 80057f2:	e7da      	b.n	80057aa <_fflush_r+0x22>
 80057f4:	08006094 	.word	0x08006094
 80057f8:	080060b4 	.word	0x080060b4
 80057fc:	08006074 	.word	0x08006074

08005800 <std>:
 8005800:	2300      	movs	r3, #0
 8005802:	b510      	push	{r4, lr}
 8005804:	4604      	mov	r4, r0
 8005806:	e9c0 3300 	strd	r3, r3, [r0]
 800580a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800580e:	6083      	str	r3, [r0, #8]
 8005810:	8181      	strh	r1, [r0, #12]
 8005812:	6643      	str	r3, [r0, #100]	; 0x64
 8005814:	81c2      	strh	r2, [r0, #14]
 8005816:	6183      	str	r3, [r0, #24]
 8005818:	4619      	mov	r1, r3
 800581a:	2208      	movs	r2, #8
 800581c:	305c      	adds	r0, #92	; 0x5c
 800581e:	f7fd fc37 	bl	8003090 <memset>
 8005822:	4b05      	ldr	r3, [pc, #20]	; (8005838 <std+0x38>)
 8005824:	6263      	str	r3, [r4, #36]	; 0x24
 8005826:	4b05      	ldr	r3, [pc, #20]	; (800583c <std+0x3c>)
 8005828:	62a3      	str	r3, [r4, #40]	; 0x28
 800582a:	4b05      	ldr	r3, [pc, #20]	; (8005840 <std+0x40>)
 800582c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800582e:	4b05      	ldr	r3, [pc, #20]	; (8005844 <std+0x44>)
 8005830:	6224      	str	r4, [r4, #32]
 8005832:	6323      	str	r3, [r4, #48]	; 0x30
 8005834:	bd10      	pop	{r4, pc}
 8005836:	bf00      	nop
 8005838:	08005b51 	.word	0x08005b51
 800583c:	08005b73 	.word	0x08005b73
 8005840:	08005bab 	.word	0x08005bab
 8005844:	08005bcf 	.word	0x08005bcf

08005848 <_cleanup_r>:
 8005848:	4901      	ldr	r1, [pc, #4]	; (8005850 <_cleanup_r+0x8>)
 800584a:	f000 b8af 	b.w	80059ac <_fwalk_reent>
 800584e:	bf00      	nop
 8005850:	08005789 	.word	0x08005789

08005854 <__sfmoreglue>:
 8005854:	b570      	push	{r4, r5, r6, lr}
 8005856:	1e4a      	subs	r2, r1, #1
 8005858:	2568      	movs	r5, #104	; 0x68
 800585a:	4355      	muls	r5, r2
 800585c:	460e      	mov	r6, r1
 800585e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005862:	f7ff fa87 	bl	8004d74 <_malloc_r>
 8005866:	4604      	mov	r4, r0
 8005868:	b140      	cbz	r0, 800587c <__sfmoreglue+0x28>
 800586a:	2100      	movs	r1, #0
 800586c:	e9c0 1600 	strd	r1, r6, [r0]
 8005870:	300c      	adds	r0, #12
 8005872:	60a0      	str	r0, [r4, #8]
 8005874:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005878:	f7fd fc0a 	bl	8003090 <memset>
 800587c:	4620      	mov	r0, r4
 800587e:	bd70      	pop	{r4, r5, r6, pc}

08005880 <__sfp_lock_acquire>:
 8005880:	4801      	ldr	r0, [pc, #4]	; (8005888 <__sfp_lock_acquire+0x8>)
 8005882:	f000 b8b3 	b.w	80059ec <__retarget_lock_acquire_recursive>
 8005886:	bf00      	nop
 8005888:	240002cc 	.word	0x240002cc

0800588c <__sfp_lock_release>:
 800588c:	4801      	ldr	r0, [pc, #4]	; (8005894 <__sfp_lock_release+0x8>)
 800588e:	f000 b8ae 	b.w	80059ee <__retarget_lock_release_recursive>
 8005892:	bf00      	nop
 8005894:	240002cc 	.word	0x240002cc

08005898 <__sinit_lock_acquire>:
 8005898:	4801      	ldr	r0, [pc, #4]	; (80058a0 <__sinit_lock_acquire+0x8>)
 800589a:	f000 b8a7 	b.w	80059ec <__retarget_lock_acquire_recursive>
 800589e:	bf00      	nop
 80058a0:	240002c7 	.word	0x240002c7

080058a4 <__sinit_lock_release>:
 80058a4:	4801      	ldr	r0, [pc, #4]	; (80058ac <__sinit_lock_release+0x8>)
 80058a6:	f000 b8a2 	b.w	80059ee <__retarget_lock_release_recursive>
 80058aa:	bf00      	nop
 80058ac:	240002c7 	.word	0x240002c7

080058b0 <__sinit>:
 80058b0:	b510      	push	{r4, lr}
 80058b2:	4604      	mov	r4, r0
 80058b4:	f7ff fff0 	bl	8005898 <__sinit_lock_acquire>
 80058b8:	69a3      	ldr	r3, [r4, #24]
 80058ba:	b11b      	cbz	r3, 80058c4 <__sinit+0x14>
 80058bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c0:	f7ff bff0 	b.w	80058a4 <__sinit_lock_release>
 80058c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80058c8:	6523      	str	r3, [r4, #80]	; 0x50
 80058ca:	4b13      	ldr	r3, [pc, #76]	; (8005918 <__sinit+0x68>)
 80058cc:	4a13      	ldr	r2, [pc, #76]	; (800591c <__sinit+0x6c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80058d2:	42a3      	cmp	r3, r4
 80058d4:	bf04      	itt	eq
 80058d6:	2301      	moveq	r3, #1
 80058d8:	61a3      	streq	r3, [r4, #24]
 80058da:	4620      	mov	r0, r4
 80058dc:	f000 f820 	bl	8005920 <__sfp>
 80058e0:	6060      	str	r0, [r4, #4]
 80058e2:	4620      	mov	r0, r4
 80058e4:	f000 f81c 	bl	8005920 <__sfp>
 80058e8:	60a0      	str	r0, [r4, #8]
 80058ea:	4620      	mov	r0, r4
 80058ec:	f000 f818 	bl	8005920 <__sfp>
 80058f0:	2200      	movs	r2, #0
 80058f2:	60e0      	str	r0, [r4, #12]
 80058f4:	2104      	movs	r1, #4
 80058f6:	6860      	ldr	r0, [r4, #4]
 80058f8:	f7ff ff82 	bl	8005800 <std>
 80058fc:	68a0      	ldr	r0, [r4, #8]
 80058fe:	2201      	movs	r2, #1
 8005900:	2109      	movs	r1, #9
 8005902:	f7ff ff7d 	bl	8005800 <std>
 8005906:	68e0      	ldr	r0, [r4, #12]
 8005908:	2202      	movs	r2, #2
 800590a:	2112      	movs	r1, #18
 800590c:	f7ff ff78 	bl	8005800 <std>
 8005910:	2301      	movs	r3, #1
 8005912:	61a3      	str	r3, [r4, #24]
 8005914:	e7d2      	b.n	80058bc <__sinit+0xc>
 8005916:	bf00      	nop
 8005918:	08005cf4 	.word	0x08005cf4
 800591c:	08005849 	.word	0x08005849

08005920 <__sfp>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	4607      	mov	r7, r0
 8005924:	f7ff ffac 	bl	8005880 <__sfp_lock_acquire>
 8005928:	4b1e      	ldr	r3, [pc, #120]	; (80059a4 <__sfp+0x84>)
 800592a:	681e      	ldr	r6, [r3, #0]
 800592c:	69b3      	ldr	r3, [r6, #24]
 800592e:	b913      	cbnz	r3, 8005936 <__sfp+0x16>
 8005930:	4630      	mov	r0, r6
 8005932:	f7ff ffbd 	bl	80058b0 <__sinit>
 8005936:	3648      	adds	r6, #72	; 0x48
 8005938:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800593c:	3b01      	subs	r3, #1
 800593e:	d503      	bpl.n	8005948 <__sfp+0x28>
 8005940:	6833      	ldr	r3, [r6, #0]
 8005942:	b30b      	cbz	r3, 8005988 <__sfp+0x68>
 8005944:	6836      	ldr	r6, [r6, #0]
 8005946:	e7f7      	b.n	8005938 <__sfp+0x18>
 8005948:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800594c:	b9d5      	cbnz	r5, 8005984 <__sfp+0x64>
 800594e:	4b16      	ldr	r3, [pc, #88]	; (80059a8 <__sfp+0x88>)
 8005950:	60e3      	str	r3, [r4, #12]
 8005952:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005956:	6665      	str	r5, [r4, #100]	; 0x64
 8005958:	f000 f847 	bl	80059ea <__retarget_lock_init_recursive>
 800595c:	f7ff ff96 	bl	800588c <__sfp_lock_release>
 8005960:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005964:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005968:	6025      	str	r5, [r4, #0]
 800596a:	61a5      	str	r5, [r4, #24]
 800596c:	2208      	movs	r2, #8
 800596e:	4629      	mov	r1, r5
 8005970:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005974:	f7fd fb8c 	bl	8003090 <memset>
 8005978:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800597c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005980:	4620      	mov	r0, r4
 8005982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005984:	3468      	adds	r4, #104	; 0x68
 8005986:	e7d9      	b.n	800593c <__sfp+0x1c>
 8005988:	2104      	movs	r1, #4
 800598a:	4638      	mov	r0, r7
 800598c:	f7ff ff62 	bl	8005854 <__sfmoreglue>
 8005990:	4604      	mov	r4, r0
 8005992:	6030      	str	r0, [r6, #0]
 8005994:	2800      	cmp	r0, #0
 8005996:	d1d5      	bne.n	8005944 <__sfp+0x24>
 8005998:	f7ff ff78 	bl	800588c <__sfp_lock_release>
 800599c:	230c      	movs	r3, #12
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	e7ee      	b.n	8005980 <__sfp+0x60>
 80059a2:	bf00      	nop
 80059a4:	08005cf4 	.word	0x08005cf4
 80059a8:	ffff0001 	.word	0xffff0001

080059ac <_fwalk_reent>:
 80059ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059b0:	4606      	mov	r6, r0
 80059b2:	4688      	mov	r8, r1
 80059b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059b8:	2700      	movs	r7, #0
 80059ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059be:	f1b9 0901 	subs.w	r9, r9, #1
 80059c2:	d505      	bpl.n	80059d0 <_fwalk_reent+0x24>
 80059c4:	6824      	ldr	r4, [r4, #0]
 80059c6:	2c00      	cmp	r4, #0
 80059c8:	d1f7      	bne.n	80059ba <_fwalk_reent+0xe>
 80059ca:	4638      	mov	r0, r7
 80059cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059d0:	89ab      	ldrh	r3, [r5, #12]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d907      	bls.n	80059e6 <_fwalk_reent+0x3a>
 80059d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059da:	3301      	adds	r3, #1
 80059dc:	d003      	beq.n	80059e6 <_fwalk_reent+0x3a>
 80059de:	4629      	mov	r1, r5
 80059e0:	4630      	mov	r0, r6
 80059e2:	47c0      	blx	r8
 80059e4:	4307      	orrs	r7, r0
 80059e6:	3568      	adds	r5, #104	; 0x68
 80059e8:	e7e9      	b.n	80059be <_fwalk_reent+0x12>

080059ea <__retarget_lock_init_recursive>:
 80059ea:	4770      	bx	lr

080059ec <__retarget_lock_acquire_recursive>:
 80059ec:	4770      	bx	lr

080059ee <__retarget_lock_release_recursive>:
 80059ee:	4770      	bx	lr

080059f0 <__swhatbuf_r>:
 80059f0:	b570      	push	{r4, r5, r6, lr}
 80059f2:	460e      	mov	r6, r1
 80059f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f8:	2900      	cmp	r1, #0
 80059fa:	b096      	sub	sp, #88	; 0x58
 80059fc:	4614      	mov	r4, r2
 80059fe:	461d      	mov	r5, r3
 8005a00:	da07      	bge.n	8005a12 <__swhatbuf_r+0x22>
 8005a02:	2300      	movs	r3, #0
 8005a04:	602b      	str	r3, [r5, #0]
 8005a06:	89b3      	ldrh	r3, [r6, #12]
 8005a08:	061a      	lsls	r2, r3, #24
 8005a0a:	d410      	bmi.n	8005a2e <__swhatbuf_r+0x3e>
 8005a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a10:	e00e      	b.n	8005a30 <__swhatbuf_r+0x40>
 8005a12:	466a      	mov	r2, sp
 8005a14:	f000 f902 	bl	8005c1c <_fstat_r>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	dbf2      	blt.n	8005a02 <__swhatbuf_r+0x12>
 8005a1c:	9a01      	ldr	r2, [sp, #4]
 8005a1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a26:	425a      	negs	r2, r3
 8005a28:	415a      	adcs	r2, r3
 8005a2a:	602a      	str	r2, [r5, #0]
 8005a2c:	e7ee      	b.n	8005a0c <__swhatbuf_r+0x1c>
 8005a2e:	2340      	movs	r3, #64	; 0x40
 8005a30:	2000      	movs	r0, #0
 8005a32:	6023      	str	r3, [r4, #0]
 8005a34:	b016      	add	sp, #88	; 0x58
 8005a36:	bd70      	pop	{r4, r5, r6, pc}

08005a38 <__smakebuf_r>:
 8005a38:	898b      	ldrh	r3, [r1, #12]
 8005a3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a3c:	079d      	lsls	r5, r3, #30
 8005a3e:	4606      	mov	r6, r0
 8005a40:	460c      	mov	r4, r1
 8005a42:	d507      	bpl.n	8005a54 <__smakebuf_r+0x1c>
 8005a44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a48:	6023      	str	r3, [r4, #0]
 8005a4a:	6123      	str	r3, [r4, #16]
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	6163      	str	r3, [r4, #20]
 8005a50:	b002      	add	sp, #8
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	ab01      	add	r3, sp, #4
 8005a56:	466a      	mov	r2, sp
 8005a58:	f7ff ffca 	bl	80059f0 <__swhatbuf_r>
 8005a5c:	9900      	ldr	r1, [sp, #0]
 8005a5e:	4605      	mov	r5, r0
 8005a60:	4630      	mov	r0, r6
 8005a62:	f7ff f987 	bl	8004d74 <_malloc_r>
 8005a66:	b948      	cbnz	r0, 8005a7c <__smakebuf_r+0x44>
 8005a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a6c:	059a      	lsls	r2, r3, #22
 8005a6e:	d4ef      	bmi.n	8005a50 <__smakebuf_r+0x18>
 8005a70:	f023 0303 	bic.w	r3, r3, #3
 8005a74:	f043 0302 	orr.w	r3, r3, #2
 8005a78:	81a3      	strh	r3, [r4, #12]
 8005a7a:	e7e3      	b.n	8005a44 <__smakebuf_r+0xc>
 8005a7c:	4b0d      	ldr	r3, [pc, #52]	; (8005ab4 <__smakebuf_r+0x7c>)
 8005a7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	6020      	str	r0, [r4, #0]
 8005a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a88:	81a3      	strh	r3, [r4, #12]
 8005a8a:	9b00      	ldr	r3, [sp, #0]
 8005a8c:	6163      	str	r3, [r4, #20]
 8005a8e:	9b01      	ldr	r3, [sp, #4]
 8005a90:	6120      	str	r0, [r4, #16]
 8005a92:	b15b      	cbz	r3, 8005aac <__smakebuf_r+0x74>
 8005a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a98:	4630      	mov	r0, r6
 8005a9a:	f000 f8d1 	bl	8005c40 <_isatty_r>
 8005a9e:	b128      	cbz	r0, 8005aac <__smakebuf_r+0x74>
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	f023 0303 	bic.w	r3, r3, #3
 8005aa6:	f043 0301 	orr.w	r3, r3, #1
 8005aaa:	81a3      	strh	r3, [r4, #12]
 8005aac:	89a0      	ldrh	r0, [r4, #12]
 8005aae:	4305      	orrs	r5, r0
 8005ab0:	81a5      	strh	r5, [r4, #12]
 8005ab2:	e7cd      	b.n	8005a50 <__smakebuf_r+0x18>
 8005ab4:	08005849 	.word	0x08005849

08005ab8 <_malloc_usable_size_r>:
 8005ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005abc:	1f18      	subs	r0, r3, #4
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bfbc      	itt	lt
 8005ac2:	580b      	ldrlt	r3, [r1, r0]
 8005ac4:	18c0      	addlt	r0, r0, r3
 8005ac6:	4770      	bx	lr

08005ac8 <_raise_r>:
 8005ac8:	291f      	cmp	r1, #31
 8005aca:	b538      	push	{r3, r4, r5, lr}
 8005acc:	4604      	mov	r4, r0
 8005ace:	460d      	mov	r5, r1
 8005ad0:	d904      	bls.n	8005adc <_raise_r+0x14>
 8005ad2:	2316      	movs	r3, #22
 8005ad4:	6003      	str	r3, [r0, #0]
 8005ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ada:	bd38      	pop	{r3, r4, r5, pc}
 8005adc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005ade:	b112      	cbz	r2, 8005ae6 <_raise_r+0x1e>
 8005ae0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ae4:	b94b      	cbnz	r3, 8005afa <_raise_r+0x32>
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f000 f830 	bl	8005b4c <_getpid_r>
 8005aec:	462a      	mov	r2, r5
 8005aee:	4601      	mov	r1, r0
 8005af0:	4620      	mov	r0, r4
 8005af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005af6:	f000 b817 	b.w	8005b28 <_kill_r>
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d00a      	beq.n	8005b14 <_raise_r+0x4c>
 8005afe:	1c59      	adds	r1, r3, #1
 8005b00:	d103      	bne.n	8005b0a <_raise_r+0x42>
 8005b02:	2316      	movs	r3, #22
 8005b04:	6003      	str	r3, [r0, #0]
 8005b06:	2001      	movs	r0, #1
 8005b08:	e7e7      	b.n	8005ada <_raise_r+0x12>
 8005b0a:	2400      	movs	r4, #0
 8005b0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005b10:	4628      	mov	r0, r5
 8005b12:	4798      	blx	r3
 8005b14:	2000      	movs	r0, #0
 8005b16:	e7e0      	b.n	8005ada <_raise_r+0x12>

08005b18 <raise>:
 8005b18:	4b02      	ldr	r3, [pc, #8]	; (8005b24 <raise+0xc>)
 8005b1a:	4601      	mov	r1, r0
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	f7ff bfd3 	b.w	8005ac8 <_raise_r>
 8005b22:	bf00      	nop
 8005b24:	24000010 	.word	0x24000010

08005b28 <_kill_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	4d07      	ldr	r5, [pc, #28]	; (8005b48 <_kill_r+0x20>)
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	4604      	mov	r4, r0
 8005b30:	4608      	mov	r0, r1
 8005b32:	4611      	mov	r1, r2
 8005b34:	602b      	str	r3, [r5, #0]
 8005b36:	f7fb fab3 	bl	80010a0 <_kill>
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	d102      	bne.n	8005b44 <_kill_r+0x1c>
 8005b3e:	682b      	ldr	r3, [r5, #0]
 8005b40:	b103      	cbz	r3, 8005b44 <_kill_r+0x1c>
 8005b42:	6023      	str	r3, [r4, #0]
 8005b44:	bd38      	pop	{r3, r4, r5, pc}
 8005b46:	bf00      	nop
 8005b48:	240002c0 	.word	0x240002c0

08005b4c <_getpid_r>:
 8005b4c:	f7fb baa0 	b.w	8001090 <_getpid>

08005b50 <__sread>:
 8005b50:	b510      	push	{r4, lr}
 8005b52:	460c      	mov	r4, r1
 8005b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b58:	f000 f894 	bl	8005c84 <_read_r>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	bfab      	itete	ge
 8005b60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b62:	89a3      	ldrhlt	r3, [r4, #12]
 8005b64:	181b      	addge	r3, r3, r0
 8005b66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b6a:	bfac      	ite	ge
 8005b6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b6e:	81a3      	strhlt	r3, [r4, #12]
 8005b70:	bd10      	pop	{r4, pc}

08005b72 <__swrite>:
 8005b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b76:	461f      	mov	r7, r3
 8005b78:	898b      	ldrh	r3, [r1, #12]
 8005b7a:	05db      	lsls	r3, r3, #23
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	4616      	mov	r6, r2
 8005b82:	d505      	bpl.n	8005b90 <__swrite+0x1e>
 8005b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b88:	2302      	movs	r3, #2
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f000 f868 	bl	8005c60 <_lseek_r>
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b9a:	81a3      	strh	r3, [r4, #12]
 8005b9c:	4632      	mov	r2, r6
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba6:	f000 b817 	b.w	8005bd8 <_write_r>

08005baa <__sseek>:
 8005baa:	b510      	push	{r4, lr}
 8005bac:	460c      	mov	r4, r1
 8005bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb2:	f000 f855 	bl	8005c60 <_lseek_r>
 8005bb6:	1c43      	adds	r3, r0, #1
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	bf15      	itete	ne
 8005bbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bc6:	81a3      	strheq	r3, [r4, #12]
 8005bc8:	bf18      	it	ne
 8005bca:	81a3      	strhne	r3, [r4, #12]
 8005bcc:	bd10      	pop	{r4, pc}

08005bce <__sclose>:
 8005bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd2:	f000 b813 	b.w	8005bfc <_close_r>
	...

08005bd8 <_write_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4d07      	ldr	r5, [pc, #28]	; (8005bf8 <_write_r+0x20>)
 8005bdc:	4604      	mov	r4, r0
 8005bde:	4608      	mov	r0, r1
 8005be0:	4611      	mov	r1, r2
 8005be2:	2200      	movs	r2, #0
 8005be4:	602a      	str	r2, [r5, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f7fb fa91 	bl	800110e <_write>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d102      	bne.n	8005bf6 <_write_r+0x1e>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	b103      	cbz	r3, 8005bf6 <_write_r+0x1e>
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	240002c0 	.word	0x240002c0

08005bfc <_close_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4d06      	ldr	r5, [pc, #24]	; (8005c18 <_close_r+0x1c>)
 8005c00:	2300      	movs	r3, #0
 8005c02:	4604      	mov	r4, r0
 8005c04:	4608      	mov	r0, r1
 8005c06:	602b      	str	r3, [r5, #0]
 8005c08:	f7fb fa9d 	bl	8001146 <_close>
 8005c0c:	1c43      	adds	r3, r0, #1
 8005c0e:	d102      	bne.n	8005c16 <_close_r+0x1a>
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	b103      	cbz	r3, 8005c16 <_close_r+0x1a>
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	bd38      	pop	{r3, r4, r5, pc}
 8005c18:	240002c0 	.word	0x240002c0

08005c1c <_fstat_r>:
 8005c1c:	b538      	push	{r3, r4, r5, lr}
 8005c1e:	4d07      	ldr	r5, [pc, #28]	; (8005c3c <_fstat_r+0x20>)
 8005c20:	2300      	movs	r3, #0
 8005c22:	4604      	mov	r4, r0
 8005c24:	4608      	mov	r0, r1
 8005c26:	4611      	mov	r1, r2
 8005c28:	602b      	str	r3, [r5, #0]
 8005c2a:	f7fb fa98 	bl	800115e <_fstat>
 8005c2e:	1c43      	adds	r3, r0, #1
 8005c30:	d102      	bne.n	8005c38 <_fstat_r+0x1c>
 8005c32:	682b      	ldr	r3, [r5, #0]
 8005c34:	b103      	cbz	r3, 8005c38 <_fstat_r+0x1c>
 8005c36:	6023      	str	r3, [r4, #0]
 8005c38:	bd38      	pop	{r3, r4, r5, pc}
 8005c3a:	bf00      	nop
 8005c3c:	240002c0 	.word	0x240002c0

08005c40 <_isatty_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4d06      	ldr	r5, [pc, #24]	; (8005c5c <_isatty_r+0x1c>)
 8005c44:	2300      	movs	r3, #0
 8005c46:	4604      	mov	r4, r0
 8005c48:	4608      	mov	r0, r1
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	f7fb fa97 	bl	800117e <_isatty>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_isatty_r+0x1a>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_isatty_r+0x1a>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	240002c0 	.word	0x240002c0

08005c60 <_lseek_r>:
 8005c60:	b538      	push	{r3, r4, r5, lr}
 8005c62:	4d07      	ldr	r5, [pc, #28]	; (8005c80 <_lseek_r+0x20>)
 8005c64:	4604      	mov	r4, r0
 8005c66:	4608      	mov	r0, r1
 8005c68:	4611      	mov	r1, r2
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	602a      	str	r2, [r5, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f7fb fa90 	bl	8001194 <_lseek>
 8005c74:	1c43      	adds	r3, r0, #1
 8005c76:	d102      	bne.n	8005c7e <_lseek_r+0x1e>
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	b103      	cbz	r3, 8005c7e <_lseek_r+0x1e>
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	240002c0 	.word	0x240002c0

08005c84 <_read_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	4d07      	ldr	r5, [pc, #28]	; (8005ca4 <_read_r+0x20>)
 8005c88:	4604      	mov	r4, r0
 8005c8a:	4608      	mov	r0, r1
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	2200      	movs	r2, #0
 8005c90:	602a      	str	r2, [r5, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	f7fb fa1e 	bl	80010d4 <_read>
 8005c98:	1c43      	adds	r3, r0, #1
 8005c9a:	d102      	bne.n	8005ca2 <_read_r+0x1e>
 8005c9c:	682b      	ldr	r3, [r5, #0]
 8005c9e:	b103      	cbz	r3, 8005ca2 <_read_r+0x1e>
 8005ca0:	6023      	str	r3, [r4, #0]
 8005ca2:	bd38      	pop	{r3, r4, r5, pc}
 8005ca4:	240002c0 	.word	0x240002c0

08005ca8 <_init>:
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	bf00      	nop
 8005cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cae:	bc08      	pop	{r3}
 8005cb0:	469e      	mov	lr, r3
 8005cb2:	4770      	bx	lr

08005cb4 <_fini>:
 8005cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb6:	bf00      	nop
 8005cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cba:	bc08      	pop	{r3}
 8005cbc:	469e      	mov	lr, r3
 8005cbe:	4770      	bx	lr
